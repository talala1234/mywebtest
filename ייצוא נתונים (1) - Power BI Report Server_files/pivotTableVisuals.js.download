"use strict";
this.parseTimeMarkers = this.parseTimeMarkers || {};
var marker = this.parseTimeMarkers['pivotTableVisuals.js'] || (this.parseTimeMarkers['pivotTableVisuals.js'] = {});
marker.startEval = window.jsCommon && window.jsCommon.performance && window.jsCommon.performance.now ? window.jsCommon.performance.now() : Date.now(); marker.isExternal = false;
if (window.perfTracking && window.perfTracking.startBundleEval) window.perfTracking.startBundleEval('pivotTableVisuals.js');

var es6, powerbi, __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        return (extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        })(d, b);
    };
    return function(d, b) {
        if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        function __() {
            this.constructor = d;
        }
        extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
    };
}(), __spreadArray = this && this.__spreadArray || function(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
    return to;
}, __assign = this && this.__assign || function() {
    return (__assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) for (var p in s = arguments[i]) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        return t;
    }).apply(this, arguments);
}, __rest = this && this.__rest || function(s, e) {
    var t = {};
    for (p in s) Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0 && (t[p] = s[p]);
    if (null != s && "function" == typeof Object.getOwnPropertySymbols) for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]) && (t[p[i]] = s[p[i]]);
    return t;
}, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P = P || Promise)(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            var value;
            result.done ? resolve(result.value) : ((value = result.value) instanceof P ? value : new P(function(resolve) {
                resolve(value);
            })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}, __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (1 & t[0]) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
    };
    return "function" == typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return function(op) {
                if (f) throw new TypeError("Generator is already executing.");
                for (;_; ) try {
                    if (f = 1, y && (t = 2 & op[0] ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 
                    0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                    switch (y = 0, (op = t ? [ 2 & op[0], t.value ] : op)[0]) {
                      case 0:
                      case 1:
                        t = op;
                        break;

                      case 4:
                        return _.label++, {
                            value: op[1],
                            done: !1
                        };

                      case 5:
                        _.label++, y = op[1], op = [ 0 ];
                        continue;

                      case 7:
                        op = _.ops.pop(), _.trys.pop();
                        continue;

                      default:
                        if (!(t = 0 < (t = _.trys).length && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
                            _ = 0;
                            continue;
                        }
                        if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (6 === op[0] && _.label < t[1]) {
                            _.label = t[1], t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2], _.ops.push(op);
                            break;
                        }
                        t[2] && _.ops.pop(), _.trys.pop();
                        continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [ 6, e ], y = 0;
                } finally {
                    f = t = 0;
                }
                if (5 & op[0]) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: !0
                };
            }([ n, v ]);
        };
    }
};

!function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(pivotTable) {
                !function(PivotTableHierarchyNavigator) {
                    function getFirstVisualLeaf(item, navigator) {
                        return void 0 !== navigator.getLeafIndex(item) ? item : getFirstVisualLeaf(_.head(navigator.getChildren(item)), navigator);
                    }
                    function getLastLeaf(item, navigator) {
                        return navigator.isLeaf(item) ? item : getLastLeaf(_.last(navigator.getChildren(item)), navigator);
                    }
                    function getLastVisualLeaf(item, navigator) {
                        return void 0 !== navigator.getLeafIndex(item) ? item : getLastVisualLeaf(_.last(navigator.getChildren(item)), navigator);
                    }
                    PivotTableHierarchyNavigator.getHeaderSpan = function(item, navigator) {
                        var childrenLevel = navigator.getHierarchyDepth(), children = navigator.getChildren(item);
                        if (!_.isEmpty(children)) for (var _i = 0, children_1 = children; _i < children_1.length; _i++) var child = children_1[_i], childrenLevel = Math.min(childrenLevel, navigator.getLevel(child));
                        return childrenLevel - navigator.getLevel(item);
                    }, PivotTableHierarchyNavigator.getFirstVisualLeaf = getFirstVisualLeaf, PivotTableHierarchyNavigator.getLastLeaf = getLastLeaf, 
                    PivotTableHierarchyNavigator.getLastVisualLeaf = getLastVisualLeaf, PivotTableHierarchyNavigator.getFirstLeafIndex = function(item, navigator) {
                        return navigator.getLeafIndex(function getFirstLeaf(item, navigator) {
                            return navigator.isLeaf(item) ? item : getFirstLeaf(_.head(navigator.getChildren(item)), navigator);
                        }(item, navigator));
                    }, PivotTableHierarchyNavigator.getFirstVisualLeafIndex = function(item, navigator) {
                        return navigator.getLeafIndex(getFirstVisualLeaf(item, navigator));
                    }, PivotTableHierarchyNavigator.getLastLeafIndex = function(item, navigator) {
                        return navigator.getLeafIndex(getLastLeaf(item, navigator));
                    }, PivotTableHierarchyNavigator.getLastVisualLeafIndex = function(item, navigator) {
                        return navigator.getLeafIndex(getLastVisualLeaf(item, navigator));
                    };
                }(pivotTable.PivotTableHierarchyNavigator || (pivotTable.PivotTableHierarchyNavigator = {}));
            }(controls.pivotTable || (controls.pivotTable = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(pivotTable) {
                var HeaderResizer = function() {
                    function HeaderResizer(item, element, verticalResizeHandler, horizontalResizeHandler, clickHandler) {
                        var _this = this;
                        this.elementOriginalCursor = element.style.cursor, this.verticalResizeHandler = verticalResizeHandler, 
                        this.horizontalResizeHandler = horizontalResizeHandler, (verticalResizeHandler || horizontalResizeHandler) && (element.addEventListener("mousedown", function(e) {
                            return _this.onMouseDown(item, element, e);
                        }), element.addEventListener("mousemove", function(e) {
                            return _this.onMouseMove(element, e);
                        }), element.addEventListener("dblclick", function(e) {
                            return _this.onDoubleClick(item, element, e);
                        })), clickHandler && element.addEventListener("click", function(e) {
                            return _this.onClick(item, element, e, clickHandler);
                        });
                    }
                    return HeaderResizer.prototype.onMouseDown = function(item, element, e) {
                        var activeHandler = this.getActiveHandler(element, e);
                        activeHandler ? (this.resizing = !0, this.startMousePosition = HeaderResizer.getMouseCoordinates(e), 
                        this.initializeDocumentEvents(element, activeHandler), document.documentElement && (this.documentOriginalCursor = document.documentElement.style.cursor, 
                        document.documentElement.style.cursor = this.getCursor(element, e)), activeHandler.onStartResize(item)) : this.resizing = !1;
                    }, HeaderResizer.prototype.onMouseMove = function(element, e) {
                        this.startMousePosition || (element.style.cursor = this.getCursor(element, e));
                    }, HeaderResizer.prototype.onDoubleClick = function(item, element, activeHandler) {
                        activeHandler = this.getActiveHandler(element, activeHandler);
                        activeHandler && activeHandler.onReset(item);
                    }, HeaderResizer.prototype.onClick = function(item, element, e, clickHandler) {
                        this.resizing || clickHandler && clickHandler(item, e);
                    }, HeaderResizer.prototype.getActiveHandler = function(element, e) {
                        return this.isMouseOnVerticalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? this.verticalResizeHandler : this.isMouseOnHorizontalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? this.horizontalResizeHandler : null;
                    }, HeaderResizer.prototype.getCursor = function(element, e) {
                        return this.isMouseOnVerticalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? "col-resize" : this.isMouseOnHorizontalHandle(element, HeaderResizer.getMouseCoordinates(e)) ? "row-resize" : this.elementOriginalCursor;
                    }, HeaderResizer.prototype.initializeDocumentEvents = function(element, handler) {
                        var _this = this;
                        this.documentMouseMoveListener = function(e) {
                            e.preventDefault(), handler.onResize(HeaderResizer.getMouseCoordinatesDelta(element, _this.startMousePosition, HeaderResizer.getMouseCoordinates(e)));
                        }, document.addEventListener("mousemove", this.documentMouseMoveListener), this.documentMouseUpListener = function(e) {
                            e.preventDefault(), document.removeEventListener("mousemove", _this.documentMouseMoveListener), 
                            _this.documentMouseMoveListener = null, document.removeEventListener("mouseup", _this.documentMouseUpListener), 
                            _this.documentMouseUpListener = null, document.documentElement && (document.documentElement.style.cursor = _this.documentOriginalCursor, 
                            _this.documentOriginalCursor = void 0), _this.startMousePosition = null, handler.onEndResize();
                        }, document.addEventListener("mouseup", this.documentMouseUpListener);
                    }, HeaderResizer.prototype.isMouseOnVerticalHandle = function(element, position) {
                        return !!this.verticalResizeHandler && position.x >= element.getBoundingClientRect().right - HeaderResizer.HandleSize;
                    }, HeaderResizer.prototype.isMouseOnHorizontalHandle = function(element, position) {
                        return !!this.horizontalResizeHandler && position.y >= element.getBoundingClientRect().bottom - HeaderResizer.HandleSize;
                    }, HeaderResizer.getMouseCoordinates = function(e) {
                        return {
                            x: e.pageX,
                            y: e.pageY
                        };
                    }, HeaderResizer.getMouseCoordinatesDelta = function(scale, previous, current) {
                        if (!current || !previous) return {
                            x: 0,
                            y: 0
                        };
                        scale = controls.HTMLElementUtils.getAccumulatedScale(scale);
                        return {
                            x: (current.x - previous.x) / scale,
                            y: (current.y - previous.y) / scale
                        };
                    }, HeaderResizer.HandleSize = 4, HeaderResizer;
                }();
                pivotTable.HeaderResizer = HeaderResizer;
                var RowLevelWidthResizeHandler = function() {
                    function ColumnWidthResizeHandler(control) {
                        this.control = control;
                    }
                    return ColumnWidthResizeHandler.prototype.onStartResize = function(leafToResizeIndex) {
                        var leafToResize = pivotTable.PivotTableHierarchyNavigator.getLastLeaf(leafToResizeIndex, this.control.getColumnNavigator()), leafToResizeIndex = this.control.getColumnNavigator().getLeafIndex(leafToResize);
                        this.resizeState = {
                            leafToResize: leafToResize,
                            leafToResizeIndex: leafToResizeIndex,
                            originalWidth: this.control.getColumnWidthMeasureManager().getColumnWidth(leafToResizeIndex)
                        };
                    }, ColumnWidthResizeHandler.prototype.onResize = function(newWidth) {
                        var visibleRowRange, visibleColumnRange;
                        newWidth.x && this.resizeState && (visibleColumnRange = this.control.getViewport(), 
                        visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleColumnRange.top, visibleColumnRange.height, this.control.getRowHeightMeasureManager()), 
                        visibleColumnRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(visibleColumnRange.left, visibleColumnRange.width, this.control.getColumnWidthMeasureManager()), 
                        visibleRowRange && visibleColumnRange && (this.control.getWorkScheduler().clear(), 
                        newWidth = Math.max(this.resizeState.originalWidth + newWidth.x, HeaderResizer.HandleSize), 
                        this.control.getColumnWidthMeasureManager().setColumnWidth(this.resizeState.leafToResizeIndex, newWidth), 
                        pivotTable.RowMeasurementUtil.remeasureRows(this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex, visibleColumnRange.firstLeafIndex, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clearFloatingRows(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                        this.resizeBodyPages(this.resizeState.leafToResizeIndex, visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex), 
                        this.control.render(pivotTable.PivotTableRenderingMode.Incremental)));
                    }, ColumnWidthResizeHandler.prototype.onEndResize = function() {
                        var leafToResize, newWidth, originalWidth, visibleRowRange, visibleRowStart, _this = this;
                        this.resizeState && (leafToResize = this.resizeState.leafToResize, newWidth = this.control.getColumnWidthMeasureManager().getColumnWidth(this.resizeState.leafToResizeIndex), 
                        originalWidth = this.resizeState.originalWidth, this.resizeState = void 0, visibleRowStart = this.control.getViewport(), 
                        (visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleRowStart.top, visibleRowStart.height, this.control.getRowHeightMeasureManager())) && newWidth !== originalWidth && (this.control.getWorkScheduler().clear(), 
                        this.control.getSizeManager().setColumnWidth(leafToResize, newWidth), visibleRowStart = pivotTable.RowMeasurementUtil.getVisibleRowStart(visibleRowRange, visibleRowStart.top, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clear(), this.control.makeVisible(pivotTable.PivotTableRenderingMode.Incremental, visibleRowStart, null, function() {
                            return _this.control.rebuildBodyPagesSync();
                        })));
                    }, ColumnWidthResizeHandler.prototype.onReset = function(leafToResizeIndex) {
                        var leafToResize, _this = this, visibleRowStart = this.control.getViewport(), visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleRowStart.top, visibleRowStart.height, this.control.getRowHeightMeasureManager());
                        visibleRowRange && (leafToResize = pivotTable.PivotTableHierarchyNavigator.getLastLeaf(leafToResizeIndex, this.control.getColumnNavigator()), 
                        leafToResizeIndex = this.control.getColumnNavigator().getLeafIndex(leafToResize), 
                        this.control.getSizeManager().setColumnWidth(leafToResize, void 0), pivotTable.ColumnMeasurementUtil.remeasureColumn(leafToResizeIndex, this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, this.control.getColumnWidthMeasureManager()), 
                        visibleRowStart = pivotTable.RowMeasurementUtil.getVisibleRowStart(visibleRowRange, visibleRowStart.top, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clear(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                        this.control.makeVisible(pivotTable.PivotTableRenderingMode.Incremental, visibleRowStart, null, function() {
                            return _this.control.rebuildBodyPagesSync();
                        }));
                    }, ColumnWidthResizeHandler.prototype.resizeBodyPages = function(columnLeafIndex, startRowIndex, endRowIndex) {
                        this.control.getBodyCellRenderer().resizeRows(startRowIndex, endRowIndex), this.control.getFloatingBodyCellRenderer().resizeRows(0, this.control.getRowNavigator().getFloatingHierarchyLeafCount() - 1), 
                        this.control.getBodyCellRenderer().resizeColumn(columnLeafIndex), this.control.getFloatingBodyCellRenderer().resizeColumn(columnLeafIndex);
                    }, ColumnWidthResizeHandler;
                }();
                pivotTable.ColumnWidthResizeHandler = RowLevelWidthResizeHandler;
                RowLevelWidthResizeHandler = function() {
                    function RowHeightResizeHandler(control) {}
                    return RowHeightResizeHandler.prototype.onStartResize = function(item) {}, RowHeightResizeHandler.prototype.onResize = function(delta) {}, 
                    RowHeightResizeHandler.prototype.onEndResize = function() {}, RowHeightResizeHandler.prototype.onReset = function(item) {}, 
                    RowHeightResizeHandler;
                }();
                pivotTable.RowHeightResizeHandler = RowLevelWidthResizeHandler;
                RowLevelWidthResizeHandler = function() {
                    function ColumnLevelHeightResizeHandler(control) {}
                    return ColumnLevelHeightResizeHandler.prototype.onStartResize = function(item) {}, 
                    ColumnLevelHeightResizeHandler.prototype.onResize = function(delta) {}, ColumnLevelHeightResizeHandler.prototype.onEndResize = function() {}, 
                    ColumnLevelHeightResizeHandler.prototype.onReset = function(item) {}, ColumnLevelHeightResizeHandler;
                }();
                pivotTable.ColumnLevelHeightResizeHandler = RowLevelWidthResizeHandler;
                RowLevelWidthResizeHandler = function() {
                    function RowLevelWidthResizeHandler(control) {
                        this.control = control;
                    }
                    return RowLevelWidthResizeHandler.prototype.onStartResize = function(levelToResize) {
                        levelToResize = this.getLevelToResize(levelToResize);
                        this.resizeState = {
                            cornerCellToResize: this.control.getRowNavigator().getCorner(levelToResize, this.control.getColumnNavigator().getHierarchyDepth() - 1),
                            levelToResize: levelToResize,
                            originalWidth: this.control.getRowLevelWidthMeasureManager().getLevelWidth(levelToResize)
                        };
                    }, RowLevelWidthResizeHandler.prototype.onResize = function(newWidth) {
                        var visibleRowRange, visibleColumnRange;
                        newWidth.x && this.resizeState && (visibleColumnRange = this.control.getViewport(), 
                        visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleColumnRange.top, visibleColumnRange.height, this.control.getRowHeightMeasureManager()), 
                        visibleColumnRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(visibleColumnRange.left, visibleColumnRange.width, this.control.getColumnWidthMeasureManager()), 
                        visibleRowRange && (this.control.getWorkScheduler().clear(), newWidth = Math.min(this.getMaxWidth(this.resizeState.levelToResize), Math.max(this.resizeState.originalWidth + newWidth.x, HeaderResizer.HandleSize)), 
                        this.control.getRowLevelWidthMeasureManager().setLevelWidth(this.resizeState.levelToResize, newWidth), 
                        pivotTable.RowMeasurementUtil.remeasureRows(this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex, visibleColumnRange ? visibleColumnRange.firstLeafIndex : 0, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clearFloatingRows(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                        this.resizeBodyPages(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex), 
                        this.control.render(pivotTable.PivotTableRenderingMode.Incremental)));
                    }, RowLevelWidthResizeHandler.prototype.onEndResize = function() {
                        var cornerCellToResize, newWidth, originalWidth, visibleRowRange, visibleRowStart, _this = this;
                        this.resizeState && (cornerCellToResize = this.resizeState.cornerCellToResize, newWidth = this.control.getRowLevelWidthMeasureManager().getLevelWidth(this.resizeState.levelToResize), 
                        originalWidth = this.resizeState.originalWidth, this.resizeState = void 0, visibleRowStart = this.control.getViewport(), 
                        (visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleRowStart.top, visibleRowStart.height, this.control.getRowHeightMeasureManager())) && newWidth !== originalWidth && (this.control.getWorkScheduler().clear(), 
                        this.control.getSizeManager().setRowLevelWidth(cornerCellToResize, newWidth), visibleRowStart = pivotTable.RowMeasurementUtil.getVisibleRowStart(visibleRowRange, visibleRowStart.top, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clear(), this.control.makeVisible(pivotTable.PivotTableRenderingMode.Incremental, visibleRowStart, null, function() {
                            return _this.control.rebuildBodyPagesSync();
                        })));
                    }, RowLevelWidthResizeHandler.prototype.onReset = function(cornerCellToResize) {
                        var levelToResize, _this = this, visibleRowStart = this.control.getViewport(), visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleRowStart.top, visibleRowStart.height, this.control.getRowHeightMeasureManager());
                        visibleRowRange && (levelToResize = this.getLevelToResize(cornerCellToResize), cornerCellToResize = this.control.getRowNavigator().getCorner(levelToResize, this.control.getColumnNavigator().getHierarchyDepth() - 1), 
                        this.control.getSizeManager().setRowLevelWidth(cornerCellToResize, void 0), this.control.getRowLevelWidthMeasureManager().measure(this.control.getBinder(), this.control.getRowNavigator(), this.control.getColumnNavigator(), visibleRowRange.firstLeafIndex, pivotTable.MeasureRowSampleCount, levelToResize), 
                        visibleRowStart = pivotTable.RowMeasurementUtil.getVisibleRowStart(visibleRowRange, visibleRowStart.top, this.control.getRowHeightMeasureManager()), 
                        this.control.getRowHeightMeasureManager().clear(), this.control.getColumnLevelHeightMeasureManager().clear(), 
                        this.control.makeVisible(pivotTable.PivotTableRenderingMode.Incremental, visibleRowStart, null, function() {
                            return _this.control.rebuildBodyPagesSync();
                        }));
                    }, RowLevelWidthResizeHandler.prototype.getLevelToResize = function(item) {
                        return this.control.getSteppedLayout() ? 0 : this.control.getRowNavigator().getRowLevel(item);
                    }, RowLevelWidthResizeHandler.prototype.getMaxWidth = function(levelToResize) {
                        for (var maxWidth = this.control.getClientWidth(), level = 0; level < levelToResize; level++) maxWidth -= this.control.getRowLevelWidthMeasureManager().getLevelWidth(level);
                        return maxWidth;
                    }, RowLevelWidthResizeHandler.prototype.resizeBodyPages = function(startRowIndex, endRowIndex) {
                        this.control.getBodyCellRenderer().resizeRows(startRowIndex, endRowIndex), this.control.getFloatingBodyCellRenderer().resizeRows(0, this.control.getRowNavigator().getFloatingHierarchyLeafCount() - 1);
                    }, RowLevelWidthResizeHandler;
                }();
                pivotTable.RowLevelWidthResizeHandler = RowLevelWidthResizeHandler;
            }(controls.pivotTable || (controls.pivotTable = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(pivotTable) {
                pivotTable.PageColumnCount = 10, pivotTable.MeasureRowSampleCount = 50, pivotTable.MaxAutoPageColumnMeasure = 100, 
                pivotTable.PageRowCount = 20, pivotTable.MeasureColumnSampleCount = 20, pivotTable.MaxAutoPageRowMeasure = 100;
                var MeasureUtil = function() {
                    function MeasureUtil() {}
                    return MeasureUtil.getAncestorsToMeasure = function(item, navigator) {
                        for (var ancestorsToMeasure = []; ;) {
                            var parent_1 = navigator.getParent(item);
                            if (!parent_1 || !navigator.isLastItem(item, navigator.getChildren(parent_1))) break;
                            ancestorsToMeasure.push({
                                node: parent_1,
                                size: -1
                            }), item = parent_1;
                        }
                        return ancestorsToMeasure;
                    }, MeasureUtil.getSizeDifference = function(ancestors, lastLeafIndex, navigator, getSize) {
                        for (var size = 0, _i = 0, ancestors_1 = ancestors; _i < ancestors_1.length; _i++) var node = ancestors_1[_i], size = Math.max(size, this.getItemSizeDifference(node, lastLeafIndex, navigator, getSize));
                        return size;
                    }, MeasureUtil.getItemSizeDifference = function(ancestor, lastLeafIndex, navigator, getSize) {
                        for (var leavesSize = 0, index = pivotTable.PivotTableHierarchyNavigator.getFirstLeafIndex(ancestor.node, navigator); index <= lastLeafIndex; index++) if ((leavesSize += getSize(index)) >= ancestor.size) return 0;
                        return ancestor.size - leavesSize;
                    }, MeasureUtil.getPageIndex = function(index, pageItemCount) {
                        return Math.floor(index / pageItemCount);
                    }, MeasureUtil.itemRangeToPageRange = function(startIndex, endIndex, pageItemCount) {
                        var startPageIndex = this.getPageIndex(startIndex, pageItemCount), endPageIndex = this.getPageIndex(endIndex, pageItemCount);
                        if (startPageIndex === endPageIndex) return [ {
                            pageIndex: startPageIndex,
                            startIndex: startIndex % pageItemCount,
                            endIndex: endIndex % pageItemCount
                        } ];
                        var ranges = [];
                        ranges.push({
                            pageIndex: startPageIndex,
                            startIndex: startIndex % pageItemCount,
                            endIndex: pageItemCount - 1
                        });
                        for (var i = startPageIndex + 1; i < endPageIndex; i++) ranges.push({
                            pageIndex: i,
                            startIndex: 0,
                            endIndex: pageItemCount - 1
                        });
                        return ranges.push({
                            pageIndex: endPageIndex,
                            startIndex: 0,
                            endIndex: endIndex % pageItemCount
                        }), ranges;
                    }, MeasureUtil;
                }();
                pivotTable.MeasureUtil = MeasureUtil;
                var BlockedRowHeightMeasureManager = function() {
                    function RowMeasurementUtil() {}
                    return RowMeasurementUtil.linesOverlapVertically = function(top1, height1, top2, height2) {
                        return !(top1 + height1 < top2 || top2 + height2 < top1);
                    }, RowMeasurementUtil.isRowMeasured = function(rowLeafIndex, rowHeightMeasureManager) {
                        return this.getMeasuredRowCount(rowHeightMeasureManager) > rowLeafIndex;
                    }, RowMeasurementUtil.getMeasuredRowCount = function(pages) {
                        pages = pages.getPageRows();
                        return _.isEmpty(pages) ? 0 : (pages.length - 1) * pivotTable.PageRowCount + _.last(pages).getRowHeights().length;
                    }, RowMeasurementUtil.remeasureRows = function(binder, rowNavigator, columnNavigator, startRowIndex, endRowIndex, startColumnIndex, rowHeightMeasureManager) {
                        for (var _i = 0, ranges_1 = MeasureUtil.itemRangeToPageRange(startRowIndex, endRowIndex, pivotTable.PageRowCount); _i < ranges_1.length; _i++) {
                            var range = ranges_1[_i];
                            rowHeightMeasureManager.measurePage(rowHeightMeasureManager.getPageRows()[range.pageIndex], binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, pivotTable.MeasureColumnSampleCount, range.startIndex, range.endIndex - range.startIndex + 1);
                        }
                    }, RowMeasurementUtil.getVisibleRowStart = function(visibleRowRange, viewportTop, firstLeafHeight) {
                        firstLeafHeight = firstLeafHeight.getRowHeight(visibleRowRange.firstLeafIndex);
                        return {
                            rowIndex: visibleRowRange.firstLeafIndex,
                            visibleHeight: firstLeafHeight - viewportTop + visibleRowRange.firstLeafTop
                        };
                    }, RowMeasurementUtil.getVisibleRange = function(viewportTop, lastRowIndex, pageResult, firstRowResult) {
                        pageResult = this.getVisiblePageRange(viewportTop, lastRowIndex, pageResult, firstRowResult);
                        if (!pageResult) return null;
                        firstRowResult = this.getFirstVisibleIndex(pageResult.firstPageRow, pageResult.firstPageIndex, pageResult.firstPageTop, viewportTop, lastRowIndex), 
                        lastRowIndex = this.getLastVisibleIndex(pageResult.lastPageRow, pageResult.lastPageIndex, pageResult.lastPageTop, viewportTop, lastRowIndex);
                        return {
                            firstLeafIndex: firstRowResult.leafIndex,
                            firstLeafTop: firstRowResult.top,
                            lastLeafIndex: lastRowIndex
                        };
                    }, RowMeasurementUtil.getVisiblePageRange = function(viewportTop, viewportHeight, rowHeightMeasureManager, floatingRows) {
                        for (var top = 0, pageIndex = 0, result = null, _i = 0, pageRows_1 = floatingRows ? [ rowHeightMeasureManager.getFloatingPageRow() ] : rowHeightMeasureManager.getPageRows(); _i < pageRows_1.length; _i++) {
                            var pageRow = pageRows_1[_i], height = pageRow.getHeight();
                            if (this.linesOverlapVertically(top, height, viewportTop, viewportHeight)) result ? (result.lastPageRow = pageRow, 
                            result.lastPageIndex = pageIndex, result.lastPageTop = top) : result = {
                                firstPageRow: pageRow,
                                firstPageIndex: pageIndex,
                                firstPageTop: top,
                                lastPageRow: pageRow,
                                lastPageIndex: pageIndex,
                                lastPageTop: top
                            }; else if (result) break;
                            top += height, pageIndex++;
                        }
                        return result;
                    }, RowMeasurementUtil.getFirstVisibleIndex = function(pageRow, pageIndex, pageTop, viewportTop, viewportHeight) {
                        for (var rowIndex = 0, top = pageTop, _i = 0, _a = pageRow.getRowHeights(); _i < _a.length; _i++) {
                            var rowHeight = _a[_i];
                            if (this.linesOverlapVertically(top, rowHeight, viewportTop, viewportHeight)) return {
                                leafIndex: pageIndex * pivotTable.PageRowCount + rowIndex,
                                top: top
                            };
                            top += rowHeight, rowIndex++;
                        }
                    }, RowMeasurementUtil.getLastVisibleIndex = function(pageRow, pageIndex, pageTop, viewportTop, viewportHeight) {
                        for (var result, rowIndex = 0, top = pageTop, _i = 0, _a = pageRow.getRowHeights(); _i < _a.length; _i++) {
                            var rowHeight = _a[_i];
                            this.linesOverlapVertically(top, rowHeight, viewportTop, viewportHeight) && (result = pageIndex * pivotTable.PageRowCount + rowIndex), 
                            top += rowHeight, rowIndex++;
                        }
                        return result;
                    }, RowMeasurementUtil.getBounds = function(rowIndex, rowHeightMeasureManager) {
                        var pageIndex = MeasureUtil.getPageIndex(rowIndex, pivotTable.PageRowCount);
                        if (!(pageIndex >= rowHeightMeasureManager.getPageRows().length)) {
                            for (var page = rowHeightMeasureManager.getPageRows()[pageIndex], offset = rowHeightMeasureManager.getPageRowTop(page), index = rowIndex % pivotTable.PageRowCount, i = 0; i < index; i++) offset += page.getRowHeights()[i];
                            return {
                                top: offset,
                                height: page.getRowHeights()[index]
                            };
                        }
                    }, RowMeasurementUtil.getOffset = function(alignedRow, bounds) {
                        bounds = this.getBounds(alignedRow.rowIndex, bounds);
                        return bounds ? alignedRow.alignBottom ? alignedRow.visibleHeight >= bounds.height ? bounds.top + bounds.height : bounds.top + alignedRow.visibleHeight : alignedRow.visibleHeight >= bounds.height ? bounds.top : bounds.top + bounds.height - alignedRow.visibleHeight : 0;
                    }, RowMeasurementUtil;
                }();
                pivotTable.RowMeasurementUtil = BlockedRowHeightMeasureManager;
                var SteppedRowLevelWidthMeasureManager = function() {
                    function ColumnMeasurementUtil() {}
                    return ColumnMeasurementUtil.linesOverlapHorizontally = function(left1, width1, left2, width2) {
                        return !(left1 + width1 < left2 || left2 + width2 < left1);
                    }, ColumnMeasurementUtil.isColumnMeasured = function(columnLeafIndex, columnWidthMeasureManager) {
                        return this.getMeasuredColumnCount(columnWidthMeasureManager) > columnLeafIndex;
                    }, ColumnMeasurementUtil.getMeasuredColumnCount = function(pages) {
                        pages = pages.getPageColumns();
                        return _.isEmpty(pages) ? 0 : (pages.length - 1) * pivotTable.PageColumnCount + _.last(pages).getColumnWidths().length;
                    }, ColumnMeasurementUtil.remeasureColumn = function(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex, columnwidthMeasureManager) {
                        var page = columnwidthMeasureManager.getPageColumn(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex);
                        columnwidthMeasureManager.measurePage(page, binder, rowNavigator, columnNavigator, startRowIndex, pivotTable.MeasureRowSampleCount, columnLeafIndex % pivotTable.PageColumnCount, 1);
                    }, ColumnMeasurementUtil.getVisibleColumnStart = function(visibleColumnRange, viewportLeft, firstLeafWidth) {
                        firstLeafWidth = firstLeafWidth.getColumnWidth(visibleColumnRange.firstLeafIndex);
                        return {
                            columnIndex: visibleColumnRange.firstLeafIndex,
                            visibleWidth: firstLeafWidth - viewportLeft + visibleColumnRange.firstLeafLeft
                        };
                    }, ColumnMeasurementUtil.getVisibleRange = function(viewportLeft, lastcolumnIndex, firstColumnResult) {
                        var pageResult = this.getVisiblePageRange(viewportLeft, lastcolumnIndex, firstColumnResult);
                        if (!pageResult) return null;
                        firstColumnResult = this.getFirstVisibleIndex(pageResult.firstPageColumn, pageResult.firstPageIndex, pageResult.firstPageLeft, viewportLeft, lastcolumnIndex), 
                        lastcolumnIndex = this.getLastVisibleIndex(pageResult.lastPageColumn, pageResult.lastPageIndex, pageResult.lastPageLeft, viewportLeft, lastcolumnIndex);
                        return {
                            firstLeafIndex: firstColumnResult.leafIndex,
                            firstLeafLeft: firstColumnResult.left,
                            lastLeafIndex: lastcolumnIndex
                        };
                    }, ColumnMeasurementUtil.getVisiblePageRange = function(viewportLeft, viewportWidth, columnWidthMeasureManager) {
                        for (var left = 0, pageIndex = 0, result = null, _i = 0, _a = columnWidthMeasureManager.getPageColumns(); _i < _a.length; _i++) {
                            var pageColumn = _a[_i], width = pageColumn.getWidth();
                            if (this.linesOverlapHorizontally(left, width, viewportLeft, viewportWidth)) result ? (result.lastPageColumn = pageColumn, 
                            result.lastPageIndex = pageIndex, result.lastPageLeft = left) : result = {
                                firstPageColumn: pageColumn,
                                firstPageIndex: pageIndex,
                                firstPageLeft: left,
                                lastPageColumn: pageColumn,
                                lastPageIndex: pageIndex,
                                lastPageLeft: left
                            }; else if (result) break;
                            left += width, pageIndex++;
                        }
                        return result;
                    }, ColumnMeasurementUtil.getFirstVisibleIndex = function(pageColumn, pageIndex, pageLeft, viewportLeft, viewportWidth) {
                        for (var columnIndex = 0, left = pageLeft, _i = 0, _a = pageColumn.getColumnWidths(); _i < _a.length; _i++) {
                            var columnWidth = _a[_i];
                            if (this.linesOverlapHorizontally(left, columnWidth, viewportLeft, viewportWidth)) return {
                                leafIndex: pageIndex * pivotTable.PageColumnCount + columnIndex,
                                left: left
                            };
                            left += columnWidth, columnIndex++;
                        }
                        return null;
                    }, ColumnMeasurementUtil.getLastVisibleIndex = function(pageColumn, pageIndex, pageLeft, viewportLeft, viewportWidth) {
                        for (var result, columnIndex = 0, left = pageLeft, _i = 0, _a = pageColumn.getColumnWidths(); _i < _a.length; _i++) {
                            var columnWidth = _a[_i];
                            this.linesOverlapHorizontally(left, columnWidth, viewportLeft, viewportWidth) && (result = pageIndex * pivotTable.PageColumnCount + columnIndex), 
                            left += columnWidth, columnIndex++;
                        }
                        return result;
                    }, ColumnMeasurementUtil.getBounds = function(columnIndex, columnWidthMeasureManager) {
                        var page = MeasureUtil.getPageIndex(columnIndex, pivotTable.PageColumnCount);
                        if (!(page >= columnWidthMeasureManager.getPageColumns().length)) {
                            for (var page = columnWidthMeasureManager.getPageColumns()[page], offset = columnWidthMeasureManager.getPageColumnLeft(page), index = columnIndex % pivotTable.PageColumnCount, columnWidths = page.getColumnWidths(), i = 0; i < index; i++) offset += columnWidths[i];
                            return {
                                left: offset,
                                width: columnWidths[index]
                            };
                        }
                    }, ColumnMeasurementUtil.getOffset = function(alignedColumn, bounds) {
                        bounds = this.getBounds(alignedColumn.columnIndex, bounds);
                        return bounds ? alignedColumn.alignRight ? alignedColumn.visibleWidth >= bounds.width ? bounds.left + bounds.width : bounds.left + alignedColumn.visibleWidth : alignedColumn.visibleWidth >= bounds.width ? bounds.left : bounds.left + bounds.width - alignedColumn.visibleWidth : 0;
                    }, ColumnMeasurementUtil;
                }();
                pivotTable.ColumnMeasurementUtil = SteppedRowLevelWidthMeasureManager;
                BlockedRowHeightMeasureManager = function() {
                    function ColumnWidthMeasureManager(measureElement, sizeManager) {
                        this.pageColumns = [], this.measureElement = measureElement, this.sizeManager = sizeManager;
                    }
                    return ColumnWidthMeasureManager.prototype.canAddPageColumn = function(columnNavigator) {
                        return this.pageColumns.length < this.getMaxPageColumnCount(columnNavigator);
                    }, ColumnWidthMeasureManager.prototype.getMaxPageColumnCount = function(columnNavigator) {
                        return Math.ceil(columnNavigator.getHierarchyLeafCount() / pivotTable.PageColumnCount);
                    }, ColumnWidthMeasureManager.prototype.getPageColumns = function() {
                        return this.pageColumns;
                    }, ColumnWidthMeasureManager.prototype.getPageColumnStartIndex = function(index) {
                        index = this.pageColumns.indexOf(index);
                        return -1 === index ? -1 : index * pivotTable.PageColumnCount;
                    }, ColumnWidthMeasureManager.prototype.getPageColumnLeft = function(pageColumn) {
                        for (var left = 0, _i = 0, _a = this.pageColumns; _i < _a.length; _i++) {
                            var currentPageColumn = _a[_i];
                            if (pageColumn === currentPageColumn) break;
                            left += currentPageColumn.getWidth();
                        }
                        return left;
                    }, ColumnWidthMeasureManager.prototype.getColumnsWidth = function() {
                        for (var width = 0, _i = 0, _a = this.pageColumns; _i < _a.length; _i++) width += _a[_i].getWidth();
                        return width;
                    }, ColumnWidthMeasureManager.prototype.clear = function() {
                        this.pageColumns = [];
                    }, ColumnWidthMeasureManager.prototype.measureNextPage = function(binder, rowNavigator, columnNavigator, startRowIndex) {
                        var pageColumn = new pivotTable.PivotTablePageColumn();
                        this.getPageColumns().push(pageColumn), this.measurePage(pageColumn, binder, rowNavigator, columnNavigator, startRowIndex, pivotTable.MeasureRowSampleCount);
                    }, ColumnWidthMeasureManager.prototype.getWidestCellBindingString = function(columnItem, cellBinding, binder, rowNavigator, columnNavigator, rowCount, startRowIndex) {
                        for (var widest = {
                            item: null,
                            width: -1
                        }, j = 0; j < rowCount; j++) this.updateWidestItemFromBodyCell(rowNavigator.getHierarchyLeafAt(j + startRowIndex), columnItem, binder, rowNavigator, widest);
                        if (cellBinding) for (var floatingLeafCount = rowNavigator.getFloatingHierarchyLeafCount(), j = 0; j < floatingLeafCount; j++) this.updateWidestItemFromBodyCell(rowNavigator.getFloatingHierarchyLeafAt(j), columnItem, binder, rowNavigator, widest);
                        cellBinding = binder.getApproximateColumnHeaderWidth(columnItem);
                        return cellBinding > widest.width && (widest.item = columnItem, widest.width = cellBinding), 
                        cellBinding = widest.item === columnItem ? binder.getColumnHeaderBinding(widest.item, !0) : binder.getBodyCellBinding(widest.item, !0), 
                        pivotTable.ElementBuilder.build(cellBinding, ColumnWidthMeasureManager.measureRequiredStyle);
                    }, ColumnWidthMeasureManager.prototype.measurePage = function(pageColumn, binder, rowNavigator, columnNavigator, startRowIndex, rowSampleCount, startOffset, columnCount) {
                        var pageColumnStartIndex = this.getPageColumnStartIndex(pageColumn);
                        void 0 === startOffset && (startOffset = 0), void 0 === columnCount && (columnCount = Math.min(columnNavigator.getHierarchyLeafCount() - pageColumnStartIndex, pivotTable.PageColumnCount) + startOffset);
                        for (var rowCount = Math.min(rowNavigator.getHierarchyLeafCount() - startRowIndex, rowSampleCount), cellsString = "", floatingRowItems = rowNavigator.getFloatingHierarchyItems(), i = 0; i < columnCount; i++) {
                            var columnItem = columnNavigator.getHierarchyLeafAt(i + startOffset + pageColumnStartIndex);
                            void 0 === (pageColumn.getColumnWidths()[i + startOffset] = this.sizeManager.getColumnWidth(columnItem)) && (cellsString += this.getWidestCellBindingString(columnItem, floatingRowItems, binder, rowNavigator, columnNavigator, rowCount, startRowIndex));
                        }
                        if (cellsString) {
                            this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                            for (var current = this.measureElement.firstChild, i = 0; i < columnCount; i++) void 0 === pageColumn.getColumnWidths()[i + startOffset] && (pageColumn.getColumnWidths()[i + startOffset] = current.offsetWidth + 1, 
                            current = current.nextSibling);
                            this.measureElement.innerHTML = "", this.adjustItemsWidth(pageColumn, binder, columnNavigator, pageColumnStartIndex, startOffset, columnCount);
                        }
                    }, ColumnWidthMeasureManager.prototype.updateWidestItemFromBodyCell = function(rowItem, bodyCell, width, rowNavigator, widest) {
                        bodyCell = rowNavigator.getIntersection(rowItem, bodyCell), width = width.getApproximateBodyCellWidth(bodyCell);
                        width > widest.width && (widest.item = bodyCell, widest.width = width);
                    }, ColumnWidthMeasureManager.prototype.adjustItemsWidth = function(pageColumn, binder, columnNavigator, columnPageStartIndex, startOffset, columnCount) {
                        for (var i = 0; i < columnCount; i++) {
                            var columnItem = columnNavigator.getHierarchyLeafAt(i + startOffset + columnPageStartIndex);
                            void 0 === this.sizeManager.getColumnWidth(columnItem) && this.adjustItemWidth(pageColumn, i + startOffset, columnPageStartIndex, binder, columnNavigator, columnItem);
                        }
                    }, ColumnWidthMeasureManager.prototype.adjustItemWidth = function(pageColumn, columnIndex, pageStartColumnIndex, binder, columnNavigator, ancestors) {
                        var _this = this, ancestors = MeasureUtil.getAncestorsToMeasure(ancestors, columnNavigator);
                        _.isEmpty(ancestors) || (this.measureAncestors(ancestors, binder), pageColumn.getColumnWidths()[columnIndex] += MeasureUtil.getSizeDifference(ancestors, columnIndex + pageStartColumnIndex, columnNavigator, function(index) {
                            return _this.getColumnWidth(index);
                        }));
                    }, ColumnWidthMeasureManager.prototype.measureAncestors = function(ancestors, binder) {
                        for (var cellsString = "", _i = 0, ancestors_2 = ancestors; _i < ancestors_2.length; _i++) {
                            var ancestor = ancestors_2[_i], binding = binder.getColumnHeaderBinding(ancestor.node, !0);
                            cellsString += pivotTable.ElementBuilder.build(binding, ColumnWidthMeasureManager.measureRequiredStyle);
                        }
                        this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                        for (var current = this.measureElement.firstChild, _a = 0, ancestors_3 = ancestors; _a < ancestors_3.length; _a++) (ancestor = ancestors_3[_a]).size = current.offsetWidth + 1, 
                        current = current.nextSibling;
                        this.measureElement.innerHTML = "";
                    }, ColumnWidthMeasureManager.prototype.getColumnWidth = function(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex) {
                        return this.getPageColumn(columnLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex).getColumnWidths()[columnLeafIndex % pivotTable.PageColumnCount];
                    }, ColumnWidthMeasureManager.prototype.setColumnWidth = function(columnLeafIndex, width) {
                        this.getPageColumn(columnLeafIndex).getColumnWidths()[columnLeafIndex % pivotTable.PageColumnCount] = width;
                    }, ColumnWidthMeasureManager.prototype.getPageColumn = function(pageColumnIndex, binder, rowNavigator, columnNavigator, startRowIndex) {
                        pageColumnIndex = this.getPageIndex(pageColumnIndex);
                        if (binder && pageColumnIndex >= this.pageColumns.length) for (var pageCountToMeasure = pageColumnIndex - this.pageColumns.length + 1, i = 0; i < pageCountToMeasure; i++) this.measureNextPage(binder, rowNavigator, columnNavigator, startRowIndex);
                        return this.pageColumns[pageColumnIndex];
                    }, ColumnWidthMeasureManager.prototype.getPageIndex = function(columnIndex) {
                        return MeasureUtil.getPageIndex(columnIndex, pivotTable.PageColumnCount);
                    }, ColumnWidthMeasureManager.measureRequiredStyle = {
                        "box-sizing": "border-box",
                        display: "inline-flex"
                    }, ColumnWidthMeasureManager;
                }();
                pivotTable.ColumnWidthMeasureManager = BlockedRowHeightMeasureManager;
                SteppedRowLevelWidthMeasureManager = function() {
                    function RowHeightMeasureManager(measureElement, columnWidthMeasureManager, rowLevelWidthMeasureManager, sizeManager) {
                        this.pageRows = [], this.measureElement = measureElement, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                        this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, this.sizeManager = sizeManager;
                    }
                    return RowHeightMeasureManager.prototype.clear = function() {
                        this.pageRows = [], this.clearFloatingRows();
                    }, RowHeightMeasureManager.prototype.clearFloatingRows = function() {
                        this.floatingPageRow = new pivotTable.PivotTablePageRow();
                    }, RowHeightMeasureManager.prototype.ensureLastPageComplete = function(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, columnSampleCount) {
                        if (0 === this.pageRows.length) return -1;
                        var index = this.pageRows.length - 1, lastPage = this.pageRows[index], originalCount = lastPage.getRowHeights().length;
                        return originalCount < pivotTable.PageRowCount && this.gotMoreRows(lastPage, rowNavigator) && (this.measurePage(lastPage, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, columnSampleCount, lastPage.getRowHeights().length - 1), 
                        lastPage.getRowHeights().length > originalCount) ? index : -1;
                    }, RowHeightMeasureManager.prototype.measureNextPage = function(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                        var pageRow = new pivotTable.PivotTablePageRow();
                        this.getPageRows().push(pageRow), this.measurePage(pageRow, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, pivotTable.MeasureColumnSampleCount);
                    }, RowHeightMeasureManager.prototype.measureFloatingRows = function(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                        if (_.isEmpty(this.floatingPageRow.getRowHeights())) {
                            var floatingRowItems = rowNavigator.getFloatingHierarchyItems();
                            if (!_.isEmpty(floatingRowItems)) {
                                for (var columnCount = Math.min(columnNavigator.getHierarchyLeafCount() - startColumnIndex, pivotTable.MeasureColumnSampleCount), cellsString = "", floatingLeafCount = rowNavigator.getFloatingHierarchyLeafCount(), i = 0; i < floatingLeafCount; i++) {
                                    var floatingLeaf = rowNavigator.getFloatingHierarchyLeafAt(i);
                                    this.floatingPageRow.getRowHeights()[i] = this.sizeManager.getRowHeight(floatingLeaf), 
                                    void 0 === this.floatingPageRow.getRowHeights()[i] && (cellsString += this.getHeighestCellBindingString(floatingLeaf, binder, rowNavigator, columnNavigator, columnCount, startColumnIndex, startRowIndex));
                                }
                                if (cellsString) {
                                    this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                                    for (var current = this.measureElement.firstChild, i = 0; i < floatingLeafCount; i++) void 0 === this.floatingPageRow.getRowHeights()[i] && (this.floatingPageRow.getRowHeights()[i] = current.offsetHeight, 
                                    current = current.nextSibling);
                                    this.measureElement.innerHTML = "", this.adjustItemsHeight(this.floatingPageRow, binder, rowNavigator, 0, 0, floatingLeafCount);
                                }
                            }
                        }
                    }, RowHeightMeasureManager.prototype.getPageIndex = function(rowIndex) {
                        return MeasureUtil.getPageIndex(rowIndex, pivotTable.PageRowCount);
                    }, RowHeightMeasureManager.prototype.getMeasureRequiredStyle = function(width) {
                        return {
                            "box-sizing": "border-box",
                            width: pivotTable.PivotTableControl.pixelUnits(width)
                        };
                    }, RowHeightMeasureManager.prototype.gotMoreRows = function(pageRow, rowNavigator) {
                        return 0 < rowNavigator.getHierarchyLeafCount() - this.getPageRowStartIndex(pageRow) - pageRow.getRowHeights().length;
                    }, RowHeightMeasureManager.prototype.measurePage = function(pageRow, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex, columnSampleCount, startOffset, rowCount) {
                        var pageStartRowIndex = this.getPageRowStartIndex(pageRow);
                        void 0 === startOffset && (startOffset = 0), void 0 === rowCount && (rowCount = Math.min(rowNavigator.getHierarchyLeafCount() - pageStartRowIndex, pivotTable.PageRowCount) - startOffset);
                        for (var columnCount = Math.min(columnNavigator.getHierarchyLeafCount() - startColumnIndex, columnSampleCount), cellsString = "", i = 0; i < rowCount; i++) {
                            var rowItem = rowNavigator.getHierarchyLeafAt(i + startOffset + pageStartRowIndex);
                            void 0 === (pageRow.getRowHeights()[i + startOffset] = this.sizeManager.getRowHeight(rowItem)) && (cellsString += this.getHeighestCellBindingString(rowItem, binder, rowNavigator, columnNavigator, columnCount, startColumnIndex, startRowIndex));
                        }
                        if (cellsString) {
                            this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                            for (var current = this.measureElement.firstChild, i = 0; i < rowCount; i++) void 0 === pageRow.getRowHeights()[i + startOffset] && (pageRow.getRowHeights()[i + startOffset] = current.offsetHeight, 
                            current = current.nextSibling);
                            this.measureElement.innerHTML = "", this.adjustItemsHeight(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount);
                        }
                    }, RowHeightMeasureManager.prototype.getHeighestCellBindingString = function(rowItem, binder, rowNavigator, columnNavigator, columnCount, startColumnIndex, startRowIndex) {
                        for (var heighestItem = {
                            item: null,
                            width: -1,
                            height: -1
                        }, j = 0; j < columnCount; j++) {
                            var height_1 = columnNavigator.getHierarchyLeafAt(j + startColumnIndex), cellItem = rowNavigator.getIntersection(rowItem, height_1), cellWidth = this.columnWidthMeasureManager.getColumnWidth(j + startColumnIndex, binder, rowNavigator, columnNavigator, startRowIndex), height_1 = binder.getApproximateBodyCellHeight(cellItem, cellWidth);
                            height_1 > heighestItem.height && (heighestItem.item = cellItem, heighestItem.width = cellWidth, 
                            heighestItem.height = height_1);
                        }
                        var cellBinding = this.getItemWidth(rowItem, rowNavigator), height = binder.getApproximateRowHeaderHeight(rowItem, cellBinding);
                        return height > heighestItem.height && (heighestItem.item = rowItem, heighestItem.height = height, 
                        heighestItem.width = cellBinding), cellBinding = heighestItem.item === rowItem ? binder.getRowHeaderBinding(heighestItem.item, !0) : binder.getBodyCellBinding(heighestItem.item, !0), 
                        pivotTable.ElementBuilder.build(cellBinding, this.getMeasureRequiredStyle(heighestItem.width));
                    }, RowHeightMeasureManager.prototype.getItemWidth = function(rowItem, rowNavigator) {
                        return 0;
                    }, RowHeightMeasureManager.prototype.adjustItemsHeight = function(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount) {}, 
                    RowHeightMeasureManager.prototype.getMaxPageRowCount = function(rowNavigator) {
                        return Math.ceil(rowNavigator.getHierarchyLeafCount() / pivotTable.PageRowCount);
                    }, RowHeightMeasureManager.prototype.getPageRows = function() {
                        return this.pageRows;
                    }, RowHeightMeasureManager.prototype.getFloatingPageRow = function() {
                        return this.floatingPageRow;
                    }, RowHeightMeasureManager.prototype.getFloatingRowHeights = function() {
                        return _.sum(this.floatingPageRow.getRowHeights());
                    }, RowHeightMeasureManager.prototype.canAddPageRow = function(rowNavigator) {
                        return this.pageRows.length < this.getMaxPageRowCount(rowNavigator);
                    }, RowHeightMeasureManager.prototype.getPageRowStartIndex = function(index) {
                        if (index === this.floatingPageRow) return 0;
                        index = this.pageRows.indexOf(index);
                        return -1 === index ? -1 : index * pivotTable.PageRowCount;
                    }, RowHeightMeasureManager.prototype.getPageRowTop = function(pageRow) {
                        if (pageRow === this.floatingPageRow) return 0;
                        for (var top = 0, _i = 0, _a = this.pageRows; _i < _a.length; _i++) {
                            var currentPageRow = _a[_i];
                            if (pageRow === currentPageRow) break;
                            top += currentPageRow.getHeight();
                        }
                        return top;
                    }, RowHeightMeasureManager.prototype.getRowsHeight = function() {
                        for (var height = 0, _i = 0, _a = this.pageRows; _i < _a.length; _i++) height += _a[_i].getHeight();
                        return height;
                    }, RowHeightMeasureManager.prototype.getRowHeight = function(rowLeafIndex, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                        return this.getPageRow(rowLeafIndex, binder, rowNavigator, columnNavigator, startColumnIndex).getRowHeights()[rowLeafIndex % pivotTable.PageRowCount];
                    }, RowHeightMeasureManager.prototype.getFloatingRowHeight = function(rowLeafIndex) {
                        return this.floatingPageRow.getRowHeights()[rowLeafIndex];
                    }, RowHeightMeasureManager.prototype.getPageRow = function(pageRowIndex, binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex) {
                        pageRowIndex = this.getPageIndex(pageRowIndex);
                        if (binder && pageRowIndex > this.pageRows.length) for (var pageCountToMeasure = pageRowIndex - this.pageRows.length + 1, i = 0; i < pageCountToMeasure; i++) this.measureNextPage(binder, rowNavigator, columnNavigator, startRowIndex, startColumnIndex);
                        return this.pageRows[pageRowIndex];
                    }, RowHeightMeasureManager;
                }(), BlockedRowHeightMeasureManager = function(_super) {
                    function BlockedRowHeightMeasureManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(BlockedRowHeightMeasureManager, _super), BlockedRowHeightMeasureManager.prototype.getItemWidth = function(rowItem, rowNavigator) {
                        return this.rowLevelWidthMeasureManager.getWidth(rowNavigator.getLevel(rowItem), pivotTable.PivotTableHierarchyNavigator.getHeaderSpan(rowItem, rowNavigator));
                    }, BlockedRowHeightMeasureManager.prototype.adjustItemsHeight = function(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount) {
                        for (var i = 0; i < rowCount; i++) {
                            var rowItem = rowNavigator.getHierarchyLeafAt(i + startOffset + pageStartRowIndex);
                            void 0 === this.sizeManager.getRowHeight(rowItem) && this.adjustItemHeight(pageRow, i + startOffset, pageStartRowIndex, binder, rowNavigator, rowItem);
                        }
                    }, BlockedRowHeightMeasureManager.prototype.adjustItemHeight = function(pageRow, rowIndex, pageStartRowIndex, binder, rowNavigator, ancestors) {
                        var _this = this, ancestors = MeasureUtil.getAncestorsToMeasure(ancestors, rowNavigator);
                        _.isEmpty(ancestors) || (this.measureAncestors(ancestors, binder, rowNavigator), 
                        pageRow.getRowHeights()[rowIndex] += MeasureUtil.getSizeDifference(ancestors, pageStartRowIndex + rowIndex, rowNavigator, function(index) {
                            return pageRow === _this.getFloatingPageRow() ? _this.getFloatingRowHeight(index) : _this.getRowHeight(index);
                        }));
                    }, BlockedRowHeightMeasureManager.prototype.measureAncestors = function(ancestors, binder, rowNavigator) {
                        for (var cellsString = "", _i = 0, ancestors_4 = ancestors; _i < ancestors_4.length; _i++) {
                            var ancestor = ancestors_4[_i], binding = binder.getRowHeaderBinding(ancestor.node, !0);
                            cellsString += pivotTable.ElementBuilder.build(binding, this.getMeasureRequiredStyle(this.getItemWidth(ancestor.node, rowNavigator)));
                        }
                        this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                        for (var current = this.measureElement.firstChild, _a = 0, ancestors_5 = ancestors; _a < ancestors_5.length; _a++) (ancestor = ancestors_5[_a]).size = current.offsetHeight, 
                        current = current.nextSibling;
                        this.measureElement.innerHTML = "";
                    }, BlockedRowHeightMeasureManager;
                }(pivotTable.RowHeightMeasureManager = SteppedRowLevelWidthMeasureManager);
                pivotTable.BlockedRowHeightMeasureManager = BlockedRowHeightMeasureManager;
                SteppedRowLevelWidthMeasureManager = function(_super) {
                    function SteppedRowHeightMeasureManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(SteppedRowHeightMeasureManager, _super), SteppedRowHeightMeasureManager.prototype.getItemWidth = function(rowItem, rowNavigator) {
                        return this.rowLevelWidthMeasureManager.getLevelWidth(rowNavigator.getLevel(rowItem));
                    }, SteppedRowHeightMeasureManager.prototype.adjustItemsHeight = function(pageRow, binder, rowNavigator, pageStartRowIndex, startOffset, rowCount) {}, 
                    SteppedRowHeightMeasureManager;
                }(SteppedRowLevelWidthMeasureManager);
                pivotTable.SteppedRowHeightMeasureManager = SteppedRowLevelWidthMeasureManager;
                SteppedRowLevelWidthMeasureManager = function() {
                    function ColumnLevelHeightMeasureManager(measureElement, columnWidthMeasureManager, rowLevelWidthMeasureManager, sizeManager) {
                        this.columnLevelHeights = [], this.measureElement = measureElement, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                        this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, this.sizeManager = sizeManager;
                    }
                    return ColumnLevelHeightMeasureManager.prototype.clear = function() {
                        this.columnLevelHeights = [];
                    }, ColumnLevelHeightMeasureManager.prototype.getMeasureRequiredStyle = function(width) {
                        return {
                            "box-sizing": "border-box",
                            width: pivotTable.PivotTableControl.pixelUnits(width)
                        };
                    }, ColumnLevelHeightMeasureManager.prototype.measure = function(binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount, levelToMeasure) {
                        if (0 === this.columnLevelHeights.length) {
                            for (var context = {
                                done: !1,
                                levels: [],
                                spanningHeaders: [],
                                leafCount: 0
                            }, columnHierarchyDepth = columnNavigator.getHierarchyDepth(), rowHierarchyDepth = rowNavigator.getHierarchyDepth(), i_1 = 0; i_1 < columnHierarchyDepth; i_1++) void 0 !== levelToMeasure && levelToMeasure !== i_1 || (this.columnLevelHeights[i_1] = this.sizeManager.getColumnLevelHeight(rowNavigator.getCorner(rowHierarchyDepth - 1, i_1))), 
                            context.levels.push({
                                largestItem: null,
                                isHeader: !0,
                                largestItemWidth: -1,
                                largestItemHeight: -1
                            });
                            var columnHierarchy = columnNavigator.getHierarchyItems();
                            columnHierarchy && this.getHeighestColumnHeaders(columnHierarchy, context, binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount);
                            for (var cornerCell, cornerCellwidth, height, rowLevel = 0; rowLevel < rowHierarchyDepth; rowLevel++) for (var columnLevel = 0; columnLevel < columnHierarchyDepth; columnLevel++) void 0 === this.columnLevelHeights[columnLevel] && (cornerCell = rowNavigator.getCorner(rowLevel, columnLevel), 
                            cornerCellwidth = this.rowLevelWidthMeasureManager.getLevelWidth(rowLevel), (height = binder.getApproximateCornerCellHeight(cornerCell, cornerCellwidth)) > context.levels[columnLevel].largestItemHeight && (context.levels[columnLevel].isHeader = !1, 
                            context.levels[columnLevel].largestItem = cornerCell, context.levels[columnLevel].largestItemHeight = height, 
                            context.levels[columnLevel].largestItemWidth = cornerCellwidth));
                            for (var requiredStyles, cell, cellsString = "", _i = 0, _a = context.levels; _i < _a.length; _i++) (level = _a[_i]).largestItem && (requiredStyles = this.getMeasureRequiredStyle(level.largestItemWidth), 
                            cell = level.isHeader ? binder.getColumnHeaderBinding(level.largestItem, !0) : binder.getCornerCellBinding(level.largestItem, !0), 
                            cellsString += pivotTable.ElementBuilder.build(cell, requiredStyles));
                            if (cellsString) {
                                this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                                for (var level, current = this.measureElement.firstChild, i = 0, _b = 0, _c = context.levels; _b < _c.length; _b++) (level = _c[_b]).largestItem && (void 0 !== levelToMeasure && levelToMeasure !== i || (this.columnLevelHeights[i] = current.offsetHeight), 
                                current = current.nextSibling), i++;
                                this.measureElement.innerHTML = "", this.adjustLevelHeightsFromSpanningHeaders(context, binder, rowNavigator, columnNavigator, rowStartIndex);
                            }
                        }
                    }, ColumnLevelHeightMeasureManager.prototype.adjustLevelHeightsFromSpanningHeaders = function(context, binder, rowNavigator, columnNavigator, rowStartIndex) {
                        for (var cellsString = "", _i = 0, _a = context.spanningHeaders; _i < _a.length; _i++) {
                            var requiredStyles, cell, node = _a[_i];
                            context.levels[node.levelToAdjust].largestItem && (requiredStyles = this.getMeasureRequiredStyle(this.getHeaderWidth(node.item, binder, rowNavigator, columnNavigator, rowStartIndex)), 
                            cell = binder.getColumnHeaderBinding(node.item, !0), cellsString += pivotTable.ElementBuilder.build(cell, requiredStyles));
                        }
                        if (cellsString) {
                            this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                            for (var current = this.measureElement.firstChild, _b = 0, _c = context.spanningHeaders; _b < _c.length; _b++) {
                                node = _c[_b];
                                context.levels[node.levelToAdjust].largestItem && (this.adjustLevelFromSpanningHeader(node.item, node.level, node.levelToAdjust, current.offsetHeight, columnNavigator), 
                                current = current.nextSibling);
                            }
                            this.measureElement.innerHTML = "";
                        }
                    }, ColumnLevelHeightMeasureManager.prototype.adjustLevelFromSpanningHeader = function(header, itemLevel, levelToAdjust, itemHeight, columnNavigator) {
                        for (var spanningHeight = 0, level = itemLevel; level <= levelToAdjust; level++) spanningHeight += this.getLevelHeight(level);
                        spanningHeight < itemHeight && (this.columnLevelHeights[levelToAdjust] += itemHeight - spanningHeight);
                    }, ColumnLevelHeightMeasureManager.prototype.getHeighestColumnHeaders = function(items, context, binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount) {
                        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                            var children = items_1[_i];
                            if (context.done) return;
                            var itemWidth, height, isLeaf = columnNavigator.isLeaf(children), level = columnNavigator.getLevel(children), span = pivotTable.PivotTableHierarchyNavigator.getHeaderSpan(children, columnNavigator), included = pivotTable.PivotTableHierarchyNavigator.getLastLeafIndex(children, columnNavigator) >= columnStartIndex;
                            included && (1 === span ? void 0 === this.columnLevelHeights[level] && (itemWidth = this.getHeaderWidth(children, binder, rowNavigator, columnNavigator, rowStartIndex), 
                            (height = binder.getApproximateColumnHeaderHeight(children, itemWidth)) > context.levels[level].largestItemHeight && (context.levels[level].largestItem = children, 
                            context.levels[level].largestItemHeight = height, context.levels[level].largestItemWidth = itemWidth)) : context.spanningHeaders.push({
                                item: children,
                                level: level,
                                levelToAdjust: span + level - 1
                            }));
                            children = columnNavigator.getChildren(children);
                            children && this.getHeighestColumnHeaders(children, context, binder, rowNavigator, columnNavigator, rowStartIndex, columnStartIndex, columnSampleCount), 
                            isLeaf && included && context.leafCount++, context.leafCount === columnSampleCount && (context.done = !0);
                        }
                    }, ColumnLevelHeightMeasureManager.prototype.getHeadersHeight = function() {
                        for (var totalHeight = 0, _i = 0, _a = this.columnLevelHeights; _i < _a.length; _i++) totalHeight += _a[_i];
                        return totalHeight;
                    }, ColumnLevelHeightMeasureManager.prototype.getLevelTop = function(level) {
                        for (var top = 0, i = 0; i < level; i++) top += this.columnLevelHeights[i];
                        return top;
                    }, ColumnLevelHeightMeasureManager.prototype.getLevelHeight = function(level) {
                        return this.columnLevelHeights[level];
                    }, ColumnLevelHeightMeasureManager.prototype.getHeaderWidth = function(item, binder, rowNavigator, columnNavigator, rowStartIndex) {
                        for (var firstLeafIndex = pivotTable.PivotTableHierarchyNavigator.getFirstLeafIndex(item, columnNavigator), lastLeafIndex = pivotTable.PivotTableHierarchyNavigator.getLastLeafIndex(item, columnNavigator), width = 0, index = firstLeafIndex; index <= lastLeafIndex; index++) width += this.columnWidthMeasureManager.getColumnWidth(index, binder, rowNavigator, columnNavigator, rowStartIndex);
                        return width;
                    }, ColumnLevelHeightMeasureManager;
                }();
                pivotTable.ColumnLevelHeightMeasureManager = SteppedRowLevelWidthMeasureManager;
                var BlockedRowLevelWidthMeasureManager = function() {
                    function BlockedRowLevelWidthMeasureManager(measureElement, sizeManager) {
                        this.rowLevelWidths = [], this.measureElement = measureElement, this.sizeManager = sizeManager;
                    }
                    return BlockedRowLevelWidthMeasureManager.prototype.clear = function() {
                        this.rowLevelWidths = [];
                    }, BlockedRowLevelWidthMeasureManager.prototype.measure = function(binder, rowNavigator, columnNavigator, startRowIndex, floatingRowItems, levelToMeasure) {
                        if (0 === this.rowLevelWidths.length || void 0 !== levelToMeasure) {
                            for (var context = {
                                done: !1,
                                levels: [],
                                spanningHeaders: [],
                                leafCount: 0
                            }, rowHierarchyDepth = rowNavigator.getHierarchyDepth(), columnHierarchyDepth = columnNavigator.getHierarchyDepth(), i_2 = 0; i_2 < rowHierarchyDepth; i_2++) void 0 !== levelToMeasure && levelToMeasure !== i_2 || (this.rowLevelWidths[i_2] = this.sizeManager.getRowLevelWidth(rowNavigator.getCorner(i_2, columnHierarchyDepth - 1))), 
                            context.levels.push({
                                largestItem: null,
                                isHeader: !0,
                                largestItemWidth: -1,
                                largestItemHeight: -1
                            });
                            this.getWidestRowHeaders(rowNavigator.getHierarchyItems(), context, binder, rowNavigator, startRowIndex, floatingRowItems);
                            floatingRowItems = rowNavigator.getFloatingHierarchyItems();
                            _.isEmpty(floatingRowItems) || (context.done = !1, context.leafCount = 0, this.getWidestRowHeaders(floatingRowItems, context, binder, rowNavigator, -1, rowNavigator.getFloatingHierarchyLeafCount()));
                            for (var cornerCell, width, columnLevel = 0; columnLevel < columnHierarchyDepth; columnLevel++) for (var rowLevel = 0; rowLevel < rowHierarchyDepth; rowLevel++) void 0 === this.rowLevelWidths[rowLevel] && (cornerCell = rowNavigator.getCorner(rowLevel, columnLevel), 
                            (width = binder.getApproximateCornerCellWidth(cornerCell)) > context.levels[rowLevel].largestItemWidth && (context.levels[rowLevel].isHeader = !1, 
                            context.levels[rowLevel].largestItem = cornerCell, context.levels[rowLevel].largestItemWidth = width));
                            for (var cellBinding, cellsString = "", _i = 0, _a = context.levels; _i < _a.length; _i++) (level = _a[_i]).largestItem && (cellBinding = level.isHeader ? binder.getRowHeaderBinding(level.largestItem, !0) : binder.getCornerCellBinding(level.largestItem, !0), 
                            cellsString += pivotTable.ElementBuilder.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles));
                            if (cellsString) {
                                this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                                for (var level, current = this.measureElement.firstChild, i = 0, _b = 0, _c = context.levels; _b < _c.length; _b++) (level = _c[_b]).largestItem && (void 0 !== levelToMeasure && levelToMeasure !== i || (this.rowLevelWidths[i] = current.offsetWidth + 1), 
                                current = current.nextSibling), i++;
                                this.measureElement.innerHTML = "", this.adjustLevelWidthsFromSpanningHeaders(context, binder, rowNavigator);
                            }
                        }
                    }, BlockedRowLevelWidthMeasureManager.prototype.adjustLevelWidthsFromSpanningHeaders = function(context, binder, rowNavigator) {
                        for (var cellsString = "", _i = 0, _a = context.spanningHeaders; _i < _a.length; _i++) {
                            var cell, node = _a[_i];
                            context.levels[node.levelToAdjust].largestItem && (cell = binder.getRowHeaderBinding(node.item, !0), 
                            cellsString += pivotTable.ElementBuilder.build(cell, BlockedRowLevelWidthMeasureManager.measureRequiredStyles));
                        }
                        if (cellsString) {
                            this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                            for (var current = this.measureElement.firstChild, _b = 0, _c = context.spanningHeaders; _b < _c.length; _b++) {
                                node = _c[_b];
                                context.levels[node.levelToAdjust].largestItem && (this.adjustLevelWidthFromSpanningHeader(node.item, node.level, node.levelToAdjust, current.offsetWidth, rowNavigator), 
                                current = current.nextSibling);
                            }
                            this.measureElement.innerHTML = "";
                        }
                    }, BlockedRowLevelWidthMeasureManager.prototype.adjustLevelWidthFromSpanningHeader = function(header, itemLevel, levelToAdjust, itemWidth, rowNavigator) {
                        for (var spanningWidth = 0, level = itemLevel; level <= levelToAdjust; level++) spanningWidth += this.getLevelWidth(level);
                        spanningWidth < itemWidth && (this.rowLevelWidths[levelToAdjust] += itemWidth - spanningWidth);
                    }, BlockedRowLevelWidthMeasureManager.prototype.getWidestRowHeaders = function(items, context, binder, rowNavigator, startRowIndex, rowSampleCount) {
                        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                            var children = items_2[_i];
                            if (context.done) return;
                            var width, isLeaf = rowNavigator.isLeaf(children), level = rowNavigator.getLevel(children), span = pivotTable.PivotTableHierarchyNavigator.getHeaderSpan(children, rowNavigator), include = pivotTable.PivotTableHierarchyNavigator.getLastLeafIndex(children, rowNavigator) >= startRowIndex;
                            include && (1 === span ? void 0 !== this.rowLevelWidths[level] || (width = binder.getApproximateRowHeaderWidth(children)) > context.levels[level].largestItemWidth && (context.levels[level].largestItem = children, 
                            context.levels[level].largestItemWidth = width) : context.spanningHeaders.push({
                                item: children,
                                level: level,
                                levelToAdjust: span + level - 1
                            }));
                            children = rowNavigator.getChildren(children);
                            children && this.getWidestRowHeaders(children, context, binder, rowNavigator, startRowIndex, rowSampleCount), 
                            isLeaf && include && context.leafCount++, context.leafCount === rowSampleCount && (context.done = !0);
                        }
                    }, BlockedRowLevelWidthMeasureManager.prototype.getHeadersWidth = function() {
                        for (var totalWidth = 0, _i = 0, _a = this.rowLevelWidths; _i < _a.length; _i++) totalWidth += _a[_i];
                        return totalWidth;
                    }, BlockedRowLevelWidthMeasureManager.prototype.getLevelLeft = function(level) {
                        for (var left = 0, i = 0; i < level; i++) left += this.rowLevelWidths[i];
                        return left;
                    }, BlockedRowLevelWidthMeasureManager.prototype.getLevelWidth = function(level) {
                        return this.rowLevelWidths[level];
                    }, BlockedRowLevelWidthMeasureManager.prototype.setLevelWidth = function(level, width) {
                        this.rowLevelWidths[level] = width;
                    }, BlockedRowLevelWidthMeasureManager.prototype.getWidth = function(level, columnSpan) {
                        for (var width = 0, i = level; i < level + columnSpan; i++) width += this.getLevelWidth(i);
                        return width;
                    }, BlockedRowLevelWidthMeasureManager.measureRequiredStyles = {
                        "box-sizing": "border-box",
                        display: "inline-flex"
                    }, BlockedRowLevelWidthMeasureManager;
                }();
                pivotTable.BlockedRowLevelWidthMeasureManager = BlockedRowLevelWidthMeasureManager;
                SteppedRowLevelWidthMeasureManager = function() {
                    function SteppedRowLevelWidthMeasureManager(measureElement, sizeManager) {
                        this.measureElement = measureElement, this.sizeManager = sizeManager;
                    }
                    return SteppedRowLevelWidthMeasureManager.prototype.clear = function() {
                        this.width = void 0;
                    }, SteppedRowLevelWidthMeasureManager.prototype.getHeaderBindingString = function(cellBinding, binder) {
                        cellBinding = binder.getRowHeaderBinding(cellBinding, !0);
                        return pivotTable.ElementBuilder.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
                    }, SteppedRowLevelWidthMeasureManager.prototype.measure = function(binder, rowNavigator, columnNavigator, startRowIndex, floatingHierarchyItems, levelToMeasure) {
                        if ((void 0 === this.width || void 0 !== levelToMeasure) && (this.width = this.sizeManager.getRowLevelWidth(rowNavigator.getCorner(0, columnNavigator.getHierarchyDepth() - 1)), 
                        void 0 === this.width)) {
                            for (var cellsString = "", rowCount = Math.min(rowNavigator.getHierarchyLeafCount() - startRowIndex, floatingHierarchyItems), i = 0; i < rowCount; i++) cellsString += this.getHeaderBindingString(rowNavigator.getHierarchyLeafAt(i + startRowIndex), binder);
                            floatingHierarchyItems = rowNavigator.getFloatingHierarchyItems();
                            if (!_.isEmpty(floatingHierarchyItems)) for (var floatingLeafCount = rowNavigator.getFloatingHierarchyLeafCount(), i = 0; i < floatingLeafCount; i++) cellsString += this.getHeaderBindingString(rowNavigator.getFloatingHierarchyLeafAt(i), binder);
                            if (0 < rowNavigator.getHierarchyDepth()) for (i = 0; i < columnNavigator.getHierarchyDepth(); i++) {
                                var cellBinding = rowNavigator.getCorner(0, i), cellBinding = binder.getCornerCellBinding(cellBinding, !0);
                                cellsString += pivotTable.ElementBuilder.build(cellBinding, BlockedRowLevelWidthMeasureManager.measureRequiredStyles);
                            }
                            this.measureElement.insertAdjacentHTML("beforeend", cellsString);
                            for (var current = this.measureElement.firstChild, width = 0; current; ) width = Math.max(width, current.offsetWidth + 1), 
                            current = current.nextSibling;
                            this.measureElement.innerHTML = "", this.width = width;
                        }
                    }, SteppedRowLevelWidthMeasureManager.prototype.getHeadersWidth = function() {
                        return this.width;
                    }, SteppedRowLevelWidthMeasureManager.prototype.getLevelWidth = function(rowLevel) {
                        return this.width;
                    }, SteppedRowLevelWidthMeasureManager.prototype.setLevelWidth = function(level, width) {
                        this.width = width;
                    }, SteppedRowLevelWidthMeasureManager.prototype.getLevelLeft = function(level) {
                        return 0;
                    }, SteppedRowLevelWidthMeasureManager;
                }();
                pivotTable.SteppedRowLevelWidthMeasureManager = SteppedRowLevelWidthMeasureManager;
            }(controls.pivotTable || (controls.pivotTable = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(pivotTable) {
                var HeaderRendererUtil, isIntersecting = visuals.shapes.Rect.isIntersecting;
                !function(HeaderRendererUtil) {
                    HeaderRendererUtil.getHeaderIndices = function getHeaderIndices(item, indices, navigator) {
                        var parent = navigator.getParent(item);
                        parent && getHeaderIndices(parent, indices, navigator), indices.push(navigator.getIndex(item));
                    }, HeaderRendererUtil.getHeaderKey = function(indices) {
                        for (var key = "", _i = 0, indices_1 = indices; _i < indices_1.length; _i++) key += indices_1[_i] + "_";
                        return key;
                    }, HeaderRendererUtil.ensureLevelContext = function(levels, currentPosition) {
                        currentPosition === levels.length && (currentPosition = levels[currentPosition - 1].currentPosition, 
                        levels.push({
                            startItem: null,
                            startPosition: currentPosition,
                            currentPosition: currentPosition
                        }));
                    };
                }(HeaderRendererUtil = pivotTable.HeaderRendererUtil || (pivotTable.HeaderRendererUtil = {}));
                var CornerRenderer = function() {
                    function RowHeaderRenderer(element, rowHeightMeasureManager, rowLevelWidthMeasureManager, rowHeightResizeHandler, clickHandler, contextMenuHandler, interactionHandler, isA11yTable) {
                        this.element = element, this.rowHeightMeasureManager = rowHeightMeasureManager, 
                        this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, this.rowHeightResizeHandler = rowHeightResizeHandler, 
                        this.clickHandler = clickHandler, this.contextMenuHandler = contextMenuHandler, 
                        this.interactionHandler = interactionHandler, this.isA11yTable = isA11yTable;
                    }
                    return RowHeaderRenderer.prototype.clear = function() {
                        this.element.innerHTML = "", this.headers = {};
                    }, RowHeaderRenderer.prototype.getHierarchyLeafAt = function(floatingRows, index, navigator) {
                        return floatingRows ? navigator.getFloatingHierarchyLeafAt(index) : navigator.getHierarchyLeafAt(index);
                    }, RowHeaderRenderer.prototype.removeUnusedHeaders = function(addedHeaders) {
                        for (var _i = 0, unused_1 = this.getUnusedHeaders(addedHeaders); _i < unused_1.length; _i++) {
                            var headerKey = unused_1[_i];
                            this.element.removeChild(this.getHeader(headerKey).getElement()), this.removeHeader(headerKey);
                        }
                    }, RowHeaderRenderer.prototype.addHeader = function(headerKey) {
                        var header = new pivotTable.PivotTableHeader();
                        return this.headers[headerKey] = header;
                    }, RowHeaderRenderer.prototype.removeHeader = function(headerKey) {
                        delete this.headers[headerKey];
                    }, RowHeaderRenderer.prototype.getHeader = function(headerKey) {
                        return this.headers[headerKey];
                    }, RowHeaderRenderer.prototype.getOrAddHeader = function(headerKey) {
                        return this.getHeader(headerKey) || this.addHeader(headerKey);
                    }, RowHeaderRenderer.prototype.getUnusedHeaders = function(addedHeaders) {
                        var headerKey, unused = [];
                        for (headerKey in this.headers) addedHeaders[headerKey] || unused.push(headerKey);
                        return unused;
                    }, RowHeaderRenderer;
                }(), BlockedRowHeaderRenderer = function(_super) {
                    function BlockedRowHeaderRenderer() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(BlockedRowHeaderRenderer, _super), BlockedRowHeaderRenderer.prototype.update = function(items, floatingRows, viewportTop, renderingContext, binder, navigator) {
                        renderingContext = this.getRenderingContext(floatingRows, viewportTop, renderingContext, navigator);
                        renderingContext && (items && this.render(items, floatingRows, 0, navigator.getIndex(renderingContext.levelsContext[0].startItem), renderingContext, viewportTop, binder, navigator), 
                        this.removeUnusedHeaders(renderingContext.addedHeaders));
                    }, BlockedRowHeaderRenderer.prototype.getRenderingContext = function(startTop, viewportTop, result, navigator) {
                        result = startTop ? {
                            firstLeafIndex: 0,
                            firstLeafTop: 0,
                            lastLeafIndex: navigator.getFloatingHierarchyLeafCount() - 1
                        } : pivotTable.RowMeasurementUtil.getVisibleRange(viewportTop, result, this.rowHeightMeasureManager);
                        if (!result) return null;
                        var item = this.getHierarchyLeafAt(startTop, result.firstLeafIndex, navigator), startItems = [], startTop = result.firstLeafTop;
                        for (startItems.push({
                            startItem: item,
                            currentPosition: startTop,
                            startPosition: startTop
                        }); item; ) {
                            var top_1, child = startItems[0];
                            (item = navigator.getParent(item)) && (top_1 = void 0, top_1 = navigator.isLastItem(child.startItem, navigator.getChildren(item)) && child.currentPosition - viewportTop < 0 ? child.currentPosition : viewportTop, 
                            startItems.unshift({
                                startItem: item,
                                currentPosition: top_1,
                                startPosition: top_1
                            }));
                        }
                        return {
                            currentLeafIndex: result.firstLeafIndex,
                            lastVisibledLeafIndex: result.lastLeafIndex,
                            levelsContext: startItems,
                            addedHeaders: {},
                            done: !1
                        };
                    }, BlockedRowHeaderRenderer.prototype.render = function(items, floatingHierarchy, level, firstVisibleIndex, renderingContext, viewportTop, binder, navigator) {
                        for (var count = items.length, totalHeight = 0, i = firstVisibleIndex; i < count && (totalHeight += this.renderHeader(items[i], items, floatingHierarchy, level, renderingContext, viewportTop, binder, navigator), 
                        !renderingContext.done); i++);
                        return totalHeight;
                    }, BlockedRowHeaderRenderer.prototype.renderHeader = function(item, items, floatingHierarchy, level, renderingState, viewportTop, childrenHeight, navigator) {
                        var firstVisibleIndex = childrenHeight.getRowHeaderBinding(item, !1, this.isA11yTable);
                        if (this.isA11yTable && null == firstVisibleIndex.styleProperties) {
                            var rowHeight = floatingHierarchy ? this.rowHeightMeasureManager.getFloatingRowHeight(renderingState.currentLeafIndex) : this.rowHeightMeasureManager.getRowHeight(renderingState.currentLeafIndex);
                            if (HeaderRendererUtil.ensureLevelContext(renderingState.levelsContext, level), 
                            renderingState.currentLeafIndex === renderingState.lastVisibledLeafIndex) renderingState.done = !0; else {
                                renderingState.currentLeafIndex++;
                                for (var l = level; l < renderingState.levelsContext.length; l++) renderingState.levelsContext[l].currentPosition += rowHeight;
                            }
                            return rowHeight;
                        }
                        var header = [];
                        HeaderRendererUtil.getHeaderIndices(item, header, navigator);
                        var height, headerKey = HeaderRendererUtil.getHeaderKey(header), header = this.getOrAddHeader(headerKey);
                        if ((renderingState.addedHeaders[headerKey] = header).build(this.element, firstVisibleIndex, item, null, this.rowHeightResizeHandler, this.clickHandler, this.contextMenuHandler, this.interactionHandler, !1, this.isA11yTable), 
                        header.setLeft(this.rowLevelWidthMeasureManager.getLevelLeft(navigator.getLevel(item))), 
                        HeaderRendererUtil.ensureLevelContext(renderingState.levelsContext, level), navigator.isLeaf(item)) if (height = floatingHierarchy ? this.rowHeightMeasureManager.getFloatingRowHeight(renderingState.currentLeafIndex) : this.rowHeightMeasureManager.getRowHeight(renderingState.currentLeafIndex), 
                        header.setTop(renderingState.levelsContext[level].currentPosition), header.setHeight(height), 
                        renderingState.currentLeafIndex === renderingState.lastVisibledLeafIndex) renderingState.done = !0; else {
                            renderingState.currentLeafIndex++;
                            for (l = level; l < renderingState.levelsContext.length; l++) renderingState.levelsContext[l].currentPosition += height;
                        } else {
                            firstVisibleIndex = void 0, firstVisibleIndex = renderingState.levelsContext[level].startItem === item ? navigator.getIndex(renderingState.levelsContext[level + 1].startItem) : 0, 
                            childrenHeight = this.render(navigator.getChildren(item), floatingHierarchy, level + 1, firstVisibleIndex, renderingState, viewportTop, childrenHeight, navigator);
                            header.setTop(renderingState.levelsContext[level].currentPosition), height = renderingState.levelsContext[level].startItem === item && renderingState.levelsContext[level].startPosition === viewportTop ? childrenHeight + renderingState.levelsContext[level + 1].startPosition - viewportTop : childrenHeight, 
                            header.setHeight(height), renderingState.levelsContext[level].currentPosition += height;
                        }
                        return this.isA11yTable ? header.setWidth(pivotTable.SelectionIndicatorWidth) : header.setWidth(this.rowLevelWidthMeasureManager.getWidth(navigator.getLevel(item), pivotTable.PivotTableHierarchyNavigator.getHeaderSpan(item, navigator))), 
                        height;
                    }, BlockedRowHeaderRenderer.prototype.getCellAt = function(header) {
                        header = this.getHeader(HeaderRendererUtil.getHeaderKey(header));
                        return header.getElement();
                    }, BlockedRowHeaderRenderer;
                }(pivotTable.RowHeaderRenderer = CornerRenderer);
                pivotTable.BlockedRowHeaderRenderer = BlockedRowHeaderRenderer;
                CornerRenderer = function(_super) {
                    function SteppedRowHeaderRenderer() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(SteppedRowHeaderRenderer, _super), SteppedRowHeaderRenderer.prototype.update = function(items, floatingRows, viewportTop, renderingContext, binder, navigator) {
                        renderingContext = this.getRenderingContext(floatingRows, viewportTop, renderingContext, navigator);
                        if (!renderingContext) return null;
                        this.render(floatingRows, renderingContext, binder, navigator), this.removeUnusedHeaders(renderingContext.addedHeaders);
                    }, SteppedRowHeaderRenderer.prototype.clear = function() {
                        this.element.innerHTML = "", this.headers = {};
                    }, SteppedRowHeaderRenderer.prototype.render = function(floatingRows, renderingContext, binder, navigator) {
                        for (var top = renderingContext.startTop, index = renderingContext.currentLeafIndex; index <= renderingContext.lastVisibledLeafIndex; index++) {
                            var header = [], height = this.getHierarchyLeafAt(floatingRows, index, navigator);
                            HeaderRendererUtil.getHeaderIndices(height, header, navigator);
                            var headerKey = HeaderRendererUtil.getHeaderKey(header), header = this.getOrAddHeader(headerKey);
                            header.build(this.element, binder.getRowHeaderBinding(height, !1), height, null, this.rowHeightResizeHandler, this.clickHandler, this.contextMenuHandler, this.interactionHandler, !1, !1);
                            height = void 0, height = floatingRows ? this.rowHeightMeasureManager.getFloatingRowHeight(index) : this.rowHeightMeasureManager.getRowHeight(index);
                            header.setTop(top), header.setHeight(height), (renderingContext.addedHeaders[headerKey] = header).setWidth(this.rowLevelWidthMeasureManager.getHeadersWidth()), 
                            top += height;
                        }
                    }, SteppedRowHeaderRenderer.prototype.getRenderingContext = function(floatingRows, viewportTop, result, navigator) {
                        result = floatingRows ? {
                            firstLeafIndex: 0,
                            firstLeafTop: 0,
                            lastLeafIndex: navigator.getFloatingHierarchyLeafCount() - 1
                        } : pivotTable.RowMeasurementUtil.getVisibleRange(viewportTop, result, this.rowHeightMeasureManager);
                        return result ? {
                            currentLeafIndex: result.firstLeafIndex,
                            lastVisibledLeafIndex: result.lastLeafIndex,
                            startTop: result.firstLeafTop,
                            addedHeaders: {},
                            done: !1
                        } : null;
                    }, SteppedRowHeaderRenderer.prototype.getCellAt = function(header) {
                        header = this.getHeader(HeaderRendererUtil.getHeaderKey(header));
                        return header.getElement();
                    }, SteppedRowHeaderRenderer;
                }(CornerRenderer);
                pivotTable.SteppedRowHeaderRenderer = CornerRenderer;
                CornerRenderer = function() {
                    function ColumnHeaderRenderer(element, columnWidthMeasureManager, columnLevelHeightMeasureManager, columnWidthResizeHandler, clickHandler, contextMenuHandler, interactionHandler, isA11yTable) {
                        this.element = element, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                        this.columnLevelHeightMeasureManager = columnLevelHeightMeasureManager, this.columnWidthResizeHandler = columnWidthResizeHandler, 
                        this.clickHandler = clickHandler, this.contextMenuHandler = contextMenuHandler, 
                        this.interactionHandler = interactionHandler, this.isA11yTable = isA11yTable;
                    }
                    return ColumnHeaderRenderer.prototype.clear = function() {
                        this.element.innerHTML = "", this.headers = {};
                    }, ColumnHeaderRenderer.prototype.update = function(viewportLeft, items, binder, navigator) {
                        var renderingContext = this.getRenderingContext(viewportLeft, items, navigator);
                        renderingContext && ((items = navigator.getHierarchyItems()) && this.render(items, 0, navigator.getIndex(renderingContext.levelsContext[0].startItem), renderingContext, viewportLeft, binder, navigator), 
                        this.removeUnusedHeaders(renderingContext.addedHeaders));
                    }, ColumnHeaderRenderer.prototype.getRenderingContext = function(viewportLeft, startLeft, navigator) {
                        var visibleRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(viewportLeft, startLeft, this.columnWidthMeasureManager);
                        if (!visibleRange) return null;
                        var item = navigator.getHierarchyLeafAt(visibleRange.firstLeafIndex), startItems = [], startLeft = visibleRange.firstLeafLeft;
                        for (startItems.push({
                            startItem: item,
                            currentPosition: startLeft,
                            startPosition: startLeft
                        }); item; ) {
                            var left, child = startItems[0];
                            (item = navigator.getParent(item)) && (left = void 0, left = navigator.isLastItem(child.startItem, navigator.getChildren(item)) && child.currentPosition - viewportLeft < 0 ? child.currentPosition : viewportLeft, 
                            startItems.unshift({
                                startItem: item,
                                currentPosition: left,
                                startPosition: left
                            }));
                        }
                        return {
                            currentLeafIndex: visibleRange.firstLeafIndex,
                            lastVisibledLeafIndex: visibleRange.lastLeafIndex,
                            levelsContext: startItems,
                            addedHeaders: {},
                            done: !1
                        };
                    }, ColumnHeaderRenderer.prototype.removeUnusedHeaders = function(addedHeaders) {
                        for (var _i = 0, unused_2 = this.getUnusedHeaders(addedHeaders); _i < unused_2.length; _i++) {
                            var headerKey = unused_2[_i];
                            this.element.removeChild(this.getHeader(headerKey).getElement()), this.removeHeader(headerKey);
                        }
                    }, ColumnHeaderRenderer.prototype.render = function(items, level, firstVisibleIndex, renderingContext, viewportLeft, binder, navigator) {
                        for (var count = items.length, totalWidth = 0, i = firstVisibleIndex; i < count && (totalWidth += this.renderHeader(items[i], items, level, renderingContext, viewportLeft, binder, navigator), 
                        !renderingContext.done); i++);
                        return totalWidth;
                    }, ColumnHeaderRenderer.prototype.getHeight = function(level, rowSpan) {
                        for (var height = 0, i = level; i < level + rowSpan; i++) height += this.columnLevelHeightMeasureManager.getLevelHeight(i);
                        return height;
                    }, ColumnHeaderRenderer.prototype.renderHeader = function(item, items, level, renderingState, viewportLeft, childrenWidth, navigator) {
                        var header = [];
                        HeaderRendererUtil.getHeaderIndices(item, header, navigator);
                        var width, firstVisibleIndex = HeaderRendererUtil.getHeaderKey(header), header = this.getOrAddHeader(firstVisibleIndex);
                        if ((renderingState.addedHeaders[firstVisibleIndex] = header).build(this.element, childrenWidth.getColumnHeaderBinding(item, !1, this.isA11yTable), item, this.columnWidthResizeHandler, null, this.clickHandler, this.contextMenuHandler, this.interactionHandler, this.isA11yTable, !1), 
                        header.setTop(this.columnLevelHeightMeasureManager.getLevelTop(navigator.getLevel(item))), 
                        HeaderRendererUtil.ensureLevelContext(renderingState.levelsContext, level), navigator.isLeaf(item)) if (width = this.columnWidthMeasureManager.getColumnWidth(renderingState.currentLeafIndex), 
                        header.setLeft(renderingState.levelsContext[level].currentPosition), header.setWidth(width), 
                        renderingState.currentLeafIndex === renderingState.lastVisibledLeafIndex) renderingState.done = !0; else {
                            renderingState.currentLeafIndex++;
                            for (var l = level; l < renderingState.levelsContext.length; l++) renderingState.levelsContext[l].currentPosition += width;
                        } else {
                            firstVisibleIndex = void 0, firstVisibleIndex = renderingState.levelsContext[level].startItem === item ? navigator.getIndex(renderingState.levelsContext[level + 1].startItem) : 0, 
                            childrenWidth = this.render(navigator.getChildren(item), level + 1, firstVisibleIndex, renderingState, viewportLeft, childrenWidth, navigator);
                            header.setLeft(renderingState.levelsContext[level].currentPosition), width = renderingState.levelsContext[level].startItem === item && renderingState.levelsContext[level].startPosition === viewportLeft ? childrenWidth + renderingState.levelsContext[level + 1].startPosition - viewportLeft : childrenWidth, 
                            header.setWidth(width), renderingState.levelsContext[level].currentPosition += width;
                        }
                        return header.setHeight(this.getHeight(navigator.getLevel(item), pivotTable.PivotTableHierarchyNavigator.getHeaderSpan(item, navigator))), 
                        width;
                    }, ColumnHeaderRenderer.prototype.addHeader = function(headerKey) {
                        var header = new pivotTable.PivotTableHeader();
                        return this.headers[headerKey] = header;
                    }, ColumnHeaderRenderer.prototype.removeHeader = function(headerKey) {
                        delete this.headers[headerKey];
                    }, ColumnHeaderRenderer.prototype.getHeader = function(headerKey) {
                        return this.headers[headerKey];
                    }, ColumnHeaderRenderer.prototype.getOrAddHeader = function(headerKey) {
                        return this.getHeader(headerKey) || this.addHeader(headerKey);
                    }, ColumnHeaderRenderer.prototype.getUnusedHeaders = function(addedHeaders) {
                        var headerKey, unused = [];
                        for (headerKey in this.headers) addedHeaders[headerKey] || unused.push(headerKey);
                        return unused;
                    }, ColumnHeaderRenderer.prototype.getCellAt = function(header) {
                        header = this.getHeader(HeaderRendererUtil.getHeaderKey(header));
                        return this.isA11yTable ? header.getElement().firstChild : header.getElement();
                    }, ColumnHeaderRenderer;
                }();
                pivotTable.ColumnHeaderRenderer = CornerRenderer;
                CornerRenderer = function() {
                    function BodyCellRenderer(element, columnWidthMeasureManager, rowHeightMeasureManager, clickHandler, contextMenuHandler, interactionHandler, workScheduler) {
                        this.element = element, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                        this.rowHeightMeasureManager = rowHeightMeasureManager, this.clickHandler = clickHandler, 
                        this.contextMenuHandler = contextMenuHandler, this.interactionHandler = interactionHandler, 
                        this.workScheduler = workScheduler;
                    }
                    return BodyCellRenderer.prototype.removeRowPages = function(rowIndex) {
                        for (var columnIndex = 0; columnIndex < this.columnWidthMeasureManager.getPageColumns().length; columnIndex++) {
                            var page = this.getPage(rowIndex, columnIndex);
                            page && (this.element.removeChild(page.getElement()), this.removePage(rowIndex, columnIndex));
                        }
                    }, BodyCellRenderer.prototype.update = function(viewport, floatingRows, binder, rowNavigator, columnNavigator, defer) {
                        for (var left = 0, columnIndex = 0, _i = 0, _a = this.columnWidthMeasureManager.getPageColumns(); _i < _a.length; _i++) {
                            for (var pageColumn = _a[_i], top_2 = 0, rowIndex = 0, width = pageColumn.getWidth(), _b = 0, pageRows_2 = floatingRows ? [ this.rowHeightMeasureManager.getFloatingPageRow() ] : this.rowHeightMeasureManager.getPageRows(); _b < pageRows_2.length; _b++) {
                                var pageRow = pageRows_2[_b], height = pageRow.getHeight();
                                this.rectsOverlap(left, top_2, width, height, viewport.left, viewport.top, viewport.width, viewport.height) ? this.addBodyPage(viewport, rowIndex, columnIndex, left, top_2, width, height, pageRow, pageColumn, floatingRows, binder, rowNavigator, columnNavigator, defer) : this.getPage(rowIndex, columnIndex) && this.removeBodyPageAsync(viewport, rowIndex, columnIndex, left, top_2, width, height), 
                                top_2 += height, rowIndex++;
                            }
                            left += width, columnIndex++;
                        }
                    }, BodyCellRenderer.prototype.clear = function() {
                        this.element.innerHTML = "", this.pages = {};
                    }, BodyCellRenderer.prototype.resizeColumn = function(columnIndex) {
                        var key, pageColumnIndex = pivotTable.MeasureUtil.getPageIndex(columnIndex, pivotTable.PageColumnCount), index = columnIndex % pivotTable.PageColumnCount;
                        for (key in this.pages) {
                            var page = this.pages[key], pageColumn = this.columnWidthMeasureManager.getPageColumns()[page.columnIndex];
                            page.columnIndex === pageColumnIndex ? page.resizeColumn(index, pageColumn) : page.columnIndex > pageColumnIndex && (page.getElement().style.left = pivotTable.PivotTableControl.pixelUnits(this.columnWidthMeasureManager.getPageColumnLeft(pageColumn)));
                        }
                    }, BodyCellRenderer.prototype.resizeRows = function(startRowIndex, endRowIndex) {
                        var key, ranges = pivotTable.MeasureUtil.itemRangeToPageRange(startRowIndex, endRowIndex, pivotTable.PageRowCount);
                        for (key in this.pages) for (var page = this.pages[key], _i = 0, ranges_2 = ranges; _i < ranges_2.length; _i++) {
                            var range = ranges_2[_i];
                            if (range.pageIndex === page.rowIndex) {
                                this.resizePageRows(page, this.rowHeightMeasureManager.getPageRows()[range.pageIndex], range.startIndex, range.endIndex);
                                break;
                            }
                        }
                        for (key in this.pages) {
                            var page = this.pages[key], pageRow = this.rowHeightMeasureManager.getPageRows()[page.rowIndex];
                            page.getElement().style.top = pivotTable.PivotTableControl.pixelUnits(this.rowHeightMeasureManager.getPageRowTop(pageRow));
                        }
                    }, BodyCellRenderer.prototype.resizePageRows = function(pageElement, pageRow, startIndex, endIndex) {
                        pageElement = pageElement.getElement();
                        if (pageElement) {
                            for (var currentColumn = pageElement.firstChild; currentColumn; ) this.resizeCellsHeight(currentColumn, pageRow, startIndex, endIndex), 
                            currentColumn = currentColumn.nextSibling;
                            pageElement.style.height = pivotTable.PivotTableControl.pixelUnits(pageRow.getHeight());
                        }
                    }, BodyCellRenderer.prototype.resizeCellsHeight = function(columnElement, pageRow, startIndex, endIndex) {
                        var cell = columnElement.firstChild;
                        if (cell) {
                            for (var i = 0; i < startIndex; i++) if (!(cell = cell.nextSibling)) return;
                            for (i = startIndex; i <= endIndex; i++) if (cell.style.height = pivotTable.PivotTableControl.pixelUnits(pageRow.getRowHeights()[i]), 
                            !(cell = cell.nextSibling)) return;
                        }
                    }, BodyCellRenderer.prototype.addPage = function(rowIndex, columnIndex) {
                        var page = new pivotTable.PivotTableBodyPage(rowIndex, columnIndex);
                        return this.pages[this.getPageKey(rowIndex, columnIndex)] = page;
                    }, BodyCellRenderer.prototype.removePage = function(rowIndex, columnIndex) {
                        delete this.pages[this.getPageKey(rowIndex, columnIndex)];
                    }, BodyCellRenderer.prototype.getPage = function(rowIndex, columnIndex) {
                        return this.pages[this.getPageKey(rowIndex, columnIndex)];
                    }, BodyCellRenderer.prototype.getPageKey = function(rowIndex, columnIndex) {
                        return rowIndex.toString() + "_" + columnIndex.toString();
                    }, BodyCellRenderer.prototype.addBodyPage = function(viewport, rowIndex, columnIndex, left, top, width, height, pageRow, pageColumn, floatingRows, binder, rowNavigator, columnNavigator, defer) {
                        function updateCallback() {
                            var rowStartOffset, columnStartOffset;
                            _this.rectsOverlap(left, top, width, height, viewport.left, viewport.top, viewport.width, viewport.height) && (_this.getPage(rowIndex, columnIndex) || (rowStartOffset = _this.rowHeightMeasureManager.getPageRowStartIndex(pageRow), 
                            columnStartOffset = _this.columnWidthMeasureManager.getPageColumnStartIndex(pageColumn), 
                            -1 !== rowStartOffset && -1 !== columnStartOffset && _this.addPage(rowIndex, columnIndex).build(_this.element, rowStartOffset, columnStartOffset, _this.rowHeightMeasureManager, _this.columnWidthMeasureManager, pageRow, pageColumn, floatingRows, rowNavigator, columnNavigator, binder, _this.clickHandler, _this.contextMenuHandler, _this.interactionHandler)));
                        }
                        var _this = this;
                        defer ? this.workScheduler.scheduleAnimationFrameTask(updateCallback) : updateCallback();
                    }, BodyCellRenderer.prototype.removeBodyPageAsync = function(viewport, rowIndex, columnIndex, left, top, width, height) {
                        var _this = this;
                        this.workScheduler.scheduleAnimationFrameTask(function() {
                            var page;
                            _this.rectsOverlap(left, top, width, height, viewport.left, viewport.top, viewport.width, viewport.height) || (page = _this.getPage(rowIndex, columnIndex)) && (_this.element.removeChild(page.getElement()), 
                            _this.removePage(rowIndex, columnIndex));
                        });
                    }, BodyCellRenderer.prototype.rectsOverlap = function(left1, top1, width1, height1, left2, top2, width2, height2) {
                        return isIntersecting({
                            left: left1,
                            top: top1,
                            width: width1,
                            height: height1
                        }, {
                            left: left2,
                            top: top2,
                            width: width2,
                            height: height2
                        });
                    }, BodyCellRenderer.prototype.getCellAt = function(position) {
                        var page = this.getPage(Math.floor(position.rowIndex / pivotTable.PageRowCount), Math.floor(position.columnIndex / pivotTable.PageColumnCount));
                        return page.getCellAt(position.rowIndex % pivotTable.PageRowCount, position.columnIndex % pivotTable.PageColumnCount);
                    }, BodyCellRenderer;
                }();
                pivotTable.BodyCellRenderer = CornerRenderer;
                CornerRenderer = function() {
                    function TableExBodyCellRenderer(element, columnWidthMeasureManager, rowHeightMeasureManager, clickHandler, contextMenuHandler, interactionHandler, workScheduler, selectRowLabel) {
                        var _this = this;
                        this.element = element, this.columnWidthMeasureManager = columnWidthMeasureManager, 
                        this.rowHeightMeasureManager = rowHeightMeasureManager, this.clickHandler = clickHandler, 
                        this.contextMenuHandler = contextMenuHandler, this.interactionHandler = interactionHandler, 
                        this.workScheduler = workScheduler, this.selectRowLabel = selectRowLabel, this.viewSync = {}, 
                        this.clickHandler && this.element.addEventListener("click", function(event) {
                            var item = _this.getItemByElement(event.target);
                            item && _this.clickHandler(item, event);
                        }), this.contextMenuHandler && this.element.addEventListener("contextmenu", function(event) {
                            var item = _this.getItemByElement(event.target);
                            item && _this.contextMenuHandler(item, event);
                        }), this.element.addEventListener("change", function(rowIndex) {
                            rowIndex = d3.select(rowIndex.target).attr("checkbox-rowindex");
                            null != rowIndex && _this.clickHandler(void 0, void 0, +rowIndex);
                        });
                    }
                    return TableExBodyCellRenderer.prototype.update = function(viewport, isFooter, binder, rowNavigator, columnNavigator) {
                        var visibleRowRange, visibleColumnRange, _this = this, pageRows = pivotTable.RowMeasurementUtil.getVisibleRange(viewport.top, viewport.height, this.rowHeightMeasureManager, isFooter), pageColumns = pivotTable.ColumnMeasurementUtil.getVisibleRange(viewport.left, viewport.width, this.columnWidthMeasureManager);
                        pageRows && pageColumns && (visibleRowRange = [ pageRows.firstLeafIndex, pageRows.lastLeafIndex ], 
                        visibleColumnRange = [ pageColumns.firstLeafIndex, pageColumns.lastLeafIndex ], 
                        pageRows = isFooter ? [ this.rowHeightMeasureManager.getFloatingPageRow() ] : this.rowHeightMeasureManager.getPageRows(), 
                        pageColumns = this.columnWidthMeasureManager.getPageColumns(), this.renderMeta = {
                            viewport: viewport,
                            isFooter: isFooter,
                            binder: binder,
                            rowNavigator: rowNavigator,
                            columnNavigator: columnNavigator,
                            visibleRowRange: visibleRowRange,
                            visibleColumnRange: visibleColumnRange,
                            pageRows: pageRows,
                            pageColumns: pageColumns
                        }, this.updateRendering(), this.interactionHandler && (this.interactionHandler.isTooltipEnabledGeneric() && !this.isTooltipSet ? (this.interactionHandler.setTooltipDelegate(function(tooltipEventArgs) {
                            return _this.getItemByElement(tooltipEventArgs.context);
                        }, this.element), this.isTooltipSet = !0) : !this.interactionHandler.isTooltipEnabledGeneric() && this.isTooltipSet && (this.interactionHandler.removeTooltip(void 0, this.element), 
                        this.isTooltipSet = !1)));
                    }, TableExBodyCellRenderer.prototype.updateSelectionStyles = function() {
                        var rowRefColumn, self = this;
                        this.renderMeta.isFooter || (rowRefColumn = this.getRowReferenceColumn(this.renderMeta.columnNavigator, this.renderMeta.binder), 
                        d3.select(this.element).selectAll('[role="row"]').each(function() {
                            var _b = self.getRowIndex(this), _a = self.getRowWithReferenceTextCell(self.renderMeta.rowNavigator, self.renderMeta.rowNavigator.getHierarchyLeafAt(_b), rowRefColumn), _b = self.renderMeta.binder.getRowBinding(self.renderMeta.rowNavigator.getHierarchyLeafAt(_b), self.renderMeta.isFooter, self.selectRowLabel, _a);
                            d3.select(this).style("opacity", null !== (_a = _b.styleProperties.opacity) && void 0 !== _a ? _a : null).style("filter", null !== (_b = _b.styleProperties.filter) && void 0 !== _b ? _b : null);
                        }));
                    }, TableExBodyCellRenderer.prototype.resizeColumn = function(targetColumnIndex) {
                        var self, targetWidth, targetLeft, targetAriaColIndex;
                        this.renderMeta && (self = this, targetLeft = pivotTable.MeasureUtil.getPageIndex(targetColumnIndex, pivotTable.PageColumnCount), 
                        targetAriaColIndex = this.renderMeta.pageColumns[targetLeft], targetWidth = targetAriaColIndex.getColumnWidths()[targetColumnIndex % pivotTable.PageColumnCount], 
                        targetLeft = this.columnWidthMeasureManager.getPageColumnLeft(targetAriaColIndex) + _.sum(targetAriaColIndex.getColumnWidths().slice(0, targetColumnIndex % pivotTable.PageColumnCount)), 
                        targetAriaColIndex = this.getAriaColIndex(targetColumnIndex), d3.select(this.element).selectAll('[aria-colindex="' + targetAriaColIndex + '"]').style("width", pivotTable.PivotTableControl.pixelUnits(targetWidth)).style("margin-right", function() {
                            var marginRight = parseFloat(d3.select(this).style("padding-left")) + parseFloat(d3.select(this).style("padding-right"));
                            isNaN(marginRight);
                            marginRight = targetWidth - marginRight;
                            return marginRight < 0 ? pivotTable.PivotTableControl.pixelUnits(marginRight) : "";
                        }).style("position", null).style("left", null).style("float", "left").style("transform", "translateX(" + targetLeft + "px)"), 
                        d3.select(this.element).selectAll('[role="gridcell"]').filter(function() {
                            var columnIndex = self.getColumnIndex(this);
                            return targetColumnIndex < columnIndex;
                        }).style("position", null).style("left", null).style("float", "left").style("transform", "translateX(" + targetLeft + "px)"));
                    }, TableExBodyCellRenderer.prototype.resizeRows = function(startRowIndex, endRowIndex) {
                        if (this.renderMeta) {
                            for (var self = this, rowIndex = startRowIndex; rowIndex <= endRowIndex; rowIndex++) {
                                var ariaRowIndex = pivotTable.MeasureUtil.getPageIndex(rowIndex, pivotTable.PageRowCount), newHeight = this.renderMeta.pageRows[ariaRowIndex].getRowHeights()[rowIndex % pivotTable.PageRowCount], ariaRowIndex = this.getAriaRowIndex(rowIndex);
                                d3.select(this.element).select('[aria-rowindex="' + ariaRowIndex + '"]').style("height", pivotTable.PivotTableControl.pixelUnits(newHeight));
                            }
                            d3.select(this.element).selectAll('[role="row"]').style("top", function() {
                                var offsetTop = self.getRowIndex(this), pageTop = pivotTable.MeasureUtil.getPageIndex(offsetTop, pivotTable.PageRowCount), pageRow = self.renderMeta.pageRows[pageTop], pageTop = self.rowHeightMeasureManager.getPageRowTop(pageRow), offsetTop = _.sum(pageRow.getRowHeights().slice(0, offsetTop % pivotTable.PageRowCount));
                                return pivotTable.PivotTableControl.pixelUnits(pageTop + offsetTop);
                            });
                        }
                    }, TableExBodyCellRenderer.prototype.removeRowPages = function() {}, TableExBodyCellRenderer.prototype.clear = function() {
                        d3.select(this.element).html(""), this.viewSync = {}, this.renderMeta = void 0;
                    }, TableExBodyCellRenderer.prototype.getCellAt = function(ariaColIndex) {
                        var ariaRowIndex = this.getAriaRowIndex(ariaColIndex.rowIndex), ariaColIndex = this.getAriaColIndex(ariaColIndex.columnIndex);
                        return d3.select(this.element).select('[aria-rowindex="' + ariaRowIndex + '"] [aria-colindex="' + ariaColIndex + '"]').node();
                    }, TableExBodyCellRenderer.prototype.getItemByElement = function(bodyCell) {
                        bodyCell = jsCommon.FocusNavigationUtility.getFirstMatchingAncestor(bodyCell, function(element) {
                            return element.matches('[role="gridcell"]');
                        }, this.element, !0);
                        return bodyCell ? d3.select(bodyCell).datum() : void 0;
                    }, TableExBodyCellRenderer.prototype.updateRendering = function() {
                        var _this = this, rowGroupLocations = [], cellGroupLocations = [];
                        this.clearUnusedElements(), this.setGroupLocations(rowGroupLocations, cellGroupLocations), 
                        rowGroupLocations.forEach(function(rowGroupLocation) {
                            return _this.insertRowGroup(rowGroupLocation);
                        }), cellGroupLocations.forEach(function(cellGroupLocation) {
                            return _this.insertCellGroup(cellGroupLocation);
                        });
                    }, TableExBodyCellRenderer.prototype.clearUnusedElements = function() {
                        var rowIndex, self = this;
                        for (rowIndex in this.viewSync) if (+rowIndex < this.renderMeta.visibleRowRange[0] || +rowIndex > this.renderMeta.visibleRowRange[1]) delete this.viewSync[rowIndex]; else for (var columnIndex in this.viewSync[rowIndex]) (+columnIndex < this.renderMeta.visibleColumnRange[0] || +columnIndex > this.renderMeta.visibleColumnRange[1]) && delete this.viewSync[rowIndex][columnIndex];
                        d3.select(this.element).selectAll('[role="row"]').filter(function() {
                            var rowIndex = self.getRowIndex(this);
                            return rowIndex < self.renderMeta.visibleRowRange[0] || rowIndex > self.renderMeta.visibleRowRange[1];
                        }).remove(), d3.select(this.element).selectAll('[role="gridcell"]').filter(function() {
                            var columnIndex = self.getColumnIndex(this);
                            return 0 <= columnIndex && (columnIndex < self.renderMeta.visibleColumnRange[0] || columnIndex > self.renderMeta.visibleColumnRange[1]);
                        }).remove();
                    }, TableExBodyCellRenderer.prototype.setGroupLocations = function(rowGroupLocations, cellGroupLocations) {
                        for (var rowIndex = this.renderMeta.visibleRowRange[0]; rowIndex <= this.renderMeta.visibleRowRange[1]; rowIndex++) if (this.viewSync[rowIndex]) for (var isBuildingRowGroup = !1, isBuildingCellGroup = void 0, columnIndex = this.renderMeta.visibleColumnRange[0]; columnIndex <= this.renderMeta.visibleColumnRange[1]; columnIndex++) this.viewSync[rowIndex][columnIndex] ? isBuildingCellGroup = !1 : (isBuildingCellGroup ? _.last(cellGroupLocations).columnEnd++ : (cellGroupLocations.push({
                            rowIndex: rowIndex,
                            columnStart: columnIndex,
                            columnEnd: columnIndex
                        }), isBuildingCellGroup = !0), this.viewSync[rowIndex][columnIndex] = !0); else {
                            isBuildingRowGroup ? _.last(rowGroupLocations).rowEnd++ : (rowGroupLocations.push({
                                rowStart: rowIndex,
                                rowEnd: rowIndex
                            }), isBuildingRowGroup = !0), this.viewSync[rowIndex] = {};
                            for (var columnIndex = this.renderMeta.visibleColumnRange[0]; columnIndex <= this.renderMeta.visibleColumnRange[1]; columnIndex++) this.viewSync[rowIndex][columnIndex] = !0;
                        }
                    }, TableExBodyCellRenderer.prototype.insertRowGroup = function(rowGroupLocation) {
                        for (var prevSibling, rowElements = this.element.children, rowElementIndex = rowElements.length - 1; 0 <= rowElementIndex; rowElementIndex--) {
                            var siblingRowIndex = this.getRowIndex(rowElements[rowElementIndex]);
                            if (rowGroupLocation.rowStart > siblingRowIndex) {
                                prevSibling = rowElements[rowElementIndex];
                                break;
                            }
                        }
                        var cellItems = [], rowGroupBindings = this.getRowGroupBindings(rowGroupLocation.rowStart, rowGroupLocation.rowEnd, cellItems), rowGroupHead = prevSibling ? (prevSibling.insertAdjacentHTML("afterend", pivotTable.ElementBuilder.buildMultiple(rowGroupBindings)), 
                        prevSibling.nextElementSibling) : (this.element.insertAdjacentHTML("afterbegin", pivotTable.ElementBuilder.buildMultiple(rowGroupBindings)), 
                        _.first(this.element.children));
                        pivotTable.ElementBuilder.attachEventHandlersMultiple(rowGroupHead, rowGroupBindings), 
                        this.bindRowGroupData(rowGroupHead, cellItems);
                    }, TableExBodyCellRenderer.prototype.insertCellGroup = function(cellGroupLocation) {
                        for (var prevSibling, cellGroupBindings = this.getAriaRowIndex(cellGroupLocation.rowIndex), cellGroupHead = d3.select(this.element).select('[aria-rowindex="' + cellGroupBindings + '"]').node(), cellElements = d3.select(cellGroupHead).selectAll('[role="gridcell"]').nodes(), cellElementIndex = cellElements.length - 1; 0 <= cellElementIndex; cellElementIndex--) {
                            var siblingColumnIndex = this.getColumnIndex(cellElements[cellElementIndex]);
                            if (cellGroupLocation.columnStart > siblingColumnIndex) {
                                prevSibling = cellElements[cellElementIndex];
                                break;
                            }
                        }
                        var cellItems = [], cellGroupBindings = this.getCellGroupBindings(cellGroupLocation.rowIndex, cellGroupLocation.columnStart, cellGroupLocation.columnEnd, cellItems), cellGroupHead = prevSibling ? (prevSibling.insertAdjacentHTML("afterend", pivotTable.ElementBuilder.buildMultiple(cellGroupBindings)), 
                        prevSibling.nextElementSibling) : (cellGroupHead.insertAdjacentHTML("afterbegin", pivotTable.ElementBuilder.buildMultiple(cellGroupBindings)), 
                        _.first(cellGroupHead.children));
                        pivotTable.ElementBuilder.attachEventHandlersMultiple(cellGroupHead, cellGroupBindings), 
                        this.bindCellGroupData(cellGroupHead, cellItems);
                    }, TableExBodyCellRenderer.prototype.getRowGroupBindings = function(rowStart, rowEnd, cellItems) {
                        for (var rowGroupBindings = [], rowRefColumn = this.getRowReferenceColumn(this.renderMeta.columnNavigator, this.renderMeta.binder), rowIndex = rowStart; rowIndex <= rowEnd; rowIndex++) {
                            var rowBinding = this.renderMeta.pageRows[pivotTable.MeasureUtil.getPageIndex(rowIndex, pivotTable.PageRowCount)], cellGroupBindings = rowBinding.getRowHeights()[rowIndex % pivotTable.PageRowCount], _a = this.rowHeightMeasureManager.getPageRowTop(rowBinding) + _.sum(rowBinding.getRowHeights().slice(0, rowIndex % pivotTable.PageRowCount)), currentRow = this.renderMeta.isFooter ? this.renderMeta.rowNavigator.getFloatingHierarchyLeafAt(rowIndex) : this.renderMeta.rowNavigator.getHierarchyLeafAt(rowIndex), rowBinding = this.getRowWithReferenceTextCell(this.renderMeta.rowNavigator, currentRow, rowRefColumn), rowBinding = this.renderMeta.binder.getRowBinding(currentRow, this.renderMeta.isFooter, this.selectRowLabel, rowBinding);
                            rowBinding.attributes.role = "row", rowBinding.attributes["aria-rowindex"] = this.getAriaRowIndex(rowIndex).toString(), 
                            rowBinding.styleProperties.position = "absolute", rowBinding.styleProperties.height = pivotTable.PivotTableControl.pixelUnits(cellGroupBindings), 
                            rowBinding.styleProperties.top = pivotTable.PivotTableControl.pixelUnits(_a), rowBinding.styleProperties.width = "100%";
                            cellGroupBindings = this.getCellGroupBindings(rowIndex, this.renderMeta.visibleColumnRange[0], this.renderMeta.visibleColumnRange[1], cellItems);
                            (_a = rowBinding.children).push.apply(_a, cellGroupBindings), rowGroupBindings.push(rowBinding);
                        }
                        return rowGroupBindings;
                    }, TableExBodyCellRenderer.prototype.getRowReferenceColumn = function(columnNavigator, binder) {
                        if (binder.getRowReferenceQueryName) return columnNavigator.getColumnIndexFromQueryName(binder.getRowReferenceQueryName());
                    }, TableExBodyCellRenderer.prototype.getRowWithReferenceTextCell = function(rowNavigator, row, rowRefColumn) {
                        if (rowRefColumn) return rowNavigator.getIntersection(row, rowRefColumn);
                    }, TableExBodyCellRenderer.prototype.getCellGroupBindings = function(rowIndex, columnStart, columnEnd, cellItems) {
                        for (var cellGroupBindings = [], rowHeight = this.renderMeta.pageRows[pivotTable.MeasureUtil.getPageIndex(rowIndex, pivotTable.PageRowCount)].getRowHeights()[rowIndex % pivotTable.PageRowCount], columnIndex = columnStart; columnIndex <= columnEnd; columnIndex++) {
                            var offsetLeft = this.renderMeta.pageColumns[pivotTable.MeasureUtil.getPageIndex(columnIndex, pivotTable.PageColumnCount)], columnWidth = offsetLeft.getColumnWidths()[columnIndex % pivotTable.PageColumnCount], pageLeft = this.columnWidthMeasureManager.getPageColumnLeft(offsetLeft), offsetLeft = _.sum(offsetLeft.getColumnWidths().slice(0, columnIndex % pivotTable.PageColumnCount));
                            cellGroupBindings.push(this.getCellBinding(rowIndex, columnIndex, rowHeight, columnWidth, pageLeft + offsetLeft, cellItems));
                        }
                        return cellGroupBindings;
                    }, TableExBodyCellRenderer.prototype.getCellBinding = function(cellItem, columnIndex, cellBinding, columnWidth, marginRight, cellItems) {
                        var rowItem = this.renderMeta.isFooter ? this.renderMeta.rowNavigator.getFloatingHierarchyLeafAt(cellItem) : this.renderMeta.rowNavigator.getHierarchyLeafAt(cellItem), cellItem = this.renderMeta.columnNavigator.getHierarchyLeafAt(columnIndex), cellItem = this.renderMeta.rowNavigator.getIntersection(rowItem, cellItem), cellBinding = this.renderMeta.binder.getBodyCellBinding(cellItem, !1, cellBinding, columnWidth, !0);
                        cellBinding.attributes || (cellBinding.attributes = {}), cellBinding.styleProperties || (cellBinding.styleProperties = {}), 
                        cellBinding.attributes.role = "gridcell", cellBinding.attributes["aria-colindex"] = this.getAriaColIndex(columnIndex).toString(), 
                        cellBinding.attributes.tabindex = "0", cellBinding.styleProperties.position = "absolute", 
                        cellBinding.styleProperties["box-sizing"] = "border-box", cellBinding.styleProperties.height = "100%", 
                        cellBinding.styleProperties.width = pivotTable.PivotTableControl.pixelUnits(columnWidth), 
                        cellBinding.styleProperties.left = pivotTable.PivotTableControl.pixelUnits(marginRight);
                        marginRight = parseFloat(cellBinding.styleProperties["padding-left"]) + parseFloat(cellBinding.styleProperties["padding-right"]);
                        isNaN(marginRight);
                        marginRight = columnWidth - marginRight;
                        return marginRight < 0 && (cellBinding.styleProperties["margin-right"] = pivotTable.PivotTableControl.pixelUnits(marginRight)), 
                        cellItems.push(cellItem), cellBinding;
                    }, TableExBodyCellRenderer.prototype.bindRowGroupData = function(rowGroupHead, cellItems) {
                        for (var row = rowGroupHead, cellItemIndex = 0; cellItemIndex < cellItems.length; ) d3.select(row).selectAll('[role="gridcell"]:not([aria-colindex="1"])').each(function() {
                            d3.select(this).data([ cellItems[cellItemIndex] ]), cellItemIndex++;
                        }), row = row.nextElementSibling;
                    }, TableExBodyCellRenderer.prototype.bindCellGroupData = function(cellGroupHead, cellItems) {
                        for (var cell = cellGroupHead, _i = 0, cellItems_1 = cellItems; _i < cellItems_1.length; _i++) {
                            var cellItem = cellItems_1[_i];
                            d3.select(cell).data([ cellItem ]), cell = cell.nextElementSibling;
                        }
                    }, TableExBodyCellRenderer.prototype.getAriaRowIndex = function(rowIndex) {
                        return rowIndex + 2;
                    }, TableExBodyCellRenderer.prototype.getAriaColIndex = function(colIndex) {
                        return colIndex + 2;
                    }, TableExBodyCellRenderer.prototype.getRowIndex = function(ariaRowIndex) {
                        ariaRowIndex = +ariaRowIndex.getAttribute("aria-rowindex");
                        return isNaN(ariaRowIndex), ariaRowIndex - 2;
                    }, TableExBodyCellRenderer.prototype.getColumnIndex = function(ariaColIndex) {
                        ariaColIndex = +ariaColIndex.getAttribute("aria-colindex");
                        return isNaN(ariaColIndex), ariaColIndex - 2;
                    }, TableExBodyCellRenderer;
                }();
                pivotTable.TableExBodyCellRenderer = CornerRenderer;
                CornerRenderer = function() {
                    function CornerRenderer(element, columnLevelHeightMeasureManager, rowLevelWidthMeasureManager, columnLevelHeightResizeHandler, rowLevelWidthResizeHandler, clickHandler, contextMenuHandler, interactionHandler) {
                        this.element = element, this.columnLevelHeightMeasureManager = columnLevelHeightMeasureManager, 
                        this.rowLevelWidthMeasureManager = rowLevelWidthMeasureManager, this.columnLevelHeightResizeHandler = columnLevelHeightResizeHandler, 
                        this.rowLevelWidthResizeHandler = rowLevelWidthResizeHandler, this.clickHandler = clickHandler, 
                        this.contextMenuHandler = contextMenuHandler, this.interactionHandler = interactionHandler, 
                        this.headers = {};
                    }
                    return CornerRenderer.prototype.update = function(binder, rowNavigator, columnNavigator) {
                        for (var rowCount = rowNavigator.getHierarchyDepth(), columnCount = columnNavigator.getHierarchyDepth(), row = 0; row < rowCount; row++) for (var column = 0; column < columnCount; column++) this.renderHeader(row, column, binder, rowNavigator);
                    }, CornerRenderer.prototype.clear = function() {
                        this.element.innerHTML = "", this.headers = {};
                    }, CornerRenderer.prototype.renderHeader = function(height, top, width, header) {
                        var left = header.getCorner(height, top), header = HeaderRendererUtil.getHeaderKey([ height, top ]), header = this.getOrAddHeader(header), width = width.getCornerCellBinding(left, !1);
                        header.build(this.element, width, left, this.rowLevelWidthResizeHandler, this.columnLevelHeightResizeHandler, this.clickHandler, this.contextMenuHandler, this.interactionHandler, !1, !1);
                        width = this.rowLevelWidthMeasureManager.getLevelWidth(height), left = this.rowLevelWidthMeasureManager.getLevelLeft(height), 
                        height = this.columnLevelHeightMeasureManager.getLevelHeight(top), top = this.columnLevelHeightMeasureManager.getLevelTop(top);
                        header.setHeight(height), header.setWidth(width), header.setTop(top), header.setLeft(left);
                    }, CornerRenderer.prototype.addHeader = function(headerKey) {
                        var header = new pivotTable.PivotTableHeader();
                        return this.headers[headerKey] = header;
                    }, CornerRenderer.prototype.getHeader = function(headerKey) {
                        return this.headers[headerKey];
                    }, CornerRenderer.prototype.getOrAddHeader = function(headerKey) {
                        return this.getHeader(headerKey) || this.addHeader(headerKey);
                    }, CornerRenderer.prototype.getCellAt = function(header) {
                        header = this.headers[HeaderRendererUtil.getHeaderKey([ header.rowLevel, header.columnLevel ])];
                        return header.getElement();
                    }, CornerRenderer;
                }();
                pivotTable.CornerRenderer = CornerRenderer;
            }(controls.pivotTable || (controls.pivotTable = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(pivotTable) {
                var BrowserUtils = jsCommon.BrowserUtils, FocusManagerEventName = jsCommon.FocusManagerFocusEventName, PivotTableAttributeDelimiter = powerbi.visuals.PivotTableAttributeDelimiter;
                pivotTable.ScrollbarWidth = 9, pivotTable.SelectionIndicatorWidth = 4;
                var PivotTableRenderingMode;
                !function(PivotTableRenderingMode) {
                    PivotTableRenderingMode[PivotTableRenderingMode.Incremental = 0] = "Incremental", 
                    PivotTableRenderingMode[PivotTableRenderingMode.ClearRendering = 1] = "ClearRendering", 
                    PivotTableRenderingMode[PivotTableRenderingMode.ClearMeasurement = 2] = "ClearMeasurement";
                }(PivotTableRenderingMode = pivotTable.PivotTableRenderingMode || (pivotTable.PivotTableRenderingMode = {}));
                var PivotTableControl = function() {
                    function PivotTableControl(parent, sizeManager, options, isA11yTable, rowSelectionLabel, selectRowLabel, onVerticalScrollButtonClick, onHorizontalScrollButtonClick) {
                        var _this = this;
                        this.isA11yTable = isA11yTable, this.selectRowLabel = selectRowLabel, this.workScheduler = new powerbi.WorkScheduler(), 
                        this.sizeManager = sizeManager, this.isA11yTable ? parent.insertAdjacentHTML("beforeend", "<div style='position:relative' role='document'><button class='scrollUp' style='opacity: 0;'>Scroll up</button><button class='scrollDown' style='opacity: 0;'>Scroll down</button><button class='scrollLeft' style='opacity: 0;'>Scroll left</button><button class='scrollRight' style='opacity: 0;'>Scroll right</button><div role='grid' class='innerContainer' style='position:absolute;left:0;top:0;right:0;bottom:0'><div class='corner'></div><div role='row' class='columnHeaders' style='position:absolute;overflow:auto;right:0;top:0;-ms-overflow-style:none'><div role='columnheader' style='opacity:0'>" + rowSelectionLabel + "</div><div role='presentation'></div></div><div class='rowHeaders' style='position:absolute;overflow:auto;left:0;bottom:0;-ms-overflow-style:none'><div></div></div><div role='presentation' class='bodyCells' style='position:absolute;overflow:auto;left:0;top:0;right:0;bottom:0;-ms-overflow-style:none;box-sizing:border-box'><div role='presentation' style='position:absolute;overflow:hidden'></div></div><div class='floatingRowHeader' style='position:absolute;left:0'></div><div class='floatingBodyCells' style='position:absolute;overflow:auto;right:0;-ms-overflow-style:none'><div style='position:absolute;overflow:hidden'></div></div></div><div class='measureElement' style='position:absolute;left:0;top:0;visibility:hidden'></div></div>") : parent.insertAdjacentHTML("beforeend", "<div style='position:relative' tabindex='0' aria-label='Grid'><div class='innerContainer' style='position:absolute;left:0;top:0;right:0;bottom:0'><div class='corner' ></div><div class='columnHeaders' style='position:absolute;overflow:auto;right:0;top:0;-ms-overflow-style:none'><div></div></div><div class='rowHeaders' style='position:absolute;overflow:auto;left:0;bottom:0;-ms-overflow-style:none'><div></div></div><div class='bodyCells' style='position:absolute;overflow:auto;left:0;top:0;right:0;bottom:0;-ms-overflow-style:none;box-sizing:border-box'><div style='position:absolute;overflow:hidden'></div></div><div class='floatingRowHeader' style='position:absolute;left:0'></div><div class='floatingBodyCells' style='position:absolute;overflow:auto;right:0;-ms-overflow-style:none'><div></div></div></div><div class='measureElement' style='position:absolute;left:0;top:0;visibility:hidden'></div></div>"), 
                        this.element = parent.lastChild, this.innerContainer = this.element.querySelector(".innerContainer"), 
                        this.measureElement = this.element.querySelector(".measureElement"), this.cornerContainer = this.element.querySelector(".corner"), 
                        this.cornerContainer.setAttribute("drag-resize-disabled", "true"), this.columnHeaderContainer = this.element.querySelector(".columnHeaders"), 
                        this.isA11yTable ? this.innerColumnHeaderContainer = this.columnHeaderContainer.children[1] : this.innerColumnHeaderContainer = this.columnHeaderContainer.firstChild, 
                        this.innerColumnHeaderContainer.setAttribute("drag-resize-disabled", "true"), this.rowHeaderContainer = this.element.querySelector(".rowHeaders"), 
                        this.innerRowHeaderContainer = this.rowHeaderContainer.firstChild, this.innerRowHeaderContainer.setAttribute("drag-resize-disabled", "true"), 
                        this.bodyCellContainer = this.element.querySelector(".bodyCells"), this.innerBodyCellContainer = this.bodyCellContainer.firstChild, 
                        this.floatingRowHeaderContainer = this.element.querySelector(".floatingRowHeader"), 
                        this.floatingBodyCellContainer = this.element.querySelector(".floatingBodyCells"), 
                        this.innerFloatingBodyCellContainer = this.floatingBodyCellContainer.firstChild, 
                        d3.select(this.element).select(".scrollUp").on("click", function() {
                            null !== (visibleRowRange = _this.rowScrollbar) && void 0 !== visibleRowRange && visibleRowRange.scrollPageUp();
                            var visibleRowRange = _this.getViewport(), visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleRowRange.top, visibleRowRange.height, _this.rowHeightMeasureManager);
                            onVerticalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                        }), d3.select(this.element).select(".scrollDown").on("click", function() {
                            null !== (visibleRowRange = _this.rowScrollbar) && void 0 !== visibleRowRange && visibleRowRange.scrollPageDown();
                            var visibleRowRange = _this.getViewport(), visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(visibleRowRange.top, visibleRowRange.height, _this.rowHeightMeasureManager);
                            onVerticalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                        }), d3.select(this.element).select(".scrollLeft").on("click", function() {
                            null !== (visibleRowRange = _this.columnScrollbar) && void 0 !== visibleRowRange && visibleRowRange.scrollPageUp();
                            var visibleRowRange = _this.getViewport(), visibleRowRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(visibleRowRange.left, visibleRowRange.width, _this.columnWidthMeasureManager);
                            onHorizontalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                        }), d3.select(this.element).select(".scrollRight").on("click", function() {
                            null !== (visibleRowRange = _this.columnScrollbar) && void 0 !== visibleRowRange && visibleRowRange.scrollPageDown();
                            var visibleRowRange = _this.getViewport(), visibleRowRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(visibleRowRange.left, visibleRowRange.width, _this.columnWidthMeasureManager);
                            onHorizontalScrollButtonClick(visibleRowRange.firstLeafIndex, visibleRowRange.lastLeafIndex);
                        }), this.options = options, this.initializeContainersForScrolling(this.options.scrollingEnabled), 
                        this.initializeScrollbars(), this.options.whitespaceClickHandler && this.innerContainer.addEventListener("click", function(mouseEvent) {
                            return _this.onClick(mouseEvent);
                        }), this.options.columnResizingEnabled && (this.columnWidthResizeHandler = new pivotTable.ColumnWidthResizeHandler(this)), 
                        this.options.rowLevelResizingEnabled && (this.rowLevelWidthResizeHandler = new pivotTable.RowLevelWidthResizeHandler(this)), 
                        isA11yTable ? $(this.element).on(FocusManagerEventName, function() {
                            return _this.onFocusManagerEnter();
                        }) : ($(this.element).on(FocusManagerEventName, function() {
                            return _this.onFocus();
                        }), this.element.addEventListener("blur", function(event) {
                            return _this.onBlur(event);
                        })), this.element.addEventListener("keydown", function(event) {
                            return _this.onKeyDown(event);
                        }), this.focusManager = new pivotTable.PivotTableFocusManager(function() {
                            return _this.onFocusChanged();
                        }, this.isA11yTable, this.columnHeaderContainer, this.bodyCellContainer, this.floatingBodyCellContainer), 
                        this.setSteppedLayout(!1);
                    }
                    return PivotTableControl.prototype.onFocusManagerEnter = function() {
                        d3.select(this.element).classed("showFocus", !0), this.focusManager.updateFocus(), 
                        this.getFocusedCell(this.focusManager.CurrentFocus).focus();
                    }, PivotTableControl.prototype.onFocusManagerExit = function() {
                        d3.select(this.element).classed("showFocus", !1);
                    }, PivotTableControl.prototype.onFocus = function() {
                        this.hasFocus = !0, this.focusManager.initialize(this.isA11yTable);
                    }, PivotTableControl.prototype.onBlur = function(_event) {
                        this.hasFocus = !1, this.clearFocusStyle();
                    }, PivotTableControl.prototype.onKeyDown = function(keyboardEvent) {
                        if (this.isA11yTable || this.hasFocus) {
                            this.isA11yTable && this.focusManager.updateFocus();
                            var code = keyboardEvent.code || keyboardEvent.key, hasShift = keyboardEvent.shiftKey, hasCtrl = BrowserUtils.isCtrlOrMeta(keyboardEvent), hasAlt = keyboardEvent.altKey, _a = this.isA11yTable;
                            if ("Escape" === code || "Esc" === code) return this.hasFocus = !1, void this.onFocusManagerExit();
                            if ("ArrowRight" === code || "Right" === code) return keyboardEvent.stopPropagation(), 
                            keyboardEvent.preventDefault(), void (hasShift ? this.options.rowHeaderExpandCollapseHandler && this.focusManager.CurrentFocus.rowHeader && 1 === this.rowNavigator.getExpansionState(this.focusManager.CurrentFocus.item) && this.options.rowHeaderExpandCollapseHandler(this.focusManager.CurrentFocus.item, !1) : this.focusManager.moveFocus("right", hasCtrl, _a));
                            if ("ArrowLeft" === code || "Left" === code) return keyboardEvent.stopPropagation(), 
                            keyboardEvent.preventDefault(), void (hasShift ? this.options.rowHeaderExpandCollapseHandler && this.focusManager.CurrentFocus.rowHeader && 0 === this.rowNavigator.getExpansionState(this.focusManager.CurrentFocus.item) && this.options.rowHeaderExpandCollapseHandler(this.focusManager.CurrentFocus.item, !0) : this.focusManager.moveFocus("left", hasCtrl, _a));
                            if ("ArrowUp" === code || "Up" === code) return keyboardEvent.stopPropagation(), 
                            keyboardEvent.preventDefault(), void (_a && hasShift && !hasCtrl ? (this.selectFocus(keyboardEvent), 
                            this.focusManager.moveFocus("up", hasCtrl, _a), this.selectFocus(keyboardEvent)) : this.focusManager.moveFocus("up", hasCtrl, _a));
                            if ("ArrowDown" === code || "Down" === code) return keyboardEvent.stopPropagation(), 
                            keyboardEvent.preventDefault(), void (_a && hasShift && !hasCtrl ? (this.selectFocus(keyboardEvent), 
                            this.focusManager.moveFocus("down", hasCtrl, _a), this.selectFocus(keyboardEvent)) : this.focusManager.moveFocus("down", hasCtrl, _a));
                            if (_a) {
                                if ("Home" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                                void this.focusManager.moveFocus("home", hasCtrl, _a);
                                if ("End" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                                void this.focusManager.moveFocus("end", hasCtrl, _a);
                                if (this.focusManager.CurrentFocus && this.focusManager.CurrentFocus.bodyCell) {
                                    if ("PageDown" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                                    void this.focusManager.moveFocus("pagedown", hasCtrl, _a, this.getNumberOfVisibleRows());
                                    if ("PageUp" === code) return keyboardEvent.stopPropagation(), keyboardEvent.preventDefault(), 
                                    void this.focusManager.moveFocus("pageup", hasCtrl, _a, this.getNumberOfVisibleRows());
                                }
                            }
                            if ("F10" !== code || !hasShift) return "Enter" === code || "Space" === code || "Spacebar" === code || " " === code ? (keyboardEvent.preventDefault(), 
                            keyboardEvent.stopPropagation(), void this.selectFocus(keyboardEvent)) : ("KeyO" === code && hasCtrl && hasAlt && this.activateCellContent(), 
                            ("KeyC" === code || "c" === code) && hasCtrl && hasShift ? (keyboardEvent.stopPropagation(), 
                            keyboardEvent.preventDefault(), void this.options.whitespaceClickHandler(null)) : void ("KeyH" !== code && "h" !== code || !hasCtrl || (keyboardEvent.stopPropagation(), 
                            keyboardEvent.preventDefault(), _a ? document.activeElement.dispatchEvent(new KeyboardEvent(keyboardEvent.type, keyboardEvent)) : null !== (_a = this.focusedElement) && void 0 !== _a && _a.dispatchEvent(new KeyboardEvent(keyboardEvent.type, keyboardEvent)))));
                            hasCtrl || (keyboardEvent.preventDefault(), keyboardEvent.stopPropagation(), this.showContextMenuForFocus(keyboardEvent));
                        }
                    }, PivotTableControl.prototype.notifyVisual = function(focus) {
                        focus.bodyCell && this.options.bodyCellFocusHandler ? this.options.bodyCellFocusHandler(focus.item, focus.bodyCell.rowIndex) : focus.columnHeader && this.options.columnHeaderFocusHandler ? this.options.columnHeaderFocusHandler(focus.item) : focus.rowHeader && this.options.rowHeaderFocusHandler ? this.options.rowHeaderFocusHandler(focus.item) : focus.cornerCell && this.options.cornerCellFocusHandler ? this.options.cornerCellFocusHandler(focus.item) : focus.floatingBodyCell && this.options.bodyCellFocusHandler ? this.options.bodyCellFocusHandler(focus.item) : void 0 !== focus.floatingRowHeader && this.options.rowHeaderFocusHandler && this.options.rowHeaderFocusHandler(focus.item);
                    }, PivotTableControl.prototype.setAsFocus = function(rowIndex, columnIndex, section) {
                        this.focusManager.setAsFocus(rowIndex, columnIndex, section);
                    }, PivotTableControl.prototype.onFocusChanged = function() {
                        var _this = this, focus = this.focusManager.CurrentFocus;
                        this.notifyVisual(focus), this.clearFocusStyle();
                        var targetRowIndex, alignedRow, alignedColumn, rowsRange, rowScrollOffset, afterScroll, columnsRange = this.getBodyCellViewPort();
                        focus.bodyCell ? (0 <= focus.bodyCell.columnIndex && (rowScrollOffset = focus.bodyCell.columnIndex), 
                        targetRowIndex = focus.bodyCell.rowIndex) : focus.rowHeader ? targetRowIndex = pivotTable.PivotTableHierarchyNavigator.getFirstVisualLeafIndex(focus.item, this.rowNavigator) : focus.columnHeader ? rowScrollOffset = pivotTable.PivotTableHierarchyNavigator.getFirstVisualLeafIndex(focus.item, this.columnNavigator) : focus.floatingBodyCell && (rowScrollOffset = focus.floatingBodyCell.columnIndex), 
                        void 0 === targetRowIndex || !this.rowScrollbar.visible || (rowsRange = pivotTable.RowMeasurementUtil.getVisibleRange(columnsRange.top, columnsRange.height, this.rowHeightMeasureManager)) && (targetRowIndex <= rowsRange.firstLeafIndex ? alignedRow = {
                            rowIndex: targetRowIndex,
                            visibleHeight: Number.MAX_VALUE,
                            alignBottom: !1
                        } : targetRowIndex >= rowsRange.lastLeafIndex && (alignedRow = {
                            rowIndex: targetRowIndex,
                            visibleHeight: Number.MAX_VALUE,
                            alignBottom: !0
                        })), void 0 === rowScrollOffset || !this.columnScrollbar.visible || (columnsRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(columnsRange.left, columnsRange.width, this.columnWidthMeasureManager)) && (rowScrollOffset <= columnsRange.firstLeafIndex ? alignedColumn = {
                            columnIndex: rowScrollOffset,
                            visibleWidth: Number.MAX_VALUE,
                            alignRight: !1
                        } : rowScrollOffset >= columnsRange.lastLeafIndex && (alignedColumn = {
                            columnIndex: rowScrollOffset,
                            visibleWidth: Number.MAX_VALUE,
                            alignRight: !0
                        })), this.isA11yTable ? (afterScroll = rowScrollOffset = void 0, alignedRow && (rowScrollOffset = pivotTable.RowMeasurementUtil.getOffset(alignedRow, this.rowHeightMeasureManager), 
                        alignedRow.alignBottom && (rowScrollOffset -= this.rowScrollbar.viewSize)), alignedColumn && (afterScroll = pivotTable.ColumnMeasurementUtil.getOffset(alignedColumn, this.columnWidthMeasureManager), 
                        alignedColumn.alignRight && (afterScroll -= this.columnScrollbar.viewSize)), (alignedRow || alignedColumn) && this.scrollTo(rowScrollOffset, afterScroll), 
                        this.getFocusedCell(focus).focus()) : (afterScroll = function() {
                            _this.rebuildBodyPagesSync(), _this.focusedElement = _this.getFocusedCell(focus), 
                            _this.focusedElement, _this.setFocusStyle();
                        }, alignedRow || alignedColumn ? this.makeVisible(PivotTableRenderingMode.Incremental, alignedRow, alignedColumn, afterScroll) : afterScroll());
                    }, PivotTableControl.prototype.setFocusStyle = function() {
                        this.hasFocus && this.focusedElement && this.focusedElement.classList.add("hasFocus");
                    }, PivotTableControl.prototype.clearFocusStyle = function() {
                        this.focusedElement && this.focusedElement.classList.remove("hasFocus");
                    }, PivotTableControl.prototype.getFocusedCell = function(focus) {
                        if (focus.bodyCell) return this.bodyCellRenderer.getCellAt(focus.bodyCell);
                        if (focus.columnHeader) return this.columnHeaderRenderer.getCellAt(focus.columnHeader);
                        if (focus.rowHeader) {
                            var hierarchyIndices = [];
                            return pivotTable.HeaderRendererUtil.getHeaderIndices(focus.item, hierarchyIndices, this.rowNavigator), 
                            this.rowHeaderRenderer.getCellAt(hierarchyIndices);
                        }
                        return focus.cornerCell ? this.cornerRenderer.getCellAt(focus.cornerCell) : focus.floatingBodyCell ? this.floatingBodyCellRenderer.getCellAt(focus.floatingBodyCell) : void 0 !== focus.floatingRowHeader ? this.floatingRowHeaderRenderer.getCellAt([ focus.floatingRowHeader ]) : void 0;
                    }, PivotTableControl.prototype.getCurrentFocusBoundingRect = function() {
                        var rect = this.isA11yTable ? document.activeElement : this.focusedElement;
                        if (rect) {
                            rect = rect.getBoundingClientRect();
                            return {
                                top: rect.top,
                                left: rect.left,
                                width: rect.width,
                                height: rect.height
                            };
                        }
                        return {
                            top: 0,
                            left: 0,
                            width: 0,
                            height: 0
                        };
                    }, PivotTableControl.prototype.selectFocus = function(mouseEvent) {
                        var currentFocus = this.focusManager.CurrentFocus, item = currentFocus.item, mouseEvent = this.createMouseEvent(mouseEvent);
                        currentFocus.bodyCell ? this.options.bodyCellClickHandler && this.options.bodyCellClickHandler(item, mouseEvent, currentFocus.bodyCell.rowIndex) : currentFocus.floatingBodyCell ? this.options.bodyCellClickHandler && this.options.bodyCellClickHandler(item, mouseEvent) : currentFocus.rowHeader || void 0 !== currentFocus.floatingRowHeader ? this.options.rowHeaderClickHandler && this.options.rowHeaderClickHandler(item, mouseEvent) : currentFocus.columnHeader ? this.options.columnHeaderClickHandler && this.options.columnHeaderClickHandler(item, mouseEvent) : currentFocus.cornerCell && this.options.cornerCellClickHandler && this.options.cornerCellClickHandler(item, mouseEvent);
                    }, PivotTableControl.prototype.activateCellContent = function() {
                        var mouseEvent = this.focusManager.CurrentFocus, element = this.isA11yTable ? document.activeElement : this.focusedElement;
                        element && mouseEvent && this.options.cellContentActivationHandler && (mouseEvent = this.createSimpleMouseClickEvent(), 
                        this.options.cellContentActivationHandler(element, mouseEvent));
                    }, PivotTableControl.prototype.createSimpleMouseClickEvent = function() {
                        var elementRect = this.getCurrentFocusBoundingRect();
                        return new MouseEvent("click", {
                            clientX: elementRect.left,
                            clientY: elementRect.top,
                            ctrlKey: !1,
                            metaKey: !1,
                            shiftKey: !1,
                            altKey: !1
                        });
                    }, PivotTableControl.prototype.createMouseEvent = function(keyboardEvent) {
                        var elementRect = this.getCurrentFocusBoundingRect();
                        return new MouseEvent("click", {
                            clientX: elementRect.left,
                            clientY: elementRect.top,
                            ctrlKey: keyboardEvent.ctrlKey,
                            metaKey: keyboardEvent.metaKey,
                            shiftKey: keyboardEvent.shiftKey,
                            altKey: keyboardEvent.altKey
                        });
                    }, PivotTableControl.prototype.showContextMenuForFocus = function(mouseEvent) {
                        var item, elementRect, currentFocus = this.focusManager.CurrentFocus;
                        -1 !== (null === (elementRect = currentFocus.bodyCell) || void 0 === elementRect ? void 0 : elementRect.columnIndex) && (currentFocus && currentFocus.item, 
                        item = currentFocus.item, elementRect = this.getCurrentFocusBoundingRect(), mouseEvent = new MouseEvent("contextmenu", {
                            clientX: elementRect.left,
                            clientY: elementRect.top,
                            ctrlKey: mouseEvent.ctrlKey,
                            metaKey: mouseEvent.metaKey
                        }), currentFocus.bodyCell || currentFocus.floatingBodyCell ? this.options.bodyCellContextMenuHandler && this.options.bodyCellContextMenuHandler(item, mouseEvent) : currentFocus.rowHeader || void 0 !== currentFocus.floatingRowHeader ? this.options.rowHeaderContextMenuHandler && this.options.rowHeaderContextMenuHandler(item, mouseEvent) : currentFocus.columnHeader ? this.options.columnHeaderContextMenuHandler && this.options.columnHeaderContextMenuHandler(item, mouseEvent) : currentFocus.cornerCell && this.options.cornerCellContextMenuHandler && this.options.cornerCellContextMenuHandler(item, mouseEvent));
                    }, PivotTableControl.prototype.initializeContainersForScrolling = function(scrollingEnabled) {
                        var _this = this;
                        scrollingEnabled ? (this.bodyCellContainer.addEventListener("scroll", function() {
                            return _this.onBodyCellContainerScroll();
                        }), this.columnHeaderContainer.addEventListener("scroll", function() {
                            return _this.onColumnHeaderContainerScroll();
                        }), this.rowHeaderContainer.addEventListener("scroll", function() {
                            return _this.onRowHeaderContainerScroll();
                        }), this.floatingBodyCellContainer.addEventListener("scroll", function() {
                            return _this.onFloatingBodyCellContainerScroll();
                        }), this.columnHeaderContainer.addEventListener("wheel", function(e) {
                            return _this.onWheel(e);
                        }), this.cornerContainer.addEventListener("wheel", function(e) {
                            return _this.onWheel(e);
                        }), this.floatingRowHeaderContainer.addEventListener("wheel", function(e) {
                            return _this.onWheel(e);
                        }), this.floatingBodyCellContainer.addEventListener("wheel", function(e) {
                            return _this.onWheel(e);
                        }), BrowserUtils.isFirefox() && (this.columnHeaderContainer.style.overflow = this.rowHeaderContainer.style.overflow = this.bodyCellContainer.style.overflow = this.floatingBodyCellContainer.style.overflow = "-moz-scrollbars-none", 
                        this.columnHeaderContainer.style["scrollbar-width"] = this.rowHeaderContainer.style["scrollbar-width"] = this.bodyCellContainer.style["scrollbar-width"] = this.floatingBodyCellContainer.style["scrollbar-width"] = "none")) : this.columnHeaderContainer.style.overflow = this.bodyCellContainer.style.overflow = this.rowHeaderContainer.style.overflow = this.floatingBodyCellContainer.style.overflow = "hidden";
                    }, PivotTableControl.prototype.onBodyCellContainerScroll = function() {
                        this.scriptUpdatedBodyVerticalToggle ? this.scriptUpdatedBodyVerticalToggle = !1 : (this.scriptUpdatedRowToggle = !0, 
                        this.rowScrollbar.viewMin = this.rowHeaderContainer.scrollTop = this.bodyCellContainer.scrollTop), 
                        this.scriptUpdatedBodyHorizontalToggle ? this.scriptUpdatedBodyHorizontalToggle = !1 : (this.scriptUpdatedColumnToggle = !0, 
                        this.scriptUpdatedFloatingBodyToggle = !0, this.columnScrollbar.viewMin = this.columnHeaderContainer.scrollLeft = this.floatingBodyCellContainer.scrollLeft = this.bodyCellContainer.scrollLeft), 
                        (this.scriptUpdatedRowToggle || this.scriptUpdatedColumnToggle) && this.refreshScrollbarsAndRender();
                    }, PivotTableControl.prototype.onColumnHeaderContainerScroll = function() {
                        this.scriptUpdatedColumnToggle ? this.scriptUpdatedColumnToggle = !1 : (this.scriptUpdatedBodyHorizontalToggle = !0, 
                        this.scriptUpdatedFloatingBodyToggle = !0, this.columnScrollbar.viewMin = this.bodyCellContainer.scrollLeft = this.floatingBodyCellContainer.scrollLeft = this.columnHeaderContainer.scrollLeft, 
                        this.refreshScrollbarsAndRender());
                    }, PivotTableControl.prototype.onRowHeaderContainerScroll = function() {
                        this.scriptUpdatedRowToggle ? this.scriptUpdatedRowToggle = !1 : (this.scriptUpdatedBodyVerticalToggle = !0, 
                        this.rowScrollbar.viewMin = this.bodyCellContainer.scrollTop = this.rowHeaderContainer.scrollTop, 
                        this.refreshScrollbarsAndRender());
                    }, PivotTableControl.prototype.onFloatingBodyCellContainerScroll = function() {
                        this.scriptUpdatedFloatingBodyToggle ? this.scriptUpdatedFloatingBodyToggle = !1 : (this.scriptUpdatedBodyHorizontalToggle = !0, 
                        this.scriptUpdatedColumnToggle = !0, this.columnScrollbar.viewMin = this.bodyCellContainer.scrollLeft = this.columnHeaderContainer.scrollLeft = this.floatingBodyCellContainer.scrollLeft, 
                        this.refreshScrollbarsAndRender());
                    }, PivotTableControl.prototype.scrollTo = function(rowScrollOffset, columnScrollOffset) {
                        null != rowScrollOffset && (this.rowHeaderContainer.scrollTop = this.bodyCellContainer.scrollTop = rowScrollOffset), 
                        null != columnScrollOffset && (this.columnHeaderContainer.scrollLeft = this.floatingBodyCellContainer.scrollLeft = this.bodyCellContainer.scrollLeft = columnScrollOffset), 
                        this.rowScrollbar.viewMin = Math.max(this.rowHeaderContainer.scrollTop, this.bodyCellContainer.scrollTop), 
                        this.columnScrollbar.viewMin = Math.max(this.columnHeaderContainer.scrollLeft, this.floatingBodyCellContainer.scrollLeft, this.bodyCellContainer.scrollLeft), 
                        this.render(PivotTableRenderingMode.Incremental);
                    }, PivotTableControl.prototype.onWheel = function(e) {
                        this.rowScrollbar.visible && e.deltaY && this.rowScrollbar.onMouseWheel(-e.deltaY);
                    }, PivotTableControl.prototype.onClick = function(mouseEvent) {
                        var coordinates, contentWidth = this.rowLevelWidthMeasureManager.getHeadersWidth() + this.columnWidthMeasureManager.getColumnsWidth(), contentHeight = this.columnLevelHeightMeasureManager.getHeadersHeight() + this.rowHeightMeasureManager.getRowsHeight() + this.rowHeightMeasureManager.getFloatingRowHeights();
                        contentWidth >= this.width && contentHeight >= this.height || ((coordinates = controls.HTMLElementUtils.getRelativeMouseCoordinates(this.element, mouseEvent)).x > contentWidth || coordinates.y > contentHeight) && this.options.whitespaceClickHandler(mouseEvent);
                    }, PivotTableControl.prototype.initializeScrollbars = function() {
                        var _this = this;
                        this.columnScrollbar = new controls.HorizontalScrollbar(this.element, 0), this.columnScrollbar.smallIncrement = 20, 
                        this.columnScrollbar.min = 0, this.columnScrollbar.height = PivotTableControl.pixelUnits(pivotTable.ScrollbarWidth), 
                        this.columnScrollbar.element.style.position = "absolute", this.columnScrollbar.element.style.left = "0", 
                        this.columnScrollbar.element.style.bottom = "0", this.columnScrollbar.element.style.right = PivotTableControl.pixelUnits(pivotTable.ScrollbarWidth), 
                        this.columnScrollbar._onscroll.push(function(e) {
                            return _this.onHorizontalScroll();
                        }), this.rowScrollbar = new controls.VerticalScrollbar(this.element, 0), this.rowScrollbar.smallIncrement = 20, 
                        this.rowScrollbar.min = 0, this.rowScrollbar.width = PivotTableControl.pixelUnits(pivotTable.ScrollbarWidth), 
                        this.rowScrollbar.element.style.position = "absolute", this.rowScrollbar.element.style.right = "0", 
                        this.rowScrollbar.element.style.top = "0", this.rowScrollbar.element.style.bottom = PivotTableControl.pixelUnits(pivotTable.ScrollbarWidth), 
                        this.rowScrollbar._onscroll.push(function(e) {
                            return _this.onVerticalScroll();
                        }), this.rowScrollbar.element.setAttribute("aria-hidden", "true"), this.columnScrollbar.element.setAttribute("aria-hidden", "true"), 
                        this.scriptUpdatedBodyHorizontalToggle = !1, this.scriptUpdatedBodyVerticalToggle = !1, 
                        this.scriptUpdatedColumnToggle = !1, this.scriptUpdatedRowToggle = !1;
                    }, PivotTableControl.prototype.refreshScrollbarsAndRender = function() {
                        var _this = this;
                        this.isA11yTable && this.skipNextScroll ? this.skipNextScroll = !1 : (this.rowScrollbar.refresh(), 
                        this.columnScrollbar.refresh(), this.options.onScroll && this.options.onScroll(), 
                        this.isA11yTable ? this.render(PivotTableRenderingMode.Incremental) : this.workScheduler.scheduleAnimationFrameTask(function() {
                            return _this.render(PivotTableRenderingMode.Incremental);
                        }));
                    }, PivotTableControl.prototype.setSteppedLayout = function(steppedLayout) {
                        steppedLayout !== this.steppedLayout && (this.steppedLayout = steppedLayout, this.columnWidthMeasureManager = new pivotTable.ColumnWidthMeasureManager(this.measureElement, this.sizeManager), 
                        this.steppedLayout ? (this.rowLevelWidthMeasureManager = new pivotTable.SteppedRowLevelWidthMeasureManager(this.measureElement, this.sizeManager), 
                        this.rowHeightMeasureManager = new pivotTable.SteppedRowHeightMeasureManager(this.measureElement, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.sizeManager)) : (this.rowLevelWidthMeasureManager = new pivotTable.BlockedRowLevelWidthMeasureManager(this.measureElement, this.sizeManager), 
                        this.rowHeightMeasureManager = new pivotTable.BlockedRowHeightMeasureManager(this.measureElement, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.sizeManager)), 
                        this.columnLevelHeightMeasureManager = new pivotTable.ColumnLevelHeightMeasureManager(this.measureElement, this.columnWidthMeasureManager, this.rowLevelWidthMeasureManager, this.sizeManager), 
                        this.steppedLayout ? (this.rowHeaderRenderer = new pivotTable.SteppedRowHeaderRenderer(this.innerRowHeaderContainer, this.rowHeightMeasureManager, this.rowLevelWidthMeasureManager, this.rowHeightResizeHandler, this.options.rowHeaderClickHandler, this.options.rowHeaderContextMenuHandler, this.options.rowHeaderInteractionHandler, this.isA11yTable), 
                        this.floatingRowHeaderRenderer = new pivotTable.SteppedRowHeaderRenderer(this.floatingRowHeaderContainer, this.rowHeightMeasureManager, this.rowLevelWidthMeasureManager, this.rowHeightResizeHandler, this.options.rowHeaderClickHandler, this.options.rowHeaderContextMenuHandler, this.options.rowHeaderInteractionHandler, this.isA11yTable)) : (this.rowHeaderRenderer = new pivotTable.BlockedRowHeaderRenderer(this.innerRowHeaderContainer, this.rowHeightMeasureManager, this.rowLevelWidthMeasureManager, this.rowHeightResizeHandler, this.options.rowHeaderClickHandler, this.options.rowHeaderContextMenuHandler, this.options.rowHeaderInteractionHandler, this.isA11yTable), 
                        this.floatingRowHeaderRenderer = new pivotTable.BlockedRowHeaderRenderer(this.floatingRowHeaderContainer, this.rowHeightMeasureManager, this.rowLevelWidthMeasureManager, this.rowHeightResizeHandler, this.options.rowHeaderClickHandler, this.options.rowHeaderContextMenuHandler, this.options.rowHeaderInteractionHandler, this.isA11yTable)), 
                        this.columnHeaderRenderer = new pivotTable.ColumnHeaderRenderer(this.innerColumnHeaderContainer, this.columnWidthMeasureManager, this.columnLevelHeightMeasureManager, this.columnWidthResizeHandler, this.options.columnHeaderClickHandler, this.options.columnHeaderContextMenuHandler, this.options.columnHeaderInteractionHandler, this.isA11yTable), 
                        this.isA11yTable ? this.bodyCellRenderer = new pivotTable.TableExBodyCellRenderer(this.innerBodyCellContainer, this.columnWidthMeasureManager, this.rowHeightMeasureManager, this.options.bodyCellClickHandler, this.options.bodyCellContextMenuHandler, this.options.bodyCellInteractionHandler, this.workScheduler, this.selectRowLabel) : this.bodyCellRenderer = new pivotTable.BodyCellRenderer(this.innerBodyCellContainer, this.columnWidthMeasureManager, this.rowHeightMeasureManager, this.options.bodyCellClickHandler, this.options.bodyCellContextMenuHandler, this.options.bodyCellInteractionHandler, this.workScheduler), 
                        this.cornerRenderer = new pivotTable.CornerRenderer(this.cornerContainer, this.columnLevelHeightMeasureManager, this.rowLevelWidthMeasureManager, this.columnLevelHeightResizeHandler, this.rowLevelWidthResizeHandler, this.options.cornerCellClickHandler, this.options.cornerCellContextMenuHandler, this.options.cornerCellInteractionHandler), 
                        this.isA11yTable ? this.floatingBodyCellRenderer = new pivotTable.TableExBodyCellRenderer(this.innerFloatingBodyCellContainer, this.columnWidthMeasureManager, this.rowHeightMeasureManager, this.options.bodyCellClickHandler, this.options.bodyCellContextMenuHandler, this.options.bodyCellInteractionHandler, this.workScheduler, this.selectRowLabel) : this.floatingBodyCellRenderer = new pivotTable.BodyCellRenderer(this.innerFloatingBodyCellContainer, this.columnWidthMeasureManager, this.rowHeightMeasureManager, this.options.bodyCellClickHandler, this.options.bodyCellContextMenuHandler, this.options.bodyCellInteractionHandler, this.workScheduler), 
                        this.clear(PivotTableRenderingMode.ClearMeasurement));
                    }, PivotTableControl.prototype.clearBodyPages = function() {
                        this.bodyCellRenderer.clear(), this.floatingBodyCellRenderer.clear();
                    }, PivotTableControl.prototype.rebuildBodyPagesSync = function() {
                        this.clearBodyPages();
                        var floatingRowHeights, viewport = this.getViewport();
                        this.bodyCellRenderer.update(viewport, !1, this.binder, this.rowNavigator, this.columnNavigator, !1), 
                        this.rowNavigator.getFloatingHierarchyItems() && (floatingRowHeights = this.rowHeightMeasureManager.getFloatingRowHeights(), 
                        this.floatingBodyCellRenderer.update({
                            left: viewport.left,
                            top: 0,
                            width: viewport.width,
                            height: floatingRowHeights
                        }, !0, this.binder, this.rowNavigator, this.columnNavigator, !1));
                    }, PivotTableControl.prototype.setWidth = function(width) {
                        this.width = width, this.element.style.width = PivotTableControl.pixelUnits(this.width), 
                        this.columnScrollbar.invalidateArrange();
                    }, PivotTableControl.prototype.setHeight = function(height) {
                        this.height = height, this.element.style.height = PivotTableControl.pixelUnits(this.height), 
                        this.rowScrollbar.invalidateArrange();
                    }, PivotTableControl.prototype.getCornerContainer = function() {
                        return this.cornerContainer;
                    }, PivotTableControl.prototype.getColumnHeaderContainer = function() {
                        return this.columnHeaderContainer;
                    }, PivotTableControl.prototype.getRowHeaderContainer = function() {
                        return this.rowHeaderContainer;
                    }, PivotTableControl.prototype.getBodyCellContainer = function() {
                        return this.bodyCellContainer;
                    }, PivotTableControl.prototype.getFloatingRowHeaderContainer = function() {
                        return this.floatingRowHeaderContainer;
                    }, PivotTableControl.prototype.getFloatingBodyCellContainer = function() {
                        return this.floatingBodyCellContainer;
                    }, PivotTableControl.prototype.setClassName = function(value) {
                        this.element.className = value;
                    }, PivotTableControl.prototype.setColumnNavigator = function(hierarchyNavigator) {
                        this.columnNavigator = hierarchyNavigator, this.focusManager.columnNavigator = hierarchyNavigator;
                    }, PivotTableControl.prototype.setRowNavigator = function(hierarchyNavigator) {
                        this.rowNavigator = hierarchyNavigator, this.focusManager.rowNavigator = hierarchyNavigator;
                    }, PivotTableControl.prototype.setBinder = function(binder) {
                        this.binder = binder;
                    }, PivotTableControl.prototype.getSteppedLayout = function() {
                        return this.steppedLayout;
                    }, PivotTableControl.prototype.getColumnNavigator = function() {
                        return this.columnNavigator;
                    }, PivotTableControl.prototype.getRowNavigator = function() {
                        return this.rowNavigator;
                    }, PivotTableControl.prototype.getSizeManager = function() {
                        return this.sizeManager;
                    }, PivotTableControl.prototype.getBinder = function() {
                        return this.binder;
                    }, PivotTableControl.prototype.getColumnWidthMeasureManager = function() {
                        return this.columnWidthMeasureManager;
                    }, PivotTableControl.prototype.getRowHeightMeasureManager = function() {
                        return this.rowHeightMeasureManager;
                    }, PivotTableControl.prototype.getColumnLevelHeightMeasureManager = function() {
                        return this.columnLevelHeightMeasureManager;
                    }, PivotTableControl.prototype.getRowLevelWidthMeasureManager = function() {
                        return this.rowLevelWidthMeasureManager;
                    }, PivotTableControl.prototype.getRowHeaderRenderer = function() {
                        return this.rowHeaderRenderer;
                    }, PivotTableControl.prototype.getColumnHeaderRenderer = function() {
                        return this.columnHeaderRenderer;
                    }, PivotTableControl.prototype.getBodyCellRenderer = function() {
                        return this.bodyCellRenderer;
                    }, PivotTableControl.prototype.getCornerRenderer = function() {
                        return this.cornerRenderer;
                    }, PivotTableControl.prototype.getFloatingRowHeaderRenderer = function() {
                        return this.floatingRowHeaderRenderer;
                    }, PivotTableControl.prototype.getFloatingBodyCellRenderer = function() {
                        return this.floatingBodyCellRenderer;
                    }, PivotTableControl.prototype.getViewport = function() {
                        return {
                            left: this.columnScrollbar.viewMin,
                            top: this.rowScrollbar.viewMin,
                            width: this.width,
                            height: this.height
                        };
                    }, PivotTableControl.prototype.getBodyCellViewPort = function() {
                        return {
                            left: this.columnScrollbar.viewMin,
                            top: this.rowScrollbar.viewMin,
                            width: this.columnScrollbar.viewSize,
                            height: this.rowScrollbar.viewSize
                        };
                    }, PivotTableControl.prototype.getClientWidth = function() {
                        return this.width - (this.rowScrollbar.visible ? pivotTable.ScrollbarWidth : 0);
                    }, PivotTableControl.prototype.getWorkScheduler = function() {
                        return this.workScheduler;
                    }, PivotTableControl.prototype.restoreFocusOnNextBlur = function() {
                        this.element.contains(document.activeElement) && (this.shouldRestoreFocus = !0);
                    }, PivotTableControl.prototype.restoreFocus = function() {
                        var currentFocus;
                        this.isA11yTable && this.shouldRestoreFocus ? (this.shouldRestoreFocus = !1, (currentFocus = this.focusManager.CurrentFocus) && this.getFocusedCell(currentFocus).focus()) : this.hasFocus && this.focusManager.initialize(this.isA11yTable);
                    }, PivotTableControl.prototype.render = function(mode, callback) {
                        var _this = this;
                        try {
                            this.clear(mode);
                            var bodyCellViewport = this.getViewport(), visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(bodyCellViewport.top, bodyCellViewport.height, this.rowHeightMeasureManager), startRowIndex = visibleRowRange ? visibleRowRange.firstLeafIndex : 0, visibleColumnRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(bodyCellViewport.left, bodyCellViewport.width, this.columnWidthMeasureManager), startColumnIndex = visibleColumnRange ? visibleColumnRange.firstLeafIndex : 0;
                            this.rowLevelWidthMeasureManager.measure(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, pivotTable.MeasureRowSampleCount), 
                            this.ensureLastPageComplete(startRowIndex, startColumnIndex);
                            var needsPageColumn = this.columnWidthMeasureManager.canAddPageColumn(this.columnNavigator) && !this.isFilledHorizontally(bodyCellViewport.left, bodyCellViewport.width), needsPageRow = this.rowHeightMeasureManager.canAddPageRow(this.rowNavigator) && !this.isFilledVertically(bodyCellViewport.top, bodyCellViewport.height);
                            needsPageColumn && this.measureNextPageColumn(startRowIndex), needsPageRow && this.measureNextPageRow(startRowIndex, startColumnIndex), 
                            this.rowHeightMeasureManager.measureFloatingRows(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, startColumnIndex), 
                            this.columnLevelHeightMeasureManager.measure(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, startColumnIndex, pivotTable.MeasureColumnSampleCount), 
                            this.isA11yTable || (this.updateRegionsPosition(), this.updateScrollRegionWidth(), 
                            this.updateScrollRegionHeight(), this.updateScrollbars()), this.measureNextPageColumnAsync(startRowIndex), 
                            this.measureNextPageRowAsync(startRowIndex, startColumnIndex), this.columnHeaderRenderer.update(bodyCellViewport.left, bodyCellViewport.width, this.binder, this.columnNavigator), 
                            this.rowHeaderRenderer.update(this.rowNavigator.getHierarchyItems(), !1, bodyCellViewport.top, bodyCellViewport.height, this.binder, this.rowNavigator), 
                            this.bodyCellRenderer.update(bodyCellViewport, !1, this.binder, this.rowNavigator, this.columnNavigator, !0), 
                            this.cornerRenderer.update(this.binder, this.rowNavigator, this.columnNavigator);
                            var floatingRowHeights, floatingHierarchyItems = this.rowNavigator.getFloatingHierarchyItems();
                            floatingHierarchyItems && (floatingRowHeights = this.rowHeightMeasureManager.getFloatingRowHeights(), 
                            this.floatingRowHeaderRenderer.update(floatingHierarchyItems, !0, 0, floatingRowHeights, this.binder, this.rowNavigator), 
                            this.floatingBodyCellRenderer.update({
                                left: bodyCellViewport.left,
                                top: 0,
                                width: bodyCellViewport.width,
                                height: floatingRowHeights
                            }, !0, this.binder, this.rowNavigator, this.columnNavigator, !0)), this.isA11yTable && (this.updateRegionsPosition(), 
                            this.updateScrollRegionWidth(), this.updateScrollRegionHeight(), this.updateScrollbars()), 
                            needsPageRow || needsPageColumn ? this.isA11yTable ? this.render(PivotTableRenderingMode.Incremental, callback) : this.workScheduler.scheduleAnimationFrameTask(function() {
                                return _this.render(PivotTableRenderingMode.Incremental, callback);
                            }) : (mode !== PivotTableRenderingMode.Incremental && this.restoreFocus(), callback && callback());
                        } catch (e) {
                            callback && callback(e);
                        }
                    }, PivotTableControl.prototype.updateSelectionTableEx = function() {
                        this.bodyCellRenderer.updateSelectionStyles();
                    }, PivotTableControl.prototype.ensureLastPageComplete = function(startRowIndex, index) {
                        index = this.rowHeightMeasureManager.ensureLastPageComplete(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, index, pivotTable.MeasureColumnSampleCount);
                        -1 !== index && (this.bodyCellRenderer.removeRowPages(index), this.updateScrollRegionHeight());
                    }, PivotTableControl.prototype.makeVisible = function(mode, alignedRow, alignedColumn, callback) {
                        var _this = this;
                        try {
                            this.clear(mode);
                            var columnVisibleRange, viewport = this.getViewport(), startColumnIndex = void 0, columnScrollOffset = void 0;
                            alignedColumn ? (startColumnIndex = alignedColumn.columnIndex, columnScrollOffset = pivotTable.ColumnMeasurementUtil.getOffset(alignedColumn, this.columnWidthMeasureManager), 
                            alignedColumn.alignRight && (columnScrollOffset -= this.columnScrollbar.viewSize)) : (startColumnIndex = (columnVisibleRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(viewport.left, viewport.width, this.columnWidthMeasureManager)) ? columnVisibleRange.firstLeafIndex : 0, 
                            columnScrollOffset = this.columnScrollbar.viewMin), startColumnIndex = Math.max(0, startColumnIndex - pivotTable.MeasureColumnSampleCount / 2);
                            var rowVisibleRange, startRowIndex = void 0, rowScrollOffset = void 0;
                            alignedRow ? (startRowIndex = alignedRow.rowIndex, rowScrollOffset = pivotTable.RowMeasurementUtil.getOffset(alignedRow, this.rowHeightMeasureManager), 
                            alignedRow.alignBottom && (rowScrollOffset -= this.rowScrollbar.viewSize)) : (startRowIndex = (rowVisibleRange = pivotTable.RowMeasurementUtil.getVisibleRange(viewport.top, viewport.height, this.rowHeightMeasureManager)) ? rowVisibleRange.firstLeafIndex : 0, 
                            rowScrollOffset = this.rowScrollbar.viewMin), this.rowLevelWidthMeasureManager.measure(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, pivotTable.MeasureRowSampleCount), 
                            this.ensureLastPageComplete(startRowIndex, startColumnIndex);
                            var rowScrollOffsetAchieved, columnScrollOffsetAchieved, needsPageColumn = this.columnWidthMeasureManager.canAddPageColumn(this.columnNavigator) && (!pivotTable.ColumnMeasurementUtil.isColumnMeasured(startColumnIndex, this.columnWidthMeasureManager) || this.width > this.columnWidthMeasureManager.getColumnsWidth() - columnScrollOffset), needsPageRow = this.rowHeightMeasureManager.canAddPageRow(this.rowNavigator) && (!pivotTable.RowMeasurementUtil.isRowMeasured(startRowIndex, this.rowHeightMeasureManager) || this.height > this.rowHeightMeasureManager.getRowsHeight() - rowScrollOffset);
                            needsPageColumn && this.measureNextPageColumn(startRowIndex), needsPageRow && this.measureNextPageRow(startRowIndex, startColumnIndex), 
                            needsPageRow || needsPageColumn ? this.workScheduler.scheduleAnimationFrameTask(function() {
                                return _this.makeVisible(PivotTableRenderingMode.Incremental, alignedRow, alignedColumn, callback);
                            }) : (this.rowHeightMeasureManager.measureFloatingRows(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, startColumnIndex), 
                            this.columnLevelHeightMeasureManager.measure(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, startColumnIndex, pivotTable.MeasureColumnSampleCount), 
                            this.updateRegionsPosition(), this.updateScrollRegionWidth(), this.updateScrollRegionHeight(), 
                            this.updateScrollbars(), this.scrollTo(rowScrollOffset, columnScrollOffset), rowScrollOffsetAchieved = powerbi.Double.equalWithPrecision(this.rowScrollbar.viewMin, rowScrollOffset, PivotTableControl.ScrollOffsetPrecision), 
                            columnScrollOffsetAchieved = powerbi.Double.equalWithPrecision(this.columnScrollbar.viewMin, columnScrollOffset, PivotTableControl.ScrollOffsetPrecision), 
                            rowScrollOffsetAchieved && columnScrollOffsetAchieved ? callback && callback() : (!rowScrollOffsetAchieved && alignedRow && (alignedRow = this.getVisibleRowStart()), 
                            !columnScrollOffsetAchieved && alignedColumn && (alignedColumn = this.getVisibleColumnStart()), 
                            this.makeVisible(PivotTableRenderingMode.ClearMeasurement, alignedRow, alignedColumn, callback)));
                        } catch (e) {
                            callback && callback(e);
                        }
                    }, PivotTableControl.prototype.getVisibleRowStart = function() {
                        var viewport = this.getViewport(), visibleRowRange = pivotTable.RowMeasurementUtil.getVisibleRange(viewport.top, viewport.height, this.rowHeightMeasureManager);
                        return visibleRowRange ? pivotTable.RowMeasurementUtil.getVisibleRowStart(visibleRowRange, viewport.top, this.rowHeightMeasureManager) : null;
                    }, PivotTableControl.prototype.getVisibleColumnStart = function() {
                        var viewport = this.getViewport(), visibleColumnRange = pivotTable.ColumnMeasurementUtil.getVisibleRange(viewport.left, viewport.width, this.columnWidthMeasureManager);
                        return visibleColumnRange ? pivotTable.ColumnMeasurementUtil.getVisibleColumnStart(visibleColumnRange, viewport.left, this.columnWidthMeasureManager) : null;
                    }, PivotTableControl.prototype.clearRendering = function() {
                        this.workScheduler.clear(), this.bodyCellRenderer.clear(), this.rowHeaderRenderer.clear(), 
                        this.columnHeaderRenderer.clear(), this.cornerRenderer.clear(), this.floatingRowHeaderRenderer.clear(), 
                        this.floatingBodyCellRenderer.clear();
                    }, PivotTableControl.prototype.clearMeasurement = function() {
                        this.workScheduler.clear(), this.columnWidthMeasureManager.clear(), this.rowHeightMeasureManager.clear(), 
                        this.columnLevelHeightMeasureManager.clear(), this.rowLevelWidthMeasureManager.clear();
                    }, PivotTableControl.prototype.clear = function(mode) {
                        switch (mode = void 0 === mode ? PivotTableRenderingMode.ClearMeasurement : mode) {
                          case PivotTableRenderingMode.ClearRendering:
                            this.clearRendering();
                            break;

                          case PivotTableRenderingMode.ClearMeasurement:
                            this.clearRendering(), this.clearMeasurement();
                        }
                    }, PivotTableControl.prototype.onHorizontalScroll = function() {
                        this.isA11yTable && (this.render(PivotTableRenderingMode.Incremental), this.skipNextScroll = !0), 
                        this.columnHeaderContainer.scrollLeft = this.floatingBodyCellContainer.scrollLeft = this.bodyCellContainer.scrollLeft = this.columnScrollbar.viewMin;
                    }, PivotTableControl.prototype.onVerticalScroll = function() {
                        this.isA11yTable && (this.render(PivotTableRenderingMode.Incremental), this.skipNextScroll = !0), 
                        this.rowHeaderContainer.scrollTop = this.bodyCellContainer.scrollTop = this.rowScrollbar.viewMin;
                    }, PivotTableControl.prototype.updateRegionsPosition = function() {
                        this.bodyCellContainer.style.top = this.rowHeaderContainer.style.top = this.cornerContainer.style.height = this.innerColumnHeaderContainer.style.height = PivotTableControl.pixelUnits(this.columnLevelHeightMeasureManager.getHeadersHeight()), 
                        this.bodyCellContainer.style.left = this.columnHeaderContainer.style.left = this.cornerContainer.style.width = this.floatingBodyCellContainer.style.left = this.floatingRowHeaderContainer.style.width = PivotTableControl.pixelUnits(this.rowLevelWidthMeasureManager.getHeadersWidth()), 
                        this.isA11yTable ? this.innerRowHeaderContainer.style.width = PivotTableControl.pixelUnits(pivotTable.SelectionIndicatorWidth) : this.innerRowHeaderContainer.style.width = PivotTableControl.pixelUnits(this.rowLevelWidthMeasureManager.getHeadersWidth()), 
                        this.floatingRowHeaderContainer.style.height = this.floatingBodyCellContainer.style.height = this.innerFloatingBodyCellContainer.style.height = PivotTableControl.pixelUnits(this.rowHeightMeasureManager.getFloatingRowHeights());
                    }, PivotTableControl.prototype.updateScrollbars = function() {
                        var floatingRowHeight = this.rowHeightMeasureManager.getFloatingRowHeights(), possibleClientHeight = this.height - this.columnLevelHeightMeasureManager.getHeadersHeight() - floatingRowHeight, columnScrollbarHeight = this.width - this.rowLevelWidthMeasureManager.getHeadersWidth(), floatingBodyBottom = this.rowHeightMeasureManager.getRowsHeight(), columnsWidth = this.columnWidthMeasureManager.getColumnsWidth(), shouldShowRowScrollbar = this.options.scrollingEnabled && 0 < floatingBodyBottom && possibleClientHeight < floatingBodyBottom, shouldShowColumnScrollbar = this.options.scrollingEnabled && 0 < columnsWidth && columnScrollbarHeight < columnsWidth;
                        !shouldShowRowScrollbar && shouldShowColumnScrollbar && 0 < floatingBodyBottom && (shouldShowRowScrollbar = floatingBodyBottom > possibleClientHeight - pivotTable.ScrollbarWidth), 
                        !shouldShowColumnScrollbar && shouldShowRowScrollbar && 0 < columnsWidth && (shouldShowColumnScrollbar = columnsWidth > columnScrollbarHeight - pivotTable.ScrollbarWidth), 
                        this.bodyCellContainer.style.right = this.columnHeaderContainer.style.right = this.floatingBodyCellContainer.style.right = shouldShowRowScrollbar ? this.rowScrollbar.width : PivotTableControl.pixelUnits(0);
                        var bodyBottom, columnScrollbarHeight = shouldShowColumnScrollbar ? pivotTable.ScrollbarWidth : 0, floatingBodyBottom = possibleClientHeight - columnScrollbarHeight < floatingBodyBottom ? (bodyBottom = columnScrollbarHeight + floatingRowHeight, 
                        columnScrollbarHeight) : (bodyBottom = possibleClientHeight + floatingRowHeight - floatingBodyBottom, 
                        possibleClientHeight - floatingBodyBottom);
                        this.bodyCellContainer.style.bottom = this.rowHeaderContainer.style.bottom = PivotTableControl.pixelUnits(bodyBottom), 
                        this.floatingRowHeaderContainer.style.bottom = this.floatingBodyCellContainer.style.bottom = PivotTableControl.pixelUnits(floatingBodyBottom), 
                        this.rowScrollbar.show(shouldShowRowScrollbar), this.rowScrollbar.viewSize = this.bodyCellContainer.clientHeight, 
                        this.rowScrollbar.refresh(), this.columnScrollbar.show(shouldShowColumnScrollbar), 
                        this.columnScrollbar.viewSize = this.bodyCellContainer.clientWidth, this.columnScrollbar.refresh();
                    }, PivotTableControl.prototype.measureNextPageColumnAsync = function(startRowIndex) {
                        var _this = this;
                        this.workScheduler.scheduleTimeoutTask(function() {
                            _this.columnWidthMeasureManager.canAddPageColumn(_this.columnNavigator) && _this.columnWidthMeasureManager.getPageColumns().length < pivotTable.MaxAutoPageColumnMeasure && (_this.measureNextPageColumn(startRowIndex), 
                            _this.updateScrollRegionWidth(), _this.measureNextPageColumnAsync(startRowIndex));
                        }, PivotTableControl.AutoMeasureDelay);
                    }, PivotTableControl.prototype.measureNextPageRowAsync = function(rowStartIndex, columnStartIndex) {
                        var _this = this;
                        this.workScheduler.scheduleTimeoutTask(function() {
                            _this.rowHeightMeasureManager.canAddPageRow(_this.rowNavigator) && _this.rowHeightMeasureManager.getPageRows().length < pivotTable.MaxAutoPageRowMeasure && (_this.measureNextPageRow(rowStartIndex, columnStartIndex), 
                            _this.updateScrollRegionHeight(), _this.measureNextPageRowAsync(rowStartIndex, columnStartIndex));
                        }, PivotTableControl.AutoMeasureDelay);
                    }, PivotTableControl.prototype.updateScrollRegionWidth = function() {
                        var columnsWidth = this.columnWidthMeasureManager.getColumnsWidth(), bodyCellContainerWidth = this.bodyCellContainer.clientWidth;
                        this.innerColumnHeaderContainer.style.width = this.innerBodyCellContainer.style.width = this.innerFloatingBodyCellContainer.style.width = PivotTableControl.pixelUnits(Math.max(columnsWidth, this.isA11yTable ? 1 : bodyCellContainerWidth)), 
                        this.columnScrollbar.max = columnsWidth, this.columnScrollbar.viewSize = bodyCellContainerWidth, 
                        this.columnScrollbar.refresh();
                    }, PivotTableControl.prototype.updateScrollRegionHeight = function() {
                        var rowsHeight = this.rowHeightMeasureManager.getRowsHeight(), bodyCellContainerHeight = this.bodyCellContainer.clientHeight;
                        this.innerRowHeaderContainer.style.height = this.innerBodyCellContainer.style.height = PivotTableControl.pixelUnits(Math.max(rowsHeight, bodyCellContainerHeight)), 
                        this.rowScrollbar.max = rowsHeight, this.rowScrollbar.viewSize = bodyCellContainerHeight, 
                        this.rowScrollbar.refresh();
                    }, PivotTableControl.prototype.isFilledHorizontally = function(viewportLeft, viewportWidth) {
                        return this.columnWidthMeasureManager.getColumnsWidth() - viewportLeft > viewportWidth + PivotTableControl.MeasureBuffer;
                    }, PivotTableControl.prototype.isFilledVertically = function(viewportTop, viewportHeight) {
                        return this.rowHeightMeasureManager.getRowsHeight() - viewportTop > viewportHeight + PivotTableControl.MeasureBuffer;
                    }, PivotTableControl.prototype.measureNextPageColumn = function(startRowIndex) {
                        this.columnWidthMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex);
                    }, PivotTableControl.prototype.measureNextPageRow = function(startRowIndex, startColumnIndex) {
                        this.rowHeightMeasureManager.measureNextPage(this.binder, this.rowNavigator, this.columnNavigator, startRowIndex, startColumnIndex);
                    }, PivotTableControl.pixelUnits = function(value) {
                        return 0 === value ? value.toString() : value + "px";
                    }, PivotTableControl.prototype.getNumberOfVisibleRows = function() {
                        var rowsRange = this.getBodyCellViewPort(), rowsRange = pivotTable.RowMeasurementUtil.getVisibleRange(rowsRange.top, rowsRange.height, this.rowHeightMeasureManager);
                        return 0 === rowsRange.firstLeafIndex ? rowsRange.lastLeafIndex - rowsRange.firstLeafIndex : rowsRange.lastLeafIndex - rowsRange.firstLeafIndex - 1;
                    }, PivotTableControl.MeasureBuffer = 50, PivotTableControl.AutoMeasureDelay = 250, 
                    PivotTableControl.ScrollOffsetPrecision = .1, PivotTableControl;
                }();
                pivotTable.PivotTableControl = PivotTableControl;
                var PivotTableHeader = function() {
                    function PivotTableBodyPage(rowIndex, columnIndex) {
                        this.rowIndex = rowIndex, this.columnIndex = columnIndex;
                    }
                    return PivotTableBodyPage.prototype.build = function(container, rowStartOffset, columnStartOffset, requiredStyles, left, pageRow, pageColumn, floatingRows, rowNavigator, columnNavigator, binder, clickHandler, contextMenuHandler, interactionHandler) {
                        for (var rowHierarchyLeafCount = floatingRows ? rowNavigator.getFloatingHierarchyLeafCount() : rowNavigator.getHierarchyLeafCount(), rowCount = Math.min(rowStartOffset + pageRow.getRowHeights().length, rowHierarchyLeafCount) - rowStartOffset, columnCount = Math.min(columnStartOffset + pageColumn.getColumnWidths().length, columnNavigator.getHierarchyLeafCount()) - columnStartOffset, left = left.getPageColumnLeft(pageColumn), requiredStyles = requiredStyles.getPageRowTop(pageRow), requiredStyles = {
                            position: "absolute",
                            left: PivotTableControl.pixelUnits(left),
                            top: PivotTableControl.pixelUnits(requiredStyles),
                            width: PivotTableControl.pixelUnits(pageColumn.getWidth()),
                            height: PivotTableControl.pixelUnits(pageRow.getHeight())
                        }, bodyCells = [], rowIndex = 0; rowIndex < rowCount; rowIndex++) bodyCells[rowIndex] = [];
                        for (var pageBinding = {
                            children: new Array(columnCount),
                            classNames: [],
                            styleProperties: {},
                            attributes: {}
                        }, columnLeft = 0, columnIndex = 0; columnIndex < columnCount; columnIndex++) {
                            var width = pageColumn.getColumnWidths()[columnIndex];
                            pageBinding.children[columnIndex] = this.buildColumn(rowCount, rowStartOffset, columnIndex, columnStartOffset, pageRow, pageColumn, floatingRows, rowNavigator, columnNavigator, binder, bodyCells, columnLeft, width), 
                            columnLeft += width;
                        }
                        container.insertAdjacentHTML("beforeend", ElementBuilder.build(pageBinding, requiredStyles)), 
                        this.element = container.lastChild, ElementBuilder.attachEventHandlers(this.element, pageBinding), 
                        (clickHandler || contextMenuHandler) && this.addEventListeners(rowCount, columnCount, bodyCells, clickHandler, contextMenuHandler, interactionHandler);
                    }, PivotTableBodyPage.prototype.resizeColumn = function(columnIndex, pageColumn) {
                        if (this.element) {
                            for (var columnElement, columnWidths = pageColumn.getColumnWidths(), columnsCount = columnWidths.length, left = 0, i = 0; i < columnsCount && (columnElement = 0 === i ? this.element.firstChild : columnElement.nextSibling); i++) {
                                var width = columnWidths[i];
                                i === columnIndex ? columnElement.style.width = PivotTableControl.pixelUnits(width) : columnIndex < i && (columnElement.style.left = PivotTableControl.pixelUnits(left)), 
                                left += width;
                            }
                            this.element.style.width = PivotTableControl.pixelUnits(pageColumn.getWidth());
                        }
                    }, PivotTableBodyPage.prototype.getHierarchyLeafAt = function(floatingRows, index, navigator) {
                        return floatingRows ? navigator.getFloatingHierarchyLeafAt(index) : navigator.getHierarchyLeafAt(index);
                    }, PivotTableBodyPage.prototype.buildColumn = function(rowCount, rowStartOffset, columnIndex, columnStartOffset, pageRow, pageColumn, floatingRows, rowNavigator, columnNavigator, binder, bodyCells, left, width) {
                        for (var columnBinding = {
                            children: new Array(rowCount),
                            classNames: [],
                            attributes: {},
                            styleProperties: {
                                overflow: "hidden",
                                position: "absolute",
                                left: PivotTableControl.pixelUnits(left),
                                width: PivotTableControl.pixelUnits(width)
                            }
                        }, columnItem = columnNavigator.getHierarchyLeafAt(columnIndex + columnStartOffset), rowIndex = 0; rowIndex < rowCount; rowIndex++) columnBinding.children[rowIndex] = this.buildCell(rowIndex, this.getHierarchyLeafAt(floatingRows, rowIndex + rowStartOffset, rowNavigator), columnIndex, columnItem, pageRow, pageColumn, rowNavigator, binder, bodyCells);
                        return columnBinding;
                    }, PivotTableBodyPage.prototype.buildCell = function(rowHeight, rowItem, cellBinding, bodyCell, pageRow, pageColumn, rowNavigator, binder, bodyCells) {
                        bodyCell = rowNavigator.getIntersection(rowItem, bodyCell);
                        bodyCells[rowHeight][cellBinding] = bodyCell;
                        rowHeight = pageRow.getRowHeights()[rowHeight], cellBinding = pageColumn.getColumnWidths()[cellBinding], 
                        cellBinding = binder.getBodyCellBinding(bodyCell, !1, rowHeight, cellBinding);
                        return cellBinding.styleProperties["box-sizing"] = "border-box", cellBinding.styleProperties.height = PivotTableControl.pixelUnits(rowHeight), 
                        cellBinding;
                    }, PivotTableBodyPage.prototype.addEventListeners = function(rowCount, columnCount, bodyCells, clickHandler, contextMenuHandler, interactionHandler) {
                        for (var columnIndex = 0; columnIndex < columnCount; columnIndex++) for (var columnElement = 0 === columnIndex ? this.element.firstChild : columnElement.nextSibling, bodyCellElement = void 0, rowIndex = 0; rowIndex < rowCount; rowIndex++) !function(rowIndex) {
                            bodyCellElement = 0 === rowIndex ? columnElement.firstChild : bodyCellElement.nextSibling;
                            var bodyCellItem = bodyCells[rowIndex][columnIndex];
                            clickHandler && bodyCellElement.addEventListener("click", function(event) {
                                clickHandler(bodyCellItem, event);
                            }), contextMenuHandler && bodyCellElement.addEventListener("contextmenu", function(event) {
                                contextMenuHandler(bodyCellItem, event);
                            }), interactionHandler && (interactionHandler.isTooltipEnabled(bodyCellItem) ? interactionHandler.addTooltip(bodyCellItem, bodyCellElement) : interactionHandler.removeTooltip(bodyCellItem, bodyCellElement));
                        }(rowIndex);
                    }, PivotTableBodyPage.prototype.getElement = function() {
                        return this.element;
                    }, PivotTableBodyPage.prototype.getCellAt = function(rowIndex, columnIndex) {
                        return this.element.children[columnIndex].children[rowIndex];
                    }, PivotTableBodyPage;
                }();
                pivotTable.PivotTableBodyPage = PivotTableHeader;
                PivotTableHeader = function() {
                    function PivotTablePageColumn() {
                        this.columnWidths = [];
                    }
                    return PivotTablePageColumn.prototype.getColumnWidths = function() {
                        return this.columnWidths;
                    }, PivotTablePageColumn.prototype.getWidth = function() {
                        return _.sum(this.columnWidths);
                    }, PivotTablePageColumn;
                }();
                pivotTable.PivotTablePageColumn = PivotTableHeader;
                PivotTableHeader = function() {
                    function PivotTablePageRow() {
                        this.rowHeights = [];
                    }
                    return PivotTablePageRow.prototype.getRowHeights = function() {
                        return this.rowHeights;
                    }, PivotTablePageRow.prototype.getHeight = function() {
                        return _.sum(this.rowHeights);
                    }, PivotTablePageRow.prototype.clear = function() {
                        this.rowHeights = [];
                    }, PivotTablePageRow;
                }();
                pivotTable.PivotTablePageRow = PivotTableHeader;
                PivotTableHeader = function() {
                    function PivotTableHeader() {}
                    return PivotTableHeader.prototype.build = function(parent, cellBinding, item, columnResizeHandler, rowResizeHandler, clickHandler, contextMenuHandler, interactionHandler, headers, isA11yTableSelectionCell) {
                        if (!this.element) {
                            headers && (cellBinding.attributes || (cellBinding.attributes = {}), cellBinding.attributes.tabindex = "0");
                            var containerBinding = {
                                content: ElementBuilder.build(cellBinding, PivotTableHeader.headerRequiredStyles),
                                classNames: null,
                                styleProperties: {},
                                attributes: {}
                            };
                            if (isA11yTableSelectionCell && (containerBinding.styleProperties["z-index"] = "1"), 
                            headers) {
                                containerBinding.attributes.role = "presentation";
                                for (var ariaColIndex = +cellBinding.attributes["aria-colindex"], headers = parent.children, nextSibling = void 0, _i = 0, _a = _.toArray(headers); _i < _a.length; _i++) {
                                    var header = _a[_i], siblingAriaColIndex = +header.firstElementChild.getAttribute("aria-colindex");
                                    if (isNaN(siblingAriaColIndex), ariaColIndex < siblingAriaColIndex) {
                                        nextSibling = header;
                                        break;
                                    }
                                }
                                nextSibling ? (nextSibling.insertAdjacentHTML("beforebegin", ElementBuilder.build(containerBinding, PivotTableHeader.containerRequiredStyles)), 
                                this.element = nextSibling.previousElementSibling) : (parent.insertAdjacentHTML("beforeend", ElementBuilder.build(containerBinding, PivotTableHeader.containerRequiredStyles)), 
                                this.element = parent.lastChild);
                            } else parent.insertAdjacentHTML("beforeend", ElementBuilder.build(containerBinding, PivotTableHeader.containerRequiredStyles)), 
                            this.element = parent.lastChild;
                            (columnResizeHandler || rowResizeHandler || clickHandler) && this.createHeaderResizer(item, columnResizeHandler, rowResizeHandler, clickHandler), 
                            contextMenuHandler && this.element.addEventListener("contextmenu", function(event) {
                                contextMenuHandler(item, event);
                            }), interactionHandler && (interactionHandler.isTooltipEnabled(item) ? interactionHandler.addTooltip(item, this.element) : interactionHandler.removeTooltip(item, this.element)), 
                            ElementBuilder.attachEventHandlers(this.element.firstChild, cellBinding);
                        }
                    }, PivotTableHeader.prototype.createHeaderResizer = function(item, columnResizeHandler, rowResizeHandler, clickHandler) {
                        return new pivotTable.HeaderResizer(item, this.element, columnResizeHandler, rowResizeHandler, clickHandler);
                    }, PivotTableHeader.prototype.setWidth = function(width) {
                        this.element.style.width = PivotTableControl.pixelUnits(width);
                    }, PivotTableHeader.prototype.setHeight = function(height) {
                        this.element.lastChild.style.height = PivotTableControl.pixelUnits(height);
                    }, PivotTableHeader.prototype.setLeft = function(left) {
                        this.element.style.left = PivotTableControl.pixelUnits(left);
                    }, PivotTableHeader.prototype.setTop = function(top) {
                        this.element.style.top = PivotTableControl.pixelUnits(top);
                    }, PivotTableHeader.prototype.getElement = function() {
                        return this.element;
                    }, PivotTableHeader.headerRequiredStyles = {
                        "box-sizing": "border-box"
                    }, PivotTableHeader.containerRequiredStyles = {
                        position: "absolute",
                        overflow: "hidden"
                    }, PivotTableHeader;
                }();
                pivotTable.PivotTableHeader = PivotTableHeader;
                var ElementBuilder = function() {
                    function ElementBuilder() {}
                    return ElementBuilder.build = function(elementBinding, requiredStyles) {
                        if (void 0 === requiredStyles && (requiredStyles = {}), null === elementBinding.tagName) return elementBinding.content;
                        var tagName = elementBinding.tagName || "div", str = "<" + tagName + " " + this.buildAttributes(elementBinding.attributes) + this.buildClassNames(elementBinding.classNames) + this.buildStyles(elementBinding.styleProperties, requiredStyles) + ">";
                        if (_.isEmpty(elementBinding.children)) null != elementBinding.content && (str += elementBinding.content); else for (var _i = 0, _a = elementBinding.children; _i < _a.length; _i++) {
                            var child = _a[_i];
                            str += ElementBuilder.build(child, null);
                        }
                        return str += "</" + tagName + ">";
                    }, ElementBuilder.buildMultiple = function(elementBindings) {
                        return _.map(elementBindings, function(elementBinding) {
                            return ElementBuilder.build(elementBinding);
                        }).join("");
                    }, ElementBuilder.buildAttributes = function(attributes) {
                        var str = "";
                        if (attributes) for (var name_1 in attributes) str += name_1 + "=" + PivotTableAttributeDelimiter + attributes[name_1] + PivotTableAttributeDelimiter;
                        return str;
                    }, ElementBuilder.buildClassNames = function(classNames) {
                        if (!classNames || 0 === classNames.length) return "";
                        for (var str = 'class="', _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) str += classNames_1[_i] + " ";
                        return str += '"';
                    }, ElementBuilder.buildStyles = function(styles, requiredStyles) {
                        var hasRequiredStyles = !_.isEmpty(requiredStyles), hasStyles = !_.isEmpty(styles);
                        if (!hasRequiredStyles && !hasStyles) return "";
                        var str = "style=" + PivotTableAttributeDelimiter;
                        if (hasStyles) for (var name_2 in styles) str += name_2 + ":" + styles[name_2] + ";";
                        if (hasRequiredStyles) for (var name_3 in requiredStyles) str += name_3 + ":" + requiredStyles[name_3] + ";";
                        return str += PivotTableAttributeDelimiter;
                    }, ElementBuilder.attachEventHandlers = function(element, binding) {
                        if (binding.clickHandler && element.addEventListener("click", function(event) {
                            return binding.clickHandler(event);
                        }), binding.contextMenuHandler && element.addEventListener("contextmenu", function(event) {
                            return binding.contextMenuHandler(event);
                        }), !_.isEmpty(binding.children)) {
                            binding.children.length, element.childNodes.length;
                            for (var i = 0; i < binding.children.length; i++) null !== binding.children[i].tagName && ElementBuilder.attachEventHandlers(element.childNodes[i], binding.children[i]);
                        }
                    }, ElementBuilder.attachEventHandlersMultiple = function(firstElement, bindings) {
                        var element = firstElement;
                        bindings.forEach(function(binding) {
                            ElementBuilder.attachEventHandlers(element, binding), element = element.nextElementSibling;
                        });
                    }, ElementBuilder;
                }();
                pivotTable.ElementBuilder = ElementBuilder;
            }(controls.pivotTable || (controls.pivotTable = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(pivotTable) {
                var PivotTableFocusManager = function() {
                    function PivotTableFocusManager(onFocusChangedHandler, isA11yTable, headerContainer, bodyContainer, footerContainer) {
                        this.onFocusChangedHandler = onFocusChangedHandler, this.isA11yTable = isA11yTable, 
                        this.headerContainer = headerContainer, this.bodyContainer = bodyContainer, this.footerContainer = footerContainer;
                    }
                    return Object.defineProperty(PivotTableFocusManager.prototype, "CurrentFocus", {
                        get: function() {
                            return this.currentFocus;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), PivotTableFocusManager.prototype.initialize = function(isA11yTable) {
                        this.currentFocus && this.isFocusValid(this.currentFocus, isA11yTable) || (this.currentFocus = this.getInitialFocus()), 
                        this.updateFocusedItem(), this.currentFocus, this.onFocusChangedHandler && this.onFocusChangedHandler();
                    }, PivotTableFocusManager.prototype.setAsFocus = function(rowIndex, columnIndex, section) {
                        "header" === section ? this.currentFocus = {
                            columnHeader: [ columnIndex ]
                        } : "body" === section ? this.currentFocus = {
                            bodyCell: {
                                rowIndex: rowIndex,
                                columnIndex: columnIndex
                            }
                        } : "footer" === section && (this.currentFocus = {
                            floatingBodyCell: {
                                rowIndex: rowIndex,
                                columnIndex: columnIndex
                            }
                        }), this.updateFocusedItem();
                    }, PivotTableFocusManager.prototype.updateFocus = function() {
                        var activeElement = document.activeElement;
                        this.headerContainer.contains(activeElement) ? this.setAsFocus(void 0, controls.internal.TableExUtils.getColumnIndex(activeElement), "header") : this.bodyContainer.contains(activeElement) ? this.setAsFocus(controls.internal.TableExUtils.getRowIndex(activeElement), controls.internal.TableExUtils.getColumnIndex(activeElement), "body") : this.footerContainer.contains(activeElement) ? this.setAsFocus(controls.internal.TableExUtils.getRowIndex(activeElement), controls.internal.TableExUtils.getColumnIndex(activeElement), "footer") : this.setAsFocus(void 0, 0, "header");
                    }, PivotTableFocusManager.prototype.getInitialFocus = function() {
                        if (!this.isA11yTable) {
                            var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnsCount = this.columnNavigator.getHierarchyLeafCount();
                            if (0 < rowsCount && 0 < columnsCount) return {
                                bodyCell: {
                                    rowIndex: 0,
                                    columnIndex: 0
                                }
                            };
                            if (this.rowNavigator.hasHierarchy()) return {
                                cornerCell: {
                                    rowLevel: 0,
                                    columnLevel: this.columnNavigator.getHierarchyDepth() - 1
                                }
                            };
                        }
                        return this.columnNavigator.hasHierarchy(), {
                            columnHeader: [ 0 ]
                        };
                    }, PivotTableFocusManager.prototype.isFocusValid = function(floatingRowIndex, rowsDepth) {
                        var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnLevel = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount();
                        if (floatingRowIndex.bodyCell) {
                            var columnsDepth = floatingRowIndex.bodyCell.rowIndex, rowLevel = floatingRowIndex.bodyCell.columnIndex;
                            return 0 <= columnsDepth && columnsDepth < rowsCount && (rowsDepth ? -1 : 0) <= rowLevel && rowLevel < columnLevel;
                        }
                        if (floatingRowIndex.floatingBodyCell) {
                            columnsDepth = floatingRowIndex.floatingBodyCell.rowIndex, rowLevel = floatingRowIndex.floatingBodyCell.columnIndex;
                            return 0 <= columnsDepth && columnsDepth < floatingRowsCount && 0 <= rowLevel && rowLevel < columnLevel;
                        }
                        if (floatingRowIndex.columnHeader) return !!this.columnNavigator.getNodeFromPath(floatingRowIndex.columnHeader);
                        if (floatingRowIndex.rowHeader) return !!this.rowNavigator.getNodeFromPath(floatingRowIndex.rowHeader);
                        if (floatingRowIndex.cornerCell) {
                            rowsDepth = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), 
                            rowLevel = floatingRowIndex.cornerCell.rowLevel, columnLevel = floatingRowIndex.cornerCell.columnLevel;
                            return 0 <= rowLevel && rowLevel < rowsDepth && 0 <= columnLevel && columnLevel < columnsDepth;
                        }
                        if (floatingRowIndex.floatingRowHeader) {
                            floatingRowIndex = floatingRowIndex.floatingRowHeader;
                            return 0 <= floatingRowIndex && floatingRowIndex < floatingRowsCount;
                        }
                    }, PivotTableFocusManager.prototype.updateFocusedItem = function() {
                        var rowLeaf, columnLeaf;
                        this.currentFocus, this.currentFocus.bodyCell ? this.currentFocus.bodyCell.columnIndex < 0 ? this.currentFocus.item = void 0 : (rowLeaf = this.rowNavigator.getHierarchyLeafAt(this.currentFocus.bodyCell.rowIndex), 
                        columnLeaf = this.columnNavigator.getHierarchyLeafAt(this.currentFocus.bodyCell.columnIndex), 
                        this.currentFocus.item = this.rowNavigator.getIntersection(rowLeaf, columnLeaf)) : this.currentFocus.columnHeader ? this.currentFocus.item = this.columnNavigator.getNodeFromPath(this.currentFocus.columnHeader) : this.currentFocus.rowHeader ? this.currentFocus.item = this.rowNavigator.getNodeFromPath(this.currentFocus.rowHeader) : this.currentFocus.cornerCell ? this.currentFocus.item = this.rowNavigator.getCorner(this.currentFocus.cornerCell.rowLevel, this.currentFocus.cornerCell.columnLevel) : this.currentFocus.floatingBodyCell ? (rowLeaf = this.rowNavigator.getFloatingHierarchyLeafAt(this.currentFocus.floatingBodyCell.rowIndex), 
                        columnLeaf = this.columnNavigator.getHierarchyLeafAt(this.currentFocus.floatingBodyCell.columnIndex), 
                        this.currentFocus.item = this.rowNavigator.getIntersection(rowLeaf, columnLeaf)) : void 0 !== this.currentFocus.floatingRowHeader && (this.currentFocus.item = this.rowNavigator.getFloatingHierarchyLeafAt(this.currentFocus.floatingRowHeader)), 
                        this.currentFocus;
                    }, PivotTableFocusManager.prototype.moveFocus = function(direction, hasCtrl, isA11yTable, numberOfVisibleRows) {
                        this.currentFocus, this.currentFocus.bodyCell ? this.currentFocus = this.moveBodyCellFocus(direction, hasCtrl, isA11yTable, numberOfVisibleRows) : this.currentFocus.rowHeader ? this.currentFocus = this.moveRowHeaderFocus(direction) : this.currentFocus.columnHeader ? this.currentFocus = this.moveColumnHeaderFocus(direction, hasCtrl, isA11yTable) : this.currentFocus.cornerCell ? this.currentFocus = this.moveCornerCellFocus(direction) : void 0 !== this.currentFocus.floatingRowHeader ? this.currentFocus = this.moveFloatingRowHeaderFocus(direction) : this.currentFocus.floatingBodyCell && (this.currentFocus = this.moveFloatingBodyCellFocus(direction, hasCtrl, isA11yTable)), 
                        this.currentFocus, this.updateFocusedItem(), this.onFocusChangedHandler && this.onFocusChangedHandler();
                    }, PivotTableFocusManager.prototype.moveBodyCellFocus = function(direction, hasCtrl, isA11yTable, numberOfVisibleRows) {
                        var rowLeaf = this.rowNavigator.getHierarchyLeafCount(), columnsCount = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount(), newColumnIndex = this.currentFocus.bodyCell.columnIndex, newRowIndex = this.currentFocus.bodyCell.rowIndex;
                        switch (direction) {
                          case "left":
                            newColumnIndex--;
                            break;

                          case "right":
                            newColumnIndex++;
                            break;

                          case "up":
                            newRowIndex--;
                            break;

                          case "down":
                            newRowIndex++;
                        }
                        if (isA11yTable) {
                            if (hasCtrl) {
                                if ("down" === direction) return 0 < floatingRowsCount && 0 <= newColumnIndex ? {
                                    floatingBodyCell: {
                                        rowIndex: floatingRowsCount - 1,
                                        columnIndex: newColumnIndex
                                    }
                                } : {
                                    bodyCell: {
                                        rowIndex: rowLeaf - 1,
                                        columnIndex: newColumnIndex
                                    }
                                };
                                if ("up" === direction) return 0 <= newColumnIndex ? {
                                    columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(newColumnIndex))
                                } : {
                                    bodyCell: {
                                        rowIndex: 0,
                                        columnIndex: newColumnIndex
                                    }
                                };
                                if ("right" === direction) return {
                                    bodyCell: {
                                        rowIndex: newRowIndex,
                                        columnIndex: columnsCount - 1
                                    }
                                };
                                if ("left" === direction && 0 <= newColumnIndex) return {
                                    bodyCell: {
                                        rowIndex: newRowIndex,
                                        columnIndex: 0
                                    }
                                };
                                if ("home" === direction) return {
                                    columnHeader: [ 0 ]
                                };
                                if ("end" === direction) return 0 < floatingRowsCount ? {
                                    floatingBodyCell: {
                                        rowIndex: floatingRowsCount - 1,
                                        columnIndex: columnsCount - 1
                                    }
                                } : {
                                    bodyCell: {
                                        rowIndex: rowLeaf - 1,
                                        columnIndex: columnsCount - 1
                                    }
                                };
                            }
                            if ("home" === direction) return {
                                bodyCell: {
                                    rowIndex: newRowIndex,
                                    columnIndex: 0
                                }
                            };
                            if ("end" === direction) return {
                                bodyCell: {
                                    rowIndex: newRowIndex,
                                    columnIndex: columnsCount - 1
                                }
                            };
                            if ("pagedown" === direction && numberOfVisibleRows) return {
                                bodyCell: {
                                    rowIndex: targetRowIndex = numberOfVisibleRows + newRowIndex <= rowLeaf - 1 ? numberOfVisibleRows + newRowIndex : rowLeaf - 1,
                                    columnIndex: newColumnIndex
                                }
                            };
                            if ("pageup" === direction && numberOfVisibleRows) return {
                                bodyCell: {
                                    rowIndex: targetRowIndex = 0 <= newRowIndex - numberOfVisibleRows ? newRowIndex - numberOfVisibleRows : 0,
                                    columnIndex: newColumnIndex
                                }
                            };
                        }
                        if (0 <= newRowIndex && (isA11yTable ? -1 : 0) <= newColumnIndex && newRowIndex < rowLeaf && newColumnIndex < columnsCount) return {
                            bodyCell: {
                                rowIndex: newRowIndex,
                                columnIndex: newColumnIndex
                            }
                        };
                        if (isA11yTable && newColumnIndex < 0) return this.currentFocus;
                        if (newRowIndex < 0) return this.columnNavigator.hasHierarchy() ? {
                            columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(newColumnIndex))
                        } : isA11yTable ? this.currentFocus : 0 < floatingRowsCount ? {
                            floatingBodyCell: {
                                rowIndex: floatingRowsCount - 1,
                                columnIndex: newColumnIndex
                            }
                        } : {
                            bodyCell: {
                                rowIndex: rowLeaf - 1,
                                columnIndex: newColumnIndex
                            }
                        };
                        if (rowLeaf <= newRowIndex) {
                            if (0 < floatingRowsCount) return {
                                floatingBodyCell: {
                                    rowIndex: 0,
                                    columnIndex: newColumnIndex
                                }
                            };
                            if (isA11yTable) return this.currentFocus;
                            if (this.columnNavigator.hasHierarchy()) {
                                var header = this.columnNavigator.getHierarchyLeafAt(newColumnIndex), header = this.columnNavigator.getLeafAncestorAtLevel(header, 0);
                                return {
                                    columnHeader: this.columnNavigator.getPathIndices(header)
                                };
                            }
                            return {
                                bodyCell: {
                                    rowIndex: 0,
                                    columnIndex: newColumnIndex
                                }
                            };
                        }
                        if (newColumnIndex < 0) return isA11yTable ? this.currentFocus : this.rowNavigator.hasHierarchy() ? {
                            rowHeader: this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(newRowIndex))
                        } : 0 < newRowIndex ? {
                            bodyCell: {
                                rowIndex: newRowIndex - 1,
                                columnIndex: columnsCount - 1
                            }
                        } : {
                            columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnsCount - 1))
                        };
                        if (columnsCount <= newColumnIndex) {
                            if (isA11yTable) return this.currentFocus;
                            if (newRowIndex < rowLeaf - 1) {
                                var targetRowIndex = newRowIndex + 1;
                                if (this.rowNavigator.hasHierarchy()) {
                                    rowLeaf = this.rowNavigator.getHierarchyLeafAt(targetRowIndex), header = this.rowNavigator.getLeafAncestorAtLevel(rowLeaf, 0);
                                    return {
                                        rowHeader: this.rowNavigator.getPathIndices(header)
                                    };
                                }
                                return {
                                    bodyCell: {
                                        rowIndex: targetRowIndex,
                                        columnIndex: 0
                                    }
                                };
                            }
                            return 0 < floatingRowsCount ? {
                                floatingRowHeader: 0
                            } : this.rowNavigator.hasHierarchy() ? {
                                cornerCell: {
                                    rowLevel: this.rowNavigator.getHierarchyDepth() - 1,
                                    columnLevel: 0
                                }
                            } : {
                                columnHeader: [ 0 ]
                            };
                        }
                    }, PivotTableFocusManager.prototype.moveRowHeaderFocus = function(direction) {
                        var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnsCount = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount(), currentLeafIndex = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), currentPath = this.currentFocus.rowHeader, currentNodeLevelIndex = this.rowNavigator.getNodeFromPath(currentPath), currentNodeLevel = currentPath.length - 1;
                        if (!currentNodeLevelIndex) return this.getInitialFocus();
                        if ("left" === direction) {
                            if (1 < currentPath.length) return {
                                rowHeader: _.dropRight(currentPath, 1)
                            };
                            if (0 < currentPath[0]) {
                                var targetLeafIndex = pivotTable.PivotTableHierarchyNavigator.getFirstVisualLeafIndex(currentNodeLevelIndex, this.rowNavigator) - 1;
                                return 0 < columnsCount ? {
                                    bodyCell: {
                                        rowIndex: targetLeafIndex,
                                        columnIndex: columnsCount - 1
                                    }
                                } : {
                                    rowHeader: this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(targetLeafIndex))
                                };
                            }
                            return 0 < columnsCount ? {
                                columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnsCount - 1))
                            } : {
                                cornerCell: {
                                    rowLevel: currentLeafIndex - 1,
                                    columnLevel: 0
                                }
                            };
                        }
                        if ("right" === direction) {
                            currentLeafIndex = this.rowNavigator.getLeafIndex(currentNodeLevelIndex);
                            if (void 0 === currentLeafIndex) return {
                                rowHeader: __spreadArray(__spreadArray([], currentPath || []), [ 0 ])
                            };
                            if (0 < columnsCount) return {
                                bodyCell: {
                                    rowIndex: currentLeafIndex,
                                    columnIndex: 0
                                }
                            };
                            if (currentLeafIndex < rowsCount - 1) {
                                var levelNodes = this.rowNavigator.getLeafAncestorAtLevel(this.rowNavigator.getHierarchyLeafAt(currentLeafIndex + 1), 0);
                                return {
                                    rowHeader: this.rowNavigator.getPathIndices(levelNodes)
                                };
                            }
                            return 0 < floatingRowsCount ? {
                                floatingRowHeader: 0
                            } : {
                                cornerCell: {
                                    rowLevel: 0,
                                    columnLevel: columnsDepth - 1
                                }
                            };
                        }
                        levelNodes = this.rowNavigator.getItemsByLevel(currentNodeLevel), currentNodeLevelIndex = levelNodes.indexOf(currentNodeLevelIndex);
                        return "up" === direction ? 0 < currentNodeLevelIndex ? {
                            rowHeader: this.rowNavigator.getPathIndices(levelNodes[currentNodeLevelIndex - 1])
                        } : {
                            cornerCell: {
                                rowLevel: currentNodeLevel,
                                columnLevel: columnsDepth - 1
                            }
                        } : "down" === direction ? currentNodeLevelIndex < levelNodes.length - 1 ? {
                            rowHeader: this.rowNavigator.getPathIndices(levelNodes[currentNodeLevelIndex + 1])
                        } : 0 < floatingRowsCount ? {
                            floatingRowHeader: 0
                        } : {
                            cornerCell: {
                                rowLevel: currentNodeLevel,
                                columnLevel: columnsDepth - 1
                            }
                        } : void 0;
                    }, PivotTableFocusManager.prototype.moveColumnHeaderFocus = function(direction, hasCtrl, isA11yTable) {
                        var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnsCount = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount(), rowsDepth = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), currentPath = this.currentFocus.columnHeader, currentNodeLevelIndex = this.columnNavigator.getNodeFromPath(currentPath), currentNodeLevel = this.columnNavigator.getLevel(currentNodeLevelIndex);
                        if (!currentNodeLevelIndex) return this.getInitialFocus();
                        if ("up" === direction) {
                            if (1 < currentPath.length) return {
                                columnHeader: _.dropRight(currentPath, 1)
                            };
                            if (isA11yTable) return this.currentFocus;
                            var leafIndex = pivotTable.PivotTableHierarchyNavigator.getFirstVisualLeafIndex(currentNodeLevelIndex, this.columnNavigator);
                            if (0 < floatingRowsCount) return {
                                floatingBodyCell: {
                                    rowIndex: floatingRowsCount - 1,
                                    columnIndex: leafIndex
                                }
                            };
                            if (0 < rowsCount) return {
                                bodyCell: {
                                    rowIndex: rowsCount - 1,
                                    columnIndex: leafIndex
                                }
                            };
                        }
                        if ("down" === direction) {
                            var levelNodes = this.columnNavigator.getLeafIndex(currentNodeLevelIndex);
                            if (hasCtrl && isA11yTable) {
                                leafIndex = pivotTable.PivotTableHierarchyNavigator.getFirstVisualLeafIndex(currentNodeLevelIndex, this.columnNavigator);
                                if (0 < floatingRowsCount) return {
                                    floatingBodyCell: {
                                        rowIndex: floatingRowsCount - 1,
                                        columnIndex: leafIndex
                                    }
                                };
                                if (0 < rowsCount) return {
                                    bodyCell: {
                                        rowIndex: rowsCount - 1,
                                        columnIndex: leafIndex
                                    }
                                };
                            }
                            if (void 0 === levelNodes) return {
                                columnHeader: __spreadArray(__spreadArray([], currentPath || []), [ 0 ])
                            };
                            if (0 < rowsCount) return {
                                bodyCell: {
                                    rowIndex: 0,
                                    columnIndex: levelNodes
                                }
                            };
                            if (0 < floatingRowsCount) return {
                                floatingBodyCell: {
                                    rowIndex: 0,
                                    columnIndex: levelNodes
                                }
                            };
                            levelNodes = this.columnNavigator.getLeafAncestorAtLevel(currentNodeLevelIndex, 0);
                            return {
                                columnHeader: this.columnNavigator.getPathIndices(levelNodes)
                            };
                        }
                        levelNodes = this.columnNavigator.getItemsByLevel(currentNodeLevel), currentNodeLevelIndex = levelNodes.indexOf(currentNodeLevelIndex);
                        if ("left" === direction) return hasCtrl && isA11yTable ? {
                            columnHeader: this.columnNavigator.getPathIndices(levelNodes[0])
                        } : 0 < currentNodeLevelIndex ? {
                            columnHeader: this.columnNavigator.getPathIndices(levelNodes[currentNodeLevelIndex - 1])
                        } : this.rowNavigator.hasHierarchy() ? {
                            cornerCell: {
                                rowLevel: rowsDepth - 1,
                                columnLevel: currentNodeLevel
                            }
                        } : 0 < currentNodeLevel ? {
                            columnHeader: this.columnNavigator.getPathIndices(_.last(this.columnNavigator.getItemsByLevel(currentNodeLevel - 1)))
                        } : isA11yTable ? this.currentFocus : 0 < floatingRowsCount ? {
                            floatingBodyCell: {
                                rowIndex: floatingRowsCount - 1,
                                columnIndex: columnsCount - 1
                            }
                        } : 0 < rowsCount ? {
                            bodyCell: {
                                rowIndex: rowsCount - 1,
                                columnIndex: columnsCount - 1
                            }
                        } : {
                            columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnsCount - 1))
                        };
                        if ("right" !== direction) return "home" === direction && isA11yTable ? hasCtrl ? {
                            columnHeader: [ 0 ]
                        } : {
                            columnHeader: this.columnNavigator.getPathIndices(levelNodes[0])
                        } : "end" === direction && isA11yTable ? hasCtrl ? 0 < floatingRowsCount ? {
                            floatingBodyCell: {
                                rowIndex: floatingRowsCount - 1,
                                columnIndex: columnsCount - 1
                            }
                        } : {
                            bodyCell: {
                                rowIndex: rowsCount - 1,
                                columnIndex: columnsCount - 1
                            }
                        } : {
                            columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnsCount - 1))
                        } : void 0;
                        if (hasCtrl && isA11yTable) return {
                            columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(columnsCount - 1))
                        };
                        if (currentNodeLevelIndex < levelNodes.length - 1) return {
                            columnHeader: this.columnNavigator.getPathIndices(levelNodes[currentNodeLevelIndex + 1])
                        };
                        if (currentNodeLevel < columnsDepth - 1) return this.rowNavigator.hasHierarchy() ? {
                            cornerCell: {
                                rowLevel: rowsDepth - 1,
                                columnLevel: currentNodeLevel + 1
                            }
                        } : {
                            columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getItemsByLevel(currentNodeLevel + 1)[0])
                        };
                        if (0 < rowsCount) {
                            if (this.rowNavigator.hasHierarchy()) return {
                                rowHeader: [ 0 ]
                            };
                            if (!isA11yTable) return {
                                bodyCell: {
                                    rowIndex: 0,
                                    columnIndex: 0
                                }
                            };
                        }
                        if (0 < floatingRowsCount) {
                            if (this.rowNavigator.hasHierarchy()) return {
                                floatingRowHeader: 0
                            };
                            if (!isA11yTable) return {
                                floatingBodyCell: {
                                    rowIndex: 0,
                                    columnIndex: 0
                                }
                            };
                        }
                        return this.rowNavigator.hasHierarchy() ? {
                            cornerCell: {
                                rowLevel: 1 === columnsDepth ? 0 : rowsDepth - 1,
                                columnLevel: 0
                            }
                        } : isA11yTable ? this.currentFocus : {
                            columnHeader: [ 0 ]
                        };
                    }, PivotTableFocusManager.prototype.moveCornerCellFocus = function(direction) {
                        var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnsCount = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount(), rowsDepth = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), currentRowLevel = this.currentFocus.cornerCell.rowLevel, targetColumnLevel = this.currentFocus.cornerCell.columnLevel, rowLevelNodes = this.rowNavigator.getItemsByLevel(currentRowLevel), columnLevelNodes = this.columnNavigator.getItemsByLevel(targetColumnLevel);
                        if ("up" === direction) return currentRowLevel === rowsDepth - 1 && 0 < targetColumnLevel ? {
                            cornerCell: {
                                rowLevel: currentRowLevel,
                                columnLevel: targetColumnLevel - 1
                            }
                        } : 0 < floatingRowsCount ? {
                            floatingRowHeader: floatingRowsCount - 1
                        } : 0 < rowsCount ? {
                            rowHeader: this.rowNavigator.getPathIndices(_.last(rowLevelNodes))
                        } : {
                            cornerCell: {
                                rowLevel: currentRowLevel,
                                columnLevel: columnsDepth - 1
                            }
                        };
                        if ("down" === direction) return currentRowLevel === rowsDepth - 1 && targetColumnLevel < columnsDepth - 1 ? {
                            cornerCell: {
                                rowLevel: currentRowLevel,
                                columnLevel: targetColumnLevel + 1
                            }
                        } : 0 < rowsCount ? {
                            rowHeader: this.rowNavigator.getPathIndices(rowLevelNodes[0])
                        } : 0 < floatingRowsCount ? {
                            floatingRowHeader: 0
                        } : {
                            cornerCell: {
                                rowLevel: currentRowLevel,
                                columnLevel: currentRowLevel === rowsDepth - 1 ? 0 : columnsDepth - 1
                            }
                        };
                        if ("right" === direction) return _.isEmpty(columnLevelNodes) ? targetColumnLevel < columnsDepth - 1 ? {
                            cornerCell: {
                                rowLevel: currentRowLevel === rowsDepth - 1 ? 0 : rowsDepth - 1,
                                columnLevel: targetColumnLevel + 1
                            }
                        } : 0 < rowsCount ? {
                            rowHeader: [ 0 ]
                        } : {
                            cornerCell: {
                                rowLevel: 1 === columnsDepth ? 0 : rowsDepth - 1,
                                columnLevel: 0
                            }
                        } : {
                            columnHeader: this.columnNavigator.getPathIndices(columnLevelNodes[0])
                        };
                        if ("left" === direction) {
                            if (0 < currentRowLevel && targetColumnLevel === columnsDepth - 1) return {
                                cornerCell: {
                                    rowLevel: currentRowLevel - 1,
                                    columnLevel: targetColumnLevel
                                }
                            };
                            if (0 < targetColumnLevel) {
                                targetColumnLevel = targetColumnLevel - 1;
                                return 0 < columnsCount ? {
                                    columnHeader: this.columnNavigator.getPathIndices(_.last(this.columnNavigator.getItemsByLevel(targetColumnLevel)))
                                } : {
                                    cornerCell: {
                                        rowLevel: rowsDepth - 1,
                                        columnLevel: targetColumnLevel
                                    }
                                };
                            }
                            return 0 < floatingRowsCount && 0 < columnsCount ? {
                                floatingBodyCell: {
                                    rowIndex: floatingRowsCount - 1,
                                    columnIndex: columnsCount - 1
                                }
                            } : 0 < rowsCount && 0 < columnsCount ? {
                                bodyCell: {
                                    rowIndex: rowsCount - 1,
                                    columnIndex: columnsCount - 1
                                }
                            } : 0 < rowsCount ? {
                                rowHeader: this.rowNavigator.getPathIndices(this.rowNavigator.getHierarchyLeafAt(rowsCount - 1))
                            } : {
                                cornerCell: {
                                    rowLevel: rowsDepth - 1,
                                    columnLevel: columnsDepth - 1
                                }
                            };
                        }
                    }, PivotTableFocusManager.prototype.moveFloatingRowHeaderFocus = function(direction) {
                        var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnHeader = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount(), rowsDepth = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), currentIndex = this.currentFocus.floatingRowHeader;
                        if ("left" !== direction) return "right" === direction ? {
                            floatingBodyCell: {
                                rowIndex: currentIndex,
                                columnIndex: 0
                            }
                        } : "up" === direction ? 0 < currentIndex ? {
                            floatingRowHeader: currentIndex - 1
                        } : 0 < rowsCount ? {
                            rowHeader: [ this.rowNavigator.getItemsByLevel(0).length - 1 ]
                        } : {
                            cornerCell: {
                                rowLevel: 0,
                                columnLevel: columnsDepth - 1
                            }
                        } : "down" === direction ? currentIndex < floatingRowsCount - 1 ? {
                            floatingRowHeader: currentIndex + 1
                        } : {
                            cornerCell: {
                                rowLevel: 0,
                                columnLevel: 1 === rowsDepth ? 0 : columnsDepth - 1
                            }
                        } : void 0;
                        if (0 < currentIndex) return {
                            floatingBodyCell: {
                                rowIndex: currentIndex - 1,
                                columnIndex: columnHeader - 1
                            }
                        };
                        if (0 < rowsCount) return {
                            bodyCell: {
                                rowIndex: rowsCount - 1,
                                columnIndex: columnHeader - 1
                            }
                        };
                        columnHeader = this.columnNavigator.getHierarchyLeafAt(columnHeader - 1);
                        return {
                            columnHeader: this.columnNavigator.getPathIndices(columnHeader)
                        };
                    }, PivotTableFocusManager.prototype.moveFloatingBodyCellFocus = function(direction, hasCtrl, isA11yTable) {
                        var rowsCount = this.rowNavigator.getHierarchyLeafCount(), columnsCount = this.columnNavigator.getHierarchyLeafCount(), floatingRowsCount = this.rowNavigator.getFloatingHierarchyLeafCount(), rowsDepth = this.rowNavigator.getHierarchyDepth(), columnsDepth = this.columnNavigator.getHierarchyDepth(), newColumnIndex = this.currentFocus.floatingBodyCell.columnIndex, newRowIndex = this.currentFocus.floatingBodyCell.rowIndex;
                        switch (direction) {
                          case "left":
                            newColumnIndex--;
                            break;

                          case "right":
                            newColumnIndex++;
                            break;

                          case "up":
                            newRowIndex--;
                            break;

                          case "down":
                            newRowIndex++;
                        }
                        if (isA11yTable) {
                            if (hasCtrl) {
                                if ("up" === direction) return {
                                    columnHeader: this.columnNavigator.getPathIndices(this.columnNavigator.getHierarchyLeafAt(newColumnIndex))
                                };
                                if ("right" === direction) return {
                                    floatingBodyCell: {
                                        rowIndex: newRowIndex,
                                        columnIndex: columnsCount - 1
                                    }
                                };
                                if ("left" === direction) return {
                                    floatingBodyCell: {
                                        rowIndex: newRowIndex,
                                        columnIndex: 0
                                    }
                                };
                                if ("home" === direction) return {
                                    columnHeader: [ 0 ]
                                };
                                if ("end" === direction) return {
                                    floatingBodyCell: {
                                        rowIndex: floatingRowsCount - 1,
                                        columnIndex: columnsCount - 1
                                    }
                                };
                            }
                            if ("home" === direction) return {
                                floatingBodyCell: {
                                    rowIndex: newRowIndex,
                                    columnIndex: 0
                                }
                            };
                            if ("end" === direction) return {
                                floatingBodyCell: {
                                    rowIndex: newRowIndex,
                                    columnIndex: columnsCount - 1
                                }
                            };
                        }
                        if (0 <= newRowIndex && 0 <= newColumnIndex && newRowIndex < floatingRowsCount && newColumnIndex < columnsCount) return {
                            floatingBodyCell: {
                                rowIndex: newRowIndex,
                                columnIndex: newColumnIndex
                            }
                        };
                        if (newRowIndex < 0) {
                            if (0 < rowsCount) return {
                                bodyCell: {
                                    rowIndex: rowsCount - 1,
                                    columnIndex: newColumnIndex
                                }
                            };
                            var header = this.columnNavigator.getHierarchyLeafAt(newColumnIndex);
                            return {
                                columnHeader: this.columnNavigator.getPathIndices(header)
                            };
                        }
                        if (isA11yTable) return this.currentFocus;
                        if (floatingRowsCount <= newRowIndex) {
                            header = this.columnNavigator.getHierarchyLeafAt(newColumnIndex), header = this.columnNavigator.getLeafAncestorAtLevel(header, 0);
                            return {
                                columnHeader: this.columnNavigator.getPathIndices(header)
                            };
                        }
                        return newColumnIndex < 0 ? {
                            floatingRowHeader: newRowIndex
                        } : columnsCount <= newColumnIndex ? newRowIndex < floatingRowsCount - 1 ? {
                            floatingRowHeader: newRowIndex + 1
                        } : this.rowNavigator.hasHierarchy() ? {
                            cornerCell: {
                                rowLevel: 0,
                                columnLevel: 1 === rowsDepth ? 0 : columnsDepth - 1
                            }
                        } : {
                            columnHeader: [ 0 ]
                        } : void 0;
                    }, PivotTableFocusManager;
                }();
                pivotTable.PivotTableFocusManager = PivotTableFocusManager;
            }(controls.pivotTable || (controls.pivotTable = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            function fire(eventHandlers, eventArgs) {
                if (eventHandlers) for (var _i = 0, eventHandlers_1 = eventHandlers; _i < eventHandlers_1.length; _i++) (0, 
                eventHandlers_1[_i])(eventArgs);
            }
            controls.fire = fire;
            var ScrollbarButton = function() {
                function ScrollbarButton(owner, direction) {
                    this._owner = owner, this._direction = direction, this._timerHandle = void 0, this.createView();
                    var that = this;
                    this._element.addEventListener("mousedown", function(e) {
                        that.onMouseDown(e);
                    }), $(this._element).addClass("unselectable"), $(this._svg).addClass("unselectable"), 
                    $(this._polygon).addClass("unselectable");
                }
                return Object.defineProperty(ScrollbarButton.prototype, "element", {
                    get: function() {
                        return this._element;
                    },
                    enumerable: !1,
                    configurable: !0
                }), ScrollbarButton.prototype.createView = function() {
                    var svgStyle = "http://www.w3.org/2000/svg";
                    this._polygon = document.createElementNS(svgStyle, "polygon"), this._polygon.setAttributeNS(null, "points", "3,3 6,3 13,8 6,13 3,13 10,8"), 
                    this._polygon.setAttributeNS(null, "fill", ScrollbarButton.ARROW_COLOR), this._svg = document.createElementNS(svgStyle, "svg");
                    svgStyle = this._svg.style;
                    svgStyle.position = "absolute", svgStyle.left = "0px", svgStyle.top = "0px", this._svg.appendChild(this._polygon), 
                    this._element = document.createElement("div"), this._element.className = Scrollbar.arrowClassName, 
                    this._element.appendChild(this._svg), this._owner.element.appendChild(this._element);
                }, ScrollbarButton.prototype.onMouseDown = function(event) {
                    var that_1, that = this;
                    clearTimeout(this._timerHandle), this._mouseUpWrapper || (event.cancelBubble = !0, 
                    (that_1 = this)._mouseUpWrapper = function(event) {
                        that_1.onMouseUp(event);
                    }, Scrollbar.addDocumentMouseUpEvent(this._mouseUpWrapper)), this._owner._scrollSmallIncrement(this._direction), 
                    this._owner.refresh(), this._timerHandle = setTimeout(function() {
                        that.onMouseDown(event);
                    }, 100), event.preventDefault && event.preventDefault();
                }, ScrollbarButton.prototype.onMouseUp = function(event) {
                    clearTimeout(this._timerHandle), Scrollbar.removeDocumentMouseUpEvent(this._mouseUpWrapper), 
                    this._mouseUpWrapper = void 0;
                }, ScrollbarButton.prototype.arrange = function(width, height, angle) {
                    var size = Math.min(width, height);
                    this._polygon.setAttributeNS(null, "transform", "translate(" + (width - size) / 2 + ", " + (height - size) / 2 + ") scale(" + size / 16 + ") rotate(" + angle + ",8,8)"), 
                    this._svg.setAttributeNS(null, "width", width + "px"), this._svg.setAttributeNS(null, "height", height + "px"), 
                    controls.HTMLElementUtils.setElementWidth(this._element, width), controls.HTMLElementUtils.setElementHeight(this._element, height);
                }, ScrollbarButton.MIN_WIDTH = 26, ScrollbarButton.ARROW_COLOR = "#404040", ScrollbarButton;
            }();
            controls.ScrollbarButton = ScrollbarButton;
            var Scrollbar = function() {
                function Scrollbar(parentElement, layoutKind) {
                    this.MIN_BAR_SIZE = 10, this.min = 0, this.max = 10, this.viewMin = 0, this.viewSize = 2, 
                    this.smallIncrement = 1, this._onscroll = [], this._screenToOffsetScale = 1, this.createView(parentElement, layoutKind);
                    var that = this;
                    this._element.addEventListener("mousedown", function(e) {
                        that.onBackgroundMouseDown(e);
                    }), this._middleBar.addEventListener("mousedown", function(e) {
                        that.onMiddleBarMouseDown(e);
                    }), this._timerHandle = void 0, this._visible = !0, this.element.winControl = this, 
                    $(this._touchPanel).addClass("unselectable");
                }
                return Scrollbar.prototype.scrollBy = function(delta) {
                    this.scrollTo(this.viewMin + delta);
                }, Scrollbar.prototype.scrollUp = function() {
                    this.scrollBy(-this.smallIncrement);
                }, Scrollbar.prototype.scrollDown = function() {
                    this.scrollBy(this.smallIncrement);
                }, Scrollbar.prototype.scrollPageUp = function() {
                    this.scrollBy(-this.viewSize);
                }, Scrollbar.prototype.scrollPageDown = function() {
                    this.scrollBy(this.viewSize);
                }, Object.defineProperty(Scrollbar.prototype, "width", {
                    get: function() {
                        return this._width;
                    },
                    set: function(value) {
                        this._width = value, this._element.style.width = value, this.invalidateArrange();
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "height", {
                    get: function() {
                        return this._height;
                    },
                    set: function(value) {
                        this._height = value, this._element.style.height = value, this.invalidateArrange();
                    },
                    enumerable: !1,
                    configurable: !0
                }), Scrollbar.prototype.refresh = function() {}, Object.defineProperty(Scrollbar.prototype, "element", {
                    get: function() {
                        return this._element;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "maxButton", {
                    get: function() {
                        return this._maxButton;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "middleBar", {
                    get: function() {
                        return this._middleBar;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Scrollbar.prototype._scrollSmallIncrement = function(direction) {
                    this.scrollBy(this.smallIncrement * direction);
                }, Object.defineProperty(Scrollbar.prototype, "visible", {
                    get: function() {
                        return this._visible;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "isInMouseCapture", {
                    get: function() {
                        return void 0 !== this._timerHandle;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Scrollbar.prototype.show = function(value) {
                    this._visible = value, this.element.style.visibility = value ? "visible" : "hidden", 
                    this.invalidateArrange();
                }, Scrollbar.prototype._getMouseOffset = function(event) {
                    return void 0 !== event.offsetX ? {
                        x: event.offsetX,
                        y: event.offsetY
                    } : void 0 !== event.layerX ? {
                        x: event.layerX,
                        y: event.layerY
                    } : {
                        x: event.screenX,
                        y: event.screenY
                    };
                }, Scrollbar.prototype._getOffsetXDelta = function(event) {
                    return (event.screenX - this._screenPrevMousePos.x) / this._screenToOffsetScale;
                }, Scrollbar.prototype._getOffsetYDelta = function(event) {
                    return (event.screenY - this._screenPrevMousePos.y) / this._screenToOffsetScale;
                }, Scrollbar.prototype._getOffsetXTouchDelta = function(event) {
                    return this._getMouseOffset(event).x - this._offsetTouchPrevPos.x;
                }, Scrollbar.prototype._getOffsetYTouchDelta = function(event) {
                    return this._getMouseOffset(event).y - this._offsetTouchPrevPos.y;
                }, Scrollbar.prototype.onTouchStart = function(e) {
                    1 === e.touches.length && this.onTouchMouseDown(e.touches[0]);
                }, Scrollbar.prototype.onTouchMove = function(e) {
                    1 === e.touches.length && (e.preventDefault && e.preventDefault(), this.onTouchMouseMove(e.touches[0]));
                }, Scrollbar.prototype.onTouchEnd = function(e) {
                    this.onTouchMouseUp(1 === e.touches.length ? e.touches[0] : e, !0);
                }, Scrollbar.prototype.onTouchMouseDown = function(e) {
                    !this._allowMouseDrag && e.pointerType === MSPointerEvent.MSPOINTER_TYPE_MOUSE || (this._offsetTouchPrevPos = this._offsetTouchStartPos = null, 
                    this._touchStarted = !0);
                }, Scrollbar.prototype._getOffsetTouchDelta = function(e) {
                    return null;
                }, Scrollbar.prototype.onTouchMouseMove = function(e) {
                    var delta;
                    this._touchStarted && (this._offsetTouchStartPos || (this._offsetTouchPrevPos = this._offsetTouchStartPos = this._getMouseOffset(e)), 
                    0 !== (delta = this._getOffsetTouchDelta(e)) && (this.scrollBy(-delta / this._getRunningSize(!1) * this.viewSize), 
                    this._offsetTouchPrevPos = this._getMouseOffset(e)), e.preventDefault && e.preventDefault(), 
                    e.cancelBubble = !0);
                }, Scrollbar.prototype.onTouchMouseUp = function(e, bubble) {
                    var end;
                    this._touchStarted && this._offsetTouchStartPos && (end = this._getMouseOffset(e), 
                    !bubble && (3 < Math.abs(this._offsetTouchStartPos.x - end.x) || 3 < Math.abs(this._offsetTouchStartPos.y - end.y)) && (e.preventDefault && e.preventDefault(), 
                    e.cancelBubble = !0)), this._touchStarted = !1;
                }, Scrollbar.prototype.createView = function(parentElement, layoutKind) {
                    this._element = document.createElement("div"), this._element.className = Scrollbar.className, 
                    this._element.setAttribute("drag-resize-disabled", "true"), this._element.style.zIndex = "2", 
                    0 === layoutKind && parentElement.appendChild(this._element), this._minButton = new ScrollbarButton(this, -1), 
                    this._maxButton = new ScrollbarButton(this, 1), this._middleBar = document.createElement("div"), 
                    this._middleBar.className = Scrollbar.barClassName, this._element.appendChild(this._middleBar);
                }, Scrollbar.prototype.scrollTo = function(viewMin) {
                    viewMin = Math.min(this.max - this.viewSize, Math.max(this.min, viewMin));
                    viewMin !== this.viewMin && (this.viewMin = viewMin, fire(this._onscroll, null));
                }, Scrollbar.prototype._scrollByPage = function(event) {}, Scrollbar.prototype._getRunningSize = function(net) {
                    return null;
                }, Scrollbar.prototype._getOffsetDelta = function(event) {
                    return null;
                }, Scrollbar.prototype.scroll = function(event) {
                    var delta = this._getOffsetDelta(event) / this._getRunningSize(!0) * (this.max - this.min);
                    if (delta < 0) {
                        if (this._getScreenMousePos(event) >= this._screenMaxMousePos) return;
                    } else if (0 < delta && this._getScreenMousePos(event) <= this._screenMinMousePos) return;
                    this.scrollBy(delta);
                }, Object.defineProperty(Scrollbar.prototype, "actualWidth", {
                    get: function() {
                        return void 0 === this._actualWidth && this.arrange(), this._actualWidth;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "actualHeight", {
                    get: function() {
                        return this._actualHeight, this._actualHeight;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "actualButtonWidth", {
                    get: function() {
                        return this._actualButtonWidth, this._actualButtonWidth;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(Scrollbar.prototype, "actualButtonHeight", {
                    get: function() {
                        return this._actualButtonHeight, this._actualButtonHeight;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Scrollbar.prototype.arrange = function() {
                    this._actualWidth || (this._actualWidth = this._element.offsetWidth, this._actualHeight = this._element.offsetHeight, 
                    this._actualButtonWidth = this._calculateButtonWidth(), this._actualButtonHeight = this._calculateButtonHeight(), 
                    this._minButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMinButtonAngle()), 
                    this._maxButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMaxButtonAngle()), 
                    this._setMaxButtonPosition());
                }, Scrollbar.prototype._calculateButtonWidth = function() {
                    return null;
                }, Scrollbar.prototype._calculateButtonHeight = function() {
                    return null;
                }, Scrollbar.prototype._getMinButtonAngle = function() {
                    return null;
                }, Scrollbar.prototype._getMaxButtonAngle = function() {
                    return null;
                }, Scrollbar.prototype._setMaxButtonPosition = function() {}, Scrollbar.prototype.invalidateArrange = function() {
                    this._actualWidth = void 0, this._actualHeight = void 0, this._actualButtonWidth = void 0, 
                    this._actualButtonHeight = void 0;
                }, Scrollbar.prototype.onHoldBackgroundMouseDown = function(event) {
                    var _this = this, holdDelay = this._timerHandle ? Scrollbar.ScrollbarBackgroundMousedownHoldDelay : Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay;
                    this._timerHandle = setTimeout(function() {
                        _this.onBackgroundMouseDown(event);
                    }, holdDelay);
                }, Scrollbar.prototype.onBackgroundMouseDown = function(event) {
                    var that = this;
                    clearTimeout(this._timerHandle), this._backgroundMouseUpWrapper || (event.cancelBubble = !0, 
                    this._backgroundMouseUpWrapper = function(event) {
                        that.onBackgroundMouseUp(event);
                    }, Scrollbar.addDocumentMouseUpEvent(this._backgroundMouseUpWrapper)), this._scrollByPage(event), 
                    this.refresh(), this.onHoldBackgroundMouseDown(event), event.preventDefault && event.preventDefault();
                }, Scrollbar.prototype.onBackgroundMouseUp = function(event) {
                    clearTimeout(this._timerHandle), this._timerHandle = void 0, Scrollbar.removeDocumentMouseUpEvent(this._backgroundMouseUpWrapper), 
                    this._backgroundMouseUpWrapper = void 0;
                }, Scrollbar.prototype.getPinchZoomY = function() {
                    return document.documentElement.clientHeight / window.innerHeight;
                }, Scrollbar.prototype.onMiddleBarMouseDown = function(event) {
                    event.cancelBubble = !0, this._screenPrevMousePos = {
                        x: event.screenX,
                        y: event.screenY
                    }, this._screenMinMousePos = this._getScreenMousePos(event) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualRight(this._minButton.element)), 
                    this._screenMaxMousePos = this._getScreenMousePos(event) + (this._getScreenContextualLeft(this._maxButton.element) - this._getScreenContextualRight(this._middleBar)), 
                    this._screenToOffsetScale = controls.HTMLElementUtils.getAccumulatedScale(this.element) * this.getPinchZoomY();
                    var that = this;
                    this._middleBarMouseMoveWrapper = function(e) {
                        that.onMiddleBarMouseMove(e);
                    }, Scrollbar.addDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), this._middleBarMouseUpWrapper = function(e) {
                        that.onMiddleBarMouseUp(e);
                    }, Scrollbar.addDocumentMouseUpEvent(this._middleBarMouseUpWrapper), event.preventDefault && event.preventDefault();
                }, Scrollbar.prototype.onMiddleBarMouseMove = function(event) {
                    this._screenPrevMousePos && (this.scroll(event), this.refresh(), this._screenPrevMousePos = {
                        x: event.screenX,
                        y: event.screenY
                    });
                }, Scrollbar.prototype.onMiddleBarMouseUp = function(event) {
                    this._screenPrevMousePos = void 0, Scrollbar.removeDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), 
                    this._middleBarMouseMoveWrapper = void 0, Scrollbar.removeDocumentMouseUpEvent(this._middleBarMouseUpWrapper), 
                    this._middleBarMouseUpWrapper = void 0, event.preventDefault && event.preventDefault();
                }, Scrollbar.prototype._getScreenContextualLeft = function(element) {
                    return null;
                }, Scrollbar.prototype._getScreenContextualRight = function(element) {
                    return null;
                }, Scrollbar.prototype.onMouseWheel = function(delta) {
                    delta && this.mouseWheel(delta);
                }, Scrollbar.prototype.mouseWheel = function(delta) {
                    this.visible && (delta < 0 ? delta = Math.min(-Scrollbar.MouseWheelRange, delta) : 0 < delta && (delta = Math.max(Scrollbar.MouseWheelRange, delta)), 
                    this.scrollBy(-delta / Scrollbar.MouseWheelRange * this.smallIncrement));
                }, Scrollbar.prototype._getScreenMousePos = function(event) {
                    return null;
                }, Scrollbar.addDocumentMouseUpEvent = function(func) {
                    document.addEventListener("mouseup", func);
                }, Scrollbar.removeDocumentMouseUpEvent = function(func) {
                    document.removeEventListener("mouseup", func);
                }, Scrollbar.addDocumentMouseMoveEvent = function(func) {
                    document.addEventListener("mousemove", func);
                }, Scrollbar.removeDocumentMouseMoveEvent = function(func) {
                    document.removeEventListener("mousemove", func);
                }, Scrollbar.DefaultScrollbarWidth = "15px", Scrollbar.ScrollbarBackgroundFirstTimeMousedownHoldDelay = 500, 
                Scrollbar.ScrollbarBackgroundMousedownHoldDelay = 50, Scrollbar.MouseWheelRange = 120, 
                Scrollbar.className = "scroll-bar-div", Scrollbar.barClassName = "scroll-bar-part-bar", 
                Scrollbar.arrowClassName = "scroll-bar-part-arrow", Scrollbar;
            }(), VerticalScrollbar = function(_super) {
                function HorizontalScrollbar(parentElement, _this) {
                    _this = _super.call(this, parentElement, _this) || this;
                    return _this.height = Scrollbar.DefaultScrollbarWidth, _this;
                }
                return __extends(HorizontalScrollbar, _super), HorizontalScrollbar.prototype._calculateButtonWidth = function() {
                    return Math.min(this.actualWidth / 2, Math.max(this.actualHeight, ScrollbarButton.MIN_WIDTH));
                }, HorizontalScrollbar.prototype._calculateButtonHeight = function() {
                    return this.actualHeight;
                }, HorizontalScrollbar.prototype._getMinButtonAngle = function() {
                    return -180;
                }, HorizontalScrollbar.prototype._getMaxButtonAngle = function() {
                    return 0;
                }, HorizontalScrollbar.prototype._setMaxButtonPosition = function() {
                    controls.HTMLElementUtils.setElementLeft(this.maxButton.element, this.actualWidth - this.actualButtonWidth);
                }, HorizontalScrollbar.prototype.refresh = function() {
                    this.arrange();
                    var barPos = this.actualWidth - 2 * this.actualButtonWidth - 2;
                    (barSize = this.viewSize / (this.max - this.min) * barPos) < this.MIN_BAR_SIZE && (barPos -= this.MIN_BAR_SIZE - barSize, 
                    barSize = this.MIN_BAR_SIZE), barPos < 0 && (barSize = barPos = 0);
                    var barSize = Math.min(barSize, barPos), barPos = this.viewMin / (this.max - this.min) * barPos;
                    controls.HTMLElementUtils.setElementWidth(this.middleBar, barSize), controls.HTMLElementUtils.setElementHeight(this.middleBar, this.actualHeight), 
                    controls.HTMLElementUtils.setElementLeft(this.middleBar, this.actualButtonWidth + 1 + barPos);
                }, HorizontalScrollbar.prototype.show = function(visible) {
                    visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.height = this.height : controls.HTMLElementUtils.setElementHeight(this.element, 0));
                }, HorizontalScrollbar.prototype._scrollByPage = function(x) {
                    var left = this.middleBar.offsetLeft, right = left + this.middleBar.offsetWidth, x = void 0 === x.offsetX ? x.layerX : x.offsetX;
                    right < x ? this.scrollPageDown() : x < left && this.scrollPageUp();
                }, HorizontalScrollbar.prototype._getRunningSize = function(barSize) {
                    var result = this.actualWidth;
                    return !barSize || (barSize = (result -= 2 * (this.actualButtonWidth + 1)) * (this.viewSize / (this.max - this.min))) < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize), 
                    result;
                }, HorizontalScrollbar.prototype._getOffsetDelta = function(event) {
                    return this._getOffsetXDelta(event);
                }, HorizontalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                    return this._getOffsetXTouchDelta(e);
                }, HorizontalScrollbar.prototype._getScreenContextualLeft = function(element) {
                    return element.getBoundingClientRect().left;
                }, HorizontalScrollbar.prototype._getScreenContextualRight = function(element) {
                    return element.getBoundingClientRect().right;
                }, HorizontalScrollbar.prototype._getScreenMousePos = function(event) {
                    return event.screenX;
                }, HorizontalScrollbar;
            }(controls.Scrollbar = Scrollbar);
            controls.HorizontalScrollbar = VerticalScrollbar;
            VerticalScrollbar = function(_super) {
                function VerticalScrollbar(parentElement, _this) {
                    _this = _super.call(this, parentElement, _this) || this;
                    return _this.width = Scrollbar.DefaultScrollbarWidth, _this;
                }
                return __extends(VerticalScrollbar, _super), VerticalScrollbar.prototype._calculateButtonWidth = function() {
                    return this.actualWidth;
                }, VerticalScrollbar.prototype._calculateButtonHeight = function() {
                    return Math.min(this.actualHeight / 2, Math.max(this.actualWidth, ScrollbarButton.MIN_WIDTH));
                }, VerticalScrollbar.prototype._getMinButtonAngle = function() {
                    return -90;
                }, VerticalScrollbar.prototype._getMaxButtonAngle = function() {
                    return 90;
                }, VerticalScrollbar.prototype._setMaxButtonPosition = function() {
                    controls.HTMLElementUtils.setElementTop(this.maxButton.element, this.actualHeight - this.actualButtonHeight);
                }, VerticalScrollbar.prototype.refresh = function() {
                    this.arrange();
                    var barPos = this.actualHeight - 2 * this.actualButtonHeight - 2, barSize = this.viewSize / (this.max - this.min) * barPos;
                    barSize < this.MIN_BAR_SIZE && (barPos -= this.MIN_BAR_SIZE - barSize, barSize = this.MIN_BAR_SIZE), 
                    barPos < 0 && (barSize = barPos = 0);
                    barPos = this.viewMin / (this.max - this.min) * barPos;
                    controls.HTMLElementUtils.setElementWidth(this.middleBar, this.actualWidth), controls.HTMLElementUtils.setElementHeight(this.middleBar, barSize), 
                    controls.HTMLElementUtils.setElementTop(this.middleBar, this.actualButtonHeight + 1 + barPos);
                }, VerticalScrollbar.prototype.show = function(visible) {
                    visible !== this.visible && (_super.prototype.show.call(this, visible), visible ? this.element.style.width = this.width : controls.HTMLElementUtils.setElementWidth(this.element, 0));
                }, VerticalScrollbar.prototype._scrollByPage = function(y) {
                    var top = this.middleBar.offsetTop, bottom = top + this.middleBar.offsetHeight, y = void 0 === y.offsetY ? y.layerY : y.offsetY;
                    bottom < y ? this.scrollPageDown() : y < top && this.scrollPageUp();
                }, VerticalScrollbar.prototype._getRunningSize = function(barSize) {
                    var result = this.actualHeight;
                    return !barSize || (barSize = (result -= 2 * (this.actualButtonHeight + 1)) * (this.viewSize / (this.max - this.min))) < this.MIN_BAR_SIZE && (result -= this.MIN_BAR_SIZE - barSize), 
                    result;
                }, VerticalScrollbar.prototype._getOffsetDelta = function(event) {
                    return this._getOffsetYDelta(event);
                }, VerticalScrollbar.prototype._getOffsetTouchDelta = function(e) {
                    return this._getOffsetYTouchDelta(e);
                }, VerticalScrollbar.prototype._getScreenContextualLeft = function(element) {
                    return element.getBoundingClientRect().top;
                }, VerticalScrollbar.prototype._getScreenContextualRight = function(element) {
                    return element.getBoundingClientRect().bottom;
                }, VerticalScrollbar.prototype._getScreenMousePos = function(event) {
                    return event.screenY;
                }, VerticalScrollbar;
            }(Scrollbar);
            controls.VerticalScrollbar = VerticalScrollbar;
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(internal) {
                var TablixResizer = function() {
                    function TablixResizer(element, handler) {
                        this._element = element, this._handler = handler, this._elementMouseDownWrapper = null, 
                        this._elementMouseMoveWrapper = null, this._elementMouseOutWrapper = null, this._documentMouseMoveWrapper = null, 
                        this._documentMouseUpWrapper = null, this._startMousePosition = null, this._originalCursor = null;
                    }
                    return TablixResizer.addDocumentMouseUpEvent = function(listener) {
                        document.addEventListener("mouseup", listener);
                    }, TablixResizer.removeDocumentMouseUpEvent = function(listener) {
                        document.removeEventListener("mouseup", listener);
                    }, TablixResizer.addDocumentMouseMoveEvent = function(listener) {
                        document.addEventListener("mousemove", listener);
                    }, TablixResizer.removeDocumentMouseMoveEvent = function(listener) {
                        document.removeEventListener("mousemove", listener);
                    }, TablixResizer.getMouseCoordinates = function(event) {
                        return {
                            x: event.pageX,
                            y: event.pageY
                        };
                    }, TablixResizer.getMouseCoordinateDelta = function(previous, current) {
                        return {
                            x: current.x - previous.x,
                            y: current.y - previous.y
                        };
                    }, TablixResizer.prototype.initialize = function() {
                        var _this = this;
                        this._elementMouseDownWrapper = function(e) {
                            return _this.onElementMouseDown(e);
                        }, this._element.addEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseMoveWrapper = function(e) {
                            return _this.onElementMouseMove(e);
                        }, this._element.addEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseOutWrapper = function(e) {
                            return _this.onElementMouseOut(e);
                        }, this._element.addEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseDoubleClickOutWrapper = function(e) {
                            return _this.onElementMouseDoubleClick(e);
                        }, this._element.addEventListener("dblclick", this._elementMouseDoubleClickOutWrapper);
                    }, TablixResizer.prototype.uninitialize = function() {
                        this._element.removeEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseDownWrapper = null, 
                        this._element.removeEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseMoveWrapper = null, 
                        this._element.removeEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseOutWrapper = null, 
                        this._element.removeEventListener("dblclick", this._elementMouseDoubleClickOutWrapper), 
                        this._elementMouseDoubleClickOutWrapper = null;
                    }, Object.defineProperty(TablixResizer.prototype, "cell", {
                        get: function() {
                            return null;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixResizer.prototype, "element", {
                        get: function() {
                            return this._element;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixResizer.prototype._hotSpot = function(position) {
                        return !1;
                    }, TablixResizer.prototype.onElementMouseDown = function(event) {
                        var _this = this, position = TablixResizer.getMouseCoordinates(event);
                        this._hotSpot(position) && (event.cancelBubble = !0, this._startMousePosition = position, 
                        this._documentMouseMoveWrapper = function(e) {
                            return _this.onDocumentMouseMove(e);
                        }, TablixResizer.addDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(e) {
                            return _this.onDocumentMouseUp(e);
                        }, TablixResizer.addDocumentMouseUpEvent(this._documentMouseUpWrapper), document.documentElement && (this._originalCursor = document.documentElement.style.cursor, 
                        document.documentElement.style.cursor = TablixResizer.resizeCursor), this._handler.onStartResize(this.cell, this._startMousePosition.x, this._startMousePosition.y));
                    }, TablixResizer.prototype.onElementMouseMove = function(event) {
                        this._startMousePosition || (this._hotSpot(TablixResizer.getMouseCoordinates(event)) ? null === this._originalCursor && (this._originalCursor = this._element.style.cursor, 
                        this._element.style.cursor = TablixResizer.resizeCursor) : null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                        this._originalCursor = null));
                    }, TablixResizer.prototype.onElementMouseOut = function(event) {
                        this._startMousePosition || null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                        this._originalCursor = null);
                    }, TablixResizer.prototype.onElementMouseDoubleClick = function(event) {
                        this._hotSpot(TablixResizer.getMouseCoordinates(event)) && this._handler.onReset(this.cell);
                    }, TablixResizer.prototype.onDocumentMouseMove = function(event) {
                        var delta;
                        this._startMousePosition && (delta = TablixResizer.getMouseCoordinateDelta(this._startMousePosition, TablixResizer.getMouseCoordinates(event)), 
                        this._handler.onResize(this.cell, delta.x, delta.y), event.preventDefault());
                    }, TablixResizer.prototype.onDocumentMouseUp = function(event) {
                        this._startMousePosition = null, TablixResizer.removeDocumentMouseMoveEvent(this._documentMouseMoveWrapper), 
                        this._documentMouseMoveWrapper = null, TablixResizer.removeDocumentMouseUpEvent(this._documentMouseUpWrapper), 
                        this._documentMouseUpWrapper = null, document.documentElement && (document.documentElement.style.cursor = this._originalCursor), 
                        event.preventDefault && event.preventDefault(), this._handler.onEndResize(this.cell);
                    }, TablixResizer.resizeHandleSize = 4, TablixResizer.resizeCursor = "e-resize", 
                    TablixResizer;
                }(), TablixDomResizer = function(_super) {
                    function TablixDomResizer(cell, element, _this) {
                        _this = _super.call(this, element, _this) || this;
                        return _this._cell = cell, _this;
                    }
                    return __extends(TablixDomResizer, _super), Object.defineProperty(TablixDomResizer.prototype, "cell", {
                        get: function() {
                            return this._cell;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixDomResizer.prototype._hotSpot = function(position) {
                        return position.x >= this.element.getBoundingClientRect().right - TablixResizer.resizeHandleSize;
                    }, TablixDomResizer;
                }(internal.TablixResizer = TablixResizer);
                internal.TablixDomResizer = TablixDomResizer;
                var TablixCellPresenter = function() {
                    function TablixCellPresenter(fitProportionally, layoutKind) {
                        this._tableCell = null, this._contentElement = internal.TablixUtils.createDiv(), 
                        this._contentHost = internal.TablixUtils.createDiv(), this.layoutKind = layoutKind, 
                        this._contentElement.appendChild(this._contentHost), this._resizer = null;
                    }
                    return TablixCellPresenter.prototype.initialize = function(owner) {
                        this._owner = owner;
                    }, Object.defineProperty(TablixCellPresenter.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixCellPresenter.prototype.registerTableCell = function(tableCell) {
                        (this._tableCell = tableCell).appendChild(this._contentElement);
                    }, Object.defineProperty(TablixCellPresenter.prototype, "tableCell", {
                        get: function() {
                            return this._tableCell;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixCellPresenter.prototype, "contentElement", {
                        get: function() {
                            return this._contentElement;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixCellPresenter.prototype, "contentHost", {
                        get: function() {
                            return this._contentHost;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixCellPresenter.prototype.registerClickHandler = function(handler) {
                        this._contentElement.onclick = handler;
                    }, TablixCellPresenter.prototype.unregisterClickHandler = function() {
                        this._contentElement.onclick = null;
                    }, TablixCellPresenter.prototype.onContainerWidthChanged = function(value) {
                        controls.HTMLElementUtils.setElementWidth(this._contentElement, value);
                    }, TablixCellPresenter.prototype.onContinerHeightChanged = function(height) {
                        controls.HTMLElementUtils.setElementHeight(this._contentElement, height);
                    }, TablixCellPresenter.prototype.onColumnSpanChanged = function(value) {
                        this._tableCell.colSpan = value;
                    }, TablixCellPresenter.prototype.onRowSpanChanged = function(value) {
                        this._tableCell.rowSpan = value;
                    }, TablixCellPresenter.prototype.onTextAlignChanged = function(value) {
                        this._tableCell.style.textAlign = value;
                    }, TablixCellPresenter.prototype.onClear = function() {
                        this._contentHost.className = "", this._tableCell.className = "";
                    }, TablixCellPresenter.prototype.onHorizontalScroll = function(width, offset) {
                        controls.HTMLElementUtils.setElementLeft(this._contentHost, offset), controls.HTMLElementUtils.setElementWidth(this._contentHost, width);
                    }, TablixCellPresenter.prototype.onVerticalScroll = function(height, offset) {
                        controls.HTMLElementUtils.setElementTop(this._contentHost, offset), controls.HTMLElementUtils.setElementHeight(this._contentHost, height);
                    }, TablixCellPresenter.prototype.onInitializeScrolling = function() {
                        controls.HTMLElementUtils.setElementLeft(this._contentHost, 0), controls.HTMLElementUtils.setElementTop(this._contentHost, 0), 
                        controls.HTMLElementUtils.setElementWidth(this._contentHost, -1), controls.HTMLElementUtils.setElementHeight(this._contentHost, -1);
                    }, TablixCellPresenter.prototype.enableHorizontalResize = function(enable, handler) {
                        enable !== (null !== this._resizer) && (enable ? (this._resizer = new TablixDomResizer(this._owner, this._tableCell, handler), 
                        this._resizer.initialize()) : (this._resizer.uninitialize(), this._resizer = null));
                    }, TablixCellPresenter.prototype.disableDragResize = function() {
                        this._tableCell.setAttribute(TablixCellPresenter._dragResizeDisabledAttributeName, "true");
                    }, TablixCellPresenter._dragResizeDisabledAttributeName = "drag-resize-disabled", 
                    TablixCellPresenter;
                }();
                internal.TablixCellPresenter = TablixCellPresenter;
                var CanvasTablixGridPresenter = function() {
                    function TablixRowPresenter(fitProportionally) {
                        this._tableRow = null, this._fitProportionally = fitProportionally;
                    }
                    return TablixRowPresenter.prototype.initialize = function(row) {
                        this._row = row;
                    }, TablixRowPresenter.prototype.createCellPresenter = function(layoutKind) {
                        return new TablixCellPresenter(this._fitProportionally, layoutKind);
                    }, TablixRowPresenter.prototype.registerRow = function(tableRow) {
                        this._tableRow = tableRow;
                    }, TablixRowPresenter.prototype.onAppendCell = function(tableCell) {
                        var presenter = tableCell._presenter;
                        null === presenter.tableCell ? (tableCell = this._tableRow.insertCell(-1), presenter.registerTableCell(tableCell)) : this._tableRow.appendChild(presenter.tableCell);
                    }, TablixRowPresenter.prototype.onInsertCellBefore = function(cell, refCell) {
                        refCell._presenter.tableCell;
                        var tableCell, presenter = cell._presenter;
                        null === presenter.tableCell ? (tableCell = this._tableRow.insertCell(Math.max(0, refCell._presenter.tableCell.cellIndex - 1)), 
                        presenter.registerTableCell(tableCell)) : this._tableRow.insertBefore(cell._presenter.tableCell, refCell._presenter.tableCell);
                    }, TablixRowPresenter.prototype.onRemoveCell = function(cell) {
                        this._tableRow.removeChild(cell._presenter.tableCell);
                    }, TablixRowPresenter.prototype.getHeight = function() {
                        return this.getCellHeight(this._row.getTablixCell());
                    }, TablixRowPresenter.prototype.getCellHeight = function(cell) {
                        return -1;
                    }, TablixRowPresenter.prototype.getCellContentHeight = function(cell) {
                        return -1;
                    }, Object.defineProperty(TablixRowPresenter.prototype, "tableRow", {
                        get: function() {
                            return this._tableRow;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixRowPresenter;
                }(), DashboardRowPresenter = function(_super) {
                    function DashboardRowPresenter(gridPresenter, fitProportionally) {
                        return _super.call(this, fitProportionally) || this;
                    }
                    return __extends(DashboardRowPresenter, _super), DashboardRowPresenter.prototype.getCellHeight = function(cell) {
                        return cell.containerHeight;
                    }, DashboardRowPresenter.prototype.getCellContentHeight = function(cell) {
                        return cell.contentHeight;
                    }, DashboardRowPresenter;
                }(internal.TablixRowPresenter = CanvasTablixGridPresenter);
                internal.DashboardRowPresenter = DashboardRowPresenter;
                var CanvasRowPresenter = function(_super) {
                    function CanvasRowPresenter() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(CanvasRowPresenter, _super), CanvasRowPresenter.prototype.getCellHeight = function(cell) {
                        return cell.containerHeight;
                    }, CanvasRowPresenter.prototype.getCellContentHeight = function(cell) {
                        return cell.contentHeight;
                    }, CanvasRowPresenter;
                }(CanvasTablixGridPresenter);
                internal.CanvasRowPresenter = CanvasRowPresenter;
                var DashboardTablixGridPresenter = function() {
                    function TablixColumnPresenter() {}
                    return TablixColumnPresenter.prototype.initialize = function(column) {
                        this._column = column;
                    }, TablixColumnPresenter.prototype.getWidth = function() {
                        var width = this.getPersistedWidth();
                        return width = null == width ? this.getCellWidth(this._column.getTablixCell()) : width;
                    }, TablixColumnPresenter.prototype.getPersistedWidth = function() {
                        return -1;
                    }, TablixColumnPresenter.prototype.getCellWidth = function(cell) {
                        return -1;
                    }, TablixColumnPresenter;
                }(), DashboardColumnPresenter = function(_super) {
                    function DashboardColumnPresenter(gridPresenter) {
                        var _this = _super.call(this) || this;
                        return _this._gridPresenter = gridPresenter, _this;
                    }
                    return __extends(DashboardColumnPresenter, _super), DashboardColumnPresenter.prototype.getPersistedWidth = function() {
                        return this._gridPresenter.sizeComputationManager.cellWidth;
                    }, DashboardColumnPresenter.prototype.getCellWidth = function(cell) {
                        return this._gridPresenter.sizeComputationManager.cellWidth;
                    }, DashboardColumnPresenter;
                }(internal.TablixColumnPresenter = DashboardTablixGridPresenter);
                internal.DashboardColumnPresenter = DashboardColumnPresenter;
                var CanvasColumnPresenter = function(_super) {
                    function CanvasColumnPresenter(gridPresenter, index) {
                        var _this = _super.call(this) || this;
                        return _this._gridPresenter = gridPresenter, _this;
                    }
                    return __extends(CanvasColumnPresenter, _super), CanvasColumnPresenter.prototype.getPersistedWidth = function() {
                        return this._gridPresenter.getPersistedColumnWidth(this._column);
                    }, CanvasColumnPresenter.prototype.getCellWidth = function(cell) {
                        return cell._presenter ? cell.contentWidth : 0;
                    }, CanvasColumnPresenter;
                }(DashboardTablixGridPresenter);
                internal.CanvasColumnPresenter = CanvasColumnPresenter;
                CanvasTablixGridPresenter = function() {
                    function TablixGridPresenter(columnWidthManager) {
                        this._table = internal.TablixUtils.createTable(), this._table.className = "unselectable", 
                        this._footerTable = internal.TablixUtils.createTable(), this._footerTable.className = "unselectable", 
                        this._columnWidthManager = columnWidthManager;
                    }
                    return TablixGridPresenter.prototype.initialize = function(owner, gridHost, footerHost, control) {
                        this._owner = owner, gridHost.appendChild(this._table), footerHost.appendChild(this._footerTable);
                    }, TablixGridPresenter.prototype.getWidth = function() {
                        return -1;
                    }, TablixGridPresenter.prototype.getHeight = function() {
                        return -1;
                    }, TablixGridPresenter.prototype.getScreenToCssRatioX = function() {
                        return 1;
                    }, TablixGridPresenter.prototype.getScreenToCssRatioY = function() {
                        return 1;
                    }, TablixGridPresenter.prototype.createRowPresenter = function() {
                        return null;
                    }, TablixGridPresenter.prototype.createColumnPresenter = function(index) {
                        return null;
                    }, TablixGridPresenter.prototype.onAppendRow = function(row) {
                        var tableRow, presenter = row.presenter;
                        null === presenter.tableRow ? (tableRow = this._table.insertRow(-1), presenter.registerRow(tableRow)) : this._table.tBodies[0].appendChild(row.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onInsertRowBefore = function(row, refRow) {
                        refRow.presenter.tableRow;
                        var tableRow, presenter = row.presenter;
                        null === presenter.tableRow ? (tableRow = this._table.insertRow(Math.max(0, refRow.presenter.tableRow.rowIndex - 1)), 
                        presenter.registerRow(tableRow)) : this._table.tBodies[0].insertBefore(row.presenter.tableRow, refRow.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onRemoveRow = function(row) {
                        this._table.tBodies[0].removeChild(row.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onAddFooterRow = function(row) {
                        var tableRow, presenter = row.presenter;
                        null === presenter.tableRow ? (tableRow = this._footerTable.insertRow(-1), presenter.registerRow(tableRow)) : this._footerTable.tBodies[0].appendChild(row.presenter.tableRow);
                    }, TablixGridPresenter.prototype.onClear = function() {
                        controls.HTMLElementUtils.clearChildren(this._table), controls.HTMLElementUtils.clearChildren(this._footerTable);
                    }, TablixGridPresenter.prototype.onFillColumnsProportionallyChanged = function(value) {
                        value ? (this._table.style.width = "100%", this._footerTable.style.width = "100%") : (this._table.style.width = "auto", 
                        this._footerTable.style.width = "auto");
                    }, TablixGridPresenter.prototype.invokeColumnResizeEndCallback = function(column, width) {
                        this._columnWidthManager && this._columnWidthManager.onColumnWidthChanged(controls.TablixColumnWidthManager.getColumnQueryName(column), width);
                    }, TablixGridPresenter.prototype.getPersistedColumnWidth = function(column) {
                        if (this._columnWidthManager) return this._columnWidthManager.getPersistedColumnWidth(controls.TablixColumnWidthManager.getColumnQueryName(column));
                    }, TablixGridPresenter;
                }(), DashboardTablixGridPresenter = function(_super) {
                    function DashboardTablixGridPresenter(sizeComputationManager) {
                        var _this = _super.call(this) || this;
                        return _this._sizeComputationManager = sizeComputationManager, _this;
                    }
                    return __extends(DashboardTablixGridPresenter, _super), DashboardTablixGridPresenter.prototype.createRowPresenter = function() {
                        return new DashboardRowPresenter(this, this._owner.fillColumnsProportionally);
                    }, DashboardTablixGridPresenter.prototype.createColumnPresenter = function(index) {
                        return new DashboardColumnPresenter(this);
                    }, Object.defineProperty(DashboardTablixGridPresenter.prototype, "sizeComputationManager", {
                        get: function() {
                            return this._sizeComputationManager;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DashboardTablixGridPresenter.prototype.getWidth = function() {
                        return this._sizeComputationManager.gridWidth;
                    }, DashboardTablixGridPresenter.prototype.getHeight = function() {
                        return this._sizeComputationManager.gridHeight;
                    }, DashboardTablixGridPresenter;
                }(internal.TablixGridPresenter = CanvasTablixGridPresenter);
                internal.DashboardTablixGridPresenter = DashboardTablixGridPresenter;
                CanvasTablixGridPresenter = function(_super) {
                    function CanvasTablixGridPresenter(columnWidthManager) {
                        return _super.call(this, columnWidthManager) || this;
                    }
                    return __extends(CanvasTablixGridPresenter, _super), CanvasTablixGridPresenter.prototype.createRowPresenter = function() {
                        return new CanvasRowPresenter(this._owner.fillColumnsProportionally);
                    }, CanvasTablixGridPresenter.prototype.createColumnPresenter = function(index) {
                        return new CanvasColumnPresenter(this, index);
                    }, CanvasTablixGridPresenter.prototype.getWidth = function() {
                        return controls.HTMLElementUtils.getElementWidth(this._table);
                    }, CanvasTablixGridPresenter.prototype.getHeight = function() {
                        return controls.HTMLElementUtils.getElementHeight(this._table);
                    }, CanvasTablixGridPresenter;
                }(CanvasTablixGridPresenter);
                internal.CanvasTablixGridPresenter = CanvasTablixGridPresenter;
            }(controls.internal || (controls.internal = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(internal) {
                var ColumnRealizationManager = function() {
                    function TablixDimensionRealizationManager(binder) {
                        this._binder = binder, this._adjustmentFactor = 1;
                    }
                    return TablixDimensionRealizationManager.prototype._getOwner = function() {
                        return null;
                    }, Object.defineProperty(TablixDimensionRealizationManager.prototype, "binder", {
                        get: function() {
                            return this._binder;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "adjustmentFactor", {
                        get: function() {
                            return this._adjustmentFactor;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "itemsToRealizeCount", {
                        get: function() {
                            return this._itemsToRealizeCount;
                        },
                        set: function(count) {
                            this._itemsToRealizeCount = count;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixDimensionRealizationManager.prototype, "itemsEstimatedContextualWidth", {
                        get: function() {
                            return this._itemsEstimatedContextualWidth;
                        },
                        set: function(contextualWidth) {
                            this._itemsEstimatedContextualWidth = contextualWidth;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixDimensionRealizationManager.prototype.onStartRenderingIteration = function() {
                        var owner = this._getOwner();
                        owner.measureEnabled && !owner.done && this._getEstimatedItemsToRealizeCount(), 
                        this._realizedLeavesCount = 0;
                    }, TablixDimensionRealizationManager.prototype.onEndRenderingIteration = function(gridContextualWidth, filled) {
                        filled || this._getOwner().allItemsRealized || (this._adjustmentFactor *= this._getSizeAdjustment(gridContextualWidth));
                    }, TablixDimensionRealizationManager.prototype.onEndRenderingSession = function() {
                        this._adjustmentFactor = 1;
                    }, TablixDimensionRealizationManager.prototype.onCornerCellRealized = function(item, cell) {}, 
                    TablixDimensionRealizationManager.prototype.onHeaderRealized = function(item, cell, leaf) {
                        leaf && this._realizedLeavesCount++;
                    }, Object.defineProperty(TablixDimensionRealizationManager.prototype, "needsToRealize", {
                        get: function() {
                            return this._realizedLeavesCount < this._itemsToRealizeCount;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixDimensionRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {}, 
                    TablixDimensionRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                        return 1;
                    }, TablixDimensionRealizationManager;
                }(), RowRealizationManager = function(_super) {
                    function RowRealizationManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(RowRealizationManager, _super), Object.defineProperty(RowRealizationManager.prototype, "owner", {
                        set: function(owner) {
                            this._owner = owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), RowRealizationManager.prototype._getOwner = function() {
                        return this._owner;
                    }, RowRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                        this.estimateRowsToRealizeCount();
                    }, RowRealizationManager.prototype.estimateRowsToRealizeCount = function() {
                        this._owner, this._owner.dimension.model ? this._owner.alignToEnd ? this.itemsToRealizeCount = this._owner.dimension.getItemsCount() - this._owner.dimension.getIntegerScrollOffset() + 1 : this.itemsToRealizeCount = Math.ceil(this._owner.contextualWidthToFill / (this._owner.owner.getEstimatedRowHeight() * this.adjustmentFactor) + this._owner.dimension.getFractionScrollOffset()) - this._owner.otherLayoutManager.dimension.getDepth() + 1 : this.itemsToRealizeCount = 0;
                    }, RowRealizationManager.prototype.getEstimatedRowHierarchyWidth = function() {
                        if (!this._owner.dimension.model || 0 === this._owner.dimension.getItemsCount()) return 0;
                        var levels = new RowWidths();
                        this.updateRowHiearchyEstimatedWidth(this._owner.dimension.model, this._owner.dimension._hierarchyNavigator.getIndex(this._owner.dimension.getFirstVisibleItem(0)), levels);
                        for (var levelsArray = levels.items, levelCount = levelsArray.length, width = 0, i = 0; i < levelCount; i++) {
                            var level = levelsArray[i];
                            0 !== level.maxNonLeafWidth ? width += level.maxNonLeafWidth : width += level.maxLeafWidth;
                        }
                        return width;
                    }, RowRealizationManager.prototype.updateRowHiearchyEstimatedWidth = function(items, firstVisibleIndex, levels) {
                        if (!(firstVisibleIndex < 0)) for (var hierarchyNavigator = this._owner.owner.owner.hierarchyNavigator, binder = this.binder, length = hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < length; i++) {
                            if (levels.leafCount === this.itemsToRealizeCount) return;
                            var item = hierarchyNavigator.getAt(items, i), level = binder.getHeaderLabel(item), itemWidth = this._owner.getEstimatedHeaderWidth(level, firstVisibleIndex), isLeaf = hierarchyNavigator.isLeaf(item), l = hierarchyNavigator.getLevel(item), level = levels.items[l];
                            level || (level = new RowWidth(), levels.items[l] = level), isLeaf ? (level.maxLeafWidth = Math.max(level.maxLeafWidth, itemWidth), 
                            levels.leafCount = levels.leafCount + 1) : (level.maxNonLeafWidth = Math.max(level.maxNonLeafWidth, itemWidth), 
                            this.updateRowHiearchyEstimatedWidth(hierarchyNavigator.getChildren(item), this._owner.dimension.getFirstVisibleChildIndex(item), levels));
                        }
                    }, RowRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                        return gridContextualWidth / ((this._owner.getRealizedItemsCount() - this._owner.dimension.getFractionScrollOffset()) * this._owner.owner.getEstimatedRowHeight());
                    }, RowRealizationManager;
                }(internal.TablixDimensionRealizationManager = ColumnRealizationManager);
                internal.RowRealizationManager = RowRealizationManager;
                ColumnRealizationManager = function(_super) {
                    function ColumnRealizationManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(ColumnRealizationManager, _super), Object.defineProperty(ColumnRealizationManager.prototype, "owner", {
                        set: function(owner) {
                            this._owner = owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), ColumnRealizationManager.prototype._getOwner = function() {
                        return this._owner;
                    }, ColumnRealizationManager.prototype._getEstimatedItemsToRealizeCount = function() {
                        this.estimateColumnsToRealizeCount(this.getEstimatedRowHierarchyWidth());
                    }, Object.defineProperty(ColumnRealizationManager.prototype, "rowRealizationManager", {
                        get: function() {
                            return this._owner.otherLayoutManager.realizationManager;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), ColumnRealizationManager.prototype.getEstimatedRowHierarchyWidth = function() {
                        return this._owner.otherLayoutManager.done ? this._owner.getOtherHierarchyContextualHeight() : this.rowRealizationManager.getEstimatedRowHierarchyWidth() * this.adjustmentFactor;
                    }, ColumnRealizationManager.prototype.estimateColumnsToRealizeCount = function(columnCount) {
                        var widthToFill = this._owner.contextualWidthToFill - columnCount;
                        if (this._owner.dimension.model && !powerbi.Double.lessOrEqualWithPrecision(widthToFill, 0, internal.DimensionLayoutManager._pixelPrecision)) {
                            var binder = this.binder, hierarchyNavigator = this._owner.owner.owner.hierarchyNavigator, startColumnIndex = this._owner.dimension.getIntegerScrollOffset(), endColumnIndex = this._owner.dimension.getItemsCount(), columnCount = endColumnIndex - startColumnIndex, startRowIndex = this._owner.otherLayoutManager.dimension.getIntegerScrollOffset(), endRowIndex = this._owner.otherLayoutManager.dimension.getItemsCount();
                            if (this.itemsEstimatedContextualWidth = 0, this._owner.alignToEnd) this.itemsToRealizeCount = columnCount; else {
                                for (var i = startColumnIndex; i < endColumnIndex; i++) {
                                    if (powerbi.Double.greaterOrEqualWithPrecision(this.itemsEstimatedContextualWidth, widthToFill, internal.DimensionLayoutManager._pixelPrecision)) return void (this.itemsToRealizeCount = i - startColumnIndex);
                                    var maxWidth = 0, visibleSizeRatio = void 0, visibleSizeRatio = i === startColumnIndex ? this._owner.getVisibleSizeRatio() : 1, columnMember = hierarchyNavigator.getLeafAt(this._owner.dimension.model, i), label = binder.getHeaderLabel(columnMember);
                                    maxWidth = Math.max(maxWidth, this._owner.getEstimatedHeaderWidth(label, i));
                                    for (var j = startRowIndex; j < endRowIndex; j++) var intersection = hierarchyNavigator.getIntersection(hierarchyNavigator.getLeafAt(this._owner.otherLayoutManager.dimension.model, j), columnMember), label = binder.getCellContent(intersection), maxWidth = Math.max(maxWidth, this._owner.getEstimatedBodyCellWidth(label));
                                    this.itemsEstimatedContextualWidth += maxWidth * visibleSizeRatio * this.adjustmentFactor;
                                }
                                this.itemsToRealizeCount = columnCount;
                            }
                        } else this.itemsToRealizeCount = 0;
                    }, ColumnRealizationManager.prototype._getSizeAdjustment = function(gridContextualWidth) {
                        return gridContextualWidth / (this.getEstimatedRowHierarchyWidth() + this.itemsEstimatedContextualWidth);
                    }, ColumnRealizationManager;
                }(ColumnRealizationManager);
                internal.ColumnRealizationManager = ColumnRealizationManager;
                var RowWidths = function() {
                    this.items = [], this.leafCount = 0;
                };
                internal.RowWidths = RowWidths;
                var RowWidth = function() {
                    this.maxLeafWidth = 0, this.maxNonLeafWidth = 0;
                };
                internal.RowWidth = RowWidth;
            }(controls.internal || (controls.internal = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(internal) {
                var TablixCell = function() {
                    function TablixCell(presenter, extension, row) {
                        this._scrollable = !1, this._presenter = presenter, this.extension = extension, 
                        this._presenter.initialize(this), this._row = row, this.item = null, this.type = null, 
                        this._horizontalOffset = 0, this._verticalOffset = 0, this._colSpan = 1, this._rowSpan = 1, 
                        this._containerWidth = -1, this._containerHeight = -1, this.contentHeight = this.contentWidth = 0, 
                        this.position = new internal.TablixUtils.CellPosition();
                    }
                    return TablixCell.prototype.unfixRowHeight = function() {
                        this._row.unfixSize();
                    }, Object.defineProperty(TablixCell.prototype, "colSpan", {
                        get: function() {
                            return this._colSpan;
                        },
                        set: function(value) {
                            this._colSpan !== value && (this._presenter.onColumnSpanChanged(value), this._colSpan = value, 
                            this._presenter.onContainerWidthChanged(-1));
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixCell.prototype, "rowSpan", {
                        get: function() {
                            return this._rowSpan;
                        },
                        set: function(value) {
                            this._rowSpan !== value && (this._presenter.onRowSpanChanged(value), this._rowSpan = value, 
                            this._row.unfixSize());
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixCell.prototype.getCellSpanningHeight = function() {
                        return this._row.getCellSpanningHeight(this);
                    }, Object.defineProperty(TablixCell.prototype, "textAlign", {
                        get: function() {
                            return this._textAlign;
                        },
                        set: function(value) {
                            value !== this._textAlign && (this._presenter.onTextAlignChanged(value), this._textAlign = value);
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixCell.prototype, "horizontalOffset", {
                        get: function() {
                            return this._horizontalOffset;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixCell.prototype, "verticalOffset", {
                        get: function() {
                            return this._verticalOffset;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixCell.prototype.isScrollable = function() {
                        return this._scrollable;
                    }, TablixCell.prototype.clear = function() {
                        this.isScrollable() && this.initializeScrolling(), this._presenter.onClear(), this.setContainerWidth(-1), 
                        this.setContainerHeight(-1), this.contentHeight = this.contentWidth = 0;
                    }, TablixCell.prototype.initializeScrolling = function() {
                        this._presenter.onInitializeScrolling(), (this._horizontalOffset = 0) !== this._verticalOffset && (this._verticalOffset = 0), 
                        1 === this.colSpan && this.setContainerWidth(-1), 1 === this.rowSpan && this.setContainerHeight(-1);
                    }, TablixCell.prototype.prepare = function(scrollable) {
                        this.isScrollable() && this.initializeScrolling(), this._scrollable = scrollable;
                    }, TablixCell.prototype.scrollVertically = function(height, offsetInPixels) {
                        offsetInPixels = Math.ceil(-height * offsetInPixels);
                        this._verticalOffset = offsetInPixels, this.isScrollable() ? (this._presenter.onVerticalScroll(height, offsetInPixels), 
                        this.setContainerHeight(height + offsetInPixels)) : this.setContainerHeight(this._row.getCellSpanningHeight(this) + offsetInPixels);
                    }, TablixCell.prototype.scrollHorizontally = function(width, offset) {
                        this.isScrollable() && (this._presenter.onHorizontalScroll(width, offset), this.setContainerWidth(width + offset));
                    }, TablixCell.prototype.setContainerWidth = function(value) {
                        value !== this._containerWidth && (this._containerWidth = value, this._presenter.onContainerWidthChanged(value));
                    }, Object.defineProperty(TablixCell.prototype, "containerWidth", {
                        get: function() {
                            return this._containerWidth;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixCell.prototype.setContainerHeight = function(value) {
                        var tablix, binder;
                        (value = value < 0 ? -1 : value) !== this._containerHeight && (this._containerHeight = value, 
                        binder = (tablix = this._row.owner.owner).getBinder(), tablix.wordWrapRowHeaders && null != binder.applyWordWrapping && -1 !== value && 1 === this.type && !this.position.column.isLast && binder.applyWordWrapping(this.item, this), 
                        this._presenter.onContinerHeightChanged(value));
                    }, Object.defineProperty(TablixCell.prototype, "containerHeight", {
                        get: function() {
                            return this._containerHeight;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixCell.prototype.applyStyle = function(style) {
                        style && (style.applyStyle(this), this.contentHeight += style.getExtraBottom() + style.getExtraTop(), 
                        this.contentWidth += style.getExtraLeft() + style.getExtraRight());
                    }, TablixCell.prototype.enableHorizontalResize = function(enable, handler) {
                        this._presenter.enableHorizontalResize(enable, handler);
                    }, TablixCell.prototype.isColumnResizing = function() {
                        return this._column && this._column.isResizing();
                    }, TablixCell;
                }();
                internal.TablixCell = TablixCell;
                var TablixColumn = function() {
                    function TablixColumn(presenter, columnIndex) {
                        this._presenter = presenter, this._presenter.initialize(this), this._containerWidth = -1, 
                        this._width = -1, this._sizeFixed = !1, this._aligningWidth = -1, this._fixedToAligningWidth = !1, 
                        this._items = [], this._itemType = null, this._footerCell = null, this.isColumnResizing = !1;
                    }
                    return TablixColumn.prototype.initialize = function(owner) {
                        this._owner = owner, this._realizedRowHeaders = [], this._realizedColumnHeaders = [], 
                        this._realizedCornerCells = [], this._realizedBodyCells = [];
                    }, Object.defineProperty(TablixColumn.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixColumn.prototype.getType = function() {
                        return 0 < this._realizedCornerCells.length ? 0 : 2;
                    }, TablixColumn.prototype.getColumnHeadersOrCorners = function() {
                        return 0 < this._realizedCornerCells.length ? this._realizedCornerCells : this._realizedColumnHeaders;
                    }, TablixColumn.prototype.columnHeadersOrCornersEqual = function(newType, headers, hierarchyNavigator) {
                        if (this._items.length !== headers.length) return !1;
                        for (var count = this._items.length, i = 0; i < count; i++) if (!this.columnHeaderOrCornerEquals(this._itemType, this._items[i], newType, headers[i].item, hierarchyNavigator)) return !1;
                        return !0;
                    }, Object.defineProperty(TablixColumn.prototype, "itemType", {
                        get: function() {
                            return this._itemType;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixColumn.prototype.getLeafItem = function() {
                        return 0 === this._items.length ? null : this._items[this._items.length - 1];
                    }, TablixColumn.prototype.columnHeaderOrCornerEquals = function(type1, item1, type2, item2, hierarchyNavigator) {
                        if (type1 !== type2) return !1;
                        if (0 === type1) {
                            if (!hierarchyNavigator.cornerCellItemEquals(item1, item2)) return !1;
                        } else if (!hierarchyNavigator.headerItemEquals(item1, item2)) return !1;
                        return !0;
                    }, TablixColumn.prototype.OnLeafRealized = function(hierarchyNavigator) {
                        var type = this.getType(), columnHeadersOrCorners = this.getColumnHeadersOrCorners();
                        if (this.columnHeadersOrCornersEqual(type, columnHeadersOrCorners, hierarchyNavigator)) this.clearSpanningCellsWidth(this._realizedColumnHeaders); else {
                            var count = columnHeadersOrCorners.length;
                            this._items = [];
                            for (var i = 0; i < count; i++) this._items.push(columnHeadersOrCorners[i].item);
                            this._itemType = type, this.clearSize();
                        }
                    }, TablixColumn.prototype.clearSpanningCellsWidth = function(cells) {
                        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                            var cell = cells_1[_i];
                            1 < cell.colSpan && cell.setContainerWidth(-1);
                        }
                    }, TablixColumn.prototype.addCornerCell = function(cell) {
                        (cell._column = this)._realizedCornerCells.push(cell), cell.setContainerWidth(this._containerWidth);
                    }, TablixColumn.prototype.addRowHeader = function(cell) {
                        (cell._column = this)._realizedRowHeaders.push(cell), cell.setContainerWidth(this._containerWidth);
                    }, TablixColumn.prototype.addColumnHeader = function(cell, isLeaf) {
                        (cell._column = this)._realizedColumnHeaders.push(cell), isLeaf && cell.setContainerWidth(this._containerWidth);
                    }, TablixColumn.prototype.addBodyCell = function(cell) {
                        (cell._column = this)._realizedBodyCells.push(cell), cell.setContainerWidth(this._containerWidth);
                    }, Object.defineProperty(TablixColumn.prototype, "footer", {
                        get: function() {
                            return this._footerCell;
                        },
                        set: function(footerCell) {
                            (this._footerCell = footerCell)._column = this, footerCell.setContainerWidth(this._containerWidth);
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixColumn.prototype.isResizing = function() {
                        return this.isColumnResizing;
                    }, TablixColumn.prototype.onResize = function(width) {
                        this.isColumnResizing = !0, width !== this.getContentContextualWidth() && (this._containerWidth = width, 
                        this.setContainerWidth(this._containerWidth), this._sizeFixed = !0, this._fixedToAligningWidth = !1, 
                        this._aligningWidth = -1);
                    }, TablixColumn.prototype.onResizeEnd = function(width) {
                        this.isColumnResizing = !1;
                        var gridPresenter = this.owner._presenter;
                        gridPresenter && gridPresenter.invokeColumnResizeEndCallback(this, width);
                    }, TablixColumn.prototype.fixSize = function() {
                        var shouldAlign = -1 !== this._aligningWidth, switched = shouldAlign !== this._fixedToAligningWidth;
                        this._sizeFixed && !switched && !shouldAlign || (-1 === this._aligningWidth ? this.setContainerWidth(this._containerWidth) : this.setContainerWidth(this._aligningWidth), 
                        this._sizeFixed = !0, this._fixedToAligningWidth = -1 !== this._aligningWidth);
                    }, TablixColumn.prototype.clearSize = function() {
                        this._containerWidth = -1, this.setContainerWidth(this._containerWidth), this._sizeFixed = !1;
                    }, TablixColumn.prototype.getContentContextualWidth = function() {
                        return this._containerWidth;
                    }, TablixColumn.prototype.getCellIContentContextualWidth = function(cell) {
                        return this._presenter.getCellWidth(cell);
                    }, TablixColumn.prototype.getContextualWidth = function() {
                        return -1 !== this._width && -1 !== this._containerWidth || (this._width = this._presenter.getWidth()), 
                        this._width;
                    }, TablixColumn.prototype.calculateSize = function() {
                        if (this._sizeFixed) return this._containerWidth;
                        var contentWidth = 0, persistedWidth = this._presenter.getPersistedWidth();
                        if (null != persistedWidth) {
                            for (var contentWidth = persistedWidth, i = 0, len = this._realizedColumnHeaders.length; i < len - 1; i++) 1 === (cell = this._realizedColumnHeaders[i]).colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                            return this._containerWidth = contentWidth;
                        }
                        for (var _i = 0, _a = this._realizedColumnHeaders; _i < _a.length; _i++) 1 === (cell = _a[_i]).colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                        for (var _b = 0, _c = this._realizedRowHeaders; _b < _c.length; _b++) 1 === (cell = _c[_b]).colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell)));
                        for (var _d = 0, _e = this._realizedCornerCells; _d < _e.length; _d++) {
                            var cell = _e[_d];
                            contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell));
                        }
                        for (var _f = 0, _g = this._realizedBodyCells; _f < _g.length; _f++) {
                            cell = _g[_f];
                            contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(cell));
                        }
                        return null !== this._footerCell && 1 === this._footerCell.colSpan && (contentWidth = Math.max(contentWidth, this._presenter.getCellWidth(this._footerCell))), 
                        this._containerWidth = contentWidth;
                    }, TablixColumn.prototype.setAligningContextualWidth = function(size) {
                        this._aligningWidth = size;
                    }, TablixColumn.prototype.getAligningContextualWidth = function() {
                        return this._aligningWidth;
                    }, TablixColumn.prototype.setContainerWidth = function(value) {
                        for (var _i = 0, _a = this._realizedColumnHeaders; _i < _a.length; _i++) 1 === (cell = _a[_i]).colSpan && cell.setContainerWidth(value);
                        for (var _b = 0, _c = this._realizedRowHeaders; _b < _c.length; _b++) 1 === (cell = _c[_b]).colSpan && cell.setContainerWidth(value);
                        for (var _d = 0, _e = this._realizedCornerCells; _d < _e.length; _d++) (cell = _e[_d]).setContainerWidth(value);
                        for (var cell, _f = 0, _g = this._realizedBodyCells; _f < _g.length; _f++) (cell = _g[_f]).setContainerWidth(value);
                        null !== this._footerCell && 1 === this._footerCell.colSpan && this._footerCell.setContainerWidth(value), 
                        this._width = value;
                    }, TablixColumn.prototype.getTablixCell = function() {
                        var realizedCells = 0 < this._realizedColumnHeaders.length ? this._realizedColumnHeaders : this._realizedCornerCells;
                        return realizedCells[realizedCells.length - 1];
                    }, TablixColumn.prototype.getIndex = function(grid) {
                        return grid.realizedColumns.indexOf(this);
                    }, TablixColumn.prototype.getHeaders = function() {
                        return this._realizedColumnHeaders;
                    }, TablixColumn.prototype.getOtherDimensionHeaders = function() {
                        return this._realizedRowHeaders;
                    }, TablixColumn.prototype.getCellContextualSpan = function(cell) {
                        return cell.colSpan;
                    }, TablixColumn.prototype.getOtherDimensionOwner = function(cell) {
                        return cell._row;
                    }, TablixColumn;
                }();
                internal.TablixColumn = TablixColumn;
                var TablixRow = function() {
                    function TablixRow(presenter) {
                        this._containerHeight = -1, this._presenter = presenter, this._presenter.initialize(this), 
                        this._allocatedCells = [], this._heightFixed = !1, this._containerHeight = -1, this._height = -1;
                    }
                    return TablixRow.prototype.initialize = function(owner) {
                        this._owner = owner, this._realizedRowHeaders = [], this._realizedBodyCells = [], 
                        this._realizedCornerCells = [], this._realizedColumnHeaders = [], this._realizedCellsCount = 0;
                    }, Object.defineProperty(TablixRow.prototype, "presenter", {
                        get: function() {
                            return this._presenter;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixRow.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixRow.prototype.releaseUnusedCells = function(owner) {
                        this.releaseCells(owner, this._realizedCellsCount);
                    }, TablixRow.prototype.releaseAllCells = function(owner) {
                        this.releaseCells(owner, 0);
                    }, TablixRow.prototype.releaseCells = function(owner, startIndex) {
                        for (var cells = this._allocatedCells, length = cells.length, i = startIndex; i < length; i++) {
                            var cell = cells[i];
                            owner._unbindCell(cell), cell.clear();
                        }
                    }, TablixRow.prototype.moveScrollableCellsToEnd = function(count) {
                        for (var frontIndex = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), i = frontIndex; i < frontIndex + count; i++) {
                            var cell = this._allocatedCells[i];
                            this._presenter.onRemoveCell(cell), this._presenter.onAppendCell(cell), this._allocatedCells.push(cell);
                        }
                        this._allocatedCells.splice(frontIndex, count);
                    }, TablixRow.prototype.moveScrollableCellsToStart = function(count) {
                        for (var frontIndex = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), i = frontIndex; i < frontIndex + count; i++) {
                            var cell = this._allocatedCells.pop();
                            this._presenter.onRemoveCell(cell), this._presenter.onInsertCellBefore(cell, this._allocatedCells[frontIndex]), 
                            this._allocatedCells.splice(frontIndex, 0, cell);
                        }
                    }, TablixRow.prototype.getOrCreateCornerCell = function(column) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(!1), column.addCornerCell(cell), this._realizedCornerCells.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateRowHeader = function(column, scrollable, leaf) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.addRowHeader(cell), this._realizedRowHeaders.push(cell), 
                        leaf && cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateColumnHeader = function(column, scrollable, leaf) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.addColumnHeader(cell, leaf), this._realizedColumnHeaders.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateBodyCell = function(column, scrollable) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.addBodyCell(cell), this._realizedBodyCells.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateFooterRowHeader = function(column) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(!1), column.footer = cell, this._realizedRowHeaders.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getOrCreateFooterBodyCell = function(column, scrollable) {
                        var cell = this.getOrCreateCell();
                        return cell.prepare(scrollable), column.footer = cell, this._realizedBodyCells.push(cell), 
                        cell.setContainerHeight(this._containerHeight), cell;
                    }, TablixRow.prototype.getRowHeaderLeafIndex = function() {
                        for (var index = -1, count = this._allocatedCells.length, i = 0; i < count && 1 === this._allocatedCells[i].type; i++) index++;
                        return index;
                    }, TablixRow.prototype.getAllocatedCellAt = function(index) {
                        return this._allocatedCells[index];
                    }, TablixRow.prototype.moveCellsBy = function(delta) {
                        if (0 !== this._allocatedCells.length) if (0 < delta) for (var refCell = this._allocatedCells[0], i = 0; i < delta; i++) {
                            var cell = this.createCell(this);
                            this._presenter.onInsertCellBefore(cell, refCell), this._allocatedCells.unshift(cell), 
                            refCell = cell;
                        } else {
                            delta = -delta;
                            for (i = 0; i < delta; i++) this._presenter.onRemoveCell(this._allocatedCells[i]);
                            this._allocatedCells.splice(0, delta);
                        }
                    }, TablixRow.prototype.getRealizedCellCount = function() {
                        return this._realizedCellsCount;
                    }, TablixRow.prototype.getRealizedHeadersCount = function() {
                        return this._realizedRowHeaders.length;
                    }, TablixRow.prototype.getRealizedHeaderAt = function(index) {
                        return this._realizedRowHeaders[index];
                    }, TablixRow.prototype.getTablixCell = function() {
                        var realizedCells = 0 < this._realizedRowHeaders.length ? this._realizedRowHeaders : 0 < this._realizedCornerCells.length ? this._realizedCornerCells : this._realizedColumnHeaders;
                        return realizedCells[realizedCells.length - 1];
                    }, TablixRow.prototype.getOrCreateEmptySpaceCell = function() {
                        var cell = this._allocatedCells[this._realizedCellsCount];
                        return void 0 === cell && (cell = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = cell, 
                        this._presenter.onAppendCell(cell)), cell;
                    }, TablixRow.prototype.createCell = function(row) {
                        var presenter = this._presenter.createCellPresenter(this._owner.owner.layoutManager.getLayoutKind());
                        return new TablixCell(presenter, presenter, this);
                    }, TablixRow.prototype.getOrCreateCell = function() {
                        var cell = this._allocatedCells[this._realizedCellsCount];
                        return void 0 === cell ? (cell = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = cell, 
                        this._presenter.onAppendCell(cell)) : (cell.colSpan = 1, cell.rowSpan = 1), this._realizedCellsCount = this._realizedCellsCount + 1, 
                        cell;
                    }, TablixRow.prototype.isResizing = function() {
                        return !1;
                    }, TablixRow.prototype.onResize = function(height) {
                        height !== this.getContentContextualWidth() && (this._containerHeight = height, 
                        this.setContentHeight(), this._heightFixed = !0, this.setAligningContextualWidth(-1));
                    }, TablixRow.prototype.onResizeEnd = function(height) {}, TablixRow.prototype.fixSize = function() {
                        this.setContentHeight(), this._heightFixed = !0;
                    }, TablixRow.prototype.unfixSize = function() {
                        this._heightFixed = !1, this._height = -1;
                    }, TablixRow.prototype.getContentContextualWidth = function() {
                        return this._containerHeight;
                    }, TablixRow.prototype.getCellIContentContextualWidth = function(cell) {
                        return this.presenter.getCellContentHeight(cell);
                    }, TablixRow.prototype.getCellSpanningHeight = function(cell) {
                        var height = this.getContextualWidth();
                        if (1 < cell.rowSpan) for (var index = this.getIndex(this.owner), rows = this.owner.realizedRows, i = 1; i < cell.rowSpan; i++) height += rows[i + index].getContextualWidth();
                        return height;
                    }, TablixRow.prototype.getContextualWidth = function() {
                        return -1 !== this._height && -1 !== this._containerHeight || (this._height = this._presenter.getHeight()), 
                        this._height;
                    }, TablixRow.prototype.sizeFixed = function() {
                        return this._heightFixed;
                    }, TablixRow.prototype.calculateSize = function() {
                        if (this._heightFixed) return this._containerHeight;
                        for (var contentHeight = 0, count = this._realizedRowHeaders.length, i = 0; i < count; i++) 1 === (cell = this._realizedRowHeaders[i]).rowSpan && (contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(cell)));
                        for (count = this._realizedCornerCells.length, i = 0; i < count; i++) contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(this._realizedCornerCells[i]));
                        count = this._realizedColumnHeaders.length;
                        for (var cell, i = 0; i < count; i++) 1 === (cell = this._realizedColumnHeaders[i]).rowSpan && (contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(cell)));
                        count = this._realizedBodyCells.length;
                        for (i = 0; i < count; i++) contentHeight = Math.max(contentHeight, this._presenter.getCellContentHeight(this._realizedBodyCells[i]));
                        return this._containerHeight = contentHeight;
                    }, TablixRow.prototype.setAligningContextualWidth = function(size) {}, TablixRow.prototype.getAligningContextualWidth = function() {
                        return -1;
                    }, TablixRow.prototype.setContentHeight = function() {
                        for (var i = this._realizedRowHeaders.length - 1; 0 <= i; i--) -1 !== (cell = this._realizedRowHeaders[i]).containerHeight && cell._row.sizeFixed() || (cell.setContainerHeight(this._containerHeight), 
                        1 < cell.rowSpan && cell.setContainerHeight(this.getCellSpanningHeight(cell)));
                        for (var _i = 0, _a = this._realizedCornerCells; _i < _a.length; _i++) -1 !== (cell = _a[_i]).containerHeight && cell._row.sizeFixed() || cell.setContainerHeight(this._containerHeight);
                        for (var _b = 0, _c = this._realizedColumnHeaders; _b < _c.length; _b++) -1 !== (cell = _c[_b]).containerHeight && cell._row.sizeFixed() || (cell.setContainerHeight(this._containerHeight), 
                        1 < cell.rowSpan && cell.setContainerHeight(this.getCellSpanningHeight(cell)));
                        this._realizedBodyCells.length;
                        for (var cell, _d = 0, _e = this._realizedBodyCells; _d < _e.length; _d++) -1 !== (cell = _e[_d]).containerHeight && cell._row.sizeFixed() || cell.setContainerHeight(this._containerHeight);
                        this._height = -1;
                    }, TablixRow.prototype.getIndex = function(grid) {
                        return grid.realizedRows.indexOf(this);
                    }, TablixRow.prototype.getHeaders = function() {
                        return this._realizedRowHeaders;
                    }, TablixRow.prototype.getOtherDimensionHeaders = function() {
                        return this._realizedColumnHeaders;
                    }, TablixRow.prototype.getCellContextualSpan = function(cell) {
                        return cell.rowSpan;
                    }, TablixRow.prototype.getOtherDimensionOwner = function(cell) {
                        return cell._column;
                    }, TablixRow;
                }();
                internal.TablixRow = TablixRow;
                var TablixGrid = function() {
                    function TablixGrid(presenter) {
                        this._presenter = presenter, this._footerRow = null;
                    }
                    return TablixGrid.prototype.initialize = function(owner, gridHost, footerHost) {
                        this._owner = owner, this._presenter.initialize(this, gridHost, footerHost, owner), 
                        this.fillColumnsProportionally = !1, this._realizedRows = [], this._realizedColumns = [], 
                        this._emptySpaceHeaderCell = null, this._emptyFooterSpaceCell = null;
                    }, Object.defineProperty(TablixGrid.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "fillColumnsProportionally", {
                        get: function() {
                            return this._fillColumnsProportionally;
                        },
                        set: function(value) {
                            this._fillColumnsProportionally !== value && (this._fillColumnsProportionally = value, 
                            this._presenter.onFillColumnsProportionallyChanged(value));
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "realizedColumns", {
                        get: function() {
                            return this._realizedColumns;
                        },
                        set: function(columns) {
                            this._realizedColumns = columns;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "realizedRows", {
                        get: function() {
                            return this._realizedRows;
                        },
                        set: function(rows) {
                            this._realizedRows = rows;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "footerRow", {
                        get: function() {
                            return this._footerRow;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "emptySpaceHeaderCell", {
                        get: function() {
                            return this._emptySpaceHeaderCell;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixGrid.prototype, "emptySpaceFooterCell", {
                        get: function() {
                            return this._emptyFooterSpaceCell;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixGrid.prototype.ShowEmptySpaceCells = function(rowSpan, width) {
                        0 !== this._realizedRows.length && (0 === this._realizedRows.length || this._emptySpaceHeaderCell || (this._emptySpaceHeaderCell = this._realizedRows[0].getOrCreateEmptySpaceCell(), 
                        this._emptySpaceHeaderCell.rowSpan = rowSpan, this._emptySpaceHeaderCell.colSpan = 1, 
                        this._emptySpaceHeaderCell.setContainerWidth(width)), this._footerRow && null === this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell = this._footerRow.getOrCreateEmptySpaceCell(), 
                        this._emptyFooterSpaceCell.rowSpan = 1, this._emptyFooterSpaceCell.colSpan = 1, 
                        this._emptyFooterSpaceCell.setContainerWidth(width)));
                    }, TablixGrid.prototype.HideEmptySpaceCells = function() {
                        this._emptySpaceHeaderCell && (this._emptySpaceHeaderCell.clear(), this._emptySpaceHeaderCell = null), 
                        this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell.clear(), this._emptyFooterSpaceCell = null);
                    }, TablixGrid.prototype.onStartRenderingSession = function(clear) {
                        clear && (this.clearRows(), this.clearColumns());
                    }, TablixGrid.prototype.onStartRenderingIteration = function() {
                        this.initializeRows(), this.initializeColumns();
                    }, TablixGrid.prototype.onEndRenderingIteration = function() {
                        var rows = this._rows;
                        if (void 0 !== rows) for (var rowCount = rows.length, i = 0; i < rowCount; i++) rows[i].releaseUnusedCells(this._owner);
                        this._footerRow && this._footerRow.releaseUnusedCells(this._owner);
                    }, TablixGrid.prototype.getOrCreateRow = function(rowIndex) {
                        var currentRow = this._rows[rowIndex];
                        return void 0 === currentRow && ((currentRow = new TablixRow(this._presenter.createRowPresenter())).initialize(this), 
                        this._presenter.onAppendRow(currentRow), this._rows[rowIndex] = currentRow), void 0 === this._realizedRows[rowIndex] && (this._realizedRows[rowIndex] = currentRow), 
                        currentRow;
                    }, TablixGrid.prototype.getOrCreateFootersRow = function() {
                        return null === this._footerRow && (this._footerRow = new TablixRow(this._presenter.createRowPresenter()), 
                        this._footerRow.initialize(this), this._presenter.onAddFooterRow(this._footerRow)), 
                        this._footerRow;
                    }, TablixGrid.prototype.moveRowsToEnd = function(moveFromIndex, count) {
                        for (var i = 0; i < count; i++) {
                            var row = this._rows[i + moveFromIndex];
                            row.unfixSize(), this._presenter.onRemoveRow(row), this._presenter.onAppendRow(row), 
                            this._rows.push(row);
                        }
                        this._rows.splice(moveFromIndex, count);
                    }, TablixGrid.prototype.moveRowsToStart = function(moveToIndex, count) {
                        for (var refRow = this._rows[moveToIndex], i = 0; i < count; i++) {
                            var row = this._rows.pop();
                            row.unfixSize(), this._presenter.onRemoveRow(row), this._presenter.onInsertRowBefore(row, refRow), 
                            this._rows.splice(moveToIndex + i, 0, row);
                        }
                    }, TablixGrid.prototype.moveColumnsToEnd = function(moveFromIndex, count) {
                        for (var firstCol = this._rows[0]._realizedCornerCells.length, i = Math.max(this._columns[firstCol]._realizedColumnHeaders.length - 1, 0); i < this._rows.length; i++) this._rows[i].moveScrollableCellsToEnd(count);
                        for (i = 0; i < count; i++) {
                            var column = this._columns[i + moveFromIndex];
                            this._columns.push(column);
                        }
                        this._columns.splice(moveFromIndex, count);
                    }, TablixGrid.prototype.moveColumnsToStart = function(moveToIndex, count) {
                        for (var firstCol = this._rows[0]._realizedCornerCells.length, i = Math.max(this._columns[firstCol]._realizedColumnHeaders.length - 1, 0); i < this._rows.length; i++) this._rows[i].moveScrollableCellsToStart(count);
                        for (i = 0; i < count; i++) {
                            var column = this._columns.pop();
                            this._columns.splice(moveToIndex + i, 0, column);
                        }
                    }, TablixGrid.prototype.getOrCreateColumn = function(columnIndex) {
                        var currentColumn = this._columns[columnIndex];
                        return void 0 === currentColumn && ((currentColumn = new TablixColumn(this._presenter.createColumnPresenter(columnIndex), columnIndex)).initialize(this), 
                        this._columns[columnIndex] = currentColumn), void 0 === this._realizedColumns[columnIndex] && (this._realizedColumns[columnIndex] = currentColumn), 
                        currentColumn;
                    }, TablixGrid.prototype.initializeColumns = function() {
                        this._columns || (this._columns = []);
                        for (var length = this._columns.length, i = 0; i < length; i++) this._columns[i].initialize(this);
                        this._realizedColumns = [];
                    }, TablixGrid.prototype.clearColumns = function() {
                        this._columns = null, this._realizedColumns = null;
                    }, TablixGrid.prototype.initializeRows = function() {
                        var hasFooter = this._owner.rowDimension.hasFooter() && null !== this._footerRow;
                        this._realizedRows = [], this._rows || (this._rows = []);
                        for (var rows = this._rows, length = rows.length, i = 0; i < length; i++) rows[i].initialize(this);
                        hasFooter && (this._footerRow || this.getOrCreateFootersRow(), this._footerRow.initialize(this));
                    }, TablixGrid.prototype.clearRows = function() {
                        var rows = this._rows;
                        if (rows) {
                            for (var length_1 = rows.length, i = 0; i < length_1; i++) rows[i].releaseAllCells(this._owner);
                            this._footerRow && this._footerRow.releaseAllCells(this._owner), this._presenter.onClear(), 
                            this._footerRow = null, this._rows = null, this._realizedRows = null;
                        }
                    }, TablixGrid.prototype.getWidth = function() {
                        return this._presenter.getWidth();
                    }, TablixGrid.prototype.getHeight = function() {
                        return this._presenter.getHeight();
                    }, TablixGrid;
                }();
                internal.TablixGrid = TablixGrid;
            }(controls.internal || (controls.internal = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(internal) {
                var PixelConverter = jsCommon.PixelConverter, SizeComputationManager = function() {
                    function SizeComputationManager() {}
                    return Object.defineProperty(SizeComputationManager.prototype, "visibleWidth", {
                        get: function() {
                            return this._viewport ? this._viewport.width : 0;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "visibleHeight", {
                        get: function() {
                            return this._viewport ? this._viewport.height : 0;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "gridWidth", {
                        get: function() {
                            return this.visibleWidth;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "gridHeight", {
                        get: function() {
                            return this.visibleHeight;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "rowHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "cellWidth", {
                        get: function() {
                            return this._cellWidth;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "cellHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "contentWidth", {
                        get: function() {
                            return this._cellWidth;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(SizeComputationManager.prototype, "contentHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), SizeComputationManager.prototype.updateColumnCount = function(columnCount) {
                        this._columnCount = columnCount;
                    }, SizeComputationManager.prototype.updateRowHeight = function(rowHeight) {
                        this._cellHeight = rowHeight;
                    }, SizeComputationManager.prototype.updateScalingFactor = function(scalingFactor) {
                        this._scalingFactor = scalingFactor, this._cellWidth = this.computeColumnWidth(this._columnCount);
                    }, SizeComputationManager.prototype.updateViewport = function(viewport) {
                        this._viewport = viewport, this._cellWidth = this.computeColumnWidth(this._columnCount), 
                        this._cellHeight = this.computeColumnHeight();
                    }, SizeComputationManager.prototype.computeColumnWidth = function(totalColumnCount) {
                        var maxAllowedColumns = (maxAllowedColumns = this._scalingFactor) || 1, maxAllowedColumns = Math.floor(this._viewport.width / (maxAllowedColumns * SizeComputationManager.TablixMinimumColumnWidth));
                        return this.fitToColumnCount(maxAllowedColumns, totalColumnCount);
                    }, SizeComputationManager.prototype.computeColumnHeight = function() {
                        if (!this.hasImageContent) return this._cellHeight;
                        var width = this._viewport.width;
                        return width <= 250 ? 20 : width <= 510 ? 51 : width <= 770 ? 52 : void 0;
                    }, SizeComputationManager.prototype.fitToColumnCount = function(maxAllowedColumnCount, columnsToFit) {
                        columnsToFit = Math.min(maxAllowedColumnCount, columnsToFit);
                        return Math.floor(this._viewport.width / columnsToFit);
                    }, SizeComputationManager.TablixMinimumColumnWidth = 75, SizeComputationManager;
                }();
                internal.SizeComputationManager = SizeComputationManager;
                var DimensionLayoutManager = function() {
                    function DimensionLayoutManager(owner, grid, realizationManager) {
                        this._owner = owner, this._grid = grid, this._lastScrollOffset = null, this._isScrolling = !1, 
                        this._fixedSizeEnabled = !0, this._done = !1, this._realizationManager = realizationManager;
                    }
                    return Object.defineProperty(DimensionLayoutManager.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        set: function(owner) {
                            this._owner = owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "realizationManager", {
                        get: function() {
                            return this._realizationManager;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "fixedSizeEnabled", {
                        get: function() {
                            return this._fixedSizeEnabled;
                        },
                        set: function(enable) {
                            this._fixedSizeEnabled = enable;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.onCornerCellRealized = function(item, cell, leaf) {
                        this._realizationManager.onCornerCellRealized(item, cell);
                    }, DimensionLayoutManager.prototype.onHeaderRealized = function(item, cell, leaf) {
                        this._realizationManager.onHeaderRealized(item, cell, leaf);
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "needsToRealize", {
                        get: function() {
                            return this._realizationManager.needsToRealize;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getVisibleSizeRatio = function() {
                        return 1 - this.dimension.getFractionScrollOffset();
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "alignToEnd", {
                        get: function() {
                            return this._alignToEnd;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "done", {
                        get: function() {
                            return this._done;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype._requiresMeasure = function() {
                        return !0;
                    }, DimensionLayoutManager.prototype.startScrollingSession = function() {
                        this._isScrolling = !0;
                    }, DimensionLayoutManager.prototype.endScrollingSession = function() {
                        this._isScrolling = !1;
                    }, DimensionLayoutManager.prototype.isScrolling = function() {
                        return this._isScrolling;
                    }, DimensionLayoutManager.prototype.isResizing = function() {
                        return !1;
                    }, DimensionLayoutManager.prototype.getOtherHierarchyContextualHeight = function() {
                        var count = this.dimension.otherDimension.getDepth(), contextualHeight = 0, items = this._getRealizedItems();
                        if (0 < items.length) for (var i = 0; i < count; i++) contextualHeight += items[i].getContextualWidth();
                        return contextualHeight;
                    }, DimensionLayoutManager.prototype._isAutoSized = function() {
                        return !1;
                    }, DimensionLayoutManager.prototype.onStartRenderingSession = function() {
                        this._measureEnabled = this._requiresMeasure(), this._gridOffset = this.dimension.otherDimension.getDepth();
                    }, DimensionLayoutManager.prototype.onEndRenderingSession = function() {
                        this._realizationManager.onEndRenderingSession(), this._alignToEnd = !1, this._done = !1, 
                        this._measureEnabled = !0, this._sendDimensionsToControl();
                    }, DimensionLayoutManager.prototype._sendDimensionsToControl = function() {}, Object.defineProperty(DimensionLayoutManager.prototype, "measureEnabled", {
                        get: function() {
                            return this._measureEnabled;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getFooterContextualWidth = function() {
                        return 0;
                    }, DimensionLayoutManager.prototype.onStartRenderingIteration = function(clear, contextualWidth) {
                        this._measureEnabled && !this._done && (this._contextualWidthToFill = (contextualWidth - this.otherScrollbarContextualWidth) * this.getGridScale() - this.getFooterContextualWidth()), 
                        this._realizationManager.onStartRenderingIteration(), clear ? this._lastScrollOffset = null : null !== this._lastScrollOffset && this.swapElements();
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "allItemsRealized", {
                        get: function() {
                            return this.getRealizedItemsCount() - this._gridOffset === this.dimension.getItemsCount() || 0 === this.dimension.getItemsCount();
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.onEndRenderingIteration = function() {
                        if (!this._done) {
                            if (!this._measureEnabled) return this._lastScrollOffset = this.dimension.scrollOffset, 
                            void (this._done = !0);
                            var gridContextualWidth = this.getGridContextualWidth(), filled = powerbi.Double.greaterOrEqualWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision), allRealized = this.allItemsRealized, newScrollOffset = filled ? this.scrollForwardToAlignEnd(gridContextualWidth) : this.scrollBackwardToFill(gridContextualWidth);
                            this._realizationManager.onEndRenderingIteration(gridContextualWidth, filled);
                            var originalScrollbarVisible = this.dimension.scrollbar.visible;
                            this.updateScrollbar(gridContextualWidth), this._done = (filled || allRealized) && this.dimension.scrollbar.visible === originalScrollbarVisible && powerbi.Double.equalWithPrecision(newScrollOffset, this.dimension.scrollOffset, DimensionLayoutManager._scrollOffsetPrecision), 
                            this.dimension.scrollOffset = newScrollOffset, this._lastScrollOffset = this.dimension.scrollOffset;
                        }
                    }, DimensionLayoutManager.prototype.getScrollDeltaWithinPage = function() {
                        if (null !== this._lastScrollOffset) {
                            var delta = this.dimension.getIntegerScrollOffset() - Math.floor(this._lastScrollOffset);
                            if (Math.abs(delta) < this.getRealizedItemsCount() - this.dimension.otherDimension.getDepth()) return delta;
                        }
                        return null;
                    }, DimensionLayoutManager.prototype.swapElements = function() {
                        var otherHierarchyDepth, delta = this.getScrollDeltaWithinPage();
                        null !== delta && (otherHierarchyDepth = this.dimension.otherDimension.getDepth(), 
                        Math.abs(delta) < this.getRealizedItemsCount() - otherHierarchyDepth && (0 < delta ? this._moveElementsToBottom(otherHierarchyDepth, delta) : delta < 0 && this._moveElementsToTop(otherHierarchyDepth, -delta)));
                    }, DimensionLayoutManager.prototype._getRealizedItems = function() {
                        return null;
                    }, DimensionLayoutManager.prototype.getRealizedItemsCount = function() {
                        return this._getRealizedItems().length;
                    }, DimensionLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {}, 
                    DimensionLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {}, 
                    DimensionLayoutManager.prototype.isScrollingWithinPage = function() {
                        return null !== this.getScrollDeltaWithinPage();
                    }, DimensionLayoutManager.prototype.getGridContextualWidth = function() {
                        return 0;
                    }, DimensionLayoutManager.prototype.updateScrollbar = function(gridContextualWidth) {
                        var scrollbar = this.dimension.scrollbar;
                        scrollbar.viewMin = this.dimension.scrollOffset, scrollbar.min = 0, scrollbar.max = this.dimension.getItemsCount(), 
                        scrollbar.viewSize = this.getViewSize(gridContextualWidth), this.dimension.scrollbar.show(this.canScroll(gridContextualWidth));
                    }, DimensionLayoutManager.prototype.getViewSize = function(gridContextualWidth) {
                        var count = this.getRealizedItemsCount();
                        if (0 === count) return 0;
                        for (var startIndex = this._gridOffset, sizeInItems = 0, sizeInPixels = 0, scrollableArea = this._contextualWidthToFill - this.getOtherHierarchyContextualHeight(), error = this.getMeaurementError(gridContextualWidth), i = startIndex; i < count; i++) {
                            var visibleRatio = void 0, visibleRatio = i === startIndex ? this.getVisibleSizeRatio() : 1, itemContextualWidth = this.getItemContextualWidthWithScrolling(i) * error;
                            if (sizeInPixels += itemContextualWidth, sizeInItems += visibleRatio, powerbi.Double.greaterWithPrecision(sizeInPixels, scrollableArea, DimensionLayoutManager._pixelPrecision)) {
                                sizeInItems -= (sizeInPixels - scrollableArea) / itemContextualWidth * visibleRatio;
                                break;
                            }
                        }
                        return sizeInItems;
                    }, DimensionLayoutManager.prototype.isScrollableHeader = function(item, items, index) {
                        if (0 !== index || 0 === this.dimension.getFractionScrollOffset()) return !1;
                        var hierarchyNavigator = this.dimension._hierarchyNavigator;
                        if (hierarchyNavigator.isLeaf(item)) return !0;
                        var currentItems, currentItem = item;
                        do {
                            if (currentItems = hierarchyNavigator.getChildren(currentItem), void 0 === (currentItem = this.dimension.getFirstVisibleItem(hierarchyNavigator.getLevel(currentItem) + 1))) break;
                            if (!hierarchyNavigator.isLastItem(currentItem, currentItems)) return !1;
                        } while (!hierarchyNavigator.isLeaf(currentItem));
                        return !0;
                    }, DimensionLayoutManager.prototype.reachedEnd = function() {
                        return this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
                    }, DimensionLayoutManager.prototype.scrollBackwardToFill = function(averageColumnwidth) {
                        var widthToFill, newScrollOffset = this.dimension.scrollOffset;
                        return this.reachedEnd() && (widthToFill = this._contextualWidthToFill - averageColumnwidth, 
                        0 < this.dimension.getItemsCount() && (averageColumnwidth = averageColumnwidth / (this.getRealizedItemsCount() - this.dimension.getFractionScrollOffset()), 
                        newScrollOffset = this.dimension.getValidScrollOffset(Math.floor(this.dimension.scrollOffset - widthToFill / averageColumnwidth))), 
                        this._alignToEnd = !powerbi.Double.equalWithPrecision(newScrollOffset, this.dimension.scrollOffset, DimensionLayoutManager._scrollOffsetPrecision)), 
                        newScrollOffset;
                    }, DimensionLayoutManager.prototype.getItemContextualWidth = function(index) {
                        var realizedItems = this._getRealizedItems();
                        return index >= realizedItems.length ? null : realizedItems[index].getContextualWidth();
                    }, DimensionLayoutManager.prototype.getItemContextualWidthWithScrolling = function(index) {
                        return this.getSizeWithScrolling(this.getItemContextualWidth(index), index);
                    }, DimensionLayoutManager.prototype.getSizeWithScrolling = function(size, ratio) {
                        ratio = this._gridOffset === ratio ? this.getVisibleSizeRatio() : 1;
                        return size * ratio;
                    }, DimensionLayoutManager.prototype.getGridContextualWidthFromItems = function() {
                        for (var count = this.getRealizedItemsCount(), contextualWidth = 0, i = 0; i < count; i++) contextualWidth += this.getItemContextualWidthWithScrolling(i);
                        return contextualWidth;
                    }, DimensionLayoutManager.prototype.getMeaurementError = function(gridContextualWidth) {
                        return gridContextualWidth / this.getGridContextualWidthFromItems();
                    }, DimensionLayoutManager.prototype.scrollForwardToAlignEnd = function(gridContextualWidth) {
                        var newScrollOffset = this.dimension.scrollOffset;
                        if (this._alignToEnd) {
                            var withinThreshold = powerbi.Double.equalWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                            if (!withinThreshold) for (var count = this.getRealizedItemsCount(), startIndex = this._gridOffset, widthToScroll = gridContextualWidth - this._contextualWidthToFill, error = this.getMeaurementError(gridContextualWidth), i = startIndex; i < count; i++) {
                                var itemContextualWidth = this.getItemContextualWidth(i) * error;
                                if (!powerbi.Double.lessWithPrecision(itemContextualWidth, widthToScroll, DimensionLayoutManager._pixelPrecision)) {
                                    var visibleRatio = startIndex === i ? 1 - this.dimension.getFractionScrollOffset() : 1, newScrollOffset = this.dimension.getValidScrollOffset(this.dimension.scrollOffset + (i - startIndex) + widthToScroll * visibleRatio / itemContextualWidth);
                                    break;
                                }
                                widthToScroll -= itemContextualWidth;
                            }
                            this._alignToEnd = !withinThreshold;
                        }
                        return newScrollOffset;
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "dimension", {
                        get: function() {
                            return null;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "otherLayoutManager", {
                        get: function() {
                            return this.dimension.otherDimension.layoutManager;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(DimensionLayoutManager.prototype, "contextualWidthToFill", {
                        get: function() {
                            return this._contextualWidthToFill;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getGridScale = function() {
                        return 0;
                    }, Object.defineProperty(DimensionLayoutManager.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return 0;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DimensionLayoutManager.prototype.getActualContextualWidth = function(gridContextualWidth) {
                        return this._isAutoSized() && !this.canScroll(gridContextualWidth) ? gridContextualWidth : this._contextualWidthToFill;
                    }, DimensionLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !1;
                    }, DimensionLayoutManager.prototype.calculateSizes = function() {
                        this.fixedSizeEnabled && (this.calculateContextualWidths(), this.calculateSpans());
                    }, DimensionLayoutManager.prototype._calculateSize = function(item) {
                        return null;
                    }, DimensionLayoutManager.prototype.calculateContextualWidths = function() {
                        for (var items = this._getRealizedItems(), count = items.length, i = 0; i < count; i++) {
                            var item = items[i];
                            this.measureEnabled && item.setAligningContextualWidth(-1), this._calculateSize(item);
                        }
                    }, DimensionLayoutManager.prototype.calculateSpans = function() {
                        this.measureEnabled && (this.updateNonScrollableItemsSpans(), this.updateScrollableItemsSpans());
                    }, DimensionLayoutManager.prototype.updateNonScrollableItemsSpans = function() {
                        for (var otherDimensionItems = this.otherLayoutManager._getRealizedItems(), otherDimensionItemsCount = otherDimensionItems.length, i = this.dimension.getDepth(); i < otherDimensionItemsCount; i++) {
                            var otherDimensionItem = otherDimensionItems[i];
                            this.updateSpans(otherDimensionItem, otherDimensionItem.getHeaders(), !1);
                        }
                    }, DimensionLayoutManager.prototype.updateScrollableItemsSpans = function() {
                        for (var otherRealizedItems = this.otherLayoutManager._getRealizedItems(), otherRealizedItemsCount = Math.min(this.dimension.getDepth(), otherRealizedItems.length), i = 0; i < otherRealizedItemsCount; i++) {
                            var otherRealizedItem = otherRealizedItems[i];
                            this.updateSpans(otherRealizedItem, otherRealizedItem.getOtherDimensionHeaders(), !0);
                        }
                    }, DimensionLayoutManager.prototype.fixSizes = function() {
                        if (this.fixedSizeEnabled) for (var items = this._getRealizedItems(), i = items.length - 1; 0 <= i; i--) items[i].fixSize();
                    }, DimensionLayoutManager.prototype.updateSpans = function(otherRealizedItem, cells, considerScrolling) {
                        for (var realizedItems = this._getRealizedItems(), cellCount = cells.length, j = 0; j < cellCount; j++) {
                            var cell = cells[j], owner = otherRealizedItem.getOtherDimensionOwner(cell), span = owner.getCellContextualSpan(cell);
                            if (1 < span) for (var totalSizeInSpan = 0, startIndex = owner.getIndex(this._grid), k = 0; k < span; k++) {
                                var item = realizedItems[k + startIndex], childWidth = item.getContentContextualWidth();
                                totalSizeInSpan += childWidth = considerScrolling && 0 === j && 0 === k ? Math.floor((1 - this.dimension.getFractionScrollOffset()) * childWidth) : childWidth, 
                                k === span - 1 && this.updateLastChildSize(cell, item, totalSizeInSpan);
                            }
                        }
                    }, DimensionLayoutManager.prototype.updateLastChildSize = function(spanningCell, item, delta) {
                        delta = item.getCellIContentContextualWidth(spanningCell) - delta;
                        0 < delta && item.setAligningContextualWidth(Math.max(item.getAligningContextualWidth(), delta + item.getContentContextualWidth()));
                    }, DimensionLayoutManager._pixelPrecision = 1.0001, DimensionLayoutManager._scrollOffsetPrecision = .01, 
                    DimensionLayoutManager;
                }();
                internal.DimensionLayoutManager = DimensionLayoutManager;
                var ResizeState = function() {
                    function ResizeState(column, width, scale) {
                        this.column = column, this.item = column.getLeafItem(), this.itemType = column.itemType, 
                        this.startColumnWidth = width, this.resizingDelta = 0, this.animationFrame = null, 
                        this.scale = scale;
                    }
                    return ResizeState.prototype.getNewSize = function() {
                        return this.startColumnWidth + this.resizingDelta;
                    }, ResizeState;
                }();
                internal.ResizeState = ResizeState;
                var CanvasTablixLayoutManager = function(_super) {
                    function ColumnLayoutManager(owner, _this, realizationManager) {
                        _this = _super.call(this, owner, _this, realizationManager) || this;
                        return (realizationManager.owner = _this).fillProportionally = !1, _this._resizeState = null, 
                        _this;
                    }
                    return __extends(ColumnLayoutManager, _super), Object.defineProperty(ColumnLayoutManager.prototype, "dimension", {
                        get: function() {
                            return this.owner.owner.columnDimension;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), ColumnLayoutManager.prototype.isResizing = function() {
                        return null !== this._resizeState;
                    }, Object.defineProperty(ColumnLayoutManager.prototype, "fillProportionally", {
                        get: function() {
                            return this._grid.fillColumnsProportionally;
                        },
                        set: function(value) {
                            this._grid.fillColumnsProportionally = value;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), ColumnLayoutManager.prototype.getGridScale = function() {
                        return this._grid._presenter.getScreenToCssRatioX();
                    }, Object.defineProperty(ColumnLayoutManager.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return this.dimension.otherDimension.scrollbar.visible ? controls.HTMLElementUtils.getElementWidth(this.dimension.otherDimension.scrollbar.element) : 0;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), ColumnLayoutManager.prototype._getRealizedItems = function() {
                        return this._grid.realizedColumns || (this._grid.realizedColumns = []), this._grid.realizedColumns;
                    }, ColumnLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                        this._grid.moveColumnsToEnd(moveFromIndex, count);
                    }, ColumnLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                        this._grid.moveColumnsToStart(moveToIndex, count);
                    }, ColumnLayoutManager.prototype._requiresMeasure = function() {
                        return !this.isScrolling() && !this.otherLayoutManager.isScrolling() || this.isScrolling() || this.isResizing();
                    }, ColumnLayoutManager.prototype.getGridContextualWidth = function() {
                        return this._grid.getWidth();
                    }, ColumnLayoutManager.prototype.getFirstVisibleColumn = function() {
                        return this._grid.realizedColumns[this._gridOffset];
                    }, ColumnLayoutManager.prototype._isAutoSized = function() {
                        return this.owner.owner.autoSizeWidth;
                    }, ColumnLayoutManager.prototype.applyScrolling = function() {
                        var offsetInPixels = this.dimension.getFractionScrollOffset(), firstVisibleColumnWidth = 0, firstVisibleColumn = this.getFirstVisibleColumn();
                        void 0 !== firstVisibleColumn && (firstVisibleColumnWidth = firstVisibleColumn.getContextualWidth(), 
                        offsetInPixels = Math.ceil(-firstVisibleColumnWidth * offsetInPixels), this.scroll(firstVisibleColumn, firstVisibleColumnWidth, offsetInPixels));
                    }, ColumnLayoutManager.prototype.scroll = function(firstVisibleColumn, width, offset) {
                        this.scrollCells(firstVisibleColumn._realizedColumnHeaders, width, offset), this.scrollBodyCells(this._grid.realizedRows, width, offset), 
                        null !== firstVisibleColumn.footer && firstVisibleColumn.footer.scrollHorizontally(width, offset);
                    }, ColumnLayoutManager.prototype.scrollCells = function(cells, width, offset) {
                        for (var length = cells.length, i = 0; i < length; i++) cells[i].scrollHorizontally(width, offset);
                    }, ColumnLayoutManager.prototype.scrollBodyCells = function(rows, width, offset) {
                        for (var cells, cell, length = rows.length, i = 0; i < length; i++) void 0 !== (cells = rows[i]._realizedBodyCells) && void 0 !== (cell = cells[0]) && cell.scrollHorizontally(width, offset);
                    }, ColumnLayoutManager.prototype.onStartResize = function(cell, currentX, currentY) {
                        this._resizeState = new ResizeState(cell._column, cell._column.getContentContextualWidth(), controls.HTMLElementUtils.getAccumulatedScale(this.owner.owner.container));
                    }, ColumnLayoutManager.prototype.onResize = function(cell, deltaX, deltaY) {
                        var _this = this;
                        this.isResizing() && (this.owner.owner.wordWrapColumnHeaders && cell.unfixRowHeight(), 
                        this._resizeState.resizingDelta = Math.round(Math.max(deltaX / this._resizeState.scale, ColumnLayoutManager.minColumnWidth - this._resizeState.startColumnWidth)), 
                        null === this._resizeState.animationFrame && (this._resizeState.animationFrame = requestAnimationFrame(function() {
                            return _this.performResizing();
                        })));
                    }, ColumnLayoutManager.prototype.onEndResize = function(cell) {
                        this.isResizing() && null !== this._resizeState.animationFrame && this.performResizing(), 
                        this.endResizing(), this._resizeState = null;
                    }, ColumnLayoutManager.prototype.onReset = function(cell) {
                        this.owner.owner.wordWrapColumnHeaders && cell.unfixRowHeight(), this._resizeState = new ResizeState(cell._column, -1, 1), 
                        cell._column.clearSize(), this.endResizing(), this.owner.owner.refresh(!1), this._resizeState = null;
                    }, ColumnLayoutManager.prototype.updateItemToResizeState = function(realizedColumns) {
                        if (null !== this._resizeState) for (var columnCount = realizedColumns.length, hierarchyNavigator = this.owner.owner.hierarchyNavigator, i = this.otherLayoutManager.dimension.getDepth(); i < columnCount; i++) {
                            var column = realizedColumns[i];
                            if (column.columnHeaderOrCornerEquals(this._resizeState.itemType, this._resizeState.item, column.itemType, column.getLeafItem(), hierarchyNavigator) && column !== this._resizeState.column) {
                                (this._resizeState.column = column).onResize(this._resizeState.getNewSize());
                                break;
                            }
                        }
                    }, ColumnLayoutManager.prototype.performResizing = function() {
                        var newSize;
                        null !== this._resizeState && (this._resizeState.animationFrame = null, newSize = this._resizeState.getNewSize(), 
                        this._resizeState.column.onResize(newSize), this.owner.owner.refresh(!1));
                    }, ColumnLayoutManager.prototype.endResizing = function() {
                        var newSize;
                        null !== this._resizeState && (newSize = this._resizeState.getNewSize(), this._resizeState.column.onResizeEnd(newSize));
                    }, ColumnLayoutManager.prototype._sendDimensionsToControl = function() {
                        var gridContextualWidth = this.getGridContextualWidth(), widthToFill = this.getActualContextualWidth(gridContextualWidth), otherContextualHeight = this.getOtherHierarchyContextualHeight(), scale = this.getGridScale();
                        this.owner.owner.updateColumnDimensions(otherContextualHeight / scale, (widthToFill - otherContextualHeight) / scale, this.getViewSize(gridContextualWidth));
                    }, ColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return -1;
                    }, ColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                        return -1;
                    }, ColumnLayoutManager.minColumnWidth = 10, ColumnLayoutManager;
                }(DimensionLayoutManager), DashboardColumnLayoutManager = function(_super) {
                    function DashboardColumnLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(DashboardColumnLayoutManager, _super), DashboardColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.ignoreColumn(headerIndex) ? 0 : this.owner.getCellWidth(void 0);
                    }, DashboardColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                        return this.owner.getCellWidth(void 0);
                    }, DashboardColumnLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !1;
                    }, DashboardColumnLayoutManager.prototype._calculateSize = function(item) {
                        var headerIndex = item.getIndex(this._grid), computedSize = 0;
                        return this.ignoreColumn(headerIndex) || (computedSize = this.owner.getContentWidth(void 0)), 
                        item.onResize(computedSize), item.onResizeEnd(computedSize), computedSize;
                    }, DashboardColumnLayoutManager.prototype.ignoreColumn = function(headerIndex) {
                        return 0 === headerIndex && !this.owner.binder.hasRowGroups();
                    }, DashboardColumnLayoutManager;
                }(internal.ColumnLayoutManager = CanvasTablixLayoutManager);
                internal.DashboardColumnLayoutManager = DashboardColumnLayoutManager;
                var CanvasColumnLayoutManager = function(_super) {
                    function CanvasColumnLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(CanvasColumnLayoutManager, _super), CanvasColumnLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.owner.getEstimatedTextWidth(label);
                    }, CanvasColumnLayoutManager.prototype.getEstimatedBodyCellWidth = function(content) {
                        return this.owner.getEstimatedTextWidth(content);
                    }, CanvasColumnLayoutManager.prototype.calculateContextualWidths = function() {
                        for (var items = this._getRealizedItems(), columnWidths = [], i = 0, len = items.length; i < len; i++) {
                            var item = items[i];
                            this.measureEnabled && item.setAligningContextualWidth(-1);
                            var queryName = controls.TablixColumnWidthManager.getColumnQueryName(item);
                            null != queryName && columnWidths.push({
                                queryName: queryName,
                                width: this._calculateSize(item),
                                isFixed: !1
                            });
                        }
                        this.owner.columnWidthsToPersist = columnWidths;
                    }, CanvasColumnLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !powerbi.Double.equalWithPrecision(this.dimension.scrollOffset, 0, DimensionLayoutManager._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && 0 < this._contextualWidthToFill || powerbi.Double.greaterWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                    }, CanvasColumnLayoutManager.prototype._calculateSize = function(item) {
                        return item.calculateSize();
                    }, CanvasColumnLayoutManager;
                }(CanvasTablixLayoutManager);
                internal.CanvasColumnLayoutManager = CanvasColumnLayoutManager;
                var DashboardTablixLayoutManager = function(_super) {
                    function RowLayoutManager(owner, _this, realizationManager) {
                        _this = _super.call(this, owner, _this, realizationManager) || this;
                        return realizationManager.owner = _this;
                    }
                    return __extends(RowLayoutManager, _super), Object.defineProperty(RowLayoutManager.prototype, "dimension", {
                        get: function() {
                            return this.owner.owner.rowDimension;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), RowLayoutManager.prototype.getGridScale = function() {
                        return this._grid._presenter.getScreenToCssRatioY();
                    }, Object.defineProperty(RowLayoutManager.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return this.dimension.otherDimension.scrollbar.visible ? controls.HTMLElementUtils.getElementHeight(this.dimension.otherDimension.scrollbar.element) : 0;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), RowLayoutManager.prototype.startScrollingSession = function() {
                        _super.prototype.startScrollingSession.call(this);
                    }, RowLayoutManager.prototype._getRealizedItems = function() {
                        return this._grid.realizedRows || (this._grid.realizedRows = []), this._grid.realizedRows;
                    }, RowLayoutManager.prototype._moveElementsToBottom = function(moveFromIndex, count) {
                        this._grid.moveRowsToEnd(moveFromIndex, count);
                    }, RowLayoutManager.prototype._moveElementsToTop = function(moveToIndex, count) {
                        this._grid.moveRowsToStart(moveToIndex, count);
                    }, RowLayoutManager.prototype._requiresMeasure = function() {
                        return !this.isScrolling() && !this.otherLayoutManager.isScrolling() && !this.otherLayoutManager.isResizing() || this.isScrolling() && this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
                    }, RowLayoutManager.prototype.getGridContextualWidth = function() {
                        return this._grid.getHeight();
                    }, RowLayoutManager.prototype.getFirstVisibleRow = function() {
                        return this._grid.realizedRows[this._gridOffset];
                    }, RowLayoutManager.prototype._isAutoSized = function() {
                        return this.owner.owner.autoSizeHeight;
                    }, RowLayoutManager.prototype.applyScrolling = function() {
                        var firstVisibleRowHeight, rowOffset = this.dimension.getFractionScrollOffset(), firstVisibleRow = this.getFirstVisibleRow();
                        firstVisibleRow && (firstVisibleRowHeight = firstVisibleRow.getContextualWidth(), 
                        this.scroll(firstVisibleRow, firstVisibleRowHeight, rowOffset));
                    }, RowLayoutManager.prototype.scroll = function(firstVisibleRow, height, offset) {
                        this.scrollCells(firstVisibleRow._realizedRowHeaders, height, offset), this.scrollCells(firstVisibleRow._realizedBodyCells, height, offset);
                    }, RowLayoutManager.prototype.scrollCells = function(cells, height, offset) {
                        for (var length = cells.length, i = 0; i < length; i++) cells[i].scrollVertically(height, offset);
                    }, RowLayoutManager.prototype.getFooterContextualWidth = function() {
                        return this.owner.owner.rowDimension.hasFooter() && this.owner.grid.footerRow ? this.owner.grid.footerRow.getContextualWidth() : 0;
                    }, RowLayoutManager.prototype.calculateContextualWidths = function() {
                        var footerRow;
                        _super.prototype.calculateContextualWidths.call(this), !this.fixedSizeEnabled || (footerRow = this._grid.footerRow) && this._calculateSize(footerRow);
                    }, RowLayoutManager.prototype.fixSizes = function() {
                        _super.prototype.fixSizes.call(this), this.fixedSizeEnabled && this._grid.footerRow && this._grid.footerRow.fixSize();
                    }, RowLayoutManager.prototype._sendDimensionsToControl = function() {
                        var gridContextualWidth = this.getGridContextualWidth(), widthToFill = this.getActualContextualWidth(gridContextualWidth), otherContextualHeight = this.getOtherHierarchyContextualHeight(), scale = this.getGridScale();
                        this.owner.owner.updateRowDimensions(otherContextualHeight / scale, (widthToFill - otherContextualHeight) / scale, gridContextualWidth / scale, this.getViewSize(gridContextualWidth), this._grid.footerRow ? this._grid.footerRow.getContextualWidth() / scale : 0);
                    }, RowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return -1;
                    }, RowLayoutManager;
                }(DimensionLayoutManager), DashboardRowLayoutManager = function(_super) {
                    function DashboardRowLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(DashboardRowLayoutManager, _super), DashboardRowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.getHeaderWidth(headerIndex);
                    }, DashboardRowLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !1;
                    }, DashboardRowLayoutManager.prototype._calculateSize = function(item) {
                        return item.calculateSize();
                    }, DashboardRowLayoutManager.prototype.getHeaderWidth = function(headerIndex) {
                        return 0 !== headerIndex || this.owner.binder.hasRowGroups() ? this.owner.getEstimatedTextWidth(void 0) : 0;
                    }, DashboardRowLayoutManager;
                }(internal.RowLayoutManager = DashboardTablixLayoutManager);
                internal.DashboardRowLayoutManager = DashboardRowLayoutManager;
                var CanvasRowLayoutManager = function(_super) {
                    function CanvasRowLayoutManager() {
                        return null !== _super && _super.apply(this, arguments) || this;
                    }
                    return __extends(CanvasRowLayoutManager, _super), CanvasRowLayoutManager.prototype.getEstimatedHeaderWidth = function(label, headerIndex) {
                        return this.owner.getEstimatedTextWidth(label);
                    }, CanvasRowLayoutManager.prototype.canScroll = function(gridContextualWidth) {
                        return !powerbi.Double.equalWithPrecision(this.dimension.scrollOffset, 0, DimensionLayoutManager._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && 0 < this._contextualWidthToFill || powerbi.Double.greaterWithPrecision(gridContextualWidth, this._contextualWidthToFill, DimensionLayoutManager._pixelPrecision);
                    }, CanvasRowLayoutManager.prototype._calculateSize = function(item) {
                        return item.calculateSize();
                    }, CanvasRowLayoutManager;
                }(DashboardTablixLayoutManager);
                internal.CanvasRowLayoutManager = CanvasRowLayoutManager;
                CanvasTablixLayoutManager = function() {
                    function TablixLayoutManager(binder, grid, columnLayoutManager, rowLayoutManager) {
                        this._allowHeaderResize = !0, this._binder = binder, this._grid = grid, this._columnLayoutManager = columnLayoutManager, 
                        this._rowLayoutManager = rowLayoutManager, this._columnWidthsToPersist = [];
                    }
                    return TablixLayoutManager.prototype.initialize = function(owner) {
                        this._owner = owner, this._container = owner.container, this._gridHost = owner.contentHost, 
                        this._footersHost = owner.footerHost, this._grid.initialize(owner, this._gridHost, this._footersHost);
                    }, Object.defineProperty(TablixLayoutManager.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "binder", {
                        get: function() {
                            return this._binder;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "columnWidthsToPersist", {
                        get: function() {
                            return this._columnWidthsToPersist;
                        },
                        set: function(columnWidths) {
                            this._columnWidthsToPersist = columnWidths;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixLayoutManager.prototype.getTablixClassName = function() {
                        return null;
                    }, TablixLayoutManager.prototype.getLayoutKind = function() {
                        return null;
                    }, TablixLayoutManager.prototype.getOrCreateColumnHeader = function(item, items, isLeaf, colIdx) {
                        var hierarchyNav = this.owner.hierarchyNavigator, row = this._grid.getOrCreateRow(isLeaf), cell = this._grid.getOrCreateColumn(colIdx + this._columnLayoutManager._gridOffset), isLeaf = hierarchyNav.isLeaf(item), cell = row.getOrCreateColumnHeader(cell, this._columnLayoutManager.isScrollableHeader(item, items, colIdx), isLeaf), colIdx = hierarchyNav.getLevel(item);
                        cell.position.row.index = cell.position.row.indexInSiblings = colIdx, cell.position.row.isFirst = 0 === colIdx, 
                        cell.position.row.isLast = isLeaf;
                        colIdx = hierarchyNav.getIndex(item);
                        return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                        cell.position.column.isFirst = hierarchyNav.areAllParentsFirst(item, items), cell.position.column.isLast = hierarchyNav.areAllParentsLast(item, items), 
                        this.enableCellHorizontalResize(isLeaf, cell), cell;
                    }, TablixLayoutManager.prototype.getOrCreateRowHeader = function(colIdx, items, rowIdx, isLeaf) {
                        var hierarchyNav = this.owner.hierarchyNavigator, row = this._grid.getOrCreateRow(rowIdx + this._rowLayoutManager._gridOffset), cell = this._grid.getOrCreateColumn(isLeaf), isLeaf = hierarchyNav.isLeaf(colIdx), rowIdx = this._rowLayoutManager.isScrollableHeader(colIdx, items, rowIdx);
                        0 === row.getRealizedCellCount() && this.alignRowHeaderCells(colIdx, row);
                        cell = row.getOrCreateRowHeader(cell, rowIdx, hierarchyNav.isLeaf(colIdx)), rowIdx = hierarchyNav.getIndex(colIdx);
                        cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = hierarchyNav.areAllParentsFirst(colIdx, items), 
                        cell.position.row.isLast = hierarchyNav.areAllParentsLast(colIdx, items);
                        colIdx = hierarchyNav.getLevel(colIdx);
                        return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                        cell.position.column.isFirst = 0 === colIdx, cell.position.column.isLast = isLeaf, 
                        cell.enableHorizontalResize(!1, this._columnLayoutManager), cell;
                    }, TablixLayoutManager.prototype.getOrCreateCornerCell = function(item, colIdx, rowIdx) {
                        var row = this._grid.getOrCreateRow(rowIdx), cell = this._grid.getOrCreateColumn(colIdx), isLeaf = rowIdx === this._columnLayoutManager.dimension.getDepth() - 1, cell = row.getOrCreateCornerCell(cell), rowIdx = rowIdx;
                        cell.position.row.index = cell.position.row.indexInSiblings = rowIdx, cell.position.row.isFirst = 0 === rowIdx, 
                        cell.position.row.isLast = isLeaf;
                        return cell.position.column.index = cell.position.column.indexInSiblings = colIdx, 
                        cell.position.column.isFirst = 0 === colIdx, cell.position.column.isLast = colIdx === this._rowLayoutManager.dimension.getDepth() - 1, 
                        this.enableCellHorizontalResize(isLeaf, cell), cell;
                    }, TablixLayoutManager.prototype.getOrCreateBodyCell = function(cellItem, rowItem, rowItems, cell, column) {
                        var row = this._grid.getOrCreateRow(cell + this._rowLayoutManager._gridOffset), column = this._grid.getOrCreateColumn(column + this._columnLayoutManager._gridOffset), cell = 0 === row._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset() || this._rowLayoutManager.isScrollableHeader(rowItem, rowItems, cell), cell = row.getOrCreateBodyCell(column, cell);
                        return cell.position = cellItem.position, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                        cell;
                    }, TablixLayoutManager.prototype.getOrCreateFooterBodyCell = function(cellItem, cell) {
                        var row = this._grid.getOrCreateFootersRow(), column = this._grid.getOrCreateColumn(cell + this._columnLayoutManager._gridOffset), cell = 0 === row._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset(), cell = row.getOrCreateFooterBodyCell(column, cell);
                        return cell.position = cellItem.position, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                        cell;
                    }, TablixLayoutManager.prototype.getOrCreateFooterRowHeader = function(item, items) {
                        var row = this._grid.getOrCreateFootersRow(), cell = this._grid.getOrCreateColumn(0), cell = row.getOrCreateFooterRowHeader(cell);
                        return cell.position = void 0, cell.enableHorizontalResize(!1, this._columnLayoutManager), 
                        cell;
                    }, TablixLayoutManager.prototype.getVisibleWidth = function() {
                        return -1;
                    }, TablixLayoutManager.prototype.getVisibleHeight = function() {
                        return -1;
                    }, TablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {}, 
                    TablixLayoutManager.prototype.updateViewport = function(viewport) {}, TablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                        return -1;
                    }, TablixLayoutManager.prototype.getCellWidth = function(cell) {
                        return -1;
                    }, TablixLayoutManager.prototype.getContentWidth = function(cell) {
                        return -1;
                    }, TablixLayoutManager.prototype.adjustContentSize = function(hasImage) {}, TablixLayoutManager.prototype.alignRowHeaderCells = function(item, currentRow) {
                        var leaf, index = currentRow.getRowHeaderLeafIndex();
                        -1 !== index && (leaf = this._owner.rowDimension.getFirstVisibleChildLeaf(item), 
                        this.owner.hierarchyNavigator.headerItemEquals(leaf, currentRow.getAllocatedCellAt(index).item) && currentRow.moveCellsBy(this.owner.hierarchyNavigator.getLevel(leaf) - this.owner.hierarchyNavigator.getLevel(item) - index));
                    }, Object.defineProperty(TablixLayoutManager.prototype, "grid", {
                        get: function() {
                            return this._grid;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "rowLayoutManager", {
                        get: function() {
                            return this._rowLayoutManager;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TablixLayoutManager.prototype, "columnLayoutManager", {
                        get: function() {
                            return this._columnLayoutManager;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                        return !1;
                    }, TablixLayoutManager.prototype.onStartRenderingSession = function(scrollingDimension, parentElement, clear) {
                        var cell;
                        this.showEmptySpaceHeader() && ((cell = this._grid.emptySpaceHeaderCell) && this._binder.unbindEmptySpaceHeaderCell(cell), 
                        (cell = this._grid.emptySpaceFooterCell) && this._binder.unbindEmptySpaceFooterCell(cell), 
                        this._grid.HideEmptySpaceCells()), this._scrollingDimension = scrollingDimension, 
                        this._scrollingDimension && this._scrollingDimension.layoutManager.startScrollingSession(), 
                        this._rowLayoutManager.onStartRenderingSession(), this._columnLayoutManager.onStartRenderingSession(), 
                        this._grid.onStartRenderingSession(clear), (this._columnLayoutManager.measureEnabled || this._rowLayoutManager.measureEnabled) && this.measureSampleText(parentElement);
                    }, TablixLayoutManager.prototype.onEndRenderingSession = function() {
                        var cell;
                        this._rowLayoutManager.onEndRenderingSession(), this._columnLayoutManager.onEndRenderingSession(), 
                        this._scrollingDimension && this._scrollingDimension.layoutManager.endScrollingSession(), 
                        this._scrollingDimension = null, !this.showEmptySpaceHeader() || 0 < (cell = this._columnLayoutManager.contextualWidthToFill - this._columnLayoutManager.getGridContextualWidth()) && (this._grid.ShowEmptySpaceCells(this._owner.columnDimension.getDepth(), cell), 
                        (cell = this._grid.emptySpaceHeaderCell) && this._binder.bindEmptySpaceHeaderCell(cell), 
                        (cell = this._grid.emptySpaceFooterCell) && this._binder.bindEmptySpaceFooterCell(cell));
                    }, TablixLayoutManager.prototype.onStartRenderingIteration = function(clear) {
                        this._rowLayoutManager.onStartRenderingIteration(clear, this.getVisibleHeight()), 
                        this._columnLayoutManager.onStartRenderingIteration(clear, this.getVisibleWidth()), 
                        this._grid.onStartRenderingIteration();
                    }, TablixLayoutManager.prototype.onEndRenderingIteration = function() {
                        return this._grid.onEndRenderingIteration(), this._columnLayoutManager.calculateSizes(), 
                        this._rowLayoutManager.calculateSizes(), this._columnLayoutManager.fixSizes(), this._rowLayoutManager.fixSizes(), 
                        this._columnLayoutManager.updateItemToResizeState(this._grid.realizedColumns), this._columnLayoutManager.applyScrolling(), 
                        this._rowLayoutManager.applyScrolling(), this._columnLayoutManager.onEndRenderingIteration(), 
                        this._rowLayoutManager.onEndRenderingIteration(), this._columnLayoutManager.done && this._rowLayoutManager.done;
                    }, TablixLayoutManager.prototype.onCornerCellRealized = function(item, cell) {
                        var columnLeaf = this.owner.hierarchyNavigator.isColumnHierarchyLeaf(item), rowLeaf = this.owner.hierarchyNavigator.isRowHierarchyLeaf(item);
                        columnLeaf && cell._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onCornerCellRealized(item, cell, columnLeaf), 
                        this._rowLayoutManager.onCornerCellRealized(item, cell, rowLeaf);
                    }, TablixLayoutManager.prototype.onRowHeaderRealized = function(item, cell) {
                        var leaf = this._owner.hierarchyNavigator.isLeaf(item), tablixCell = cell;
                        1 < tablixCell.colSpan && tablixCell.setContainerWidth(-1), this._rowLayoutManager.onHeaderRealized(item, cell, leaf);
                    }, TablixLayoutManager.prototype.onRowHeaderFooterRealized = function(item, cell) {}, 
                    TablixLayoutManager.prototype.onColumnHeaderRealized = function(item, cell) {
                        var leaf = this._owner.hierarchyNavigator.isLeaf(item);
                        leaf && cell._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onHeaderRealized(item, cell, leaf);
                    }, TablixLayoutManager.prototype.onBodyCellRealized = function(item, cell) {}, TablixLayoutManager.prototype.onBodyCellFooterRealized = function(item, cell) {}, 
                    TablixLayoutManager.prototype.setAllowHeaderResize = function(value) {
                        this._allowHeaderResize = value;
                    }, TablixLayoutManager.prototype.enableCellHorizontalResize = function(enableCellHorizontalResize, cell) {
                        enableCellHorizontalResize = enableCellHorizontalResize && this._allowHeaderResize;
                        cell.enableHorizontalResize(enableCellHorizontalResize, this._columnLayoutManager);
                    }, TablixLayoutManager.prototype.getEstimatedTextWidth = function(label) {
                        return -1;
                    }, TablixLayoutManager.prototype.measureSampleText = function(parentElement) {}, 
                    TablixLayoutManager;
                }(), DashboardTablixLayoutManager = function(_super) {
                    function DashboardTablixLayoutManager(binder, sizeComputationManager, grid, dashboardRowLayoutManager, dashboardColumnLayoutManager) {
                        var _this = this, dashboardColumnLayoutManager = new DashboardColumnLayoutManager(null, grid, dashboardColumnLayoutManager), dashboardRowLayoutManager = new DashboardRowLayoutManager(null, grid, dashboardRowLayoutManager), _this = _super.call(this, binder, grid, dashboardColumnLayoutManager, dashboardRowLayoutManager) || this;
                        return dashboardColumnLayoutManager.owner = _this, (dashboardRowLayoutManager.owner = _this)._sizeComputationManager = sizeComputationManager, 
                        _this;
                    }
                    return __extends(DashboardTablixLayoutManager, _super), DashboardTablixLayoutManager.createLayoutManager = function(binder) {
                        var sizeComputationManager = new SizeComputationManager();
                        return new DashboardTablixLayoutManager(binder, sizeComputationManager, new internal.TablixGrid(new internal.DashboardTablixGridPresenter(sizeComputationManager)), new internal.RowRealizationManager(binder), new internal.ColumnRealizationManager(binder));
                    }, DashboardTablixLayoutManager.prototype.getTablixClassName = function() {
                        return "tablixDashboard";
                    }, DashboardTablixLayoutManager.prototype.getLayoutKind = function() {
                        return 1;
                    }, DashboardTablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                        return !1;
                    }, DashboardTablixLayoutManager.prototype.measureSampleText = function(scalingFactor) {
                        scalingFactor = powerbi.TextMeasurementService.getSvgMeasurementProperties(scalingFactor);
                        this._characterHeight = powerbi.TextMeasurementService.estimateSvgTextHeight(scalingFactor), 
                        this._sizeComputationManager.updateRowHeight(this._characterHeight);
                        scalingFactor = PixelConverter.toPoint(parseFloat(scalingFactor.fontSize)) / controls.TablixDefaultTextSize;
                        this._sizeComputationManager.updateScalingFactor(powerbi.Double.toIncrement(scalingFactor, .05));
                    }, DashboardTablixLayoutManager.prototype.getVisibleWidth = function() {
                        return this._sizeComputationManager.visibleWidth;
                    }, DashboardTablixLayoutManager.prototype.getVisibleHeight = function() {
                        return this._sizeComputationManager.visibleHeight;
                    }, DashboardTablixLayoutManager.prototype.getCellWidth = function(cell) {
                        return this._sizeComputationManager.cellWidth;
                    }, DashboardTablixLayoutManager.prototype.getContentWidth = function(cell) {
                        return this._sizeComputationManager.contentWidth;
                    }, DashboardTablixLayoutManager.prototype.getEstimatedTextWidth = function(label) {
                        return this._sizeComputationManager.contentWidth;
                    }, DashboardTablixLayoutManager.prototype.adjustContentSize = function(hasImage) {
                        this._sizeComputationManager.hasImageContent = hasImage;
                    }, DashboardTablixLayoutManager.prototype.updateColumnCount = function(rowDimension, totalColumnCount) {
                        totalColumnCount = (rowDimension ? rowDimension.getDepth() : 0) + (totalColumnCount ? totalColumnCount.getItemsCount() : 0);
                        this.binder.hasRowGroups() || totalColumnCount--, this._sizeComputationManager.updateColumnCount(totalColumnCount);
                    }, DashboardTablixLayoutManager.prototype.updateViewport = function(viewport) {
                        this._sizeComputationManager.updateViewport(viewport);
                    }, DashboardTablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                        return this._characterHeight;
                    }, DashboardTablixLayoutManager;
                }(internal.TablixLayoutManager = CanvasTablixLayoutManager);
                internal.DashboardTablixLayoutManager = DashboardTablixLayoutManager;
                CanvasTablixLayoutManager = function(_super) {
                    function CanvasTablixLayoutManager(binder, grid, canvasRowLayoutManager, canvasColumnLayoutManager) {
                        var canvasColumnLayoutManager = new CanvasColumnLayoutManager(null, grid, canvasColumnLayoutManager), canvasRowLayoutManager = new CanvasRowLayoutManager(null, grid, canvasRowLayoutManager), _this = _super.call(this, binder, grid, canvasColumnLayoutManager, canvasRowLayoutManager) || this;
                        return canvasColumnLayoutManager.owner = _this, canvasRowLayoutManager.owner = _this;
                    }
                    return __extends(CanvasTablixLayoutManager, _super), CanvasTablixLayoutManager.createLayoutManager = function(binder, columnWidthManager) {
                        return new CanvasTablixLayoutManager(binder, new internal.TablixGrid(new controls.internal.CanvasTablixGridPresenter(columnWidthManager)), new internal.RowRealizationManager(binder), new internal.ColumnRealizationManager(binder));
                    }, CanvasTablixLayoutManager.prototype.getTablixClassName = function() {
                        return "tablixCanvas";
                    }, CanvasTablixLayoutManager.prototype.getLayoutKind = function() {
                        return 0;
                    }, CanvasTablixLayoutManager.prototype.measureSampleText = function(parentElement) {
                        var textDiv = controls.internal.TablixUtils.createDiv();
                        textDiv.style.cssFloat = "left", textDiv.style.whiteSpace = "nowrap", textDiv.style.overflow = "hidden", 
                        textDiv.style.lineHeight = "normal", parentElement.appendChild(textDiv);
                        var textNode = document.createTextNode("a");
                        textDiv.appendChild(textNode), this.characterWidth = controls.HTMLElementUtils.getElementWidth(textDiv), 
                        this.characterHeight = controls.HTMLElementUtils.getElementHeight(textDiv), textDiv.removeChild(textNode), 
                        parentElement.removeChild(textDiv);
                    }, CanvasTablixLayoutManager.prototype.showEmptySpaceHeader = function() {
                        return !this._columnLayoutManager.fillProportionally;
                    }, CanvasTablixLayoutManager.prototype.getVisibleWidth = function() {
                        return this._columnLayoutManager.measureEnabled ? this._owner.autoSizeWidth && this._owner.maxWidth ? this._owner.maxWidth : controls.HTMLElementUtils.getElementWidth(this._container) : -1;
                    }, CanvasTablixLayoutManager.prototype.getVisibleHeight = function() {
                        return this._rowLayoutManager.measureEnabled ? this._owner.autoSizeHeight && this._owner.maxHeight ? this._owner.maxHeight : controls.HTMLElementUtils.getElementHeight(this._container) : -1;
                    }, CanvasTablixLayoutManager.prototype.getCellWidth = function(cell) {
                        return cell.containerWidth;
                    }, CanvasTablixLayoutManager.prototype.getContentWidth = function(cell) {
                        return cell.contentWidth;
                    }, CanvasTablixLayoutManager.prototype.getEstimatedTextWidth = function(text) {
                        return text ? text.length * this.characterWidth : 0;
                    }, CanvasTablixLayoutManager.prototype.updateColumnCount = function(rowDimension, columnDimension) {}, 
                    CanvasTablixLayoutManager.prototype.updateViewport = function(viewport) {}, CanvasTablixLayoutManager.prototype.getEstimatedRowHeight = function() {
                        return this.characterHeight;
                    }, CanvasTablixLayoutManager;
                }(CanvasTablixLayoutManager);
                internal.CanvasTablixLayoutManager = CanvasTablixLayoutManager;
            }(controls.internal || (controls.internal = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(HTMLElementUtils) {
                HTMLElementUtils.clearChildren = function(element) {
                    if (element) for (;element.hasChildNodes(); ) element.removeChild(element.firstChild);
                }, HTMLElementUtils.setElementTop = function(element, top) {
                    element.style.top = top + "px";
                }, HTMLElementUtils.setElementLeft = function(element, left) {
                    element.style.left = left + "px";
                }, HTMLElementUtils.setElementHeight = function(element, height) {
                    HTMLElementUtils.isAutoSize(height) ? element.style.height = "" : element.style.height = height + "px";
                }, HTMLElementUtils.setElementWidth = function(element, width) {
                    HTMLElementUtils.isAutoSize(width) ? element.style.width = "" : element.style.width = width + "px";
                }, HTMLElementUtils.getElementWidth = function(element) {
                    return element.offsetWidth;
                }, HTMLElementUtils.getElementHeight = function(element) {
                    return element.offsetHeight;
                }, HTMLElementUtils.isAutoSize = function(size) {
                    return -1 === size;
                }, HTMLElementUtils.getAccumulatedScale = function(element) {
                    for (var scale = 1; element; ) scale *= HTMLElementUtils.getScale(element), element = element.parentElement;
                    return scale;
                }, HTMLElementUtils.getScale = function(str) {
                    return (str = (str = $(str)).css("-webkit-transform") || str.css("-moz-transform") || str.css("-ms-transform") || str.css("-o-transform") || str.css("transform")) && (str.match(/\d*\.\d*/) && Number(str.match(/\d*\.\d*/)[0]) || str.match(/\d+/) && Number(str.match(/\d+/)[0])) || 1;
                }, HTMLElementUtils.getRelativeMouseCoordinates = function(scale, mouseEvent) {
                    var rect = scale.getBoundingClientRect(), scale = HTMLElementUtils.getAccumulatedScale(scale);
                    return {
                        x: (mouseEvent.pageX - rect.left) / scale,
                        y: (mouseEvent.pageY - rect.top) / scale
                    };
                };
            }(controls.HTMLElementUtils || (controls.HTMLElementUtils = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(internal) {
                var DomFactory = InJs.DomFactory, UrlScheme = jsCommon.UrlUtils.UrlScheme, UrlUtils = jsCommon.UrlUtils;
                !function(TablixUtils) {
                    TablixUtils.PreferredLoadMoreThreshold = .8, TablixUtils.TotalLabel = "TableTotalLabel", 
                    TablixUtils.ValueLabel = "Visual_LabelText_Value", TablixUtils.RowSelection = "Row_Selection", 
                    TablixUtils.SelectRow = "SelectRow", TablixUtils.SelectedLabel = "FieldListProperty_Selected", 
                    TablixUtils.NotSelectedLabel = "NotSelectedLabel", TablixUtils.CssClassTablixDiv = "tablixDiv", 
                    TablixUtils.CssClassContentElement = "tablixCellContentElement", TablixUtils.CssClassContentHost = "tablixCellContentHost", 
                    TablixUtils.CssClassWrappingContainer = "tablixWrappingContainer", TablixUtils.CssClassTablixHeader = "tablixHeader", 
                    TablixUtils.CssClassTablixColumnHeaderLeaf = "tablixColumnHeaderLeaf", TablixUtils.CssClassTablixValueNumeric = "tablixValueNumeric", 
                    TablixUtils.CssClassTablixValueTotal = "tablixValueTotal", TablixUtils.CssClassValueURLIcon = "powervisuals-glyph tablixUrlIconGlyph", 
                    TablixUtils.CssClassValueURLIconContainer = "tablixValueUrlIcon", TablixUtils.CssClassImageContainer = "tablixImageContainer", 
                    TablixUtils.CssClassMatrixRowHeaderLeaf = "matrixRowHeaderLeaf", TablixUtils.CssClassMatrixRowHeaderSubTotal = "matrixRowHeaderSubTotal", 
                    TablixUtils.CssClassTableFooter = "tableFooterCell", TablixUtils.CssClassTableBodyCell = "tableBodyCell", 
                    TablixUtils.CssClassTableBodyCellBottom = "tableBodyCellBottom", TablixUtils.CssClassPivotTableCell = "tablixCell", 
                    TablixUtils.CSSClassPivotTableAlignLeft = "tablixAlignLeft", TablixUtils.CSSClassPivotTableAlignCenter = "tablixAlignCenter", 
                    TablixUtils.CSSClassPivotTableAlignRight = "tablixAlignRight", TablixUtils.StringNonBreakingSpace = "&nbsp;", 
                    TablixUtils.UnitOfMeasurement = "px";
                    var EdgeType, SortIconContainerClassName = "tablixSortIconContainer";
                    TablixUtils.CellPaddingLeft = 10, TablixUtils.CellPaddingRight = 5, TablixUtils.CellPaddingLeftMatrixTotal = 5, 
                    TablixUtils.SortIconPadding = 5, TablixUtils.ImageDefaultAspectRatio = 1, TablixUtils.FontFamilyCell = visuals.Font.Family.regular.css, 
                    TablixUtils.FontFamilyHeader = visuals.Font.Family.regular.css, TablixUtils.FontFamilyTotal = visuals.Font.Family.bold.css, 
                    TablixUtils.FontFamilyGlyphs = visuals.Font.Family.glyphs.css, TablixUtils.FontColorCells = "#333", 
                    TablixUtils.FontColorHeaders = "#666", TablixUtils.WordWrappingMaxLines = Number.POSITIVE_INFINITY, 
                    TablixUtils.SortIconFontSizeRatio = .71, function(EdgeType) {
                        EdgeType[EdgeType.Outline = 0] = "Outline", EdgeType[EdgeType.Gridline = 1] = "Gridline";
                    }(EdgeType = TablixUtils.EdgeType || (TablixUtils.EdgeType = {}));
                    var TablixVisualCell = function() {
                        function EdgeSettings(weight, color) {
                            this.applyParams(!0, weight, color);
                        }
                        return EdgeSettings.prototype.applyParams = function(shown, weight, color, type) {
                            shown ? (this.weight = null == weight ? 0 : weight, this.color = null == color ? "black" : color, 
                            this.type = null == type ? EdgeType.Gridline : type) : (this.weight = 0, this.color = "black", 
                            this.type = EdgeType.Gridline);
                        }, EdgeSettings.prototype.getCSS = function() {
                            var css = [];
                            return _.isNumber(this.weight) && (css.push(this.weight + TablixUtils.UnitOfMeasurement), 
                            this.color && css.push(this.color), css.push("solid")), css.join(" ");
                        }, EdgeSettings.prototype.getPriority = function(edges) {
                            return this === edges.top || this === edges.bottom ? this.type === EdgeType.Outline ? 2 : 0 : this === edges.right || this === edges.left ? this.type === EdgeType.Outline ? 3 : 1 : -1;
                        }, EdgeSettings.prototype.getShadowCss = function(edges) {
                            var adjustedWeight = this.weight ? this.weight + 5 : 0, output = "inset ";
                            if (this === edges.left) output += adjustedWeight + TablixUtils.UnitOfMeasurement + " 0"; else if (this === edges.right) output += "-" + adjustedWeight + TablixUtils.UnitOfMeasurement + " 0"; else if (this === edges.top) output += "0 " + adjustedWeight + TablixUtils.UnitOfMeasurement; else {
                                if (this !== edges.bottom) return "";
                                output += "0 -" + adjustedWeight + TablixUtils.UnitOfMeasurement;
                            }
                            return output + " 0 -5px " + this.color;
                        }, EdgeSettings;
                    }();
                    TablixUtils.EdgeSettings = TablixVisualCell;
                    TablixVisualCell = function() {
                        function CellStyle(leftPadding, rightPadding) {
                            void 0 === leftPadding && (leftPadding = TablixUtils.CellPaddingLeft), void 0 === rightPadding && (rightPadding = TablixUtils.CellPaddingRight), 
                            this.borders = {}, this.paddings = {
                                top: 0,
                                left: leftPadding,
                                bottom: 0,
                                right: rightPadding
                            }, this.fontColor = "", this.fontFamily = "", this.backColor = "";
                        }
                        return CellStyle.prototype.applyStyle = function(fontAttributeValue) {
                            var style = fontAttributeValue.extension.contentHost.style, fontAttributeValue = this.buildFontAttributeValue();
                            null != fontAttributeValue ? style.font = fontAttributeValue : (style.fontFamily = this.fontFamily, 
                            style.fontSize = this.fontSize ? jsCommon.PixelConverter.toString(this.fontSize.px) : void 0, 
                            style.fontWeight = this.fontWeight, style.fontStyle = this.fontStyle, style.textDecoration = this.textDecoration), 
                            style.color = this.fontColor, style.backgroundColor = this.backColor, style.boxShadow = this.getBoxShadow(), 
                            style.border = "none", style.paddingTop = this.getPaddingTop(), style.paddingRight = this.getPaddingRight(), 
                            style.paddingBottom = this.getPaddingBottom(), style.paddingLeft = this.getPaddingLeft(), 
                            style.maxWidth = this.maxWidth;
                        }, CellStyle.prototype.getPaddingTop = function() {
                            return (null == this.paddings.top ? 0 : this.paddings.top) + (null == this.borders.top ? 0 : this.borders.top.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getPaddingBottom = function() {
                            return (null == this.paddings.bottom ? 0 : this.paddings.bottom) + (null == this.borders.bottom ? 0 : this.borders.bottom.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getPaddingRight = function() {
                            return (null == this.paddings.right ? TablixUtils.CellPaddingRight : this.paddings.right) + (null == this.borders.right ? 0 : this.borders.right.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getPaddingLeft = function() {
                            return (null == this.paddings.left ? TablixUtils.CellPaddingLeft : this.paddings.left) + (null == this.borders.left ? 0 : this.borders.left.weight) + TablixUtils.UnitOfMeasurement;
                        }, CellStyle.prototype.getBoxShadow = function() {
                            var _h, edges = [];
                            return (null === (_h = this.borders.left) || void 0 === _h ? void 0 : _h.type) === EdgeType.Outline && 0 !== this.borders.left.weight && edges.push(this.borders.left.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.right) || void 0 === _h ? void 0 : _h.type) === EdgeType.Outline && 0 !== this.borders.right.weight && edges.push(this.borders.right.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.bottom) || void 0 === _h ? void 0 : _h.type) === EdgeType.Outline && 0 !== this.borders.bottom.weight && edges.push(this.borders.bottom.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.top) || void 0 === _h ? void 0 : _h.type) === EdgeType.Outline && 0 !== this.borders.top.weight && edges.push(this.borders.top.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.left) || void 0 === _h ? void 0 : _h.type) === EdgeType.Gridline && 0 !== this.borders.left.weight && edges.push(this.borders.left.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.right) || void 0 === _h ? void 0 : _h.type) === EdgeType.Gridline && 0 !== this.borders.right.weight && edges.push(this.borders.right.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.bottom) || void 0 === _h ? void 0 : _h.type) === EdgeType.Gridline && 0 !== this.borders.bottom.weight && edges.push(this.borders.bottom.getShadowCss(this.borders)), 
                            (null === (_h = this.borders.top) || void 0 === _h ? void 0 : _h.type) === EdgeType.Gridline && 0 !== this.borders.top.weight && edges.push(this.borders.top.getShadowCss(this.borders)), 
                            edges.join(", ");
                        }, CellStyle.prototype.setAttributes = function(style) {
                            style["padding-top"] = this.getPaddingTop(), style["padding-right"] = this.getPaddingRight(), 
                            style["padding-bottom"] = this.getPaddingBottom(), style["padding-left"] = this.getPaddingLeft();
                            var boxShadow = this.buildFontAttributeValue();
                            null != boxShadow ? style.font = boxShadow : (_.isEmpty(this.fontFamily) || (style["font-family"] = this.fontFamily), 
                            null != this.fontSize && (style["font-size"] = jsCommon.PixelConverter.toString(this.fontSize.px)), 
                            null != this.fontWeight && (style["font-weight"] = this.fontWeight), _.isEmpty(this.fontStyle) || (style["font-style"] = this.fontStyle)), 
                            _.isEmpty(this.textDecoration) || (style["text-decoration"] = this.textDecoration), 
                            _.isEmpty(this.fontColor) || (style.color = this.fontColor), _.isEmpty(this.backColor) || (style["background-color"] = this.backColor);
                            boxShadow = this.getBoxShadow();
                            _.isEmpty(boxShadow) || (style["box-shadow"] = boxShadow), _.isEmpty(this.maxWidth) || (style["max-width"] = this.maxWidth);
                        }, CellStyle.prototype.getAttributes = function() {
                            var style = {};
                            return this.setAttributes(style), style;
                        }, CellStyle.prototype.getExtraTop = function() {
                            var extra = 0;
                            return this.paddings.top && (extra += this.paddings.top), this.borders.top && (extra += this.borders.top.weight), 
                            extra;
                        }, CellStyle.prototype.getExtraBottom = function() {
                            var extra = 0;
                            return this.paddings.bottom && (extra += this.paddings.bottom), this.borders.bottom && (extra += this.borders.bottom.weight), 
                            extra;
                        }, CellStyle.prototype.getExtraRight = function() {
                            var extra = 0;
                            return this.paddings.right && (extra += this.paddings.right), this.borders.right && (extra += this.borders.right.weight), 
                            extra;
                        }, CellStyle.prototype.getExtraLeft = function() {
                            var extra = 0;
                            return this.paddings.left && (extra += this.paddings.left), this.borders.left && (extra += this.borders.left.weight), 
                            extra;
                        }, CellStyle.prototype.buildFontAttributeValue = function() {
                            var hasFontFamily = !_.isEmpty(this.fontFamily), hasFontSize = null != this.fontSize, hasFontWeight = null != this.fontWeight, hasFontStyle = null != this.fontStyle;
                            return hasFontFamily && hasFontSize ? (hasFontWeight ? this.fontWeight + " " : "") + (hasFontStyle ? this.fontStyle + " " : "") + jsCommon.PixelConverter.toString(this.fontSize.px) + " " + this.fontFamily : null;
                        }, CellStyle;
                    }();
                    TablixUtils.CellStyle = TablixVisualCell;
                    var DimensionPosition = function() {};
                    TablixUtils.DimensionPosition = DimensionPosition;
                    TablixVisualCell = function() {
                        function CellPosition() {
                            this.row = new DimensionPosition(), this.column = new DimensionPosition();
                        }
                        return CellPosition.prototype.isMatch = function(position) {
                            return this.column.index === position.column.index && this.row.index === position.row.index;
                        }, CellPosition;
                    }();
                    TablixUtils.CellPosition = TablixVisualCell;
                    TablixVisualCell = function() {
                        function TablixVisualCell(dataPoint, objects, isRowSubTotal, isColumnSubTotal, isRowGrandTotal, isColumnGrandTotal, columnMetadata, formatter, tooltipFormatter, type) {
                            this.dataPoint = dataPoint, this.objects = objects, this.isRowSubTotal = isRowSubTotal, 
                            this.isColumnSubTotal = isColumnSubTotal, this.isRowGrandTotal = isRowGrandTotal, 
                            this.isColumnGrandTotal = isColumnGrandTotal, this.columnMetadata = columnMetadata, 
                            this.formatter = formatter, this.tooltipFormatter = tooltipFormatter, this.type = type, 
                            this.position = new TablixUtils.CellPosition(), formatter ? this.cachedTextContent = this.formatter.format(dataPoint, objects) : null != this.dataPoint ? this.cachedTextContent = dataPoint : this.cachedTextContent = "";
                        }
                        return Object.defineProperty(TablixVisualCell.prototype, "isTotal", {
                            get: function() {
                                return this.isSubtotal || this.isGrandTotal;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isSubtotal", {
                            get: function() {
                                return this.isColumnSubTotal || this.isRowSubTotal;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isGrandTotal", {
                            get: function() {
                                return this.isColumnGrandTotal || this.isRowGrandTotal;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "textContent", {
                            get: function() {
                                return this.cachedTextContent;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "tooltipContent", {
                            get: function() {
                                return void 0 === this.cachedTooltipContent && (this.tooltipFormatter ? this.cachedTooltipContent = this.tooltipFormatter.format(this.dataPoint, this.objects) : this.cachedTooltipContent = this.textContent), 
                                this.cachedTooltipContent;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isKpi", {
                            get: function() {
                                return this.columnMetadata && isValidStatusGraphic(this.columnMetadata.kpi, this.textContent);
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "kpiContent", {
                            get: function() {
                                if (this.isKpi) return createKpiDom(this.columnMetadata.kpi, this.textContent);
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isNumeric", {
                            get: function() {
                                if (this.columnMetadata) return this.columnMetadata.type.numeric && !this.columnMetadata.kpi;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isUrl", {
                            get: function() {
                                if (this.columnMetadata) return visuals.converterHelper.isWebUrlColumn(this.columnMetadata);
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isImage", {
                            get: function() {
                                if (this.columnMetadata) return visuals.converterHelper.isImageUrlColumn(this.columnMetadata);
                            },
                            enumerable: !1,
                            configurable: !0
                        }), Object.defineProperty(TablixVisualCell.prototype, "isValidUrl", {
                            get: function() {
                                return TablixUtils.getUrlScheme(this.columnMetadata, this.textContent) !== UrlScheme.NONE;
                            },
                            enumerable: !1,
                            configurable: !0
                        }), TablixVisualCell.prototype.isMatch = function(item) {
                            return this.position.isMatch(item.position) && this.backColor === item.backColor;
                        }, TablixVisualCell;
                    }();
                    function createDiv() {
                        var div = document.createElement("div");
                        return div.className = TablixUtils.CssClassTablixDiv, div;
                    }
                    function createKpiDom(kpi, className) {
                        className = visuals.KpiUtil.getClassForKpi(kpi, className) || "";
                        return DomFactory.div().addClass(className).css({
                            display: "inline-block",
                            "vertical-align": "bottom",
                            margin: "0"
                        });
                    }
                    function isImage(header, metadata) {
                        return visuals.converterHelper.isImageUrlColumn(metadata) && !header.isSubtotal && !!header.identity;
                    }
                    function isValidStatusGraphic(kpi, kpiValue) {
                        return !(!kpi || void 0 === kpiValue) && !!visuals.KpiUtil.getClassForKpi(kpi, kpiValue);
                    }
                    function reverseSort(sortDirection) {
                        return 2 === sortDirection ? 1 : 2;
                    }
                    function createSortIcon(sort, isSorted) {
                        var imgSort = document.createElement("i");
                        return imgSort.className = SortIconContainerClassName + " " + (isSorted ? "sorted" : "future") + " " + (1 === sort ? "powervisuals-glyph caret-up" : "powervisuals-glyph caret-down"), 
                        imgSort;
                    }
                    TablixUtils.TablixVisualCell = TablixVisualCell, TablixUtils.createTable = function() {
                        return document.createElement("table");
                    }, TablixUtils.createDiv = createDiv, TablixUtils.resetCellCssClass = function(cell) {
                        cell.extension.contentElement.className = TablixUtils.CssClassTablixDiv + " " + TablixUtils.CssClassContentElement, 
                        cell.extension.contentHost.className = TablixUtils.CssClassTablixDiv + " " + TablixUtils.CssClassContentHost;
                    }, TablixUtils.addCellCssClass = function(cell, style) {
                        cell.extension.contentHost.className += " " + style;
                    }, TablixUtils.clearCellStyle = function(cell) {
                        cell.extension.contentHost.className = "", cell.extension.contentHost.style.cssText = "";
                    }, TablixUtils.clearCellTextAndTooltip = function(cell) {
                        cell.extension.contentHost.textContent = "", cell.extension.contentHost.removeAttribute("title"), 
                        cell.contentHeight = cell.contentWidth = 0, controls.HTMLElementUtils.clearChildren(cell.extension.contentHost);
                    }, TablixUtils.setCellTextAndTooltip = function(text, elementText, elementTooltip) {
                        TablixUtils.setCellText(text, elementText), TablixUtils.setCellTooltip(text, elementTooltip || elementText);
                    }, TablixUtils.setCellText = function(text, element) {
                        element.textContent = visuals.TextUtil.replaceSpaceWithNBSP(text);
                    }, TablixUtils.setCellTooltip = function(text, element) {
                        element.title = text;
                    }, TablixUtils.appendDiv = function(container, text) {
                        var div = createDiv();
                        return container.appendChild(div), text && (div.textContent = text), div;
                    }, TablixUtils.isValidSortClick = function(x) {
                        var colHeader = x.target;
                        return 0 <= (x = x.offsetX) && x < colHeader.offsetWidth - internal.TablixResizer.resizeHandleSize;
                    }, TablixUtils.appendATagToBodyCell = function(value, cellElement, urlIconName) {
                        var atag = null;
                        0 === cellElement.childElementCount ? (atag = document.createElement("a"), cellElement.appendChild(atag)) : atag = cellElement.children[0], 
                        atag.href = value, atag.target = "_blank", atag.rel = "noopener noreferrer", atag.title = value, 
                        null != urlIconName ? (atag.className = TablixUtils.CssClassValueURLIcon + " " + urlIconName, 
                        $(cellElement).addClass(TablixUtils.CssClassValueURLIconContainer)) : atag.innerText = value;
                    }, TablixUtils.appendImgTagToBodyCell = function(value, cellElement, imageHeight) {
                        var imgContainer = TablixUtils.createDiv(), imgTag = document.createElement("img");
                        imgContainer.style.height = imageHeight + "px", imgContainer.style.width = "100%", 
                        imgContainer.style.textAlign = "center", imgTag.src = value, imgTag.style.maxHeight = "100%", 
                        imgTag.style.maxWidth = "100%", imgContainer.appendChild(imgTag), cellElement.appendChild(imgContainer), 
                        cellElement.title = value;
                    }, TablixUtils.createKpiDom = createKpiDom, TablixUtils.getUrlScheme = function(metadata, content) {
                        return visuals.converterHelper.isWebUrlColumn(metadata) ? UrlUtils.getUrlScheme(content) : UrlScheme.NONE;
                    }, TablixUtils.getUrlIconName = function(scheme) {
                        switch (scheme) {
                          case UrlScheme.file:
                          case UrlScheme.ftp:
                            return "page2";

                          case UrlScheme.mailto:
                            return "mail";

                          case UrlScheme.news:
                            return "link";

                          case UrlScheme.telnet:
                            return "pc1";

                          case UrlScheme.http:
                          case UrlScheme.https:
                            return "link";

                          default:
                            return null;
                        }
                    }, TablixUtils.isValidImage = function(header, metadata, content) {
                        return isImage(header, metadata) && UrlUtils.isValidImageUrl(content);
                    }, TablixUtils.isImage = isImage, TablixUtils.isValidStatusGraphic = isValidStatusGraphic, 
                    TablixUtils.getCustomSortEventArgs = function(queryName, sortDirection) {
                        return {
                            sortDescriptors: [ {
                                queryName: queryName,
                                sortDirection: sortDirection
                            } ]
                        };
                    }, TablixUtils.reverseSort = reverseSort, TablixUtils.addSortIconToColumnHeader = function(colHeaderTitle, cellDiv) {
                        var colHeaderContainer = TablixUtils.createDiv();
                        return colHeaderTitle ? (colHeaderContainer.appendChild(createSortIcon(colHeaderTitle, !0)), 
                        colHeaderContainer.appendChild(createSortIcon(2 === colHeaderTitle ? 1 : 2, !1))) : colHeaderContainer.appendChild(createSortIcon(2, !1)), 
                        colHeaderTitle = TablixUtils.createDiv(), colHeaderContainer.appendChild(colHeaderTitle), 
                        cellDiv.appendChild(colHeaderContainer), colHeaderTitle;
                    }, TablixUtils.removeSortIcons = function(cell) {
                        !function(cell) {
                            for (var i = 0, len = cell.extension.contentElement.childElementCount; i < len; i++) if (cell.extension.contentElement.children.item(i).classList.contains(SortIconContainerClassName)) return 1;
                        }(cell) || $(cell.extension.contentElement).find("." + SortIconContainerClassName).remove();
                    }, TablixUtils.convertValueToString = function(value, utcDates) {
                        return utcDates && value instanceof Date && powerbi.isDateWithEpochValue(value) && (value = powerbi.PBIFormattingDate.fromDateWithEpochTimeStamp(value).toString()), 
                        String(value);
                    };
                }(internal.TablixUtils || (internal.TablixUtils = {})), function(TableExUtils) {
                    function getAriaRowIndex(rowIndex) {
                        return rowIndex + 2;
                    }
                    function getAriaColIndex(colIndex) {
                        return colIndex + 2;
                    }
                    TableExUtils.getItemByElement = function(cell, element) {
                        return (cell = jsCommon.FocusNavigationUtility.getFirstMatchingAncestor(element, function(element) {
                            return element.matches('[role="gridcell"]');
                        }, cell, !0)) ? d3.select(cell).datum() : void 0;
                    }, TableExUtils.getHeaderCell = function(headerContainer, ariaColIndex) {
                        return ariaColIndex += 2, d3.select(headerContainer).select('[aria-colindex="' + ariaColIndex + '"]').node();
                    }, TableExUtils.getBodyCell = function(bodyContainer, ariaRowIndex, ariaColIndex) {
                        return ariaRowIndex += 2, ariaColIndex += 2, d3.select(bodyContainer).select('[aria-rowindex="' + ariaRowIndex + '"] [aria-colindex="' + ariaColIndex + '"]').node();
                    }, TableExUtils.getFooterCell = function(footerContainer, ariaColIndex) {
                        return ariaColIndex += 2, d3.select(footerContainer).select('[aria-colindex="' + ariaColIndex + '"]').node();
                    }, TableExUtils.getAriaRowIndex = getAriaRowIndex, TableExUtils.getAriaColIndex = getAriaColIndex, 
                    TableExUtils.getRowIndex = function(ariaRowIndex) {
                        var _a;
                        return +(ariaRowIndex = null !== (_a = ariaRowIndex.getAttribute("aria-rowindex")) && void 0 !== _a ? _a : ariaRowIndex.parentElement.getAttribute("aria-rowindex")) - 2;
                    }, TableExUtils.getColumnIndex = function(ariaColIndex) {
                        return +(ariaColIndex = ariaColIndex.getAttribute("aria-colindex")) - 2;
                    };
                }(internal.TableExUtils || (internal.TableExUtils = {}));
            }(controls.internal || (controls.internal = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            controls.TablixDefaultTextSize = jsCommon.TextSizeDefaults.TextSizeMin;
            var TablixControl = function() {
                function TablixControl(hierarchyNavigator, layoutManager, binder, parentDomElement, options) {
                    var _this = this;
                    this.scrollBarElementWidth = 9;
                    var isInteractive = (this.options = options).interactive;
                    this.isTouchEnabled = isInteractive && options.enableTouchSupport, this.mainDiv = controls.internal.TablixUtils.createDiv(), 
                    this.mainDiv.classList.add(TablixControl.TablixTableAreaClassName), this.footerDiv = controls.internal.TablixUtils.createDiv(), 
                    this.footerDiv.classList.add(TablixControl.TablixFooterClassName), this.gridDimensions = {}, 
                    this.containerElement = controls.internal.TablixUtils.createDiv(), this.className = layoutManager.getTablixClassName(), 
                    this.autoSizeWidth = !1, this.autoSizeHeight = !1, this.fontFamily = controls.internal.TablixUtils.FontFamilyCell, 
                    this.fontColor = controls.internal.TablixUtils.FontColorCells, this.fontSize = options.fontSize, 
                    parentDomElement.className = TablixControl.TablixContainerClassName, parentDomElement.appendChild(this.containerElement), 
                    this.containerElement.addEventListener("wheel", function(e) {
                        _this.onWheel(e);
                    }), this.containerElement.appendChild(this.mainDiv), this.containerElement.appendChild(this.footerDiv), 
                    this.isTouchEnabled && (this.InitializeTouchSupport(), this.bindTouchEvents()), 
                    this.controlLayoutManager = layoutManager, this.controlLayoutManager.initialize(this), 
                    this.hierarchyTablixNavigator = hierarchyNavigator, this.binder = binder, this.columnDim = new controls.TablixColumnDimension(this), 
                    this.rowDim = new controls.TablixRowDimension(this), this.columnDim._otherDimension = this.rowDimension, 
                    this.rowDim._otherDimension = this.columnDimension, this.InitializeScrollbars(), 
                    isInteractive || (this.scrollbarWidth = 0), this.updateHorizontalPosition(), this.updateVerticalPosition(), 
                    this.updateFooterVisibility(), this.lastRenderingArgs = {};
                }
                return TablixControl.prototype.InitializeTouchSupport = function() {
                    this.isTouchEventsBound = !1, this.touchManager = new controls.TouchUtils.TouchManager(), 
                    this.touchInterpreter = new controls.TouchUtils.TouchEventInterpreter(this.touchManager), 
                    this.footerTouchInterpreter = new controls.TouchUtils.TouchEventInterpreter(this.touchManager), 
                    this.columnTouchDelegate = new controls.ColumnTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.rowTouchDelegate = new controls.RowTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.bodyTouchDelegate = new controls.BodyTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.footerTouchDelegate = new controls.ColumnTouchDelegate(new controls.TouchUtils.Rectangle()), 
                    this.columnTouchDelegate.setHandler(this, this.onTouchEvent), this.rowTouchDelegate.setHandler(this, this.onTouchEvent), 
                    this.bodyTouchDelegate.setHandler(this, this.onTouchEvent), this.footerTouchDelegate.setHandler(this, this.onTouchEvent), 
                    this.touchManager.addTouchRegion(this.columnTouchDelegate.dimension, this.columnTouchDelegate, this.columnTouchDelegate), 
                    this.touchManager.addTouchRegion(this.rowTouchDelegate.dimension, this.rowTouchDelegate, this.rowTouchDelegate), 
                    this.touchManager.addTouchRegion(this.bodyTouchDelegate.dimension, this.bodyTouchDelegate, this.bodyTouchDelegate), 
                    this.touchManager.addTouchRegion(this.footerTouchDelegate.dimension, this.footerTouchDelegate, this.footerTouchDelegate);
                }, TablixControl.prototype.unBindTouchEvents = function() {
                    this.isTouchEventsBound && (this.touchInterpreter.clearAllTouchEvents(), this.footerTouchInterpreter.clearAllTouchEvents(), 
                    this.isTouchEventsBound = !1);
                }, TablixControl.prototype.bindTouchEvents = function() {
                    this.isTouchEventsBound || (this.touchInterpreter.initTouch(this.mainDiv, null), 
                    this.footerTouchInterpreter.initTouch(this.footerDiv, this.mainDiv), this.isTouchEventsBound = !0);
                }, TablixControl.prototype.InitializeScrollbars = function() {
                    this.rowDim._initializeScrollbar(this.containerElement, null, this.options.layoutKind);
                    var columnDimensionScrollbarStyle = this.rowDim.scrollbar.element.style;
                    columnDimensionScrollbarStyle.position = "absolute", columnDimensionScrollbarStyle.top = "0" + TablixControl.UnitOfMeasurement, 
                    columnDimensionScrollbarStyle.right = "0" + TablixControl.UnitOfMeasurement, this.rowDim.scrollbar.width = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.rowDim.scrollbar.show(!0), this.columnDim._initializeScrollbar(this.containerElement, null, this.options.layoutKind);
                    columnDimensionScrollbarStyle = this.columnDim.scrollbar.element.style;
                    columnDimensionScrollbarStyle.position = "absolute", columnDimensionScrollbarStyle.left = "0" + TablixControl.UnitOfMeasurement, 
                    columnDimensionScrollbarStyle.bottom = "0" + TablixControl.UnitOfMeasurement, this.columnDim.scrollbar.height = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.columnDim.scrollbar.show(!1);
                }, TablixControl.prototype.toggleTouchBindings = function(touchBindingEnabled) {
                    this.isTouchEnabled && (touchBindingEnabled ? this.bindTouchEvents() : this.unBindTouchEvents());
                }, Object.defineProperty(TablixControl.prototype, "container", {
                    get: function() {
                        return this.containerElement;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "contentHost", {
                    get: function() {
                        return this.mainDiv;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "footerHost", {
                    get: function() {
                        return this.footerDiv;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "className", {
                    set: function(value) {
                        this.containerElement.className = value;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "hierarchyNavigator", {
                    get: function() {
                        return this.hierarchyTablixNavigator;
                    },
                    enumerable: !1,
                    configurable: !0
                }), TablixControl.prototype.getBinder = function() {
                    return this.binder;
                }, Object.defineProperty(TablixControl.prototype, "autoSizeWidth", {
                    get: function() {
                        return this._autoSizeWidth;
                    },
                    set: function(value) {
                        (this._autoSizeWidth = value) || (this.containerElement.style.minWidth = this.containerElement.style.maxWidth = "none");
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "autoSizeHeight", {
                    get: function() {
                        return this._autoSizeHeight;
                    },
                    set: function(value) {
                        value || (this.containerElement.style.minHeight = this.containerElement.style.maxHeight = "none");
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "maxWidth", {
                    get: function() {
                        return this.maximumWidth;
                    },
                    set: function(value) {
                        this.maximumWidth = value, this.containerElement.style.maxWidth = this.maximumWidth + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "viewport", {
                    get: function() {
                        return this.viewPort;
                    },
                    set: function(value) {
                        this.viewPort = value, this.containerElement.style.width = this.viewPort.width + TablixControl.UnitOfMeasurement, 
                        this.containerElement.style.height = this.viewPort.height + TablixControl.UnitOfMeasurement, 
                        this.rowDim.scrollbar.invalidateArrange(), this.columnDim.scrollbar.invalidateArrange(), 
                        this.controlLayoutManager.updateViewport(this.viewPort);
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "maxHeight", {
                    get: function() {
                        return this.maximumHeight;
                    },
                    set: function(value) {
                        this.maximumHeight = value, this.containerElement.style.maxHeight = this.maximumHeight + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "minWidth", {
                    get: function() {
                        return this.minimumWidth;
                    },
                    set: function(value) {
                        this.minimumWidth = value, this.containerElement.style.minWidth = this.minimumWidth + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "minHeight", {
                    get: function() {
                        return this.minimumHeight;
                    },
                    set: function(value) {
                        this.minimumHeight = value, this.containerElement.style.minHeight = this.minimumHeight + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "fontSize", {
                    get: function() {
                        return this.textFontSize;
                    },
                    set: function(value) {
                        this.textFontSize = value || TablixControl.DefaultFontSize, this.containerElement.style.fontSize = this.textFontSize;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "fontFamily", {
                    get: function() {
                        return this.textFontFamily;
                    },
                    set: function(value) {
                        this.textFontFamily = value, this.containerElement.style.fontFamily = value;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "fontColor", {
                    get: function() {
                        return this.textFontColor;
                    },
                    set: function(value) {
                        this.textFontColor = value, this.containerElement.style.color = value;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "scrollbarWidth", {
                    set: function(value) {
                        this.scrollBarElementWidth = value, this.rowDim.scrollbar.width = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                        this.columnDim.scrollbar.height = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement;
                    },
                    enumerable: !1,
                    configurable: !0
                }), TablixControl.prototype.getIsTouchEventsBound = function() {
                    return !!this.isTouchEventsBound;
                }, TablixControl.prototype.updateModels = function(resetScrollOffsets, rowModel, columnModel) {
                    this.rowDim.model = rowModel, this.rowDim.modelDepth = this.hierarchyNavigator.getRowHierarchyDepth(), 
                    this.columnDim.model = columnModel, this.columnDim.modelDepth = this.hierarchyNavigator.getColumnHierarchyDepth(), 
                    resetScrollOffsets && (this.rowDim.scrollOffset = 0, this.columnDim.scrollOffset = 0), 
                    this.layoutManager.updateColumnCount(this.rowDim, this.columnDim);
                }, TablixControl.prototype.updateColumnDimensions = function(rowHierarchyWidth, columnHierarchyWidth, count) {
                    var gridDimensions = this.gridDimensions;
                    gridDimensions.columnCount = count, gridDimensions.rowHierarchyWidth = rowHierarchyWidth, 
                    gridDimensions.columnHierarchyWidth = columnHierarchyWidth;
                }, TablixControl.prototype.updateRowDimensions = function(columnHierarchyHeight, rowHierarchyHeight, rowHierarchyContentHeight, count, footerHeight) {
                    var gridDimensions = this.gridDimensions;
                    gridDimensions.rowCount = count, gridDimensions.rowHierarchyHeight = rowHierarchyHeight, 
                    gridDimensions.rowHierarchyContentHeight = rowHierarchyContentHeight, gridDimensions.columnHierarchyHeight = columnHierarchyHeight, 
                    gridDimensions.footerHeight = footerHeight;
                }, TablixControl.prototype.updateTouchDimensions = function() {
                    var gridDimensions = this.gridDimensions;
                    this.columnTouchDelegate.resize(gridDimensions.rowHierarchyWidth, 0, gridDimensions.columnHierarchyWidth, gridDimensions.columnHierarchyHeight), 
                    this.columnTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth), 
                    this.rowTouchDelegate.resize(0, gridDimensions.columnHierarchyHeight, gridDimensions.rowHierarchyWidth, gridDimensions.rowHierarchyHeight), 
                    this.rowTouchDelegate.setScrollDensity(gridDimensions.rowCount / gridDimensions.rowHierarchyHeight), 
                    this.bodyTouchDelegate.resize(gridDimensions.rowHierarchyWidth, gridDimensions.columnHierarchyHeight, gridDimensions.columnHierarchyWidth, gridDimensions.rowHierarchyHeight), 
                    this.bodyTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth, gridDimensions.rowCount / gridDimensions.rowHierarchyHeight), 
                    this.footerTouchDelegate.resize(gridDimensions.rowHierarchyWidth, gridDimensions.columnHierarchyHeight + gridDimensions.rowHierarchyHeight, gridDimensions.columnHierarchyWidth, gridDimensions.footerHeight), 
                    this.footerTouchDelegate.setScrollDensity(gridDimensions.columnCount / gridDimensions.columnHierarchyWidth);
                }, TablixControl.prototype.onWheel = function(e) {
                    this.determineDimensionToScroll(e, function(dimension, delta) {
                        dimension.scrollbar.onMouseWheel(-1 * delta);
                    }), 0 === this.options.layoutKind && e.preventDefault();
                }, TablixControl.prototype.determineDimensionToScroll = function(e, scrollCallback) {
                    this.rowDim.scrollbar.visible ? (e.deltaY && scrollCallback(this.rowDim, e.deltaY), 
                    e.deltaX && this.columnDim.scrollbar.visible && scrollCallback(this.columnDim, e.deltaX)) : this.columnDim.scrollbar.visible && (e.deltaX ? scrollCallback(this.columnDim, e.deltaX) : e.deltaY && scrollCallback(this.columnDim, e.deltaY));
                }, Object.defineProperty(TablixControl.prototype, "layoutManager", {
                    get: function() {
                        return this.controlLayoutManager;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "columnDimension", {
                    get: function() {
                        return this.columnDim;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixControl.prototype, "rowDimension", {
                    get: function() {
                        return this.rowDim;
                    },
                    enumerable: !1,
                    configurable: !0
                }), TablixControl.prototype.refresh = function(clear) {
                    this.render(clear, null);
                }, TablixControl.prototype._onScrollAsync = function(dimension) {
                    var _this = this;
                    requestAnimationFrame(function() {
                        _this.performPendingScroll(dimension);
                    });
                }, TablixControl.prototype.performPendingScroll = function(dimension) {
                    this.render(!1, dimension);
                }, TablixControl.prototype.updateHorizontalPosition = function() {
                    this.rowDim.scrollbar.visible ? (this.columnDim.scrollbar.element.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.footerDiv.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement, 
                    this.mainDiv.style.right = this.scrollBarElementWidth + TablixControl.UnitOfMeasurement) : (this.columnDim.scrollbar.element.style.right = "0" + TablixControl.UnitOfMeasurement, 
                    this.mainDiv.style.right = "0" + TablixControl.UnitOfMeasurement, this.footerDiv.style.right = "0" + TablixControl.UnitOfMeasurement);
                }, TablixControl.prototype.updateFooterVisibility = function() {
                    (this.rowDim.hasFooter() ? "block" !== this.footerDiv.style.display : "none" !== this.footerDiv.style.display) && (this.rowDim.hasFooter() ? this.footerDiv.style.display = "block" : this.footerDiv.style.display = "none");
                }, TablixControl.prototype.updateVerticalPosition = function() {
                    var mainBottom, footerBottom = this.rowDim.scrollbar.visible, verticalScrollbarBottom = 1 === this.controlLayoutManager.getLayoutKind();
                    footerBottom || verticalScrollbarBottom ? (mainBottom = this.footerDiv.offsetHeight, 
                    verticalScrollbarBottom = footerBottom = 0, this.columnDim.scrollbar.visible && (mainBottom += this.scrollBarElementWidth, 
                    footerBottom += this.scrollBarElementWidth, verticalScrollbarBottom = this.scrollBarElementWidth), 
                    this.mainDiv.style.bottom = mainBottom + TablixControl.UnitOfMeasurement, this.rowDim.scrollbar.element.style.bottom = verticalScrollbarBottom + TablixControl.UnitOfMeasurement, 
                    this.footerDiv.style.bottom = footerBottom + TablixControl.UnitOfMeasurement, this.footerDiv.style.removeProperty("top")) : (this.footerDiv.style.top = this.gridDimensions.rowHierarchyContentHeight + TablixControl.UnitOfMeasurement, 
                    this.footerDiv.style.removeProperty("bottom"), this.mainDiv.style.removeProperty("bottom"));
                }, TablixControl.prototype.alreadyRendered = function(scrollingDimension) {
                    return scrollingDimension === this.lastRenderingArgs.scrollingDimension && this.rowDimension.scrollOffset === this.lastRenderingArgs.rowScrollOffset && this.columnDimension.scrollOffset === this.lastRenderingArgs.columnScrollOffset;
                }, TablixControl.prototype.render = function(clear, scrollingDimension) {
                    if (this.columnDim.makeScrollOffsetValid(), this.rowDim.makeScrollOffsetValid(), 
                    clear || null === scrollingDimension) this.lastRenderingArgs = {}; else if (this.alreadyRendered(scrollingDimension)) return;
                    var done = !1;
                    this.renderIterationCount = 0, this.controlLayoutManager.onStartRenderingSession(scrollingDimension, this.mainDiv, clear);
                    var lastRenderingArgs = this.binder;
                    lastRenderingArgs.onStartRenderingSession();
                    for (var priorFooterHeight = this.gridDimensions.footerHeight, priorRowHierarchyHeight = this.gridDimensions.rowHierarchyHeight, priorRowHierarchyContentHeight = this.gridDimensions.rowHierarchyContentHeight; !done && this.renderIterationCount < TablixControl.MaxRenderIterationCount; ) {
                        var hScrollbarVisibility = this.columnDim.scrollbar.visible, vScrollbarVisibility = this.rowDim.scrollbar.visible;
                        this.columnDim._onStartRenderingIteration(), this.rowDim._onStartRenderingIteration(), 
                        this.controlLayoutManager.onStartRenderingIteration(clear), this.renderCorner(), 
                        this.columnDim._render(), this.rowDim._render(), done = this.controlLayoutManager.onEndRenderingIteration(), 
                        this.columnDim._onEndRenderingIteration(), this.rowDim._onEndRenderingIteration(), 
                        hScrollbarVisibility !== this.columnDim.scrollbar.visible && this.updateVerticalPosition(), 
                        vScrollbarVisibility !== this.rowDim.scrollbar.visible && this.updateHorizontalPosition(), 
                        this.renderIterationCount++;
                    }
                    this.controlLayoutManager.onEndRenderingSession(), lastRenderingArgs.onEndRenderingSession(), 
                    this.isTouchEnabled && this.updateTouchDimensions(), this.lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, 
                    this.lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, this.updateContainerDimensions();
                    lastRenderingArgs = this.lastRenderingArgs;
                    lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, 
                    lastRenderingArgs.scrollingDimension = scrollingDimension, priorFooterHeight === this.gridDimensions.footerHeight && priorRowHierarchyHeight === this.gridDimensions.rowHierarchyHeight && priorRowHierarchyContentHeight === this.gridDimensions.rowHierarchyContentHeight || this.updateVerticalPosition(), 
                    this.options.interactive && (this.columnDim.scrollbar.refresh(), this.rowDim.scrollbar.refresh());
                }, TablixControl.prototype.updateContainerDimensions = function() {
                    var hScrollBarHeight, gridDimensions = this.gridDimensions;
                    this._autoSizeWidth && (hScrollBarHeight = this.rowDim.scrollbar.visible ? this.scrollBarElementWidth : 0, 
                    this.containerElement.style.width = gridDimensions.rowHierarchyWidth + gridDimensions.columnHierarchyWidth + hScrollBarHeight + TablixControl.UnitOfMeasurement), 
                    this._autoSizeHeight && (hScrollBarHeight = this.columnDim.scrollbar.visible ? this.scrollBarElementWidth : 0, 
                    this.containerElement.style.height = gridDimensions.columnHierarchyHeight + gridDimensions.rowHierarchyHeight + gridDimensions.footerHeight + hScrollBarHeight + TablixControl.UnitOfMeasurement);
                }, TablixControl.prototype.cornerCellMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return 0 === cell.type && previousItem && this.hierarchyTablixNavigator.cornerCellItemEquals(item, previousItem);
                }, TablixControl.prototype.renderCorner = function() {
                    for (var columnDepth = this.columnDim.getDepth(), rowDepth = this.rowDim.getDepth(), i = 0; i < columnDepth; i++) for (var j = 0; j < rowDepth; j++) {
                        var item = this.hierarchyTablixNavigator.getCorner(j, i), cell = this.controlLayoutManager.getOrCreateCornerCell(item, j, i);
                        this.cornerCellMatch(item, cell) || (this._unbindCell(cell), cell.type = 0, cell.item = item, 
                        this.binder.bindCornerCell(item, cell)), this.controlLayoutManager.onCornerCellRealized(item, cell);
                    }
                }, TablixControl.prototype._unbindCell = function(cell) {
                    switch (cell.type) {
                      case 3:
                        this.binder.unbindBodyCell(cell.item, cell);
                        break;

                      case 2:
                        this.binder.unbindColumnHeader(cell.item, cell);
                        break;

                      case 1:
                        this.binder.unbindRowHeader(cell.item, cell);
                        break;

                      case 0:
                        this.binder.unbindCornerCell(cell.item, cell);
                    }
                    cell.item = null, cell.type = null;
                }, TablixControl.prototype.onTouchEvent = function(rowShift) {
                    var colShift, that;
                    rowShift && 0 < rowShift.length && "columnDim" in rowShift[0] && "rowDim" in rowShift[0] && (colShift = (that = rowShift[0]).columnDim.scrollbar.visible ? rowShift[1] : 0, 
                    rowShift = that.rowDim.scrollbar.visible ? rowShift[2] : 0, that.columnDim.scrollbar.viewMin = Math.max(0, that.columnDim.scrollbar.viewMin + colShift), 
                    that.columnDim.scrollOffset = Math.max(0, that.columnDim.scrollOffset + colShift), 
                    that.rowDim.scrollbar.viewMin = Math.max(0, that.rowDim.scrollbar.viewMin + rowShift), 
                    that.rowDim.scrollOffset = Math.max(0, that.rowDim.scrollOffset + rowShift), 0 === colShift ? that._onScrollAsync(that.rowDim) : 0 === rowShift ? that._onScrollAsync(that.columnDim) : that._onScrollAsync(null));
                }, TablixControl.UnitOfMeasurement = "px", TablixControl.TablixContainerClassName = "tablixContainer", 
                TablixControl.TablixTableAreaClassName = "tablixTableArea", TablixControl.TablixFooterClassName = "tableFooterArea", 
                TablixControl.DefaultFontSize = jsCommon.PixelConverter.fromPoint(controls.TablixDefaultTextSize), 
                TablixControl.MaxRenderIterationCount = 10, TablixControl;
            }();
            controls.TablixControl = TablixControl;
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            var TablixColumnDimension = function() {
                function TablixDimension(tablixControl) {
                    this._scrollStep = .1, this._owner = tablixControl, this._hierarchyNavigator = tablixControl.hierarchyNavigator, 
                    this._binder = tablixControl.getBinder(), this._tablixLayoutManager = tablixControl.layoutManager, 
                    this.scrollOffset = 0;
                }
                return TablixDimension.prototype._onStartRenderingIteration = function() {
                    this.updateScrollPosition();
                }, TablixDimension.prototype._onEndRenderingIteration = function() {}, TablixDimension.prototype.getValidScrollOffset = function(scrollOffset) {
                    return Math.min(Math.max(scrollOffset, 0), Math.max(this.getItemsCount() - this._scrollStep, 0));
                }, TablixDimension.prototype.makeScrollOffsetValid = function() {
                    this.scrollOffset = this.getValidScrollOffset(this.scrollOffset);
                }, TablixDimension.prototype.getIntegerScrollOffset = function() {
                    return Math.floor(this.scrollOffset);
                }, TablixDimension.prototype.getFractionScrollOffset = function() {
                    return this.scrollOffset - this.getIntegerScrollOffset();
                }, Object.defineProperty(TablixDimension.prototype, "scrollbar", {
                    get: function() {
                        return this._scrollbar;
                    },
                    enumerable: !1,
                    configurable: !0
                }), TablixDimension.prototype.getFirstVisibleItem = function(level) {
                    return this._scrollItems[level];
                }, TablixDimension.prototype.getFirstVisibleChild = function(item) {
                    return this._hierarchyNavigator.getAt(this._hierarchyNavigator.getChildren(item), this.getFirstVisibleChildIndex(item));
                }, TablixDimension.prototype.getFirstVisibleChildIndex = function(item) {
                    var firstVisibleIndex = this.getFirstVisibleItem(this._hierarchyNavigator.getLevel(item) + 1), firstVisibleIndex = void 0 === firstVisibleIndex || void 0 !== firstVisibleIndex && this._hierarchyNavigator.getParent(firstVisibleIndex) !== item ? 0 : this._hierarchyNavigator.getIndex(firstVisibleIndex);
                    return firstVisibleIndex;
                }, TablixDimension.prototype._initializeScrollbar = function(parentElement, _touchDiv, layoutKind) {
                    var _this = this;
                    this._scrollbar = this._createScrollbar(parentElement, layoutKind), this._scrollbar._onscroll.push(function(e) {
                        return _this.onScroll();
                    });
                }, TablixDimension.prototype.getItemsCount = function() {
                    return this.model ? this._hierarchyNavigator.getLeafCount(this.model) : 0;
                }, TablixDimension.prototype.getDepth = function() {
                    return this.modelDepth;
                }, TablixDimension.prototype.onScroll = function() {
                    this.scrollOffset = this._scrollbar.viewMin, this._owner._onScrollAsync(this);
                }, Object.defineProperty(TablixDimension.prototype, "otherDimension", {
                    get: function() {
                        return this._otherDimension;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(TablixDimension.prototype, "layoutManager", {
                    get: function() {
                        return this._layoutManager;
                    },
                    enumerable: !1,
                    configurable: !0
                }), TablixDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                    return null;
                }, TablixDimension.prototype.updateScrollPosition = function() {
                    if (this._scrollItems = [], this.model) {
                        var firstVisibleScrollIndex = this.getIntegerScrollOffset(), firstVisible = this._hierarchyNavigator.getLeafAt(this.model, firstVisibleScrollIndex);
                        if (firstVisible) for (;this._scrollItems[this._hierarchyNavigator.getLevel(firstVisible)] = firstVisible, 
                        null !== (firstVisible = this._hierarchyNavigator.getParent(firstVisible)); );
                    }
                }, TablixDimension;
            }(), TablixRowDimension = function(_super) {
                function TablixRowDimension(_this) {
                    _this = _super.call(this, _this) || this;
                    return _this._layoutManager = _this._tablixLayoutManager.rowLayoutManager, _this._footer = null, 
                    _this;
                }
                return __extends(TablixRowDimension, _super), TablixRowDimension.prototype.setFooter = function(footerHeader) {
                    this._footer = footerHeader, this._owner.updateFooterVisibility();
                }, TablixRowDimension.prototype.hasFooter = function() {
                    return null !== this._footer;
                }, TablixRowDimension.prototype._render = function() {
                    var firstVisibleRowItem = this.getFirstVisibleItem(0);
                    this.hasFooter() && (this.addFooterRowHeader(this._footer), this.addFooterBodyCells(this._footer)), 
                    void 0 !== firstVisibleRowItem && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(firstVisibleRowItem));
                }, TablixRowDimension.prototype._createScrollbar = function(parentElement, layoutKind) {
                    return new controls.VerticalScrollbar(parentElement, layoutKind);
                }, TablixRowDimension.prototype.addNodes = function(items, rowIndex, depth, firstVisibleIndex) {
                    for (var count = this._hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < count; i++) {
                        if (!this._layoutManager.needsToRealize) return;
                        var item = this._hierarchyNavigator.getAt(items, i);
                        rowIndex += this.addNode(item, items, rowIndex, depth).rowSpan;
                    }
                }, TablixRowDimension.prototype.getFirstVisibleChildLeaf = function(item) {
                    for (var leaf = item; !this._hierarchyNavigator.isLeaf(leaf); ) leaf = this.getFirstVisibleChild(leaf);
                    return leaf;
                }, TablixRowDimension.prototype.bindRowHeader = function(item, cell) {
                    this._binder.bindRowHeader(item, cell);
                }, TablixRowDimension.prototype.addNode = function(item, previousCount, rowIndex, depth) {
                    var rowHeaderCell = this._tablixLayoutManager.getOrCreateRowHeader(item, previousCount, rowIndex, this._hierarchyNavigator.getLevel(item)), match = this.rowHeaderMatch(item, rowHeaderCell);
                    return match || (this._owner._unbindCell(rowHeaderCell), rowHeaderCell.type = 1, 
                    rowHeaderCell.item = item), this._hierarchyNavigator.isLeaf(item) ? (rowHeaderCell.colSpan = depth - this._hierarchyNavigator.getLevel(item), 
                    rowHeaderCell.rowSpan = 1, match || this.bindRowHeader(item, rowHeaderCell), this._tablixLayoutManager.onRowHeaderRealized(item, rowHeaderCell), 
                    this.addBodyCells(item, previousCount, rowIndex)) : (previousCount = this._layoutManager.getRealizedItemsCount(), 
                    this.addNodes(this._hierarchyNavigator.getChildren(item), rowIndex, depth, this.getFirstVisibleChildIndex(item)), 
                    rowHeaderCell.colSpan = 1, rowHeaderCell.rowSpan = this._layoutManager.getRealizedItemsCount() - previousCount + 1, 
                    match || this.bindRowHeader(item, rowHeaderCell), this._tablixLayoutManager.onRowHeaderRealized(item, rowHeaderCell)), 
                    rowHeaderCell;
                }, TablixRowDimension.prototype.rowHeaderMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return 1 === cell.type && previousItem && this._hierarchyNavigator.headerItemEquals(item, previousItem);
                }, TablixRowDimension.prototype.addBodyCells = function(item, items, rowIndex) {
                    for (var firstVisibleColumnIndex = this._otherDimension.getIntegerScrollOffset(), columnCount = this._otherDimension._layoutManager.getRealizedItemsCount() - this.getDepth(), hierarchyNavigator = this._hierarchyNavigator, otherModel = this._otherDimension.model, layoutManager = this._tablixLayoutManager, i = 0; i < columnCount; i++) {
                        var cellItem = hierarchyNavigator.getIntersection(item, hierarchyNavigator.getLeafAt(otherModel, firstVisibleColumnIndex + i)), cell = layoutManager.getOrCreateBodyCell(cellItem, item, items, rowIndex, i);
                        this.bindBodyCell(cellItem, cell), layoutManager.onBodyCellRealized(cellItem, cell);
                    }
                }, TablixRowDimension.prototype.bindBodyCell = function(item, cell) {
                    this.bodyCelMatch(item, cell) || (this._owner._unbindCell(cell), cell.type = 3, 
                    cell.item = item, this._binder.bindBodyCell(item, cell));
                }, TablixRowDimension.prototype.addFooterRowHeader = function(item) {
                    var cell = this._tablixLayoutManager.getOrCreateFooterRowHeader(item, this.model);
                    cell.colSpan = this.getDepth(), this.rowHeaderMatch(item, cell) || (this._owner._unbindCell(cell), 
                    cell.type = 1, cell.item = item, this.bindRowHeader(item, cell), this._tablixLayoutManager.onRowHeaderFooterRealized(item, cell));
                }, TablixRowDimension.prototype.addFooterBodyCells = function(rowItem) {
                    for (var firstVisibleColumnIndex = this._otherDimension.getIntegerScrollOffset(), columnCount = this._otherDimension.layoutManager.getRealizedItemsCount() - this.getDepth(), layoutManager = this._tablixLayoutManager, i = 0; i < columnCount; i++) {
                        var cell = this._hierarchyNavigator.getLeafAt(this._otherDimension.model, firstVisibleColumnIndex + i), item = this._hierarchyNavigator.getIntersection(rowItem, cell), cell = layoutManager.getOrCreateFooterBodyCell(item, i);
                        this.bindBodyCell(item, cell), layoutManager.onBodyCellFooterRealized(item, cell);
                    }
                }, TablixRowDimension.prototype.bodyCelMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return 3 === cell.type && previousItem && this._hierarchyNavigator.bodyCellItemEquals(item, previousItem);
                }, TablixRowDimension;
            }(controls.TablixDimension = TablixColumnDimension);
            controls.TablixRowDimension = TablixRowDimension;
            TablixColumnDimension = function(_super) {
                function TablixColumnDimension(_this) {
                    _this = _super.call(this, _this) || this;
                    return _this._layoutManager = _this._tablixLayoutManager.columnLayoutManager, _this;
                }
                return __extends(TablixColumnDimension, _super), TablixColumnDimension.prototype._render = function() {
                    var firstVisibleColumnItem = this.getFirstVisibleItem(0);
                    void 0 !== firstVisibleColumnItem && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(firstVisibleColumnItem));
                }, TablixColumnDimension.prototype._createScrollbar = function(parentElement, scrollbar) {
                    scrollbar = new controls.HorizontalScrollbar(parentElement, scrollbar);
                    return scrollbar.smallIncrement = .2, scrollbar;
                }, TablixColumnDimension.prototype.addNodes = function(items, columnIndex, depth, firstVisibleIndex) {
                    for (var count = this._hierarchyNavigator.getCount(items), i = firstVisibleIndex; i < count; i++) {
                        if (!this._layoutManager.needsToRealize) return;
                        columnIndex += this.addNode(this._hierarchyNavigator.getAt(items, i), items, columnIndex, depth).colSpan;
                    }
                }, TablixColumnDimension.prototype.addNode = function(item, previousCount, columnIndex, childrenLevelDifference) {
                    var cell = this._tablixLayoutManager.getOrCreateColumnHeader(item, previousCount, this._hierarchyNavigator.getLevel(item), columnIndex), match = this.columnHeaderMatch(item, cell);
                    return match || (this._owner._unbindCell(cell), cell.type = 2, cell.item = item), 
                    this._hierarchyNavigator.isLeaf(item) ? cell.rowSpan = childrenLevelDifference - this._hierarchyNavigator.getLevel(item) : (previousCount = this._layoutManager.getRealizedItemsCount(), 
                    this.addNodes(this._hierarchyNavigator.getChildren(item), columnIndex, childrenLevelDifference, this.getFirstVisibleChildIndex(item)), 
                    childrenLevelDifference = this._hierarchyNavigator.getChildrenLevelDifference(item), 
                    cell.rowSpan = childrenLevelDifference === 1 / 0 ? 1 : childrenLevelDifference, 
                    cell.colSpan = this._layoutManager.getRealizedItemsCount() - previousCount + 1), 
                    match || this._binder.bindColumnHeader(item, cell), this._tablixLayoutManager.onColumnHeaderRealized(item, cell), 
                    cell;
                }, TablixColumnDimension.prototype.columnHeaderMatch = function(item, cell) {
                    var previousItem = cell.item;
                    return !this._owner.wordWrapColumnHeaders && 2 === cell.type && previousItem && this._hierarchyNavigator.headerItemEquals(item, previousItem);
                }, TablixColumnDimension;
            }(TablixColumnDimension);
            controls.TablixColumnDimension = TablixColumnDimension;
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            var BodyTouchDelegate = function() {
                function ColumnTouchDelegate(region) {
                    this.dim = region, this.averageSize = 1, this.handlers = null, this.tablixControl = null;
                }
                return Object.defineProperty(ColumnTouchDelegate.prototype, "dimension", {
                    get: function() {
                        return this.dim;
                    },
                    enumerable: !1,
                    configurable: !0
                }), ColumnTouchDelegate.prototype.setScrollDensity = function(xRatio) {
                    this.averageSize = xRatio;
                }, ColumnTouchDelegate.prototype.resize = function(x, y, width, height) {
                    this.dim.x = x, this.dim.y = y, this.dim.width = width, this.dim.height = height;
                }, ColumnTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                    return new controls.TouchUtils.TouchEvent(x * this.averageSize, 0, down, -dx * this.averageSize, 0);
                }, ColumnTouchDelegate.prototype.touchEvent = function(e) {
                    var args = [];
                    args[0] = this.tablixControl, args[1] = e.dx, args[2] = e.dy, this.handlers && controls.fire([ this.handlers ], args);
                }, ColumnTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                    this.handlers = handlerCall, this.tablixControl = tablixObj;
                }, ColumnTouchDelegate;
            }();
            controls.ColumnTouchDelegate = BodyTouchDelegate;
            BodyTouchDelegate = function() {
                function RowTouchDelegate(region) {
                    this.dim = region, this.averageSize = 30, this.handlers = null, this.tablixControl = null;
                }
                return Object.defineProperty(RowTouchDelegate.prototype, "dimension", {
                    get: function() {
                        return this.dim;
                    },
                    enumerable: !1,
                    configurable: !0
                }), RowTouchDelegate.prototype.setScrollDensity = function(yRatio) {
                    this.averageSize = yRatio;
                }, RowTouchDelegate.prototype.resize = function(x, y, width, height) {
                    this.dim.x = x, this.dim.y = y, this.dim.width = width, this.dim.height = height;
                }, RowTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                    return new controls.TouchUtils.TouchEvent(0, y * this.averageSize, down, 0, -dy * this.averageSize);
                }, RowTouchDelegate.prototype.touchEvent = function(e) {
                    var args = [];
                    args[0] = this.tablixControl, args[1] = e.dx, args[2] = e.dy, this.handlers && controls.fire([ this.handlers ], args);
                }, RowTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                    this.handlers = handlerCall, this.tablixControl = tablixObj;
                }, RowTouchDelegate;
            }();
            controls.RowTouchDelegate = BodyTouchDelegate;
            BodyTouchDelegate = function() {
                function BodyTouchDelegate(region) {
                    this.dim = region, this.averageSizeX = BodyTouchDelegate.DefaultAverageSizeX, this.averageSizeY = BodyTouchDelegate.DefaultAverageSizeY, 
                    this.handlers = null, this.tablixControl = null;
                }
                return Object.defineProperty(BodyTouchDelegate.prototype, "dimension", {
                    get: function() {
                        return this.dim;
                    },
                    enumerable: !1,
                    configurable: !0
                }), BodyTouchDelegate.prototype.setScrollDensity = function(xRatio, yRatio) {
                    this.averageSizeX = xRatio, this.averageSizeY = yRatio;
                }, BodyTouchDelegate.prototype.resize = function(x, y, width, height) {
                    var dimension = this.dim;
                    dimension.x = x, dimension.y = y, dimension.width = width, dimension.height = height;
                }, BodyTouchDelegate.prototype.getPixelToItem = function(x, y, dx, dy, down) {
                    return new controls.TouchUtils.TouchEvent(x * this.averageSizeX, y * this.averageSizeY, down, -dx * this.averageSizeX, -dy * this.averageSizeY);
                }, BodyTouchDelegate.prototype.touchEvent = function(args) {
                    args = [ this.tablixControl, args.dx, args.dy ];
                    this.handlers && controls.fire([ this.handlers ], args);
                }, BodyTouchDelegate.prototype.setHandler = function(tablixObj, handlerCall) {
                    this.handlers = handlerCall, this.tablixControl = tablixObj;
                }, BodyTouchDelegate.DefaultAverageSizeX = 30, BodyTouchDelegate.DefaultAverageSizeY = 30, 
                BodyTouchDelegate;
            }();
            controls.BodyTouchDelegate = BodyTouchDelegate;
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(TouchUtils) {
                var MouseButton, Point = function() {
                    function Point(x, y) {
                        this.x = x || 0, this.y = y || 0;
                    }
                    return Point.prototype.offset = function(offsetX, offsetY) {
                        this.x += offsetX, this.y += offsetY;
                    }, Point;
                }(), TouchEventInterpreter = function(_super) {
                    function Rectangle(x, _this, width, height) {
                        _this = _super.call(this, x, _this) || this;
                        return _this.width = width || 0, _this.height = height || 0, _this;
                    }
                    return __extends(Rectangle, _super), Object.defineProperty(Rectangle.prototype, "point", {
                        get: function() {
                            return new Point(this.x, this.y);
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Rectangle.prototype.contains = function(p) {
                        return Rectangle.contains(this, p);
                    }, Rectangle.contains = function(rect, p) {
                        return !(!p || Rectangle.isEmpty(rect)) && (rect.x <= p.x && p.x < rect.x + rect.width && rect.y <= p.y && p.y < rect.y + rect.height);
                    }, Rectangle.isEmpty = function(rect) {
                        return !(void 0 !== rect && 0 <= rect.width && 0 <= rect.height);
                    }, Rectangle;
                }(TouchUtils.Point = Point);
                TouchUtils.Rectangle = TouchEventInterpreter, function(MouseButton) {
                    MouseButton[MouseButton.NoClick = 0] = "NoClick", MouseButton[MouseButton.LeftClick = 1] = "LeftClick", 
                    MouseButton[MouseButton.RightClick = 2] = "RightClick", MouseButton[MouseButton.CenterClick = 3] = "CenterClick";
                }(MouseButton = TouchUtils.MouseButton || (TouchUtils.MouseButton = {}));
                var TouchEvent = function() {
                    function TouchEvent(x, y, isMouseDown, dx, dy) {
                        this._x = x, this._y = y, this.isMouseButtonDown = isMouseDown, this._dx = dx || 0, 
                        this._dy = dy || 0;
                    }
                    return Object.defineProperty(TouchEvent.prototype, "x", {
                        get: function() {
                            return this._x;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "y", {
                        get: function() {
                            return this._y;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "dx", {
                        get: function() {
                            return this._dx;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "dy", {
                        get: function() {
                            return this._dy;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), Object.defineProperty(TouchEvent.prototype, "isMouseDown", {
                        get: function() {
                            return this.isMouseButtonDown;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TouchEvent;
                }();
                TouchUtils.TouchEvent = TouchEvent;
                TouchEventInterpreter = function() {
                    function TouchManager() {
                        this.touchList = [], this.swipeDirection = 2, this.matchingDirectionCount = 0, this.lockThreshold = !0, 
                        this.scrollThreshold = !0, this.lastTouchEvent = new TouchEvent(0, 0, !1);
                    }
                    return Object.defineProperty(TouchManager.prototype, "lastEvent", {
                        get: function() {
                            return this.lastTouchEvent;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), TouchManager.prototype.addTouchRegion = function(region, handler, item) {
                        item = {
                            lastPoint: new TouchEvent(0, 0, !1),
                            handler: handler,
                            region: region,
                            converter: item
                        };
                        this.touchList = this.touchList.concat([ item ]);
                    }, TouchManager.prototype.upAllTouches = function() {
                        for (var eventPoint, length = this.touchList.length, i = 0; i < length; i++) this.touchList[i].lastPoint.isMouseDown && (eventPoint = this.touchList[i].converter.getPixelToItem(this.touchList[i].lastPoint.x, this.touchList[i].lastPoint.y, 0, 0, !1), 
                        this.touchList[i].handler.touchEvent(eventPoint)), this.touchList[i].lastPoint = new TouchEvent(this.touchList[i].lastPoint.x, this.touchList[i].lastPoint.y, !1);
                        this.lastTouchEvent = new TouchEvent(0, 0, !1);
                    }, TouchManager.prototype.touchEvent = function(e) {
                        var x, y, eventPoint, dx = 0, dy = 0, angle = 0, list = this._getActive();
                        !this.lastTouchEvent.isMouseDown && e.isMouseDown && (list = this._findRegions(e)), 
                        dx = this.lastTouchEvent.x - e.x, dy = this.lastTouchEvent.y - e.y, this.lastTouchEvent = new TouchEvent(e.x, e.y, e.isMouseDown, dx, dy);
                        for (var length = list.length, i = 0; i < length; i++) x = e.x - list[i].region.point.x, 
                        y = e.y - list[i].region.point.y, list[i].lastPoint.isMouseDown && e.isMouseDown ? (dx = x - list[i].lastPoint.x, 
                        dy = y - list[i].lastPoint.y, angle = Math.abs(180 / Math.PI * Math.atan(dy / dx)), 
                        this.scrollThreshold && (this.lockThreshold && 5 < this.matchingDirectionCount ? 1 === this.swipeDirection ? dy = 0 : 0 === this.swipeDirection && (dx = 0) : angle < 20 ? (dy = 0, 
                        1 === this.swipeDirection ? this.matchingDirectionCount++ : (this.matchingDirectionCount = 1, 
                        this.swipeDirection = 1)) : (angle = Math.abs(180 / Math.PI * Math.atan(dx / dy))) < 20 ? (dx = 0) === this.swipeDirection ? this.matchingDirectionCount++ : (this.matchingDirectionCount = 1, 
                        this.swipeDirection = 0) : 2 === this.swipeDirection ? this.matchingDirectionCount++ : (this.swipeDirection = 2, 
                        this.matchingDirectionCount = 1))) : (dy = dx = 0, this.swipeDirection = 2, this.matchingDirectionCount = 0), 
                        list[i].lastPoint = new TouchEvent(x, y, e.isMouseDown, dx, dy), eventPoint = list[i].converter.getPixelToItem(x, y, dx, dy, e.isMouseDown), 
                        list[i].handler.touchEvent(eventPoint);
                    }, TouchManager.prototype._findRegions = function(e) {
                        for (var list = [], length = this.touchList.length, i = 0; i < length; i++) this.touchList[i].region.contains(new Point(e.x, e.y)) && (list = list.concat([ this.touchList[i] ]));
                        return list;
                    }, TouchManager.prototype._getActive = function() {
                        for (var list = [], length = this.touchList.length, i = 0; i < length; i++) this.touchList[i].lastPoint.isMouseDown && (list = list.concat([ this.touchList[i] ]));
                        return list;
                    }, TouchManager;
                }();
                TouchUtils.TouchManager = TouchEventInterpreter;
                TouchEventInterpreter = function() {
                    function TouchEventInterpreter(manager) {
                        this.manager = manager, this.touchPanel = null, this.scale = 1, this.documentCallbacksWrapper = null, 
                        this.panelCallbacksWrapper = null, this.sliding = !1;
                    }
                    return TouchEventInterpreter.prototype.initTouch = function(panel, touchReferencePoint) {
                        panel.style.setProperty("-ms-touch-action", "pinch-zoom"), this.touchReferencePoint = touchReferencePoint, 
                        this.touchPanel = panel, this.startTouchPanelEvents();
                    }, TouchEventInterpreter.prototype.startTouchPanelEvents = function() {
                        var _this = this;
                        "ontouchmove" in this.touchPanel && (this.panelCallbacksWrapper = {
                            startCallback: function(e) {
                                return _this.onTouchStart(e);
                            },
                            endCallback: function(e) {
                                return _this.onTouchEnd(e);
                            }
                        }, this.touchPanel.addEventListener("touchstart", this.panelCallbacksWrapper.startCallback), 
                        this.touchPanel.addEventListener("touchend", this.panelCallbacksWrapper.endCallback));
                    }, TouchEventInterpreter.prototype.clearTouchPanelEvents = function() {
                        null !== this.panelCallbacksWrapper && ("ontouchmove" in this.touchPanel && (this.touchPanel.removeEventListener("touchstart", this.panelCallbacksWrapper.startCallback), 
                        this.touchPanel.removeEventListener("touchend", this.panelCallbacksWrapper.endCallback)), 
                        this.panelCallbacksWrapper = null);
                    }, TouchEventInterpreter.prototype.getXYByClient = function(pageX, pageY, point) {
                        var x = point.left, y = point.top;
                        void 0 !== window.scrollX && (x += window.scrollX, y += window.scrollY);
                        point = new Point(0, 0);
                        return point.offset(pageX - x, pageY - y), point;
                    }, TouchEventInterpreter.prototype.onTouchStart = function(mouseEvent) {
                        1 === mouseEvent.touches.length && (mouseEvent.cancelBubble = !0, mouseEvent = mouseEvent.touches[0], 
                        this.touchStartTime = new Date().getTime(), this.touchStartPageY = mouseEvent.pageY, 
                        this.onTouchMouseDown(mouseEvent));
                    }, TouchEventInterpreter.prototype.onTouchMove = function(mouseEvent) {
                        1 === mouseEvent.touches.length && (mouseEvent.preventDefault && mouseEvent.preventDefault(), 
                        mouseEvent = mouseEvent.touches[0], this.touchLastPageY = mouseEvent.pageY, this.touchLastPageX = mouseEvent.pageX, 
                        this.sliding || this.onTouchMouseMove(mouseEvent));
                    }, TouchEventInterpreter.prototype.onTouchEnd = function(e) {
                        this.clearTouchDocumentEvents();
                        var swipeInfo = this.getSwipeInfo();
                        this.didUserSwipe(swipeInfo) ? this.startSlideAffect(swipeInfo) : this.sliding || this.upAllTouches();
                    }, TouchEventInterpreter.prototype.onTouchMouseDown = function(e) {
                        this.scale = controls.HTMLElementUtils.getAccumulatedScale(this.touchPanel), document.getSelection().removeAllRanges(), 
                        this.rect = (this.touchReferencePoint || this.touchPanel).getBoundingClientRect(), 
                        this.startTouchDocumentEvents();
                    }, TouchEventInterpreter.prototype.startTouchDocumentEvents = function() {
                        var _this = this;
                        "ontouchmove" in this.touchPanel && (this.documentCallbacksWrapper = {
                            moveCallback: function(e) {
                                return _this.onTouchMove(e);
                            },
                            endCallback: function(e) {
                                return _this.onTouchEnd(e);
                            }
                        }, document.addEventListener("touchend", this.documentCallbacksWrapper.endCallback), 
                        document.addEventListener("touchmove", this.documentCallbacksWrapper.moveCallback));
                    }, TouchEventInterpreter.prototype.onTouchMouseMove = function(e) {
                        var point = this.rect, event = null !== point && e.which !== MouseButton.NoClick;
                        event && !this.sliding && (point = this.getXYByClient(e.pageX, e.pageY, point), 
                        event = new TouchEvent(point.x / this.scale, point.y / this.scale, event), this.manager.touchEvent(event), 
                        e.preventDefault ? e.preventDefault() : "returnValue" in e && (e.returnValue = !1));
                    }, TouchEventInterpreter.prototype.getSwipeInfo = function() {
                        var touchEndTime = new Date().getTime(), touchTime = touchEndTime - this.touchStartTime, touchDist = this.touchLastPageY - this.touchStartPageY;
                        return {
                            direction: touchDist < 0 ? -1 : 1,
                            distance: touchDist,
                            endTime: touchEndTime,
                            time: touchTime
                        };
                    }, TouchEventInterpreter.prototype.didUserSwipe = function(swipeInfo) {
                        return swipeInfo.time < 600 && 80 < swipeInfo.distance * swipeInfo.direction;
                    }, TouchEventInterpreter.prototype.startSlideAffect = function(swipeInfo) {
                        var point, _this = this;
                        this.sliding || null === this.rect || (this.sliding = !0, point = this.getXYByClient(this.touchLastPageX, this.touchLastPageY, this.rect), 
                        this.slide(point, 300, swipeInfo), requestAnimationFrame(function() {
                            _this.didUserChangeDirection(swipeInfo) || _this.slide(point, 200, swipeInfo), _this.clearSlide();
                        }));
                    }, TouchEventInterpreter.prototype.didUserChangeDirection = function(swipeInfo) {
                        return !(this.touchStartTime <= swipeInfo.endTime) && (this.touchLastPageY - this.touchStartPageY < 0 ? -1 : 1) !== swipeInfo.direction;
                    }, TouchEventInterpreter.prototype.slide = function(event, slideDist, swipeInfo) {
                        var updatedDist = this.touchStartTime > swipeInfo.endTime ? this.touchLastPageY - this.touchStartPageY : 0;
                        event.y += slideDist * swipeInfo.direction + updatedDist;
                        event = new TouchEvent(event.x / this.scale, event.y / this.scale, !0);
                        this.manager.touchEvent(event);
                    }, TouchEventInterpreter.prototype.clearSlide = function() {
                        this.sliding = !1, this.upAllTouches();
                    }, TouchEventInterpreter.prototype.upAllTouches = function() {
                        null === this.documentCallbacksWrapper && (this.rect = null, this.manager.upAllTouches());
                    }, TouchEventInterpreter.prototype.clearTouchDocumentEvents = function() {
                        null !== this.documentCallbacksWrapper && ("ontouchmove" in this.touchPanel && (document.removeEventListener("touchmove", this.documentCallbacksWrapper.moveCallback), 
                        document.removeEventListener("touchend", this.documentCallbacksWrapper.endCallback)), 
                        this.documentCallbacksWrapper = null);
                    }, TouchEventInterpreter.prototype.clearAllTouchEvents = function() {
                        this.clearTouchDocumentEvents(), this.clearTouchPanelEvents();
                    }, TouchEventInterpreter;
                }();
                TouchUtils.TouchEventInterpreter = TouchEventInterpreter;
            }(controls.TouchUtils || (controls.TouchUtils = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            !function(TablixType) {
                TablixType[TablixType.Matrix = 0] = "Matrix", TablixType[TablixType.Table = 1] = "Table", 
                TablixType[TablixType.PivotTable = 2] = "PivotTable", TablixType[TablixType.TableEx = 3] = "TableEx";
            }(controls.TablixType || (controls.TablixType = {}));
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var Builder = powerbi.visuals.builder, DataViewMatrixUtils = powerbi.data.DataViewMatrixUtils, DataViewRoleWildCard = powerbi.data.DataViewRoleWildcard, DataViewWildcard = powerbi.data.DataViewWildcard, FontSize = visuals.Units.FontSize, FormattingModelBuilder = powerbi.visuals.builder.FormattingModelBuilder, TablixType = visuals.controls.TablixType, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, TextHelper = powerbi.visuals.TextHelper, VariantValueFormatter = visuals.valueFormatter.VariantValueFormatter, TablixPropertyManager = function() {
            function TablixPropertyManager(style) {
                this.tablixProperties = new visuals.TablixProperties(style);
            }
            return TablixPropertyManager.getMetadataObjects = function(dataView) {
                return dataView && dataView.metadata ? dataView.metadata.objects : null;
            }, TablixPropertyManager.prototype.enumerateObjectRepetition = function(enumeration, dataView, tablixType, conditionalTablixWebURLEnabled) {
                var selectorData = [];
                switch (tablixType) {
                  case TablixType.Table:
                    columns = this.getTableColumnMetadata(dataView), selectorData = [ DataViewRoleWildCard.fromRoles([ "Values" ]) ];
                    break;

                  case TablixType.TableEx:
                    columns = this.getTableColumnMetadata(dataView), selectorData = [ DataViewWildcard.create(1) ];
                    break;

                  case TablixType.Matrix:
                    columns = this.getMatrixValuesColumnMetadata(dataView), selectorData = [ DataViewRoleWildCard.fromRoles([ "Rows", "Columns" ]) ];
                    break;

                  case TablixType.PivotTable:
                    columns = this.getMatrixValuesColumnMetadata(dataView), selectorData = [ DataViewWildcard.create(1) ];
                    break;

                  default:
                    return;
                }
                if (columns) for (var columns = _.uniq(columns), isNewVisual = tablixType === TablixType.PivotTable || tablixType === TablixType.TableEx, _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                    var fontColorScalesRepetition, iconRepetition, backColorScalesRepetition_1 = columns_1[_i], isNumericMeasure = backColorScalesRepetition_1.isMeasure && backColorScalesRepetition_1.type.numeric, webURLRepetition = null === (fontColorScalesRepetition = backColorScalesRepetition_1.type.misc) || void 0 === fontColorScalesRepetition ? void 0 : fontColorScalesRepetition.sparkline;
                    isNewVisual ? (fontColorScalesRepetition = {
                        containerName: backColorScalesRepetition_1.displayName,
                        selector: {
                            data: selectorData,
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        allowOverrideSubtotalMatching: !0,
                        objects: ((fontColorScalesRepetition = {})[this.tablixProperties.PropValuesBackColor.objectName] = {
                            formattingProperties: [ this.tablixProperties.PropValuesBackColor.propertyName ]
                        }, fontColorScalesRepetition)
                    }, enumeration.push(fontColorScalesRepetition), webURLRepetition || (fontColorScalesRepetition = {
                        containerName: backColorScalesRepetition_1.displayName,
                        selector: {
                            data: selectorData,
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        allowOverrideSubtotalMatching: !0,
                        objects: ((fontColorScalesRepetition = {})[this.tablixProperties.PropValuesFontColor.objectName] = {
                            formattingProperties: [ this.tablixProperties.PropValuesFontColor.propertyName ]
                        }, fontColorScalesRepetition)
                    }, enumeration.push(fontColorScalesRepetition)), isNumericMeasure && !webURLRepetition && (iconRepetition = {
                        containerName: backColorScalesRepetition_1.displayName,
                        selector: {
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        objects: ((iconRepetition = {})[visuals.TablixProperties.PropColumnFormattingDataBars.objectName] = {
                            formattingProperties: [ visuals.TablixProperties.PropColumnFormattingDataBars.propertyName ]
                        }, iconRepetition)
                    }, enumeration.push(iconRepetition)), iconRepetition = {
                        containerName: backColorScalesRepetition_1.displayName,
                        selector: {
                            data: selectorData,
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        altStaticSelector: {
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        allowOverrideSubtotalMatching: !0,
                        objects: ((iconRepetition = {})[visuals.TablixProperties.PropValuesIcon.objectName] = {
                            formattingProperties: [ visuals.TablixProperties.PropValuesIcon.propertyName ]
                        }, iconRepetition)
                    }, enumeration.push(iconRepetition), isNewVisual && conditionalTablixWebURLEnabled && !visuals.converterHelper.isWebUrlColumn(backColorScalesRepetition_1) && !webURLRepetition && (webURLRepetition = {
                        containerName: backColorScalesRepetition_1.displayName,
                        selector: {
                            data: selectorData,
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        allowOverrideSubtotalMatching: !0,
                        objects: ((webURLRepetition = {})[visuals.TablixProperties.PropValuesWebURL.objectName] = {
                            formattingProperties: [ visuals.TablixProperties.PropValuesWebURL.propertyName ]
                        }, webURLRepetition)
                    }, enumeration.push(webURLRepetition))) : isNumericMeasure && (backColorScalesRepetition_1 = {
                        containerName: backColorScalesRepetition_1.displayName,
                        selector: {
                            data: selectorData,
                            metadata: backColorScalesRepetition_1.queryName
                        },
                        objects: ((backColorScalesRepetition_1 = {})[this.tablixProperties.PropValuesBackColor.objectName] = {
                            formattingProperties: [ this.tablixProperties.PropValuesBackColor.propertyName ]
                        }, backColorScalesRepetition_1)
                    }, enumeration.push(backColorScalesRepetition_1));
                }
            }, TablixPropertyManager.prototype.getFormattingModel = function(hostServices, modelBuilder, dataView, card, isEnabled, featureSwitches, textClassProperties) {
                void 0 === isEnabled && (isEnabled = !1);
                var objects = TablixPropertyManager.getMetadataObjects(dataView), pivotTableFormattingProperties = modelBuilder, tableExFormattingProperties = modelBuilder, totalsShown = !0, columnsMetadata = this.getColumnsMetadata(dataView, card), totalsShown = card === TablixType.Table ? this.shouldShowTableTotalsOption(dataView) && visuals.TablixProperties.PropGeneralTableTotals.getValue(objects) : this.shouldShowColumnSubtotalsOption(dataView) && visuals.TablixProperties.PropGeneralMatrixColumnSubtotals.getValue(objects) || this.shouldShowRowSubtotalsOption(dataView) && visuals.TablixProperties.PropGeneralMatrixRowSubtotals.getValue(objects), textClassProperties = this.getTablixTextClassProperties(textClassProperties), modelBuilder = new FormattingModelBuilder(this.getGridCard(hostServices, modelBuilder, card, objects, textClassProperties, featureSwitches), this.getValueCard(hostServices, modelBuilder, card, objects, featureSwitches), this.getColumnHeadersCard(hostServices, modelBuilder, card, featureSwitches), this.getRowHeadersCard(hostServices, pivotTableFormattingProperties, card, objects, isEnabled, featureSwitches), this.getTotalsCard(hostServices, tableExFormattingProperties, card, featureSwitches), this.getColumnSubtotalCard(hostServices, pivotTableFormattingProperties, dataView, card, totalsShown, featureSwitches), this.getRowSubTotalsCard(hostServices, pivotTableFormattingProperties, dataView, card, totalsShown, featureSwitches), this.getColumnGrandTotalsCard(hostServices, pivotTableFormattingProperties, card, featureSwitches), this.getRowGrandTotalsCard(hostServices, pivotTableFormattingProperties, card, featureSwitches), this.getColumnFormattingCard(hostServices, modelBuilder, columnsMetadata, card), this.getCellColumnCard(hostServices, card, dataView, featureSwitches), this.getUrlIconCard(hostServices, modelBuilder, card), this.getImageHeightCard(hostServices, modelBuilder, card), this.getSparklinesCard(columnsMetadata, hostServices, card));
                return !featureSwitches.a11yTable || (card = this.getAccessibilityCard(columnsMetadata, hostServices, tableExFormattingProperties, card)) && modelBuilder.addCards(card), 
                modelBuilder.build();
            }, TablixPropertyManager.prototype.getGridCard = function(hostServices, formattingProperties, tablixType, objects, textClassProperties, featureSwitches) {
                function localize(key) {
                    return hostServices.getLocalizedString(key);
                }
                var inititalGridPropIds = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).grid, outline = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).values, valuesOutline = outline.outline, valuesOutlineStyle = outline.outlineStyle, valuesOutlineWeight = outline.outlineWeight, valuesOutlineColor = outline.outlineColor, cardBuilder = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).columnHeaders, columnHeadersOutline = cardBuilder.outline, columnHeadersOutlineStyle = cardBuilder.outlineStyle, columnHeadersOutlineWeight = cardBuilder.outlineWeight, columnHeadersOutlineColor = cardBuilder.outlineColor, outline = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).total, totalsOutline = outline.outline, totalsOutlineStyle = outline.outlineStyle, totalsOutlineWeight = outline.outlineWeight, totalsOutlineColor = outline.outlineColor, cardBuilder = visuals.pivotTableProps.rowHeaders, rowHeaderOutline = cardBuilder.outline, rowHeaderOutlineStyle = cardBuilder.outlineStyle, rowHeaderOutlineWeight = cardBuilder.outlineWeight, rowHeaderOutlineColor = cardBuilder.outlineColor, outline = (inititalGridPropIds.imageHeight, 
                inititalGridPropIds.outline), cardBuilder = inititalGridPropIds.outlineStyle, gridCardPropIds = __rest(inititalGridPropIds, [ "imageHeight", "outline", "outlineStyle" ]);
                featureSwitches.upgradeOutlineProperties && (gridCardPropIds = __assign(__assign({}, gridCardPropIds), {
                    outline: outline,
                    outlineStyle: cardBuilder,
                    valuesOutline: valuesOutline,
                    valuesOutlineStyle: valuesOutlineStyle,
                    valuesOutlineWeight: valuesOutlineWeight,
                    valuesOutlineColor: valuesOutlineColor,
                    columnHeadersOutline: columnHeadersOutline,
                    columnHeadersOutlineStyle: columnHeadersOutlineStyle,
                    columnHeadersOutlineWeight: columnHeadersOutlineWeight,
                    columnHeadersOutlineColor: columnHeadersOutlineColor
                }), tablixType === TablixType.TableEx && (gridCardPropIds = __assign(__assign({}, gridCardPropIds), {
                    totalsOutline: totalsOutline,
                    totalsOutlineStyle: totalsOutlineStyle,
                    totalsOutlineColor: totalsOutlineColor,
                    totalsOutlineWeight: totalsOutlineWeight
                })), tablixType === TablixType.PivotTable && (gridCardPropIds = __assign(__assign({}, gridCardPropIds), {
                    rowHeaderOutline: rowHeaderOutline,
                    rowHeaderOutlineStyle: rowHeaderOutlineStyle,
                    rowHeaderOutlineWeight: rowHeaderOutlineWeight,
                    rowHeaderOutlineColor: rowHeaderOutlineColor
                })));
                var tableGridData = formattingProperties.grid, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("grid"), "Visual_Grid", gridCardPropIds, localize);
                return cardBuilder.addGroup("gridHorizontal", function(groupBuilder) {
                    groupBuilder.withDisplayName("Small_Multiples_Layout_Grid_Line_Type_Inner_Horizontal").addTopLevelToggle("gridHorizontal", function() {
                        return new Builder.ToggleSwitchBuilder({
                            descriptor: gridCardPropIds.gridHorizontal,
                            value: tableGridData.gridHorizontal
                        }).build();
                    }).addSimpleSlice("gridHorizontalColor", function() {
                        var colordata = {
                            value: tableGridData.gridHorizontalColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: gridCardPropIds.gridHorizontalColor,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("gridHorizontalWeight", new Builder.NumUpDownBuilder({
                        descriptor: gridCardPropIds.gridHorizontalWeight,
                        value: tableGridData.gridHorizontalWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), cardBuilder.addGroup("gridVertical", function(groupBuilder) {
                    groupBuilder.withDisplayName("Small_Multiples_Layout_Grid_Line_Type_Inner_Vertical").addTopLevelToggle("gridVertical", function() {
                        return new Builder.ToggleSwitchBuilder({
                            descriptor: gridCardPropIds.gridVertical,
                            value: tableGridData.gridVertical
                        }).build();
                    }).addSimpleSlice("gridVerticalColor", function() {
                        var colordata = {
                            value: tableGridData.gridVerticalColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: gridCardPropIds.gridVerticalColor,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("gridVerticalWeight", new Builder.NumUpDownBuilder({
                        descriptor: gridCardPropIds.gridVerticalWeight,
                        value: tableGridData.gridVerticalWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), featureSwitches.upgradeOutlineProperties ? cardBuilder.addGroup("border", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Border").addContainer("outline", function(containerBuilder) {
                        containerBuilder.withDisplayName("Section"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                            featureSwitches.outlineDropdownToCheckboxes ? containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new Builder.FlagSelectionBuilder({
                                    descriptor: gridCardPropIds.outlineStyle,
                                    value: tableGridData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : containerItemBuilder.addSimpleSlice("outline", function() {
                                return new Builder.DropdownBuilder({
                                    descriptor: gridCardPropIds.outline,
                                    value: tableGridData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: gridCardPropIds.outlineColor,
                                    value: {
                                        value: tableGridData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new Builder.NumUpDownBuilder({
                                descriptor: gridCardPropIds.outlineWeight,
                                value: tableGridData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }).addContainerItem("columnHeaders", localize("Visual_Tablix_ColumnHeader"), function(containerItemBuilder) {
                            var columnHeadersData = formattingProperties.columnHeaders;
                            featureSwitches.outlineDropdownToCheckboxes ? containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new Builder.FlagSelectionBuilder({
                                    descriptor: columnHeadersOutlineStyle,
                                    value: columnHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : containerItemBuilder.addSimpleSlice("outline", function() {
                                return new Builder.DropdownBuilder({
                                    descriptor: columnHeadersOutline,
                                    value: columnHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: columnHeadersOutlineColor,
                                    value: {
                                        value: columnHeadersData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new Builder.NumUpDownBuilder({
                                descriptor: columnHeadersOutlineWeight,
                                value: columnHeadersData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), tablixType === TablixType.PivotTable && containerBuilder.addContainerItem("rowHeaders", localize("Visual_Tablix_RowHeaders"), function(containerItemBuilder) {
                            var rowHeadersData = formattingProperties.rowHeaders;
                            featureSwitches.outlineDropdownToCheckboxes ? containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new Builder.FlagSelectionBuilder({
                                    descriptor: rowHeaderOutlineStyle,
                                    value: rowHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : containerItemBuilder.addSimpleSlice("outline", function() {
                                return new Builder.DropdownBuilder({
                                    descriptor: rowHeaderOutline,
                                    value: rowHeadersData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: rowHeaderOutlineColor,
                                    value: {
                                        value: rowHeadersData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new Builder.NumUpDownBuilder({
                                descriptor: rowHeaderOutlineWeight,
                                value: rowHeadersData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), containerBuilder.addContainerItem("values", localize("Visual_Tablix_ValuesSection"), function(containerItemBuilder) {
                            var valuesData = formattingProperties.values;
                            featureSwitches.outlineDropdownToCheckboxes ? containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new Builder.FlagSelectionBuilder({
                                    descriptor: valuesOutlineStyle,
                                    value: valuesData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : containerItemBuilder.addSimpleSlice("outline", function() {
                                return new Builder.DropdownBuilder({
                                    descriptor: valuesOutline,
                                    value: valuesData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: valuesOutlineColor,
                                    value: {
                                        value: valuesData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new Builder.NumUpDownBuilder({
                                descriptor: valuesOutlineWeight,
                                value: valuesData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        }), tablixType === TablixType.TableEx && containerBuilder.addContainerItem("outline-totals", localize("Visual_Tablix_TotalsSection"), function(containerItemBuilder) {
                            var totalsData = formattingProperties.total;
                            featureSwitches.outlineDropdownToCheckboxes ? containerItemBuilder.addSimpleSlice("outlineStyle", function() {
                                return new Builder.FlagSelectionBuilder({
                                    descriptor: totalsOutlineStyle,
                                    value: totalsData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : containerItemBuilder.addSimpleSlice("outline", function() {
                                return new Builder.DropdownBuilder({
                                    descriptor: totalsOutline,
                                    value: totalsData.outline
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), containerItemBuilder.addSimpleSlice("outlineColor", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: totalsOutlineColor,
                                    value: {
                                        value: totalsData.outlineColor
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Generic_Color");
                            }).addSimpleSlice("outlineWeight", new Builder.NumUpDownBuilder({
                                descriptor: totalsOutlineWeight,
                                value: totalsData.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                            });
                        });
                    });
                }) : cardBuilder.addGroup("border", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Border").addSimpleSlice("outlineColor", function() {
                        var colordata = {
                            value: tableGridData.outlineColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: gridCardPropIds.outlineColor,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Generic_Color");
                    }).addSimpleSlice("outlineWeight", new Builder.NumUpDownBuilder({
                        descriptor: gridCardPropIds.outlineWeight,
                        value: tableGridData.outlineWeight,
                        options: {
                            minValue: {
                                type: 0,
                                value: 1
                            },
                            maxValue: {
                                type: 1,
                                value: 10
                            }
                        }
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                    });
                }), cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("rowPadding", new Builder.NumUpDownBuilder({
                        descriptor: gridCardPropIds.rowPadding,
                        value: tableGridData.rowPadding,
                        options: {
                            minValue: {
                                type: 0,
                                value: 0
                            },
                            maxValue: {
                                type: 1,
                                value: 20
                            }
                        }
                    }).build()).addSimpleSlice("textSize", function() {
                        var labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                        return new Builder.NumUpDownBuilder({
                            descriptor: gridCardPropIds.textSize,
                            value: visuals.TablixProperties.PropGridPivotTableTextSize.setInstanceProperty(void 0, objects, textClassProperties.fontSizeOverrideFn, labelFontSize),
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 8
                                },
                                maxValue: {
                                    type: 1,
                                    value: 60
                                }
                            }
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Global_Font_Size");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getValueCard = function(hostServices, fontControlBuilder, tablixType, objects, featureSwitches) {
                var initialValueProps = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).values, outline = (initialValueProps.webURL, 
                initialValueProps.urlIcon, initialValueProps.icon, initialValueProps.bandedRowHeaders, 
                initialValueProps.outline), cardBuilder = initialValueProps.outlineStyle, valueProps = (initialValueProps.outlineWeight, 
                initialValueProps.outlineColor, __rest(initialValueProps, [ "webURL", "urlIcon", "icon", "bandedRowHeaders", "outline", "outlineStyle", "outlineWeight", "outlineColor" ]));
                featureSwitches.upgradeOutlineProperties || (valueProps = __assign(__assign({}, valueProps), {
                    outline: outline,
                    outlineStyle: cardBuilder
                }));
                var valueData = fontControlBuilder.values, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("values"), "Visual_Tablix_Values", valueProps, function(key) {
                    return hostServices.getLocalizedString(key);
                }), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                    descriptor: valueProps.fontFamily,
                    value: valueData.fontFamily
                }).withFontSizeProperties({
                    descriptor: valueProps.fontSize,
                    value: valueData.fontSize.pt
                });
                featureSwitches.enableBIU && fontControlBuilder.withBold({
                    descriptor: valueProps.bold,
                    value: valueData.bold
                }).withItalic({
                    descriptor: valueProps.italic,
                    value: valueData.italic
                }).withUnderline({
                    descriptor: valueProps.underline,
                    value: valueData.underline
                });
                var fontControl = fontControlBuilder.build();
                return cardBuilder.addGroup("values", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Tablix_Values"), tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("fontColorPrimary", function() {
                        var colordata = {
                            value: valueData.fontColorPrimary
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: valueProps.fontColorPrimary,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColorPrimary", function() {
                        var colordata = {
                            value: valueData.backColorPrimary
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: valueProps.backColorPrimary,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }).addSimpleSlice("fontColorSecondary", function() {
                        var colordata = {
                            value: valueData.fontColorSecondary
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: valueProps.fontColorSecondary,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_AlternateText_Color");
                    }).addSimpleSlice("backColorSecondary", function() {
                        var colordata = {
                            value: valueData.backColorSecondary
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: valueProps.backColorSecondary,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_BackColorSecondary");
                    }).addSimpleSlice("textWrap", new Builder.ToggleSwitchBuilder({
                        descriptor: valueProps.wordWrap,
                        value: valueData.wordWrap
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("TextWrap");
                    });
                }), featureSwitches.upgradeOutlineProperties || cardBuilder.addGroup("border", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Border"), featureSwitches.outlineDropdownToCheckboxes ? groupBuilder.addSimpleSlice("outlineStyle", function() {
                        return new Builder.FlagSelectionBuilder({
                            descriptor: valueProps.outlineStyle,
                            value: valueData.outline
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Outline");
                    }) : groupBuilder.addSimpleSlice("outline", function() {
                        return new Builder.DropdownBuilder({
                            descriptor: valueProps.outline,
                            value: valueData.outline
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Outline");
                    });
                }), tablixType === TablixType.PivotTable && cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("valuesOnRow", new Builder.ToggleSwitchBuilder({
                        descriptor: valueProps.valuesOnRow,
                        value: visuals.TablixProperties.PropValuesOnRow.setInstanceProperty(void 0, objects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_PivotTable_ValuesSwitchToRows");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getColumnHeadersCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                var columnHeadersPropsInitial = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).columnHeaders, cardBuilder = (columnHeadersPropsInitial.urlIcon, 
                columnHeadersPropsInitial.outline), fontControlBuilder = columnHeadersPropsInitial.outlineStyle, columnHeadersProps = (columnHeadersPropsInitial.outlineWeight, 
                columnHeadersPropsInitial.outlineColor, __rest(columnHeadersPropsInitial, [ "urlIcon", "outline", "outlineStyle", "outlineWeight", "outlineColor" ]));
                featureSwitches.upgradeOutlineProperties || (columnHeadersProps = __assign(__assign({}, columnHeadersProps), {
                    outline: cardBuilder,
                    outlineStyle: fontControlBuilder
                }));
                var columnHeadersData = formattingProperties.columnHeaders, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("columnHeaders"), "Visual_Tablix_ColumnHeaders", columnHeadersProps, function(key) {
                    return hostServices.getLocalizedString(key);
                }), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                    descriptor: columnHeadersProps.fontFamily,
                    value: columnHeadersData.fontFamily
                }).withFontSizeProperties({
                    descriptor: columnHeadersProps.fontSize,
                    value: columnHeadersData.fontSize.pt
                });
                featureSwitches.enableBIU && fontControlBuilder.withBold({
                    descriptor: columnHeadersProps.bold,
                    value: columnHeadersData.bold
                }).withItalic({
                    descriptor: columnHeadersProps.italic,
                    value: columnHeadersData.italic
                }).withUnderline({
                    descriptor: columnHeadersProps.underline,
                    value: columnHeadersData.underline
                });
                var fontControl = fontControlBuilder.build();
                return cardBuilder.addGroup("text", function(groupBuilder) {
                    groupBuilder.withDisplayName("Text"), tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("fontColor", function() {
                        var colordata = {
                            value: columnHeadersData.fontColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: columnHeadersProps.fontColor,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColor", function() {
                        var colordata = {
                            value: columnHeadersData.backColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: columnHeadersProps.backColor,
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }), tablixType !== TablixType.Table && tablixType !== TablixType.TableEx && tablixType !== TablixType.PivotTable || groupBuilder.addSimpleSlice("alignment", new Builder.AlignmentGroupBuilder({
                        descriptor: columnHeadersProps.alignment,
                        value: columnHeadersData.alignment,
                        mode: "horizontalAlignment",
                        supportsNoSelection: !0
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_TextAlignment_Header");
                    }), tablixType === TablixType.PivotTable && groupBuilder.addSimpleSlice("titleAlignment", new Builder.AlignmentGroupBuilder({
                        descriptor: columnHeadersProps.titleAlignment,
                        value: formattingProperties.columnHeaders.titleAlignment,
                        mode: "horizontalAlignment",
                        supportsNoSelection: !0
                    }).build()), tablixType !== TablixType.Table && tablixType !== TablixType.TableEx && tablixType !== TablixType.PivotTable || groupBuilder.addSimpleSlice("wordWrap", new Builder.ToggleSwitchBuilder({
                        descriptor: columnHeadersProps.wordWrap,
                        value: columnHeadersData.wordWrap
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("TextWrap");
                    });
                }), featureSwitches.upgradeOutlineProperties || cardBuilder.addGroup("border", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Border"), featureSwitches.outlineDropdownToCheckboxes ? groupBuilder.addSimpleSlice("outlineStyle", function() {
                        return new Builder.FlagSelectionBuilder({
                            descriptor: columnHeadersProps.outlineStyle,
                            value: columnHeadersData.outline
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Outline");
                    }) : groupBuilder.addSimpleSlice("outline", function() {
                        return new Builder.DropdownBuilder({
                            descriptor: columnHeadersProps.outline,
                            value: columnHeadersData.outline
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Outline");
                    });
                }), tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || cardBuilder.addGroup("options", function(groupBuilder) {
                    groupBuilder.withDisplayName("Desktop_FileMenu_Options").addSimpleSlice("autoSizeColumnWidth", new Builder.ToggleSwitchBuilder({
                        descriptor: columnHeadersProps.autoSizeColumnWidth,
                        value: formattingProperties.general.autoSizeColumnWidth
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_AutoSize_Width");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getRowHeadersCard = function(hostServices, fontControlBuilder, tablixType, objects, isEnabled, featureSwitches) {
                if (void 0 === isEnabled && (isEnabled = !1), tablixType === TablixType.PivotTable) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableRowHeaderPropsInitial = visuals.pivotTableProps.rowHeaders, outline = (pivotTableRowHeaderPropsInitial.urlIcon, 
                    pivotTableRowHeaderPropsInitial.outline), cardBuilder = pivotTableRowHeaderPropsInitial.outlineStyle, pivotTableRowHeaderProps = (pivotTableRowHeaderPropsInitial.outlineWeight, 
                    pivotTableRowHeaderPropsInitial.outlineColor, __rest(pivotTableRowHeaderPropsInitial, [ "urlIcon", "outline", "outlineStyle", "outlineWeight", "outlineColor" ]));
                    featureSwitches.upgradeOutlineProperties || (pivotTableRowHeaderProps = __assign(__assign({}, pivotTableRowHeaderProps), {
                        outline: outline,
                        outlineStyle: cardBuilder
                    }));
                    cardBuilder = visuals.pivotTableProps.values.bandedRowHeaders;
                    tablixType === TablixType.PivotTable && (pivotTableRowHeaderProps = __assign(__assign({}, pivotTableRowHeaderProps), {
                        bandedRowHeaders: cardBuilder
                    }));
                    var pivotTableRowHeadersData = fontControlBuilder.rowHeaders, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("rowHeaders"), "Visual_Tablix_RowHeaders", pivotTableRowHeaderProps, localize), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                        descriptor: pivotTableRowHeaderProps.fontFamily,
                        value: pivotTableRowHeadersData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableRowHeaderProps.fontSize,
                        value: pivotTableRowHeadersData.fontSize.pt
                    });
                    featureSwitches.enableBIU && fontControlBuilder.withBold({
                        descriptor: pivotTableRowHeaderProps.bold,
                        value: pivotTableRowHeadersData.bold
                    }).withItalic({
                        descriptor: pivotTableRowHeaderProps.italic,
                        value: pivotTableRowHeadersData.italic
                    }).withUnderline({
                        descriptor: pivotTableRowHeaderProps.underline,
                        value: pivotTableRowHeadersData.underline
                    });
                    var fontControl = fontControlBuilder.build();
                    return cardBuilder.addGroup("text", function(groupBuilder) {
                        groupBuilder.withDisplayName("Text"), tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || groupBuilder.addCompositeSlice("font", "Font", fontControl), 
                        groupBuilder.addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableRowHeadersData.fontColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableRowHeaderProps.fontColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableRowHeadersData.backColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableRowHeaderProps.backColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }), tablixType === TablixType.PivotTable && groupBuilder.addSimpleSlice("bandedRowHeaders", new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableRowHeaderProps.bandedRowHeaders,
                            value: visuals.TablixProperties.PropValuesBandedRowHeaders.setInstanceProperty(void 0, objects)
                        }).build()), groupBuilder.addSimpleSlice("alignment", new Builder.AlignmentGroupBuilder({
                            descriptor: pivotTableRowHeaderProps.alignment,
                            value: pivotTableRowHeadersData.alignment,
                            mode: "horizontalAlignment",
                            supportsNoSelection: !0
                        }).build()).addSimpleSlice("wordWrap", new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableRowHeaderProps.wordWrap,
                            value: pivotTableRowHeadersData.wordWrap
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("TextWrap");
                        });
                    }), tablixType === TablixType.PivotTable && isEnabled && cardBuilder.addGroup("expandCollapseButtons", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_PivotTable_ExpandCollapseButtons_Toggle"), 
                        groupBuilder.addTopLevelToggle("showExpandCollapseButtons", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: pivotTableRowHeaderProps.showExpandCollapseButtons,
                                value: pivotTableRowHeadersData.showExpandCollapseButtons
                            }).build();
                        }).addSimpleSlice("expandCollapseButtonsColor", function() {
                            var colordata = {
                                value: pivotTableRowHeadersData.expandCollapseButtonsColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableRowHeaderProps.expandCollapseButtonsColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Generic_Color");
                        }).addSimpleSlice("expandCollapseButtonsSize", new Builder.NumUpDownBuilder({
                            descriptor: pivotTableRowHeaderProps.expandCollapseButtonsSize,
                            value: pivotTableRowHeadersData.expandCollapseButtonsSize.pt,
                            options: {
                                minValue: {
                                    type: 0,
                                    value: 8
                                },
                                maxValue: {
                                    type: 1,
                                    value: 60
                                },
                                unitSymbol: "Numeric_Pixel"
                            }
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_BubbleSize");
                        });
                    }), featureSwitches.upgradeOutlineProperties || cardBuilder.addGroup("border", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Border"), featureSwitches.outlineDropdownToCheckboxes ? groupBuilder.addSimpleSlice("outlineStyle", function() {
                            return new Builder.FlagSelectionBuilder({
                                descriptor: pivotTableRowHeaderProps.outlineStyle,
                                value: pivotTableRowHeadersData.outline
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_Outline");
                        }) : groupBuilder.addSimpleSlice("outline", function() {
                            return new Builder.DropdownBuilder({
                                descriptor: pivotTableRowHeaderProps.outline,
                                value: pivotTableRowHeadersData.outline
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_Outline");
                        });
                    }), cardBuilder.addGroup("options", function(groupBuilder) {
                        groupBuilder.withDisplayName("Desktop_FileMenu_Options"), groupBuilder.addSimpleSlice("stepped", new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableRowHeaderProps.stepped,
                            value: pivotTableRowHeadersData.steppedLayout
                        }).build()).addSimpleSlice("steppedLayoutIndentation", new Builder.SliderBuilder({
                            descriptor: pivotTableRowHeaderProps.steppedLayoutIndentation,
                            value: pivotTableRowHeadersData.steppedLayoutIndentation,
                            localize: localize
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getTotalsCard = function(hostServices, formattingProperties, tablixType, featureSwitches) {
                if (tablixType === TablixType.TableEx) {
                    var totalsPropsInit = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).total, cardBuilder = totalsPropsInit.outline, fontControlBuilder = totalsPropsInit.outlineStyle, totalsProps = (totalsPropsInit.outlineWeight, 
                    totalsPropsInit.outlineColor, __rest(totalsPropsInit, [ "outline", "outlineStyle", "outlineWeight", "outlineColor" ]));
                    featureSwitches.upgradeOutlineProperties || (totalsProps = __assign(__assign({}, totalsProps), {
                        outline: cardBuilder,
                        outlineStyle: fontControlBuilder
                    }));
                    var tableTotalsData = formattingProperties.total, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("totals"), "Visual_Totals", totalsProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                        descriptor: totalsProps.fontFamily,
                        value: tableTotalsData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: totalsProps.fontSize,
                        value: tableTotalsData.fontSize.pt
                    });
                    featureSwitches.enableBIU && fontControlBuilder.withBold({
                        descriptor: totalsProps.bold,
                        value: tableTotalsData.bold
                    }).withItalic({
                        descriptor: totalsProps.italic,
                        value: tableTotalsData.italic
                    }).withUnderline({
                        descriptor: totalsProps.underline,
                        value: tableTotalsData.underline
                    });
                    var fontControl = fontControlBuilder.build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values"), tablixType === TablixType.TableEx && (groupBuilder.addTopLevelToggle("gridVertical", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: totalsProps.totals,
                                value: formattingProperties.general.totals
                            }).build();
                        }), !formattingProperties.general.totals) || groupBuilder.addSimpleSlice("totalLabel", new Builder.TextInputBuilder({
                            descriptor: totalsProps.label,
                            value: tableTotalsData.totalLabel,
                            placeholder: ""
                        }).build()).addCompositeSlice("font", "Font", fontControl), groupBuilder.addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: tableTotalsData.fontColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: totalsProps.fontColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: tableTotalsData.backColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: totalsProps.backColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        });
                    }), featureSwitches.upgradeOutlineProperties || cardBuilder.addGroup("border", function(groupBuilder) {
                        featureSwitches.outlineDropdownToCheckboxes ? groupBuilder.addSimpleSlice("outlineStyle", function() {
                            return new Builder.FlagSelectionBuilder({
                                descriptor: totalsProps.outlineStyle,
                                value: tableTotalsData.outline
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_Outline");
                        }) : groupBuilder.addSimpleSlice("outline", function() {
                            return new Builder.DropdownBuilder({
                                descriptor: totalsProps.outline,
                                value: tableTotalsData.outline
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Visual_Outline");
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getColumnGrandTotalsCard = function(hostServices, fontControlBuilder, cardBuilder, featureSwitches) {
                if (cardBuilder !== TablixType.TableEx) {
                    var cardBuilder = featureSwitches.splitGrandTotals ? visuals.pivotTableProps.columnTotal : visuals.pivotTableProps.total, pivotTableColumnTotalProps = (cardBuilder.outlineStyle, 
                    cardBuilder.outline, __rest(cardBuilder, [ "outlineStyle", "outline" ])), pivotTableColumnTotalData = fontControlBuilder.columnGrandTotal, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("columnTotal"), "Visual_Tablix_Matrix_Column_TotalGrand", pivotTableColumnTotalProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                        descriptor: pivotTableColumnTotalProps.fontFamily,
                        value: pivotTableColumnTotalData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableColumnTotalProps.fontSize,
                        value: pivotTableColumnTotalData.fontSize.pt
                    });
                    featureSwitches.enableBIU && fontControlBuilder.withBold({
                        descriptor: pivotTableColumnTotalProps.bold,
                        value: pivotTableColumnTotalData.bold
                    }).withItalic({
                        descriptor: pivotTableColumnTotalProps.italic,
                        value: pivotTableColumnTotalData.italic
                    }).withUnderline({
                        descriptor: pivotTableColumnTotalProps.underline,
                        value: pivotTableColumnTotalData.underline
                    });
                    var fontControl = fontControlBuilder.build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableColumnTotalData.fontColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableColumnTotalProps.fontColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableColumnTotalData.backColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableColumnTotalProps.backColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableColumnTotalProps.applyToHeaders,
                            value: pivotTableColumnTotalData.applyToHeaders
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getRowGrandTotalsCard = function(hostServices, fontControlBuilder, cardBuilder, featureSwitches) {
                if (cardBuilder !== TablixType.TableEx) {
                    var cardBuilder = featureSwitches.splitGrandTotals ? visuals.pivotTableProps.rowTotal : visuals.pivotTableProps.total, pivotTableRowTotalProps = (cardBuilder.outlineStyle, 
                    cardBuilder.outline, __rest(cardBuilder, [ "outlineStyle", "outline" ])), pivotTableRowTotalData = fontControlBuilder.rowGrandTotal, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("rowTotal"), "Visual_Tablix_Matrix_Row_TotalGrand", pivotTableRowTotalProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    }), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                        descriptor: pivotTableRowTotalProps.fontFamily,
                        value: pivotTableRowTotalData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: pivotTableRowTotalProps.fontSize,
                        value: pivotTableRowTotalData.fontSize.pt
                    });
                    featureSwitches.enableBIU && fontControlBuilder.withBold({
                        descriptor: pivotTableRowTotalProps.bold,
                        value: pivotTableRowTotalData.bold
                    }).withItalic({
                        descriptor: pivotTableRowTotalProps.italic,
                        value: pivotTableRowTotalData.italic
                    }).withUnderline({
                        descriptor: pivotTableRowTotalProps.underline,
                        value: pivotTableRowTotalData.underline
                    });
                    var fontControl = fontControlBuilder.build();
                    return cardBuilder.addGroup("values", function(groupBuilder) {
                        groupBuilder.withDisplayName("Visual_Tablix_Values").addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                            var colordata = {
                                value: pivotTableRowTotalData.fontColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableRowTotalProps.fontColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Text_Color");
                        }).addSimpleSlice("backColor", function() {
                            var colordata = {
                                value: pivotTableRowTotalData.backColor
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: pivotTableRowTotalProps.backColor,
                                value: colordata
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Background_Color");
                        }).addSimpleSlice("applyToHeaders", new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableRowTotalProps.applyToHeaders,
                            value: pivotTableRowTotalData.applyToHeaders
                        }).build());
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getAccessibilityCard = function(cardBuilder, hostServices, formattingProperties, tablixType) {
                if (tablixType === TablixType.TableEx) {
                    var accessibilityProps = visuals.tableExProps.accessibility, imageColumnsList = _.filter(cardBuilder, visuals.converterHelper.isImageUrlColumn), columnItems = _.filter(cardBuilder, function(column) {
                        return column.type.text;
                    }).map(function(column) {
                        return {
                            displayName: column.displayName,
                            value: column.queryName
                        };
                    });
                    if (!_.isEmpty(imageColumnsList) || !_.isEmpty(columnItems)) {
                        cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("accessibility"), "Accessibility", [ accessibilityProps.altTextColumns, accessibilityProps.rowWithReferenceText ], function(key) {
                            return hostServices.getLocalizedString(key);
                        });
                        return _.isEmpty(imageColumnsList) || cardBuilder.addGroup("AltText", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Tablix_Accessibility_Group_AltText_Label").withCollapsible(!1), 
                            groupBuilder.addContainer("measure", function(containerBuilder) {
                                containerBuilder.withDisplayName("Visual_Tablix_ImageColumns_Desc");
                                for (var _i = 0, imageColumnsList_1 = imageColumnsList; _i < imageColumnsList_1.length; _i++) !function(imgColumn) {
                                    containerBuilder.addContainerItem(imgColumn.queryName, imgColumn.displayName, function(itemBuilder) {
                                        return itemBuilder.addSimpleSlice("altTextColumns", function() {
                                            return new Builder.FieldPickerBuilder({
                                                descriptor: __assign(__assign({}, accessibilityProps.altTextColumns), {
                                                    selector: {
                                                        data: [ powerbi.data.DataViewWildcard.create(0) ],
                                                        metadata: imgColumn.queryName
                                                    },
                                                    instanceKind: 2
                                                }),
                                                validators: {
                                                    field: {
                                                        kind: 1,
                                                        type: {
                                                            text: !0
                                                        }
                                                    }
                                                },
                                                value: void 0
                                            }).build();
                                        });
                                    });
                                }(imageColumnsList_1[_i]);
                            });
                        }), _.isEmpty(columnItems) || cardBuilder.addGroup("rowWithReferenceText", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Tablix_RowName_Label").withCollapsible(!1), 
                            groupBuilder.addSimpleSlice("rowWithReferenceText", new Builder.DropdownBuilder({
                                descriptor: __assign({}, accessibilityProps.rowWithReferenceText),
                                items: columnItems,
                                value: _.find(columnItems, function(columItem) {
                                    return columItem.value === formattingProperties.rowWithReferenceText.rowWithReferenceText;
                                })
                            }).build());
                        }), cardBuilder.build();
                    }
                }
            }, TablixPropertyManager.prototype.getRowSubTotalsCard = function(hostServices, formattingProperties, dataView, cardBuilder, totalsShown, featureSwitches) {
                var _this = this;
                if (totalsShown || cardBuilder === TablixType.PivotTable) {
                    var objects = TablixPropertyManager.getMetadataObjects(dataView), perLevel = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(void 0, objects), localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableRowFormattingProps = visuals.pivotTableProps.subTotals, pivotTableRowFormattingData = __assign(__assign({}, formattingProperties.subtotals), formattingProperties.rowSubtotals), cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("rowSubTotal"), "Visual_SubtotalRow", [ pivotTableRowFormattingProps.rowSubtotalsLabel, pivotTableRowFormattingProps.rowSubtotals, pivotTableRowFormattingProps.rowSubtotalsPosition, pivotTableRowFormattingProps.perRowLevel, pivotTableRowFormattingProps.levelSubtotalEnabled, pivotTableRowFormattingProps.levelSubtotalLabel, pivotTableRowFormattingProps.fontColor, pivotTableRowFormattingProps.backColor, pivotTableRowFormattingProps.fontSize, pivotTableRowFormattingProps.fontFamily, pivotTableRowFormattingProps.bold, pivotTableRowFormattingProps.italic, pivotTableRowFormattingProps.underline, pivotTableRowFormattingProps.applyToHeaders ], localize);
                    return cardBuilder.addTopLevelToggle("rowSubtotals", function() {
                        return new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableRowFormattingProps.rowSubtotals,
                            value: formattingProperties.general.rowSubtotals
                        }).build();
                    }), cardBuilder.addGroup("applySettingsTo", function(groupBuilder) {
                        groupBuilder.withContainerDisabled(!perLevel).withDisplayName("Apply_Settings_To").withCollapsible(!1).addSimpleSlice("perRowLevel", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: pivotTableRowFormattingProps.perRowLevel,
                                value: perLevel
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withDisabled(!_this.shouldShowRowSubtotalsOption(dataView)).withCustomDescription(_this.shouldShowRowSubtotalsOption(dataView) ? void 0 : "Visual_SubtotalRow_PerLevel_DisabledReason");
                        }).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Series"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                                return _this.getRowSubtotalContainers(formattingProperties, containerItemBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, void 0, objects);
                            });
                            for (var _i = 0, _a = dataView.matrix.rows.levels; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) !function(source) {
                                var selector_1;
                                source.isMeasure || (selector_1 = {
                                    metadata: source.queryName
                                }, containerBuilder.addContainerItem(source.displayName, source.displayName, function(containerItemBuilder) {
                                    return _this.getRowSubtotalContainers(formattingProperties, containerItemBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, selector_1, source.objects);
                                }));
                            }(_c[_b]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getRowSubtotalContainers = function(formattingProperties, containerBuilder, localize, featureSwitches, pivotTableRowFormattingProps, pivotTableRowFormattingData, selector, sourceObjects) {
                var subTotalsLabel = visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(sourceObjects, !0), rowsStepped = visuals.TablixProperties.PropRowsSteppedLayout.getValue(sourceObjects), defaultTotalLabel = selector && rowsStepped ? "" : localize(TablixUtils.TotalLabel), subTotalsLabelProp = selector ? pivotTableRowFormattingProps.levelSubtotalLabel : pivotTableRowFormattingProps.rowSubtotalsLabel;
                containerBuilder.addGroup("rows", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Rows"), groupBuilder.addSimpleSlice("levelSubtotalEnabled", new Builder.ToggleSwitchBuilder({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.levelSubtotalEnabled), {
                            selector: selector
                        }),
                        value: visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(void 0, sourceObjects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_ShowSubtotal").withDisabled(!selector);
                    }).addSimpleSlice("rowSubtotalsLabel", new Builder.TextInputBuilder({
                        descriptor: __assign({}, subTotalsLabelProp),
                        value: subTotalsLabel || defaultTotalLabel,
                        placeholder: ""
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Subtotal_Label").withDisabled(selector && rowsStepped);
                    }).addSimpleSlice("rowSubtotalsPosition", new Builder.DropdownBuilder({
                        descriptor: pivotTableRowFormattingProps.rowSubtotalsPosition,
                        value: formattingProperties.subtotals.rowSubtotalsPosition
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Position").withDisabled(!!selector);
                    });
                }), containerBuilder.addGroup("values", function(groupBuilder) {
                    var rowSelector_1, fontControl;
                    groupBuilder.withDisplayName("Visual_Tablix_Values"), selector ? groupBuilder.withDisabled(!0, "") : (rowSelector_1 = {
                        id: "Row"
                    }, fontControl = new Builder.FontControlBuilder().withFontFamily({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.fontFamily), {
                            selector: rowSelector_1
                        }),
                        value: pivotTableRowFormattingData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.fontSize), {
                            selector: rowSelector_1
                        }),
                        value: pivotTableRowFormattingData.fontSize.pt
                    }), featureSwitches.enableBIU && fontControl.withBold({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.bold), {
                            selector: rowSelector_1
                        }),
                        value: pivotTableRowFormattingData.bold
                    }).withItalic({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.italic), {
                            selector: rowSelector_1
                        }),
                        value: pivotTableRowFormattingData.italic
                    }).withUnderline({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.underline), {
                            selector: rowSelector_1
                        }),
                        value: pivotTableRowFormattingData.underline
                    }), fontControl = fontControl.build(), groupBuilder.addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                        var colordata = {
                            value: pivotTableRowFormattingData.fontColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: __assign(__assign({}, pivotTableRowFormattingProps.fontColor), {
                                selector: rowSelector_1
                            }),
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColor", function() {
                        var colordata = {
                            value: pivotTableRowFormattingData.backColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: __assign(__assign({}, pivotTableRowFormattingProps.backColor), {
                                selector: rowSelector_1
                            }),
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }).addSimpleSlice("applyToHeaders", new Builder.ToggleSwitchBuilder({
                        descriptor: __assign(__assign({}, pivotTableRowFormattingProps.applyToHeaders), {
                            selector: rowSelector_1
                        }),
                        value: pivotTableRowFormattingData.applyToHeaders
                    }).build()));
                });
            }, TablixPropertyManager.prototype.getColumnSubtotalCard = function(hostServices, formattingProperties, dataView, cardBuilder, totalsShown, featureSwitches) {
                var _this = this;
                if (totalsShown || cardBuilder === TablixType.PivotTable || this.shouldShowColumnSubtotalsOption(dataView)) {
                    var objects = TablixPropertyManager.getMetadataObjects(dataView), perLevel = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(objects), localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, pivotTableColumnFormattingProps = visuals.pivotTableProps.subTotals, pivotTableColumnFormattingData = __assign(__assign({}, formattingProperties.subtotals), formattingProperties.columnSubtotals), cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("columnSubTotal"), "Visual_SubtotalColumn", [ pivotTableColumnFormattingProps.columnSubtotals, pivotTableColumnFormattingProps.columnSubtotalsLabel, pivotTableColumnFormattingProps.perColumnLevel, pivotTableColumnFormattingProps.levelSubtotalEnabled, pivotTableColumnFormattingProps.levelSubtotalLabel, pivotTableColumnFormattingProps.fontColor, pivotTableColumnFormattingProps.backColor, pivotTableColumnFormattingProps.fontSize, pivotTableColumnFormattingProps.fontFamily, pivotTableColumnFormattingProps.bold, pivotTableColumnFormattingProps.italic, pivotTableColumnFormattingProps.underline, pivotTableColumnFormattingProps.applyToHeaders ], localize);
                    return cardBuilder.addTopLevelToggle("columnSubtotals", function() {
                        return new Builder.ToggleSwitchBuilder({
                            descriptor: pivotTableColumnFormattingProps.columnSubtotals,
                            value: formattingProperties.general.columnSubtotals
                        }).build();
                    }), cardBuilder.addGroup("applySettingsTo", function(groupBuilder) {
                        groupBuilder.withContainerDisabled(!perLevel).withDisplayName("Apply_Settings_To").withCollapsible(!1).addSimpleSlice("perColumnLevel", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: pivotTableColumnFormattingProps.perColumnLevel,
                                value: perLevel
                            }).build();
                        }, function(sliceBuilder) {
                            return sliceBuilder.withDisabled(!_this.shouldShowColumnSubtotalsOption(dataView)).withCustomDescription(_this.shouldShowColumnSubtotalsOption(dataView) ? void 0 : "Visual_SubtotalColumn_PerLevel_DisabledReason");
                        }).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Series"), containerBuilder.addContainerItem("all", localize("All"), function(containerItemBuilder) {
                                return _this.getColumnSubtotalContainers(containerItemBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, void 0, objects);
                            });
                            for (var _i = 0, _a = dataView.matrix.columns.levels; _i < _a.length; _i++) for (var _b = 0, _c = _a[_i].sources; _b < _c.length; _b++) !function(source) {
                                var selector_2;
                                source.isMeasure || (selector_2 = {
                                    metadata: source.queryName
                                }, containerBuilder.addContainerItem(source.displayName, source.displayName, function(containerItemBuilder) {
                                    return _this.getColumnSubtotalContainers(containerItemBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, selector_2, source.objects);
                                }));
                            }(_c[_b]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getColumnSubtotalContainers = function(containerBuilder, localize, featureSwitches, pivotTableColumnFormattingProps, pivotTableColumnFormattingData, selector, sourceObjects) {
                var defaultTotalLabel = localize(TablixUtils.TotalLabel), subTotalsLabel = visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(sourceObjects, !0), subTotalLabelProp = selector ? pivotTableColumnFormattingProps.levelSubtotalLabel : pivotTableColumnFormattingProps.columnSubtotalsLabel;
                containerBuilder.addGroup("columns", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Columns"), groupBuilder.addSimpleSlice("levelSubtotalEnabled", new Builder.ToggleSwitchBuilder({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.levelSubtotalEnabled), {
                            selector: selector
                        }),
                        value: visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(void 0, sourceObjects)
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_ShowSubtotal").withDisabled(!selector);
                    }).addSimpleSlice("columnSubtotalsLabel", new Builder.TextInputBuilder({
                        descriptor: __assign(__assign({}, subTotalLabelProp), {
                            selector: selector
                        }),
                        value: subTotalsLabel || defaultTotalLabel,
                        placeholder: ""
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Subtotal_Label");
                    });
                }), containerBuilder.addGroup("values", function(groupBuilder) {
                    var columnSelector_1, fontControl;
                    groupBuilder.withDisplayName("Visual_Tablix_Values"), selector ? groupBuilder.withDisabled(!0, "") : (columnSelector_1 = {
                        id: "Column"
                    }, fontControl = new Builder.FontControlBuilder().withFontFamily({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.fontFamily), {
                            selector: columnSelector_1
                        }),
                        value: pivotTableColumnFormattingData.fontFamily
                    }).withFontSizeProperties({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.fontSize), {
                            selector: columnSelector_1
                        }),
                        value: pivotTableColumnFormattingData.fontSize.pt
                    }), featureSwitches.enableBIU && fontControl.withBold({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.bold), {
                            selector: columnSelector_1
                        }),
                        value: pivotTableColumnFormattingData.bold
                    }).withItalic({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.italic), {
                            selector: columnSelector_1
                        }),
                        value: pivotTableColumnFormattingData.italic
                    }).withUnderline({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.underline), {
                            selector: columnSelector_1
                        }),
                        value: pivotTableColumnFormattingData.underline
                    }), fontControl = fontControl.build(), groupBuilder.addCompositeSlice("font", "Font", fontControl).addSimpleSlice("fontColor", function() {
                        var colordata = {
                            value: pivotTableColumnFormattingData.fontColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.fontColor), {
                                selector: columnSelector_1
                            }),
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Text_Color");
                    }).addSimpleSlice("backColor", function() {
                        var colordata = {
                            value: pivotTableColumnFormattingData.backColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.backColor), {
                                selector: columnSelector_1
                            }),
                            value: colordata
                        }).build();
                    }, function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Background_Color");
                    }), groupBuilder.addSimpleSlice("applyToHeaders", new Builder.ToggleSwitchBuilder({
                        descriptor: __assign(__assign({}, pivotTableColumnFormattingProps.applyToHeaders), {
                            selector: columnSelector_1
                        }),
                        value: pivotTableColumnFormattingData.applyToHeaders
                    }).build()));
                });
            }, TablixPropertyManager.prototype.getColumnFormattingCard = function(hostServices, cardBuilder, columns, tablixType) {
                if (!_.isEmpty(columns)) {
                    var initialColumnFormattingProps = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).columnFormatting, columnFormattingProps = (initialColumnFormattingProps.dataBars, 
                    __rest(initialColumnFormattingProps, [ "dataBars" ])), columnFormattingData = cardBuilder.columnFormatting, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("columnFormatting"), "Visual_Tablix_Specific_Column", columnFormattingProps, function(key) {
                        return hostServices.getLocalizedString(key);
                    });
                    return cardBuilder.withDescription("Visual_Matrix_SpecificColumn_Description"), 
                    cardBuilder.addGroup("columns", function(groupBuilder) {
                        groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                            containerBuilder.withDisplayName("Series");
                            for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) !function(column) {
                                var objects = column && column.objects;
                                containerBuilder.addContainerItem(column.queryName, column.displayName, function(containerItemBuilder) {
                                    containerItemBuilder.addSimpleSlice(columnFormattingProps.styleHeader, new Builder.ToggleSwitchBuilder({
                                        descriptor: __assign(__assign({}, columnFormattingProps.styleHeader), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleHeader
                                    }).build()), tablixType === TablixType.PivotTable && containerItemBuilder.addSimpleSlice(columnFormattingProps.styleSubtotals, new Builder.ToggleSwitchBuilder({
                                        descriptor: __assign(__assign({}, columnFormattingProps.styleSubtotals), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: visuals.TablixProperties.PropColumnFormattingStyleSubtotals.setInstanceProperty(void 0, objects)
                                    }).build()), containerItemBuilder.addSimpleSlice(columnFormattingProps.styleTotal, new Builder.ToggleSwitchBuilder({
                                        descriptor: __assign(__assign({}, columnFormattingProps.styleTotal), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleTotal
                                    }).build()).addSimpleSlice(columnFormattingProps.styleValues, new Builder.ToggleSwitchBuilder({
                                        descriptor: __assign(__assign({}, columnFormattingProps.styleValues), {
                                            selector: {
                                                metadata: column.queryName
                                            }
                                        }),
                                        value: columnFormattingData[column.queryName].styleValues
                                    }).build()), containerItemBuilder.addGroup("values", function(containerGroupBuilder) {
                                        var objects_1;
                                        containerGroupBuilder.withDisplayName("Visual_Tablix_Values").addSimpleSlice("fontColor", function() {
                                            var colorData = {
                                                value: columnFormattingData[column.queryName].fontColor
                                            };
                                            return new Builder.ColorPickerBuilder({
                                                descriptor: __assign(__assign({}, columnFormattingProps.fontColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Text_Color");
                                        }).addSimpleSlice("backColor", function() {
                                            var colorData = {
                                                value: columnFormattingData[column.queryName].backColor
                                            };
                                            return new Builder.ColorPickerBuilder({
                                                descriptor: __assign(__assign({}, columnFormattingProps.backColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Background_Color");
                                        }).addSimpleSlice("alignment", new Builder.AlignmentGroupBuilder({
                                            descriptor: __assign(__assign({}, columnFormattingProps.alignment), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            mode: "horizontalAlignment",
                                            supportsNoSelection: !0,
                                            value: columnFormattingData[column.queryName].alignment
                                        }).build()), !column.type.numeric || tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || (objects_1 = column && column.objects, 
                                        containerGroupBuilder.addSimpleSlice("labelDisplayUnits", new Builder.DropdownBuilder({
                                            descriptor: __assign(__assign({}, columnFormattingProps.labelDisplayUnits), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: visuals.TablixProperties.PropColumnFormattingDisplayUnits.setInstanceProperty(void 0, objects_1)
                                        }).build()).addSimpleSlice("labelPrecision", new Builder.NumUpDownBuilder({
                                            descriptor: __assign(__assign({}, columnFormattingProps.labelPrecision), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: visuals.TablixProperties.PropColumnFormattingPrecision.setInstanceProperty(void 0, objects_1),
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 0
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: visuals.DataLabelViewModel.MaxLabelPrecision
                                                }
                                            }
                                        }).build()));
                                    });
                                });
                            }(columns_2[_i]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.getCellColumnCard = function(hostServices, tablixType, dataView, featureSwitches) {
                var tableColumnFormattingDescriptors = powerbi.visuals.getTableExCapabilities().objects, VisualObjectRepetitionArray = [];
                return this.enumerateObjectRepetition(VisualObjectRepetitionArray, dataView, tablixType, featureSwitches.conditionalTablixWebURL), 
                visuals.ConditionalFormatting.getFormattingCard(VisualObjectRepetitionArray, function(key) {
                    return hostServices.getLocalizedString(key);
                }, tableColumnFormattingDescriptors, "Cell_Elements", "Visual_Matrix_CellElements_Description");
            }, TablixPropertyManager.prototype.getUrlIconCard = function(hostServices, formattingProperties, tablixType) {
                var valuesUrlIconProp = (tablixType === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).values.urlIcon, pivotTableFormattingProperties = formattingProperties, columnHeadersUrlIconProp = visuals.pivotTableProps.columnHeaders.urlIcon, rowHeadersUrlIconProp = visuals.pivotTableProps.rowHeaders.urlIcon, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("urlIcon"), "Visual_Tablix_UrlIcon", [ valuesUrlIconProp, columnHeadersUrlIconProp, rowHeadersUrlIconProp ], function(key) {
                    return hostServices.getLocalizedString(key);
                });
                return cardBuilder.addGroup("urlIcon", function(groupBuilder) {
                    tablixType !== TablixType.Table && tablixType !== TablixType.TableEx && tablixType !== TablixType.PivotTable || groupBuilder.addSimpleSlice("values", new Builder.ToggleSwitchBuilder({
                        descriptor: valuesUrlIconProp,
                        value: formattingProperties.values.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_Values");
                    }), tablixType === TablixType.PivotTable && groupBuilder.addSimpleSlice("columnheaders", new Builder.ToggleSwitchBuilder({
                        descriptor: columnHeadersUrlIconProp,
                        value: pivotTableFormattingProperties.columnHeaders.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_ColumnHeaders");
                    }).addSimpleSlice("rowheaders", new Builder.ToggleSwitchBuilder({
                        descriptor: rowHeadersUrlIconProp,
                        value: pivotTableFormattingProperties.rowHeaders.urlIcon
                    }).build(), function(sliceBuilder) {
                        return sliceBuilder.withCustomDisplayName("Visual_Tablix_RowHeaders");
                    });
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getImageHeightCard = function(hostServices, formattingProperties, cardBuilder) {
                function localize(key) {
                    return hostServices.getLocalizedString(key);
                }
                var imageHeightProp = (cardBuilder === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).grid.imageHeight, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("imageHeight"), "Visual_Tablix_ImageHeight", [ imageHeightProp ], localize);
                return cardBuilder.addGroup("imageHeight", function(cardBuilder) {
                    cardBuilder.addSimpleSlice("imageHeight", new Builder.SliderBuilder({
                        descriptor: imageHeightProp,
                        value: formattingProperties.grid.imageHeight,
                        localize: localize,
                        options: {
                            minValue: {
                                type: 0,
                                value: 24
                            },
                            maxValue: {
                                type: 1,
                                value: 150
                            },
                            unitSymbol: visuals.visualLocKeys.PixelUnitSymbol
                        }
                    }).build());
                }), cardBuilder.build();
            }, TablixPropertyManager.prototype.getSparklinesCard = function(columns, hostServices, cardBuilder) {
                var _this = this;
                if (!_.isEmpty(columns) && this.hasSparklines(columns)) {
                    var localize = function(key) {
                        return hostServices.getLocalizedString(key);
                    }, sparklinesProps = (cardBuilder === TablixType.TableEx ? visuals.tableExProps : visuals.pivotTableProps).sparklines, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("sparklines"), "Sparkline_Label", sparklinesProps, localize);
                    return cardBuilder.addGroup("columns", function(groupBuilder) {
                        groupBuilder.withDisplayName("Apply_Settings_To").withCollapsible(!1).addContainer("series", function(containerBuilder) {
                            var _a;
                            containerBuilder.withDisplayName("Sparkline_Singular_Label");
                            for (var _i = 0, columns_3 = columns; _i < columns_3.length; _i++) !function(column) {
                                if (!(null === (_a = column.type.misc) || void 0 === _a ? void 0 : _a.sparkline)) return;
                                var objects = column && column.objects;
                                containerBuilder.addContainerItem(column.queryName, column.displayName, function(containerItemBuilder) {
                                    var sparklineChartTypeData = visuals.TablixProperties.PropSparklinesChartType.setInstanceProperty(void 0, objects);
                                    containerItemBuilder.addGroup("sparklines", function(containerGroupBuilder) {
                                        containerGroupBuilder.withDisplayName("Sparkline_Singular_Label").addSimpleSlice("chartType", new Builder.DropdownBuilder({
                                            descriptor: __assign(__assign({}, sparklinesProps.chartType), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: sparklineChartTypeData
                                        }).build()).addSimpleSlice("dataColor", function() {
                                            var colorData = {
                                                value: _this.tablixProperties.PropSparklinesDataColor.setInstanceProperty(void 0, objects).solid.color
                                            };
                                            return new Builder.ColorPickerBuilder({
                                                descriptor: __assign(__assign({}, sparklinesProps.dataColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }), sparklineChartTypeData === visuals.sparklineChartType.line && containerGroupBuilder.addSimpleSlice("strokeWidth", new Builder.SliderBuilder({
                                            descriptor: __assign(__assign({}, sparklinesProps.strokeWidth), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: visuals.TablixProperties.PropSparklinesStrokeWidth.setInstanceProperty(void 0, objects),
                                            localize: localize,
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 1
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: 4
                                                }
                                            }
                                        }).build(), function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Visual_General_Properties_Width");
                                        });
                                    }), sparklineChartTypeData === visuals.sparklineChartType.line && containerItemBuilder.addGroup("markers", function(containerGroupBuilder) {
                                        var markerTypeValue = visuals.TablixProperties.PropSparklinesMarkerType.getValue(objects);
                                        containerGroupBuilder.withDisplayName(localize("Marker")).addSimpleSlice("markers", new Builder.FlagSelectionBuilder({
                                            descriptor: __assign(__assign({}, sparklinesProps.markers), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: markerTypeValue
                                        }).build(), function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Sparkline_Formatting_Slice_Show_These_Markers");
                                        }), null != markerTypeValue && 0 !== markerTypeValue && containerGroupBuilder.addSimpleSlice("markerColor", function() {
                                            var colorData = {
                                                value: _this.tablixProperties.PropSparklinesMarkerColor.setInstanceProperty(void 0, objects).solid.color
                                            };
                                            return new Builder.ColorPickerBuilder({
                                                descriptor: __assign(__assign({}, sparklinesProps.markerColor), {
                                                    selector: {
                                                        metadata: column.queryName
                                                    }
                                                }),
                                                value: colorData
                                            }).build();
                                        }, function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Generic_Color");
                                        }).addSimpleSlice("markerShape", new Builder.DropdownBuilder({
                                            descriptor: __assign(__assign({}, sparklinesProps.markerShape), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: visuals.TablixProperties.PropSparklinesMarkerShape.setInstanceProperty(void 0, objects)
                                        }).build(), function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Type");
                                        }).addSimpleSlice("markerSize", new Builder.SliderBuilder({
                                            descriptor: __assign(__assign({}, sparklinesProps.markerSize), {
                                                selector: {
                                                    metadata: column.queryName
                                                }
                                            }),
                                            value: visuals.TablixProperties.PropSparklinesMarkerSize.setInstanceProperty(void 0, objects),
                                            localize: localize,
                                            options: {
                                                minValue: {
                                                    type: 0,
                                                    value: 3
                                                },
                                                maxValue: {
                                                    type: 1,
                                                    value: 5
                                                }
                                            }
                                        }).build(), function(sliceBuilder) {
                                            return sliceBuilder.withCustomDisplayName("Visual_BubbleSize");
                                        });
                                    });
                                });
                            }(columns_3[_i]);
                        });
                    }), cardBuilder.build();
                }
            }, TablixPropertyManager.prototype.hasSparklines = function(columns) {
                for (var _a, _i = 0, columns_4 = columns; _i < columns_4.length; _i++) if (null === (_a = columns_4[_i].type.misc) || void 0 === _a ? void 0 : _a.sparkline) return !0;
                return !1;
            }, TablixPropertyManager.prototype.enumerateObjectInstances = function(options, enumeration, dataView, tablixType, localizer, featureSwitches, isEnabled, style) {
                void 0 === featureSwitches && (featureSwitches = {}), void 0 === isEnabled && (isEnabled = !1);
                var objects = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(style), totalsShown = !0, totalsShown = tablixType === TablixType.Table ? this.shouldShowTableTotalsOption(dataView) && visuals.TablixProperties.PropGeneralTableTotals.getValue(objects) : this.shouldShowColumnSubtotalsOption(dataView) && visuals.TablixProperties.PropGeneralMatrixColumnSubtotals.getValue(objects) || this.shouldShowRowSubtotalsOption(dataView) && visuals.TablixProperties.PropGeneralMatrixRowSubtotals.getValue(objects);
                switch (options.objectName) {
                  case visuals.TablixProperties.ObjectGeneral:
                    this.enumerateGeneralOptions(enumeration, objects, tablixType, dataView);
                    break;

                  case visuals.TablixProperties.ObjectGrid:
                    this.enumerateGridOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case visuals.TablixProperties.ObjectColumnHeaders:
                    this.enumerateColumnHeadersOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case visuals.TablixProperties.ObjectRowHeaders:
                    this.enumerateRowHeadersOptions(enumeration, objects, tablixType, isEnabled, textClassProperties, featureSwitches);
                    break;

                  case visuals.TablixProperties.ObjectValues:
                    this.enumerateValuesOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches);
                    break;

                  case visuals.TablixProperties.ObjectTotal:
                    tablixType === TablixType.TableEx ? this.enumerateTotalOptions(enumeration, objects, TablixType.TableEx, localizer, featureSwitches, textClassProperties) : totalsShown && (tablixType === TablixType.Table ? this.enumerateTotalOptions(enumeration, objects, TablixType.TableEx, localizer, featureSwitches, textClassProperties) : this.enumerateGrandTotalOptions(enumeration, objects, tablixType, textClassProperties, featureSwitches));
                    break;

                  case visuals.TablixProperties.ObjectColumnTotal:
                    tablixType === TablixType.PivotTable && featureSwitches.splitGrandTotals && this.enumerateColumnGrandTotalOptions(enumeration, objects, textClassProperties, featureSwitches);
                    break;

                  case visuals.TablixProperties.ObjectRowTotal:
                    tablixType === TablixType.PivotTable && featureSwitches.splitGrandTotals && this.enumerateRowGrandTotalOptions(enumeration, objects, textClassProperties, featureSwitches);
                    break;

                  case visuals.TablixProperties.ObjectSubTotals:
                    !totalsShown && tablixType !== TablixType.PivotTable || this.enumerateSubTotalsOptions(enumeration, objects, tablixType, dataView, localizer, featureSwitches, textClassProperties);
                    break;

                  case visuals.TablixProperties.ObjectColumnFormatting:
                    this.enumerateColumnFormattingOptions(enumeration, this.getColumnsMetadata(dataView, tablixType), tablixType);
                    break;

                  case visuals.TablixProperties.ObjectSparklines:
                    this.enumerateSparklines(enumeration, this.getColumnsMetadata(dataView, tablixType));
                }
            }, TablixPropertyManager.prototype.getColumnsMetadata = function(dataView, tablixType) {
                switch (tablixType) {
                  case TablixType.Table:
                  case TablixType.TableEx:
                    return this.getTableColumnMetadata(dataView);

                  case TablixType.Matrix:
                  case TablixType.PivotTable:
                    return this.getMatrixValuesColumnMetadata(dataView);

                  default:
                    return;
                }
            }, TablixPropertyManager.prototype.getTableColumnMetadata = function(dataView) {
                if (dataView && dataView.table && !_.isEmpty(dataView.table.columns)) return dataView.table.columns;
            }, TablixPropertyManager.prototype.getMatrixValuesColumnMetadata = function(dataView) {
                if (dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) return dataView.matrix.valueSources;
            }, TablixPropertyManager.prototype.createVisualObjectInstance = function(instance, selector, displayName) {
                instance = {
                    selector: selector = void 0 === selector ? null : selector,
                    objectName: instance,
                    properties: {}
                };
                return null != displayName && (instance.displayName = displayName), instance;
            }, TablixPropertyManager.prototype.enumerateGeneralOptions = function(enumeration, objects, tablixType, dataView) {
                var instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectGeneral);
                switch (tablixType) {
                  case TablixType.Table:
                    visuals.TablixProperties.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropGeneralTextSize.setInstanceProperty(instance, objects), 
                    this.shouldShowTableTotalsOption(dataView) && visuals.TablixProperties.PropGeneralTableTotals.setInstanceProperty(instance, objects);
                    break;

                  case TablixType.Matrix:
                    visuals.TablixProperties.PropGeneralAutoSizeColumns.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropGeneralTextSize.setInstanceProperty(instance, objects), 
                    this.shouldShowRowSubtotalsOption(dataView) && visuals.TablixProperties.PropGeneralMatrixRowSubtotals.setInstanceProperty(instance, objects), 
                    this.shouldShowColumnSubtotalsOption(dataView) && visuals.TablixProperties.PropGeneralMatrixColumnSubtotals.setInstanceProperty(instance, objects);
                }
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateGridOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectGrid), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, horizontalGridEnabled = visuals.TablixProperties.PropGridVertical.getValue(objects);
                visuals.TablixProperties.PropGridVertical.setInstanceProperty(instance, objects), 
                horizontalGridEnabled && (this.tablixProperties.PropGridVerticalColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropGridVerticalWeight.setInstanceProperty(instance, objects));
                var isTable = tablixType === TablixType.Table || tablixType === TablixType.TableEx, horizontalGridEnabled = (isTable ? visuals.TablixProperties.PropGridHorizontalTable : visuals.TablixProperties.PropGridHorizontalMatrix).getValue(objects);
                (isTable ? visuals.TablixProperties.PropGridHorizontalTable : visuals.TablixProperties.PropGridHorizontalMatrix).setInstanceProperty(instance, objects), 
                horizontalGridEnabled && (this.tablixProperties.PropGridHorizontalColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropGridHorizontalWeight.setInstanceProperty(instance, objects)), 
                visuals.TablixProperties.PropGridRowPadding.setInstanceProperty(instance, objects), 
                tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || !featureSwitches.upgradeOutlineProperties || (featureSwitches.outlineDropdownToCheckboxes ? visuals.TablixProperties.PropGridOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, visuals.DefaultGridOutlineStyle) : visuals.TablixProperties.PropGridOutline.setInstanceProperty(instance, objects, this.outlineOverrideFn, visuals.DefaultGridOutline)), 
                this.tablixProperties.PropGridOutlineColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropGridOutlineWeight.setInstanceProperty(instance, objects), 
                tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || visuals.TablixProperties.PropGridPivotTableTextSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                visuals.TablixProperties.PropGridImageHeight.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateColumnHeadersOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var fallbackOutlineColorValue, instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectColumnHeaders), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                this.tablixProperties.PropColumnsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropColumnsBackColor.setInstanceProperty(instance, objects), 
                tablixType === TablixType.PivotTable || tablixType === TablixType.TableEx ? (featureSwitches.outlineDropdownToCheckboxes ? (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropColumnsOutlineStyle.getValue(objects), objects, visuals.DefaultColumnsOutlineStyle, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropColumnsOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)) : (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropColumnsNewVisualOutline.getValue(objects), objects, visuals.DefaultColumnsOutline, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropColumnsNewVisualOutline.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)), 
                featureSwitches.upgradeOutlineProperties && (fallbackOutlineColorValue = this.ensureOutlineWeight(visuals.TablixProperties.PropColumnsOutlineWeight.getValue(objects), objects), 
                visuals.TablixProperties.PropColumnsOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects), 
                this.tablixProperties.PropColumnsOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)), 
                visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                visuals.TablixProperties.PropColumnsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropColumnsBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnsItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnsUnderline.setInstanceProperty(instance, objects)), 
                visuals.TablixProperties.PropColumnsAlignment.setInstanceProperty(instance, objects)) : visuals.TablixProperties.PropColumnsOutline.setInstanceProperty(instance, objects), 
                tablixType === TablixType.PivotTable && (visuals.TablixProperties.PropColumnsAlignmentTitle.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnsUrlIcon.setInstanceProperty(instance, objects)), 
                tablixType !== TablixType.Table && tablixType !== TablixType.TableEx && tablixType !== TablixType.PivotTable || visuals.TablixProperties.PropColumnsWordWrap.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateRowHeadersOptions = function(enumeration, objects, tablixType, isEnabled, textClassProperties, featureSwitches) {
                void 0 === isEnabled && (isEnabled = !1);
                var fallbackOutlineColorValue, instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectRowHeaders), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                this.tablixProperties.PropRowsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropRowsBackColor.setInstanceProperty(instance, objects), 
                tablixType === TablixType.PivotTable || tablixType === TablixType.TableEx ? featureSwitches.outlineDropdownToCheckboxes ? (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropRowsOutlineStyle.getValue(objects), objects, visuals.DefaultRowsOutlineStyle, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropRowsOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)) : (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropRowsPivotTableOutline.getValue(objects), objects, visuals.DefaultRowsOutline, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropRowsPivotTableOutline.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)) : visuals.TablixProperties.PropRowsOutline.setInstanceProperty(instance, objects), 
                tablixType === TablixType.PivotTable && (featureSwitches.upgradeOutlineProperties && (fallbackOutlineColorValue = this.ensureOutlineWeight(visuals.TablixProperties.PropRowsOutlineWeight.getValue(objects), objects), 
                visuals.TablixProperties.PropRowsOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropRowsOutlineColor.getValue(objects), objects), 
                this.tablixProperties.PropRowsOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)), 
                visuals.TablixProperties.PropRowsSteppedLayout.setInstanceProperty(instance, objects) && visuals.TablixProperties.PropRowsSteppedLayoutIndentation.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowsUrlIcon.setInstanceProperty(instance, objects)), 
                tablixType !== TablixType.Matrix && tablixType !== TablixType.PivotTable || visuals.TablixProperties.PropRowsWordWrap.setInstanceProperty(instance, objects), 
                tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || (visuals.TablixProperties.PropRowsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                visuals.TablixProperties.PropRowsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropRowsBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowsItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowsUnderline.setInstanceProperty(instance, objects)), 
                visuals.TablixProperties.PropRowsAlignment.setInstanceProperty(instance, objects)), 
                tablixType === TablixType.PivotTable && isEnabled && (visuals.TablixProperties.PropRowsShowExpandCollapseButtons.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowsShowExpandCollapseButtons.getValue(objects) && (this.tablixProperties.PropRowsExpandCollapseButtonsColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowsExpandCollapseButtonsSize.setInstanceProperty(instance, objects))), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateValuesOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var fallbackOutlineColorValue, instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectValues), labelFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt;
                this.tablixProperties.PropValuesFontColorPrimary.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color), 
                this.tablixProperties.PropValuesBackColorPrimary.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropValuesFontColorSecondary.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropValuesBackColorSecondary.setInstanceProperty(instance, objects), 
                tablixType === TablixType.PivotTable && (visuals.TablixProperties.PropValuesBandedRowHeaders.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropValuesOnRow.setInstanceProperty(instance, objects)), 
                tablixType === TablixType.PivotTable || tablixType === TablixType.TableEx ? (featureSwitches.outlineDropdownToCheckboxes ? (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropValuesOutlineStyle.getValue(objects), objects, visuals.DefaultValuesOutlineStyle, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropValuesOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)) : (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropValuesNewVisualOutline.getValue(objects), objects, visuals.DefaultValuesOutline, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropValuesNewVisualOutline.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)), 
                featureSwitches.upgradeOutlineProperties && (fallbackOutlineColorValue = this.ensureOutlineWeight(visuals.TablixProperties.PropValuesOutlineWeight.getValue(objects), objects), 
                visuals.TablixProperties.PropValuesOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects), 
                this.tablixProperties.PropValuesOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue))) : visuals.TablixProperties.PropValuesOutline.setInstanceProperty(instance, objects), 
                tablixType !== TablixType.Table && tablixType !== TablixType.TableEx && tablixType !== TablixType.PivotTable || visuals.TablixProperties.PropValuesUrlIcon.setInstanceProperty(instance, objects), 
                tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || (visuals.TablixProperties.PropValuesWordWrap.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropValuesFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family), 
                visuals.TablixProperties.PropValuesFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, labelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropValuesBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropValuesItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropValuesUnderline.setInstanceProperty(instance, objects))), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateTotalOptions = function(enumeration, objects, tablixType, value, featureSwitches, textClassProperties) {
                var fallbackOutlineColorValue, instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, showProperties = tablixType !== TablixType.TableEx || visuals.TablixProperties.PropTotalTableExTotals.setInstanceProperty(instance, objects);
                showProperties && (tablixType === TablixType.TableEx && (value = visuals.TablixProperties.PropTotalTableExTotalLabel.getValue(objects, !0) || value(TablixUtils.TotalLabel), 
                instance.properties[visuals.TablixProperties.PropTotalTableExTotalLabel.propertyName] = value), 
                this.tablixProperties.PropTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                this.tablixProperties.PropTotalBackColor.setInstanceProperty(instance, objects), 
                tablixType === TablixType.PivotTable || tablixType === TablixType.TableEx ? featureSwitches.outlineDropdownToCheckboxes ? (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropTotalOutlineStyle.getValue(objects), objects, visuals.DefaultTotalOutlineStyle, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropTotalOutlineStyle.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)) : (fallbackOutlineColorValue = this.ensureOutline(visuals.TablixProperties.PropTotalTableExOutline.getValue(objects), objects, visuals.DefaultTotalOutline, featureSwitches.outlineDropdownToCheckboxes), 
                visuals.TablixProperties.PropTotalTableExOutline.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)) : visuals.TablixProperties.PropTotalOutline.setInstanceProperty(instance, objects), 
                tablixType === TablixType.TableEx && featureSwitches.upgradeOutlineProperties && (fallbackOutlineColorValue = this.ensureOutlineWeight(visuals.TablixProperties.PropTotalOutlineWeight.getValue(objects), objects), 
                visuals.TablixProperties.PropTotalOutlineWeight.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue), 
                fallbackOutlineColorValue = this.ensureOutlineColor(this.tablixProperties.PropTotalOutlineColor.getValue(objects), objects), 
                this.tablixProperties.PropTotalOutlineColor.setInstanceProperty(instance, objects, this.outlineOverrideFn, fallbackOutlineColorValue)), 
                tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || (visuals.TablixProperties.PropTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                visuals.TablixProperties.PropTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropTotalBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropTotalItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropTotalUnderline.setInstanceProperty(instance, objects)))), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateGrandTotalOptions = function(enumeration, objects, tablixType, textClassProperties, featureSwitches) {
                var instance, boldLabelFontSize;
                featureSwitches.splitGrandTotals && tablixType === TablixType.PivotTable || (instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectTotal), 
                boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, 
                this.tablixProperties.PropGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                visuals.TablixProperties.PropGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropGrandTotalBackColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || (visuals.TablixProperties.PropGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                visuals.TablixProperties.PropGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropGrandTotalBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropGrandTotalItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropGrandTotalUnderline.setInstanceProperty(instance, objects))), 
                enumeration.pushInstance(instance));
            }, TablixPropertyManager.prototype.enumerateColumnGrandTotalOptions = function(enumeration, objects, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectColumnTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropColumnGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                visuals.TablixProperties.PropColumnGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropColumnGrandTotalBackColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                visuals.TablixProperties.PropColumnGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropColumnGrandTotalBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnGrandTotalItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropColumnGrandTotalUnderline.setInstanceProperty(instance, objects)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateRowGrandTotalOptions = function(enumeration, objects, textClassProperties, featureSwitches) {
                var instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectRowTotal), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropRowGrandTotalFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color), 
                visuals.TablixProperties.PropRowGrandTotalFontFamily.setInstanceProperty(instance, objects), 
                this.tablixProperties.PropRowGrandTotalBackColor.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowGrandTotalApplyToHeaders.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowGrandTotalFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family), 
                visuals.TablixProperties.PropRowGrandTotalFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropRowGrandTotalBold.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowGrandTotalItalic.setInstanceProperty(instance, objects), 
                visuals.TablixProperties.PropRowGrandTotalUnderline.setInstanceProperty(instance, objects)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumerateSubTotalsOptions = function(enumeration, objects, tablixType, dataView, localizer, featureSwitches, textClassProperties) {
                var defaultRowTotalLabel, defaultColumnTotalLabel, defaultTotalLabel, instance, perLevel, rowSubtotalsEnabled = !1, columnSubtotalsEnabled = !1;
                tablixType === TablixType.PivotTable && (defaultTotalLabel = localizer(TablixUtils.TotalLabel), 
                instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals), 
                (rowSubtotalsEnabled = this.shouldShowRowSubtotalsOption(dataView) ? visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotals.setInstanceProperty(instance, objects) : rowSubtotalsEnabled) && (defaultRowTotalLabel = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                instance.properties[visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsLabel.propertyName] = defaultRowTotalLabel), 
                featureSwitches.splitSubTotals || (columnSubtotalsEnabled = this.shouldShowColumnSubtotalsOption(dataView) ? visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotals.setInstanceProperty(instance, objects) : columnSubtotalsEnabled) && (defaultColumnTotalLabel = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                instance.properties[visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsLabel.propertyName] = defaultColumnTotalLabel), 
                enumeration.pushInstance(instance)), featureSwitches.splitSubTotals ? this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType, "Row") : this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType), 
                rowSubtotalsEnabled && (instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals), 
                visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsPosition.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance), instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals), 
                perLevel = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsPerLevel.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance, !1), perLevel && this.enumeratePerLevelSubtotals(enumeration, dataView.matrix.rows.levels, !visuals.TablixProperties.PropRowsSteppedLayout.getValue(objects), defaultRowTotalLabel, localizer)), 
                featureSwitches.splitSubTotals && tablixType === TablixType.PivotTable && (instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals), 
                (columnSubtotalsEnabled = this.shouldShowColumnSubtotalsOption(dataView) ? visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotals.setInstanceProperty(instance, objects) : columnSubtotalsEnabled) && (defaultColumnTotalLabel = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(objects, !0) || defaultTotalLabel, 
                instance.properties[visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsLabel.propertyName] = defaultColumnTotalLabel), 
                enumeration.pushInstance(instance, !1)), featureSwitches.splitSubTotals && this.enumerateSubtotalsFontProperties(enumeration, objects, textClassProperties, featureSwitches, tablixType, "Column"), 
                columnSubtotalsEnabled && (instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals), 
                perLevel = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsPerLevel.setInstanceProperty(instance, objects), 
                enumeration.pushInstance(instance, !1), _.isEmpty(dataView.matrix.columns.levels), 
                perLevel && this.enumeratePerLevelSubtotals(enumeration, dataView.matrix.columns.levels, !0, defaultColumnTotalLabel, localizer));
            }, TablixPropertyManager.prototype.enumerateSubtotalsFontProperties = function(enumeration, objects, textClassProperties, featureSwitches, tablixType, instanceId) {
                var instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals, instanceId ? {
                    id: instanceId
                } : void 0), boldLabelFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt;
                this.tablixProperties.PropSubTotalsFontColor.setInstanceProperty(instance, objects, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, instanceId), 
                visuals.TablixProperties.PropSubTotalsFontFamily.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                this.tablixProperties.PropSubTotalsBackColor.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                tablixType === TablixType.PivotTable && (visuals.TablixProperties.PropSubTotalsFontFamily.setInstanceProperty(instance, objects, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, instanceId), 
                visuals.TablixProperties.PropSubTotalsFontSize.setInstanceProperty(instance, objects, textClassProperties.fontSizeOverrideFn, boldLabelFontSize, instanceId), 
                featureSwitches.enableBIU && (visuals.TablixProperties.PropSubTotalsBold.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                visuals.TablixProperties.PropSubTotalsItalic.setInstanceProperty(instance, objects, void 0, void 0, instanceId), 
                visuals.TablixProperties.PropSubTotalsUnderline.setInstanceProperty(instance, objects, void 0, void 0, instanceId)), 
                visuals.TablixProperties.PropSubTotalsApplyToHeaders.setInstanceProperty(instance, objects, void 0, void 0, instanceId)), 
                enumeration.pushInstance(instance);
            }, TablixPropertyManager.prototype.enumeratePerLevelSubtotals = function(enumeration, hierarchyLevels, showTotalLabel, defaultTotalLabel, localizer) {
                _.isEmpty(hierarchyLevels);
                for (var _i = 0, hierarchyLevels_1 = hierarchyLevels; _i < hierarchyLevels_1.length; _i++) for (var _a = 0, _b = hierarchyLevels_1[_i].sources; _a < _b.length; _a++) {
                    var instance, value = _b[_a];
                    value.isMeasure || (instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals, {
                        metadata: value.queryName
                    }, value.displayName), visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalEnabled.setInstanceProperty(instance, value.objects), 
                    enumeration.pushInstance(instance, !1), showTotalLabel && (instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSubTotals, {
                        metadata: value.queryName
                    }, localizer("Visual_PivotTable_TotalLabel", value.displayName)), value = visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(value.objects, !0) || defaultTotalLabel, 
                    instance.properties[visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalLabel.propertyName] = value, 
                    enumeration.pushInstance(instance, !1)));
                }
            }, TablixPropertyManager.prototype.enumerateColumnFormattingOptions = function(enumeration, columns, tablixType) {
                if (!_.isEmpty(columns)) for (var _i = 0, columns_5 = columns; _i < columns_5.length; _i++) {
                    var column = columns_5[_i];
                    enumeration.pushContainer({
                        displayName: column.displayName
                    });
                    var objects = column && column.objects, instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectColumnFormatting, {
                        metadata: column.queryName
                    });
                    !column.type.numeric || tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || (visuals.TablixProperties.PropColumnFormattingDisplayUnits.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropColumnFormattingPrecision.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropColumnFormattingPrecision.setInstanceValidValues(instance, {
                        numberRange: {
                            min: 0,
                            max: visuals.DataLabelViewModel.MaxLabelPrecision
                        }
                    })), this.tablixProperties.PropColumnFormattingFontColor.setInstanceProperty(instance, objects), 
                    this.tablixProperties.PropColumnFormattingBackColor.setInstanceProperty(instance, objects), 
                    tablixType !== TablixType.PivotTable && tablixType !== TablixType.TableEx || visuals.TablixProperties.PropColumnFormattingAlignment.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropColumnFormattingStyleHeader.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropColumnFormattingStyleValues.setInstanceProperty(instance, objects), 
                    tablixType !== TablixType.Matrix && tablixType !== TablixType.PivotTable || visuals.TablixProperties.PropColumnFormattingStyleSubtotals.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropColumnFormattingStyleTotal.setInstanceProperty(instance, objects), 
                    enumeration.pushInstance(instance), enumeration.popContainer();
                }
            }, TablixPropertyManager.prototype.enumerateSparklines = function(enumeration, columns) {
                if (!_.isEmpty(columns)) for (var _i = 0, columns_6 = columns; _i < columns_6.length; _i++) {
                    var objects, instance, markerTypeValue = columns_6[_i];
                    (null === (instance = markerTypeValue.type.misc) || void 0 === instance ? void 0 : instance.sparkline) && (enumeration.pushContainer({
                        displayName: markerTypeValue.displayName
                    }), objects = markerTypeValue && markerTypeValue.objects, instance = this.createVisualObjectInstance(visuals.TablixProperties.ObjectSparklines, {
                        metadata: markerTypeValue.queryName
                    }), visuals.TablixProperties.PropSparklinesChartType.setInstanceProperty(instance, objects), 
                    this.tablixProperties.PropSparklinesDataColor.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropSparklinesChartType.getValue(objects) === visuals.sparklineChartType.line && (visuals.TablixProperties.PropSparklinesStrokeWidth.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropSparklinesStrokeWidth.setInstanceValidValues(instance, {
                        numberRange: {
                            min: 1,
                            max: 4
                        }
                    }), visuals.TablixProperties.PropSparklinesMarkerType.setInstanceProperty(instance, objects), 
                    null != (markerTypeValue = visuals.TablixProperties.PropSparklinesMarkerType.getValue(objects)) && 0 !== markerTypeValue && (this.tablixProperties.PropSparklinesMarkerColor.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropSparklinesMarkerSize.setInstanceProperty(instance, objects), 
                    visuals.TablixProperties.PropSparklinesMarkerSize.setInstanceValidValues(instance, {
                        numberRange: {
                            min: 3,
                            max: 5
                        }
                    }), visuals.TablixProperties.PropSparklinesMarkerShape.setInstanceProperty(instance, objects))), 
                    enumeration.pushInstance(instance), enumeration.popContainer());
                }
            }, TablixPropertyManager.prototype.getTableObjects = function(columns) {
                var objects = TablixPropertyManager.getMetadataObjects(columns), generalTextSize = visuals.TablixProperties.PropGeneralTextSize.getValue(objects), generalTextSize = null != generalTextSize ? FontSize.createFromPt(+generalTextSize) : void 0, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: visuals.TablixProperties.PropGeneralAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        totals: visuals.TablixProperties.PropGeneralTableTotals.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: visuals.TablixProperties.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: visuals.TablixProperties.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: visuals.TablixProperties.PropGridHorizontalTable.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: visuals.TablixProperties.PropGridHorizontalWeight.getValue(objects),
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: visuals.TablixProperties.PropGridOutlineWeight.getValue(objects),
                    rowPadding: visuals.TablixProperties.PropGridRowPadding.getValue(objects),
                    imageHeight: visuals.TablixProperties.PropGridImageHeight.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: visuals.TablixProperties.PropColumnsOutline.getValue(objects),
                    wordWrap: visuals.TablixProperties.PropColumnsWordWrap.getValue(objects)
                }, formattingProperties.values = {
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: visuals.TablixProperties.PropValuesOutline.getValue(objects),
                    urlIcon: visuals.TablixProperties.PropValuesUrlIcon.getValue(objects)
                }, formattingProperties.total = {
                    fontColor: this.tablixProperties.PropTotalFontColor.getValue(objects),
                    backColor: this.tablixProperties.PropTotalBackColor.getValue(objects),
                    outline: visuals.TablixProperties.PropTotalOutline.getValue(objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {};
                columns = this.getTableColumnMetadata(columns);
                if (columns) for (var _i = 0, columns_7 = columns; _i < columns_7.length; _i++) {
                    var column = columns_7[_i], objects_2 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_2),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_2),
                        styleHeader: visuals.TablixProperties.PropColumnFormattingStyleHeader.getValue(objects_2),
                        styleValues: visuals.TablixProperties.PropColumnFormattingStyleValues.getValue(objects_2),
                        styleTotal: visuals.TablixProperties.PropColumnFormattingStyleTotal.getValue(objects_2)
                    }, formattingProperties.formatters[column.queryName] = new VariantValueFormatter({
                        column: column,
                        formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                        nullsAreBlank: !1
                    });
                }
                return formattingProperties;
            }, TablixPropertyManager.prototype.getMatrixObjects = function(dataView) {
                var columns = TablixPropertyManager.getMetadataObjects(dataView), generalTextSize = visuals.TablixProperties.PropGeneralTextSize.getValue(columns), generalTextSize = null != generalTextSize ? FontSize.createFromPt(+generalTextSize) : void 0, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: visuals.TablixProperties.PropGeneralAutoSizeColumns.getValue(columns),
                        textSize: generalTextSize,
                        rowSubtotals: visuals.TablixProperties.PropGeneralMatrixRowSubtotals.getValue(columns),
                        columnSubtotals: visuals.TablixProperties.PropGeneralMatrixColumnSubtotals.getValue(columns)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: visuals.TablixProperties.PropGridVertical.getValue(columns),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(columns),
                    gridVerticalWeight: visuals.TablixProperties.PropGridVerticalWeight.getValue(columns),
                    gridHorizontal: visuals.TablixProperties.PropGridHorizontalMatrix.getValue(columns),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(columns),
                    gridHorizontalWeight: visuals.TablixProperties.PropGridHorizontalWeight.getValue(columns),
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(columns),
                    outlineWeight: visuals.TablixProperties.PropGridOutlineWeight.getValue(columns),
                    rowPadding: visuals.TablixProperties.PropGridRowPadding.getValue(columns),
                    imageHeight: visuals.TablixProperties.PropGridImageHeight.getValue(columns)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(columns),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(columns),
                    outline: visuals.TablixProperties.PropColumnsOutline.getValue(columns)
                }, formattingProperties.rowHeaders = {
                    fontColor: this.tablixProperties.PropRowsFontColor.getValue(columns),
                    backColor: this.tablixProperties.PropRowsBackColor.getValue(columns),
                    outline: visuals.TablixProperties.PropRowsOutline.getValue(columns),
                    wordWrap: visuals.TablixProperties.PropRowsWordWrap.getValue(columns)
                }, formattingProperties.values = {
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(columns),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(columns),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(columns),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(columns),
                    outline: visuals.TablixProperties.PropValuesOutline.getValue(columns)
                }, formattingProperties.grandTotal = {
                    fontColor: this.tablixProperties.PropGrandTotalFontColor.getValue(columns),
                    backColor: this.tablixProperties.PropGrandTotalBackColor.getValue(columns),
                    applyToHeaders: visuals.TablixProperties.PropGrandTotalApplyToHeaders.getValue(columns)
                }, formattingProperties.subtotals = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(columns),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(columns)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {};
                columns = this.getMatrixValuesColumnMetadata(dataView);
                if (columns) for (var _i = 0, columns_8 = columns; _i < columns_8.length; _i++) {
                    var column = columns_8[_i], objects_3 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_3),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_3),
                        styleHeader: visuals.TablixProperties.PropColumnFormattingStyleHeader.getValue(objects_3),
                        styleValues: visuals.TablixProperties.PropColumnFormattingStyleValues.getValue(objects_3),
                        styleTotal: visuals.TablixProperties.PropColumnFormattingStyleTotal.getValue(objects_3),
                        styleSubTotals: visuals.TablixProperties.PropColumnFormattingStyleSubtotals.getValue(objects_3)
                    }, formattingProperties.formatters[column.queryName] = new VariantValueFormatter({
                        column: column,
                        formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                        nullsAreBlank: !1
                    });
                }
                return this.addMatrixHierarchyColumnsFormatters(dataView.matrix.rows, formattingProperties.formatters), 
                this.addMatrixHierarchyColumnsFormatters(dataView.matrix.columns, formattingProperties.formatters), 
                formattingProperties;
            }, TablixPropertyManager.prototype.addMatrixHierarchyColumnsFormatters = function(hierarchy, formatters, tooltipFormatters) {
                if (hierarchy) {
                    hierarchy.levels;
                    for (var _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        level.sources;
                        for (var _b = 0, _c = level.sources; _b < _c.length; _b++) {
                            var queryName, column = _c[_b];
                            column.isMeasure || (formatters[queryName = column.queryName] = new VariantValueFormatter({
                                column: column,
                                formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                                nullsAreBlank: !1
                            }), tooltipFormatters && (tooltipFormatters[queryName] = new VariantValueFormatter({
                                column: column,
                                formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                                nullsAreBlank: !0
                            })));
                        }
                    }
                }
            }, TablixPropertyManager.prototype.addMatrixHierarchySubtotalLabels = function(hierarchy, settings, defaultLabel, perLevelSettings) {
                if (hierarchy) {
                    hierarchy.levels;
                    for (var _i = 0, _a = hierarchy.levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        level.sources;
                        for (var subtotalLabel = void 0, _b = 0, _c = level.sources; _b < _c.length; _b++) {
                            var source = _c[_b];
                            source.isMeasure || (perLevelSettings && (subtotalLabel = visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalLabel.getValue(source.objects)), 
                            settings[source.queryName] = {
                                subtotalLabel: subtotalLabel = subtotalLabel || defaultLabel
                            });
                        }
                    }
                }
            }, TablixPropertyManager.prototype.getPivotTableObjects = function(dataView, localizer, isEnabled, perRowLevelSubtotal, featureSwitches) {
                var _j, perColumnLevelSubtotal = TablixPropertyManager.getMetadataObjects(dataView), textClassProperties = this.getTablixTextClassProperties(perRowLevelSubtotal), rowGrandTotalFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, columnSubtotalsLabel = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, rowGrandTotal = visuals.TablixProperties.PropGridPivotTableTextSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, rowGrandTotalFontSize), generalFontSize = null != rowGrandTotal ? FontSize.createFromPt(+rowGrandTotal) : void 0, _p = visuals.TablixProperties.PropColumnsFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, rowGrandTotalFontSize), columnHeaderFontSize = null != _p ? FontSize.createFromPt(+_p) : void 0, columnGrandTotal = visuals.TablixProperties.PropRowsFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, rowGrandTotalFontSize), rowHeaderFontSize = null != columnGrandTotal ? FontSize.createFromPt(+columnGrandTotal) : void 0, rowSubtotalsFontSize = visuals.TablixProperties.PropRowsExpandCollapseButtonsSize.getValue(perColumnLevelSubtotal), rowHeaderExpandCollapseButtonsSize = null != rowSubtotalsFontSize ? FontSize.createFromPt(+rowSubtotalsFontSize) : void 0, rowSubtotalsLabel = visuals.TablixProperties.PropValuesFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, rowGrandTotalFontSize), valuesFontSize = null != rowSubtotalsLabel ? FontSize.createFromPt(+rowSubtotalsLabel) : void 0, perRowLevelSubtotal = visuals.TablixProperties.PropGrandTotalFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, columnSubtotalsLabel), rowGrandTotal = null != perRowLevelSubtotal ? FontSize.createFromPt(+perRowLevelSubtotal) : void 0, _p = visuals.TablixProperties.PropColumnGrandTotalFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, columnSubtotalsLabel, void 0, [ "Column" ]), columnGrandTotal = null != _p ? FontSize.createFromPt(+_p) : void 0, rowSubtotalsFontSize = visuals.TablixProperties.PropRowGrandTotalFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, columnSubtotalsLabel, void 0, [ "Row" ]), rowGrandTotalFontSize = null != rowSubtotalsFontSize ? FontSize.createFromPt(+rowSubtotalsFontSize) : void 0, rowSubtotalsLabel = visuals.TablixProperties.PropSubTotalsFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, columnSubtotalsLabel), perRowLevelSubtotal = null != rowSubtotalsLabel ? FontSize.createFromPt(+rowSubtotalsLabel) : void 0, _p = visuals.TablixProperties.PropSubTotalsFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, columnSubtotalsLabel, "Row"), rowSubtotalsFontSize = null != _p ? FontSize.createFromPt(+_p) : void 0, rowSubtotalsLabel = visuals.TablixProperties.PropSubTotalsFontSize.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontSizeOverrideFn, columnSubtotalsLabel, "Column"), _p = null != rowSubtotalsLabel ? FontSize.createFromPt(+rowSubtotalsLabel) : void 0, columnSubtotalsLabel = localizer(TablixUtils.TotalLabel), rowSubtotalsLabel = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsLabel.getValue(perColumnLevelSubtotal) || columnSubtotalsLabel, columnSubtotalsLabel = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsLabel.getValue(perColumnLevelSubtotal) || columnSubtotalsLabel, perRowLevelSubtotal = {
                    fontColor: this.tablixProperties.PropSubTotalsFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color),
                    fontFamily: visuals.TablixProperties.PropSubTotalsFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family),
                    fontSize: perRowLevelSubtotal,
                    bold: visuals.TablixProperties.PropSubTotalsBold.getValue(perColumnLevelSubtotal),
                    italic: visuals.TablixProperties.PropSubTotalsItalic.getValue(perColumnLevelSubtotal),
                    underline: visuals.TablixProperties.PropSubTotalsUnderline.getValue(perColumnLevelSubtotal),
                    backColor: this.tablixProperties.PropSubTotalsBackColor.getValue(perColumnLevelSubtotal),
                    applyToHeaders: visuals.TablixProperties.PropSubTotalsApplyToHeaders.getValue(perColumnLevelSubtotal)
                }, rowSubtotals = featureSwitches.splitSubTotals ? {
                    fontColor: null !== (_j = this.tablixProperties.PropSubTotalsFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, "Row")) && void 0 !== _j ? _j : perRowLevelSubtotal.fontColor,
                    fontFamily: null !== (rowSubtotals = visuals.TablixProperties.PropSubTotalsFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, "Row")) && void 0 !== rowSubtotals ? rowSubtotals : perRowLevelSubtotal.fontFamily,
                    fontSize: null != rowSubtotalsFontSize ? rowSubtotalsFontSize : perRowLevelSubtotal.fontSize,
                    bold: null !== (_j = visuals.TablixProperties.PropSubTotalsBold.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Row")) && void 0 !== _j ? _j : perRowLevelSubtotal.bold,
                    italic: null !== (rowSubtotals = visuals.TablixProperties.PropSubTotalsItalic.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Row")) && void 0 !== rowSubtotals ? rowSubtotals : perRowLevelSubtotal.italic,
                    underline: null !== (_j = visuals.TablixProperties.PropSubTotalsUnderline.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Row")) && void 0 !== _j ? _j : perRowLevelSubtotal.underline,
                    backColor: null !== (rowSubtotals = this.tablixProperties.PropSubTotalsBackColor.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Row")) && void 0 !== rowSubtotals ? rowSubtotals : perRowLevelSubtotal.backColor,
                    applyToHeaders: null !== (_j = visuals.TablixProperties.PropSubTotalsApplyToHeaders.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Row")) && void 0 !== _j ? _j : perRowLevelSubtotal.applyToHeaders
                } : perRowLevelSubtotal, perRowLevelSubtotal = featureSwitches.splitSubTotals ? {
                    fontColor: null !== (_j = this.tablixProperties.PropSubTotalsFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, "Column")) && void 0 !== _j ? _j : perRowLevelSubtotal.fontColor,
                    fontFamily: null !== (_j = visuals.TablixProperties.PropSubTotalsFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, "Column")) && void 0 !== _j ? _j : perRowLevelSubtotal.fontFamily,
                    fontSize: null != _p ? _p : perRowLevelSubtotal.fontSize,
                    bold: null !== (_p = visuals.TablixProperties.PropSubTotalsBold.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Column")) && void 0 !== _p ? _p : perRowLevelSubtotal.bold,
                    italic: null !== (_p = visuals.TablixProperties.PropSubTotalsItalic.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Column")) && void 0 !== _p ? _p : perRowLevelSubtotal.italic,
                    underline: null !== (_p = visuals.TablixProperties.PropSubTotalsUnderline.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Column")) && void 0 !== _p ? _p : perRowLevelSubtotal.underline,
                    backColor: null !== (_p = this.tablixProperties.PropSubTotalsBackColor.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Column")) && void 0 !== _p ? _p : perRowLevelSubtotal.backColor,
                    applyToHeaders: null !== (_p = visuals.TablixProperties.PropSubTotalsApplyToHeaders.getValue(perColumnLevelSubtotal, void 0, void 0, void 0, "Column")) && void 0 !== _p ? _p : perRowLevelSubtotal.applyToHeaders
                } : perRowLevelSubtotal, rowGrandTotal = {
                    fontColor: this.tablixProperties.PropGrandTotalFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color),
                    fontFamily: visuals.TablixProperties.PropGrandTotalFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family),
                    fontSize: rowGrandTotal,
                    bold: visuals.TablixProperties.PropGrandTotalBold.getValue(perColumnLevelSubtotal),
                    italic: visuals.TablixProperties.PropGrandTotalItalic.getValue(perColumnLevelSubtotal),
                    underline: visuals.TablixProperties.PropGrandTotalUnderline.getValue(perColumnLevelSubtotal),
                    backColor: this.tablixProperties.PropGrandTotalBackColor.getValue(perColumnLevelSubtotal),
                    applyToHeaders: visuals.TablixProperties.PropGrandTotalApplyToHeaders.getValue(perColumnLevelSubtotal)
                }, columnGrandTotal = featureSwitches.splitGrandTotals ? {
                    fontColor: this.tablixProperties.PropColumnGrandTotalFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, void 0, [ "Column" ]),
                    fontFamily: visuals.TablixProperties.PropColumnGrandTotalFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, void 0, [ "Column" ]),
                    fontSize: columnGrandTotal,
                    bold: visuals.TablixProperties.PropColumnGrandTotalBold.getValue(perColumnLevelSubtotal),
                    italic: visuals.TablixProperties.PropColumnGrandTotalItalic.getValue(perColumnLevelSubtotal),
                    underline: visuals.TablixProperties.PropColumnGrandTotalUnderline.getValue(perColumnLevelSubtotal),
                    backColor: this.tablixProperties.PropColumnGrandTotalBackColor.getValue(perColumnLevelSubtotal),
                    applyToHeaders: visuals.TablixProperties.PropColumnGrandTotalApplyToHeaders.getValue(perColumnLevelSubtotal)
                } : rowGrandTotal, rowGrandTotal = featureSwitches.splitGrandTotals ? {
                    fontColor: this.tablixProperties.PropRowGrandTotalFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color, void 0, [ "Row" ]),
                    fontFamily: visuals.TablixProperties.PropRowGrandTotalFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family, void 0, [ "Row" ]),
                    fontSize: rowGrandTotalFontSize,
                    bold: visuals.TablixProperties.PropRowGrandTotalBold.getValue(perColumnLevelSubtotal),
                    italic: visuals.TablixProperties.PropRowGrandTotalItalic.getValue(perColumnLevelSubtotal),
                    underline: visuals.TablixProperties.PropRowGrandTotalUnderline.getValue(perColumnLevelSubtotal),
                    backColor: this.tablixProperties.PropRowGrandTotalBackColor.getValue(perColumnLevelSubtotal),
                    applyToHeaders: visuals.TablixProperties.PropRowGrandTotalApplyToHeaders.getValue(perColumnLevelSubtotal)
                } : rowGrandTotal, formattingProperties = {
                    general: {
                        autoSizeColumnWidth: visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.getValue(perColumnLevelSubtotal),
                        textSize: generalFontSize,
                        rowSubtotals: visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotals.getValue(perColumnLevelSubtotal),
                        columnSubtotals: visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotals.getValue(perColumnLevelSubtotal)
                    },
                    grid: {
                        gridVertical: visuals.TablixProperties.PropGridVertical.getValue(perColumnLevelSubtotal),
                        gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(perColumnLevelSubtotal),
                        gridVerticalWeight: visuals.TablixProperties.PropGridVerticalWeight.getValue(perColumnLevelSubtotal),
                        gridHorizontal: visuals.TablixProperties.PropGridHorizontalMatrix.getValue(perColumnLevelSubtotal),
                        gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(perColumnLevelSubtotal),
                        gridHorizontalWeight: visuals.TablixProperties.PropGridHorizontalWeight.getValue(perColumnLevelSubtotal),
                        outline: featureSwitches.outlineDropdownToCheckboxes ? visuals.TablixProperties.PropGridOutlineStyle.getValue(perColumnLevelSubtotal) || visuals.DefaultGridOutlineStyle : visuals.TablixProperties.PropGridOutline.getValue(perColumnLevelSubtotal) || visuals.DefaultGridOutline,
                        outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(perColumnLevelSubtotal),
                        outlineWeight: visuals.TablixProperties.PropGridOutlineWeight.getValue(perColumnLevelSubtotal),
                        rowPadding: visuals.TablixProperties.PropGridRowPadding.getValue(perColumnLevelSubtotal),
                        imageHeight: visuals.TablixProperties.PropGridImageHeight.getValue(perColumnLevelSubtotal)
                    },
                    columnHeaders: {
                        fontColor: this.tablixProperties.PropColumnsFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        fontFamily: visuals.TablixProperties.PropColumnsFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: columnHeaderFontSize,
                        bold: visuals.TablixProperties.PropColumnsBold.getValue(perColumnLevelSubtotal),
                        italic: visuals.TablixProperties.PropColumnsItalic.getValue(perColumnLevelSubtotal),
                        underline: visuals.TablixProperties.PropColumnsUnderline.getValue(perColumnLevelSubtotal),
                        backColor: this.tablixProperties.PropColumnsBackColor.getValue(perColumnLevelSubtotal),
                        outline: featureSwitches.outlineDropdownToCheckboxes ? this.ensureOutline(visuals.TablixProperties.PropColumnsOutlineStyle.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal, visuals.DefaultColumnsOutlineStyle, featureSwitches.outlineDropdownToCheckboxes) : this.ensureOutline(visuals.TablixProperties.PropColumnsNewVisualOutline.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal, visuals.DefaultColumnsOutline, featureSwitches.outlineDropdownToCheckboxes),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal),
                        outlineWeight: this.ensureOutlineWeight(visuals.TablixProperties.PropColumnsOutlineWeight.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal),
                        urlIcon: visuals.TablixProperties.PropColumnsUrlIcon.getValue(perColumnLevelSubtotal),
                        wordWrap: visuals.TablixProperties.PropColumnsWordWrap.getValue(perColumnLevelSubtotal),
                        alignment: visuals.TablixProperties.PropColumnsAlignment.getValue(perColumnLevelSubtotal),
                        titleAlignment: visuals.TablixProperties.PropColumnsAlignmentTitle.getValue(perColumnLevelSubtotal)
                    },
                    rowHeaders: {
                        fontColor: this.tablixProperties.PropRowsFontColor.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        fontFamily: visuals.TablixProperties.PropRowsFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: rowHeaderFontSize,
                        bold: visuals.TablixProperties.PropRowsBold.getValue(perColumnLevelSubtotal),
                        italic: visuals.TablixProperties.PropRowsItalic.getValue(perColumnLevelSubtotal),
                        underline: visuals.TablixProperties.PropRowsUnderline.getValue(perColumnLevelSubtotal),
                        backColor: this.tablixProperties.PropRowsBackColor.getValue(perColumnLevelSubtotal),
                        outline: featureSwitches.outlineDropdownToCheckboxes ? this.ensureOutline(visuals.TablixProperties.PropRowsOutlineStyle.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal, visuals.DefaultRowsOutlineStyle, featureSwitches.outlineDropdownToCheckboxes) : this.ensureOutline(visuals.TablixProperties.PropRowsPivotTableOutline.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal, visuals.DefaultRowsOutline, featureSwitches.outlineDropdownToCheckboxes),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropRowsOutlineColor.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal),
                        outlineWeight: this.ensureOutlineWeight(visuals.TablixProperties.PropRowsOutlineWeight.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal),
                        steppedLayout: visuals.TablixProperties.PropRowsSteppedLayout.getValue(perColumnLevelSubtotal),
                        steppedLayoutIndentation: visuals.TablixProperties.PropRowsSteppedLayoutIndentation.getValue(perColumnLevelSubtotal),
                        urlIcon: visuals.TablixProperties.PropRowsUrlIcon.getValue(perColumnLevelSubtotal),
                        wordWrap: visuals.TablixProperties.PropRowsWordWrap.getValue(perColumnLevelSubtotal),
                        alignment: visuals.TablixProperties.PropRowsAlignment.getValue(perColumnLevelSubtotal),
                        showExpandCollapseButtons: !!isEnabled && visuals.TablixProperties.PropRowsShowExpandCollapseButtons.getValue(perColumnLevelSubtotal),
                        expandCollapseButtonsColor: this.tablixProperties.PropRowsExpandCollapseButtonsColor.getValue(perColumnLevelSubtotal),
                        expandCollapseButtonsSize: rowHeaderExpandCollapseButtonsSize
                    },
                    values: {
                        fontFamily: visuals.TablixProperties.PropValuesFontFamily.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                        fontSize: valuesFontSize,
                        bold: visuals.TablixProperties.PropValuesBold.getValue(perColumnLevelSubtotal),
                        italic: visuals.TablixProperties.PropValuesItalic.getValue(perColumnLevelSubtotal),
                        underline: visuals.TablixProperties.PropValuesUnderline.getValue(perColumnLevelSubtotal),
                        fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(perColumnLevelSubtotal, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                        backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(perColumnLevelSubtotal),
                        fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(perColumnLevelSubtotal),
                        backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(perColumnLevelSubtotal),
                        bandedRowHeaders: visuals.TablixProperties.PropValuesBandedRowHeaders.getValue(perColumnLevelSubtotal),
                        outline: featureSwitches.outlineDropdownToCheckboxes ? this.ensureOutline(visuals.TablixProperties.PropValuesOutlineStyle.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal, visuals.DefaultValuesOutlineStyle, featureSwitches.outlineDropdownToCheckboxes) : this.ensureOutline(visuals.TablixProperties.PropValuesNewVisualOutline.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal, visuals.DefaultValuesOutline, featureSwitches.outlineDropdownToCheckboxes),
                        outlineColor: this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal),
                        outlineWeight: this.ensureOutlineWeight(visuals.TablixProperties.PropValuesOutlineWeight.getValue(perColumnLevelSubtotal), perColumnLevelSubtotal),
                        urlIcon: visuals.TablixProperties.PropValuesUrlIcon.getValue(perColumnLevelSubtotal),
                        wordWrap: visuals.TablixProperties.PropValuesWordWrap.getValue(perColumnLevelSubtotal),
                        valuesOnRow: visuals.TablixProperties.PropValuesOnRow.getValue(perColumnLevelSubtotal)
                    },
                    columnGrandTotal: columnGrandTotal,
                    rowGrandTotal: rowGrandTotal,
                    subtotals: {
                        rowSubtotalsPosition: visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsPosition.getValue(perColumnLevelSubtotal),
                        rowSubtotalsLabel: rowSubtotalsLabel,
                        columnSubtotalsLabel: columnSubtotalsLabel
                    },
                    rowSubtotals: rowSubtotals,
                    columnSubtotals: perRowLevelSubtotal,
                    columnFormatting: {},
                    formatters: {},
                    tooltipFormatters: {},
                    sparklines: {}
                }, perRowLevelSubtotal = this.getMatrixValuesColumnMetadata(dataView);
                if (perRowLevelSubtotal) for (var _i = 0, columns_9 = perRowLevelSubtotal; _i < columns_9.length; _i++) {
                    var column = columns_9[_i], objects_4 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_4),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_4),
                        alignment: visuals.TablixProperties.PropColumnFormattingAlignment.getValue(objects_4),
                        styleHeader: visuals.TablixProperties.PropColumnFormattingStyleHeader.getValue(objects_4),
                        styleValues: visuals.TablixProperties.PropColumnFormattingStyleValues.getValue(objects_4),
                        styleTotal: visuals.TablixProperties.PropColumnFormattingStyleTotal.getValue(objects_4),
                        styleSubTotals: visuals.TablixProperties.PropColumnFormattingStyleSubtotals.getValue(objects_4),
                        dataBarsSettings: visuals.TablixProperties.PropColumnFormattingDataBars.getValue(objects_4),
                        icon: visuals.TablixProperties.PropValuesIcon.getValue(objects_4)
                    };
                    var formatter = void 0, chartType = void 0;
                    column.type.numeric && (formatter = visuals.TablixProperties.PropColumnFormattingDisplayUnits.getValue(objects_4), 
                    chartType = visuals.TablixProperties.PropColumnFormattingPrecision.getValue(objects_4)), 
                    formattingProperties.formatters[column.queryName] = new VariantValueFormatter({
                        column: column,
                        formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                        nullsAreBlank: !1,
                        displayUnit: formatter,
                        precision: chartType,
                        trailingZeroes: !0
                    }), formattingProperties.tooltipFormatters[column.queryName] = new VariantValueFormatter({
                        column: column,
                        formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                        nullsAreBlank: !0,
                        displayUnit: formatter,
                        precision: chartType,
                        trailingZeroes: !0
                    }), null !== (formatter = column.type.misc) && void 0 !== formatter && formatter.sparkline && (chartType = visuals.TablixProperties.PropSparklinesChartType.getValue(objects_4), 
                    formatter = new SparklineTextFormatter(column.displayName, column.type, localizer), 
                    formattingProperties.formatters[column.queryName] = formatter, formattingProperties.tooltipFormatters[column.queryName] = formatter, 
                    formattingProperties.sparklines[column.queryName] = {
                        chartType: chartType,
                        dataColor: this.tablixProperties.PropSparklinesDataColor.getValue(objects_4),
                        strokeWidth: visuals.TablixProperties.PropSparklinesStrokeWidth.getValue(objects_4),
                        markers: visuals.TablixProperties.PropSparklinesMarkerType.getValue(objects_4),
                        markerColor: this.tablixProperties.PropSparklinesMarkerColor.getValue(objects_4),
                        markerSize: visuals.TablixProperties.PropSparklinesMarkerSize.getValue(objects_4),
                        markerShape: visuals.TablixProperties.PropSparklinesMarkerShape.getValue(objects_4)
                    });
                }
                perRowLevelSubtotal = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsPerLevel.getValue(perColumnLevelSubtotal), 
                perColumnLevelSubtotal = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(perColumnLevelSubtotal);
                return this.addMatrixHierarchySubtotalLabels(dataView && dataView.matrix && dataView.matrix.rows, formattingProperties.columnFormatting, rowSubtotalsLabel, perRowLevelSubtotal), 
                this.addMatrixHierarchySubtotalLabels(dataView && dataView.matrix && dataView.matrix.columns, formattingProperties.columnFormatting, columnSubtotalsLabel, perColumnLevelSubtotal), 
                this.addMatrixHierarchyColumnsFormatters(dataView.matrix.rows, formattingProperties.formatters, formattingProperties.tooltipFormatters), 
                this.addMatrixHierarchyColumnsFormatters(dataView.matrix.columns, formattingProperties.formatters, formattingProperties.tooltipFormatters), 
                formattingProperties;
            }, TablixPropertyManager.prototype.getTableExObjects = function(columns, localizer, rowWithReferenceText, featureSwitches) {
                var objects = TablixPropertyManager.getMetadataObjects(columns), textClassProperties = this.getTablixTextClassProperties(rowWithReferenceText), valuesFontSize = textClassProperties.labelFontProperties.size && textClassProperties.labelFontProperties.size.pt, totalFontSize = textClassProperties.boldLabelFontProperties.size && textClassProperties.boldLabelFontProperties.size.pt, columnHeaderFontSize = visuals.TablixProperties.PropGridPivotTableTextSize.getValue(objects), generalTextSize = null != columnHeaderFontSize ? FontSize.createFromPt(+columnHeaderFontSize) : void 0, rowWithReferenceText = visuals.TablixProperties.PropColumnsFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, valuesFontSize), columnHeaderFontSize = null != rowWithReferenceText ? FontSize.createFromPt(+rowWithReferenceText) : void 0, rowWithReferenceText = visuals.TablixProperties.PropValuesFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, valuesFontSize), valuesFontSize = null != rowWithReferenceText ? FontSize.createFromPt(+rowWithReferenceText) : void 0, rowWithReferenceText = visuals.TablixProperties.PropTotalFontSize.getValue(objects, void 0, textClassProperties.fontSizeOverrideFn, totalFontSize), totalFontSize = null != rowWithReferenceText ? FontSize.createFromPt(+rowWithReferenceText) : void 0, rowWithReferenceText = visuals.TablixProperties.ProprowWithReferenceText.getValue(objects), formattingProperties = {
                    general: {
                        autoSizeColumnWidth: visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.getValue(objects),
                        textSize: generalTextSize,
                        totals: visuals.TablixProperties.PropTotalTableExTotals.getValue(objects)
                    }
                };
                formattingProperties.grid = {
                    gridVertical: visuals.TablixProperties.PropGridVertical.getValue(objects),
                    gridVerticalColor: this.tablixProperties.PropGridVerticalColor.getValue(objects),
                    gridVerticalWeight: visuals.TablixProperties.PropGridVerticalWeight.getValue(objects),
                    gridHorizontal: visuals.TablixProperties.PropGridHorizontalTable.getValue(objects),
                    gridHorizontalColor: this.tablixProperties.PropGridHorizontalColor.getValue(objects),
                    gridHorizontalWeight: visuals.TablixProperties.PropGridHorizontalWeight.getValue(objects),
                    outline: featureSwitches.outlineDropdownToCheckboxes ? visuals.TablixProperties.PropGridOutlineStyle.getValue(objects) || visuals.DefaultGridOutlineStyle : visuals.TablixProperties.PropGridOutline.getValue(objects) || visuals.DefaultGridOutline,
                    outlineColor: this.tablixProperties.PropGridOutlineColor.getValue(objects),
                    outlineWeight: visuals.TablixProperties.PropGridOutlineWeight.getValue(objects),
                    rowPadding: visuals.TablixProperties.PropGridRowPadding.getValue(objects),
                    imageHeight: visuals.TablixProperties.PropGridImageHeight.getValue(objects)
                }, formattingProperties.columnHeaders = {
                    fontColor: this.tablixProperties.PropColumnsFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                    fontFamily: visuals.TablixProperties.PropColumnsFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                    fontSize: columnHeaderFontSize,
                    bold: visuals.TablixProperties.PropColumnsBold.getValue(objects),
                    italic: visuals.TablixProperties.PropColumnsItalic.getValue(objects),
                    underline: visuals.TablixProperties.PropColumnsUnderline.getValue(objects),
                    backColor: this.tablixProperties.PropColumnsBackColor.getValue(objects),
                    outline: featureSwitches.outlineDropdownToCheckboxes ? this.ensureOutline(visuals.TablixProperties.PropColumnsOutlineStyle.getValue(objects), objects, visuals.DefaultColumnsOutlineStyle, featureSwitches.outlineDropdownToCheckboxes) : this.ensureOutline(visuals.TablixProperties.PropColumnsNewVisualOutline.getValue(objects), objects, visuals.DefaultColumnsOutline, featureSwitches.outlineDropdownToCheckboxes),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropColumnsOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(visuals.TablixProperties.PropColumnsOutlineWeight.getValue(objects), objects),
                    wordWrap: visuals.TablixProperties.PropColumnsWordWrap.getValue(objects),
                    alignment: visuals.TablixProperties.PropColumnsAlignment.getValue(objects)
                }, formattingProperties.values = {
                    fontFamily: visuals.TablixProperties.PropValuesFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.labelFontProperties.family),
                    fontSize: valuesFontSize,
                    bold: visuals.TablixProperties.PropValuesBold.getValue(objects),
                    italic: visuals.TablixProperties.PropValuesItalic.getValue(objects),
                    underline: visuals.TablixProperties.PropValuesUnderline.getValue(objects),
                    fontColorPrimary: this.tablixProperties.PropValuesFontColorPrimary.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.labelFontProperties.color),
                    backColorPrimary: this.tablixProperties.PropValuesBackColorPrimary.getValue(objects),
                    fontColorSecondary: this.tablixProperties.PropValuesFontColorSecondary.getValue(objects),
                    backColorSecondary: this.tablixProperties.PropValuesBackColorSecondary.getValue(objects),
                    outline: featureSwitches.outlineDropdownToCheckboxes ? this.ensureOutline(visuals.TablixProperties.PropValuesOutlineStyle.getValue(objects), objects, visuals.DefaultValuesOutlineStyle, featureSwitches.outlineDropdownToCheckboxes) : this.ensureOutline(visuals.TablixProperties.PropValuesNewVisualOutline.getValue(objects), objects, visuals.DefaultValuesOutline, featureSwitches.outlineDropdownToCheckboxes),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropValuesOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(visuals.TablixProperties.PropValuesOutlineWeight.getValue(objects), objects),
                    urlIcon: visuals.TablixProperties.PropValuesUrlIcon.getValue(objects),
                    wordWrap: visuals.TablixProperties.PropValuesWordWrap.getValue(objects)
                }, formattingProperties.total = {
                    totalLabel: visuals.TablixProperties.PropTotalTableExTotalLabel.getValue(objects) || localizer(TablixUtils.TotalLabel),
                    fontFamily: visuals.TablixProperties.PropTotalFontFamily.getValue(objects, void 0, textClassProperties.fontFamilyOverrideFn, textClassProperties.boldLabelFontProperties.family),
                    fontSize: totalFontSize,
                    bold: visuals.TablixProperties.PropTotalBold.getValue(objects),
                    italic: visuals.TablixProperties.PropTotalItalic.getValue(objects),
                    underline: visuals.TablixProperties.PropTotalUnderline.getValue(objects),
                    fontColor: this.tablixProperties.PropTotalFontColor.getValue(objects, void 0, textClassProperties.fontColorOverrideFn, textClassProperties.boldLabelFontProperties.color),
                    backColor: this.tablixProperties.PropTotalBackColor.getValue(objects),
                    outline: featureSwitches.outlineDropdownToCheckboxes ? this.ensureOutline(visuals.TablixProperties.PropTotalOutlineStyle.getValue(objects), objects, visuals.DefaultTotalOutlineStyle, featureSwitches.outlineDropdownToCheckboxes) : this.ensureOutline(visuals.TablixProperties.PropTotalTableExOutline.getValue(objects), objects, visuals.DefaultTotalOutline, featureSwitches.outlineDropdownToCheckboxes),
                    outlineColor: this.ensureOutlineColor(this.tablixProperties.PropTotalOutlineColor.getValue(objects), objects),
                    outlineWeight: this.ensureOutlineWeight(visuals.TablixProperties.PropTotalOutlineWeight.getValue(objects), objects)
                }, formattingProperties.columnFormatting = {}, formattingProperties.formatters = {}, 
                formattingProperties.tooltipFormatters = {}, formattingProperties.sparklines = {};
                columns = this.getTableColumnMetadata(columns);
                if (columns) for (var _i = 0, columns_10 = columns; _i < columns_10.length; _i++) {
                    var column = columns_10[_i], objects_5 = column && column.objects;
                    formattingProperties.columnFormatting[column.queryName] = {
                        fontColor: this.tablixProperties.PropColumnFormattingFontColor.getValue(objects_5),
                        backColor: this.tablixProperties.PropColumnFormattingBackColor.getValue(objects_5),
                        alignment: visuals.TablixProperties.PropColumnFormattingAlignment.getValue(objects_5),
                        styleHeader: visuals.TablixProperties.PropColumnFormattingStyleHeader.getValue(objects_5),
                        styleValues: visuals.TablixProperties.PropColumnFormattingStyleValues.getValue(objects_5),
                        styleTotal: visuals.TablixProperties.PropColumnFormattingStyleTotal.getValue(objects_5),
                        dataBarsSettings: visuals.TablixProperties.PropColumnFormattingDataBars.getValue(objects_5),
                        icon: visuals.TablixProperties.PropValuesIcon.getValue(objects_5)
                    };
                    var formatter = void 0, chartType = void 0;
                    column.type.numeric && (formatter = visuals.TablixProperties.PropColumnFormattingDisplayUnits.getValue(objects_5), 
                    chartType = visuals.TablixProperties.PropColumnFormattingPrecision.getValue(objects_5)), 
                    formattingProperties.formatters[column.queryName] = new VariantValueFormatter({
                        column: column,
                        formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                        nullsAreBlank: !1,
                        displayUnit: formatter,
                        precision: chartType,
                        trailingZeroes: !0
                    }), formattingProperties.tooltipFormatters[column.queryName] = new VariantValueFormatter({
                        column: column,
                        formatStringPropId: visuals.TablixProperties.PropColumnFormatString,
                        nullsAreBlank: !0,
                        displayUnit: formatter,
                        precision: chartType,
                        trailingZeroes: !0
                    }), null !== (formatter = column.type.misc) && void 0 !== formatter && formatter.sparkline && (chartType = visuals.TablixProperties.PropSparklinesChartType.getValue(objects_5), 
                    formatter = new SparklineTextFormatter(column.displayName, column.type, localizer), 
                    formattingProperties.formatters[column.queryName] = formatter, formattingProperties.tooltipFormatters[column.queryName] = formatter, 
                    formattingProperties.sparklines[column.queryName] = {
                        chartType: chartType,
                        dataColor: this.tablixProperties.PropSparklinesDataColor.getValue(objects_5),
                        strokeWidth: visuals.TablixProperties.PropSparklinesStrokeWidth.getValue(objects_5),
                        markers: visuals.TablixProperties.PropSparklinesMarkerType.getValue(objects_5),
                        markerColor: this.tablixProperties.PropSparklinesMarkerColor.getValue(objects_5),
                        markerSize: visuals.TablixProperties.PropSparklinesMarkerSize.getValue(objects_5),
                        markerShape: visuals.TablixProperties.PropSparklinesMarkerShape.getValue(objects_5)
                    });
                }
                return formattingProperties.rowWithReferenceText = {
                    rowWithReferenceText: rowWithReferenceText
                }, formattingProperties;
            }, TablixPropertyManager.prototype.ensureOutline = function(currentValue, _b, defaultValue, _a) {
                return _a ? null !== (_a = null != currentValue ? currentValue : visuals.TablixProperties.PropGridOutlineStyle.getValue(_b)) && void 0 !== _a ? _a : defaultValue : null !== (_b = null != currentValue ? currentValue : visuals.TablixProperties.PropGridOutline.getValue(_b)) && void 0 !== _b ? _b : defaultValue;
            }, TablixPropertyManager.prototype.ensureOutlineWeight = function(currentValue, objects) {
                return null != currentValue ? currentValue : visuals.TablixProperties.PropGridOutlineWeight.getValue(objects);
            }, TablixPropertyManager.prototype.outlineOverrideFn = function(objects, propertyId) {
                return !!powerbi.DataViewObjects.getValue(objects, propertyId);
            }, TablixPropertyManager.prototype.ensureOutlineColor = function(currentValue, objects) {
                return null != currentValue ? currentValue : this.tablixProperties.PropGridOutlineColor.getValue(objects);
            }, TablixPropertyManager.getTextSizeInPx = function(fontSize) {
                return jsCommon.PixelConverter.toString(fontSize.px);
            }, TablixPropertyManager.prototype.shouldShowTableTotalsOption = function(columns) {
                if (columns && columns.table && !_.isEmpty(columns.table.columns)) {
                    columns = columns.table.columns;
                    if (_.some(columns, function(column) {
                        return column.discourageAggregationAcrossGroups;
                    })) return !1;
                }
                return !0;
            }, TablixPropertyManager.prototype.shouldShowRowSubtotalsOption = function(dataView) {
                return !(!dataView || DataViewMatrixUtils.getRowGroupingLevelsCount(dataView.matrix) < 1) && !this.isDiscourageAggregationAcrossGroups(dataView.matrix.rows.levels);
            }, TablixPropertyManager.prototype.shouldShowColumnSubtotalsOption = function(dataView) {
                if (!dataView || !dataView.matrix || DataViewMatrixUtils.getColumnGroupingLevelsCount(dataView.matrix.columns) < 1) return !1;
                var levels = dataView.matrix.columns.levels;
                return 1 < dataView.matrix.valueSources.length && (levels = _.initial(levels)), 
                !this.isDiscourageAggregationAcrossGroups(levels);
            }, TablixPropertyManager.prototype.isDiscourageAggregationAcrossGroups = function(lastLevel) {
                lastLevel = _.last(lastLevel);
                return lastLevel && _.some(lastLevel.sources, function(source) {
                    return source.discourageAggregationAcrossGroups;
                });
            }, TablixPropertyManager.prototype.getTablixTextClassProperties = function(style) {
                return {
                    fontSizeOverrideFn: this.fontSizeOverridePredicate(),
                    fontFamilyOverrideFn: this.fontFamilyOverridePredicate(),
                    fontColorOverrideFn: this.fontColorOverridePredicate(),
                    labelFontProperties: TextHelper.getFontPropertiesForTextClass(style, "label"),
                    boldLabelFontProperties: TextHelper.getFontPropertiesForTextClass(style, "boldLabel")
                };
            }, TablixPropertyManager.prototype.fontSizeOverridePredicate = function() {
                var _this = this;
                return function(isValuesDependentObject, propertyName, objectOverride) {
                    var currentObject = powerbi.DataViewObjects.getObject(isValuesDependentObject, propertyName.objectName), valuesOverride = powerbi.DataViewObjects.getObject(isValuesDependentObject, visuals.TablixProperties.ObjectGrid), isSubTotalsDependentObject = powerbi.DataViewObjects.getObject(isValuesDependentObject, visuals.TablixProperties.ObjectValues), subTotalsOverride = powerbi.DataViewObjects.getObject(isValuesDependentObject, visuals.TablixProperties.ObjectSubTotals), isGridDependentObject = _this.gridDependentObject(propertyName.objectName), gridOverride = powerbi.DataViewObject.getValue(valuesOverride, "textSize", void 0) && !powerbi.DataViewObject.getValue(currentObject, propertyName.propertyName, void 0, objectOverride), isValuesDependentObject = _this.valuesDependentObject(propertyName.objectName), valuesOverride = powerbi.DataViewObject.getValue(isSubTotalsDependentObject, "fontSize", void 0) && !powerbi.DataViewObject.getValue(currentObject, propertyName.propertyName, void 0, objectOverride), isSubTotalsDependentObject = _this.subTotalsDependentObject(propertyName.objectName), subTotalsOverride = _this.getSubTotalsValue(propertyName.objectName, subTotalsOverride, "fontSize", void 0) && !powerbi.DataViewObject.getValue(currentObject, propertyName.propertyName, void 0, objectOverride), propertyName = propertyName.objectName === visuals.TablixProperties.ObjectGrid ? "textSize" : "fontSize", objectOverride = !!powerbi.DataViewObject.getValue(currentObject, propertyName, void 0, objectOverride);
                    return isGridDependentObject && gridOverride || isValuesDependentObject && valuesOverride || isSubTotalsDependentObject && subTotalsOverride || objectOverride;
                };
            }, TablixPropertyManager.prototype.fontFamilyOverridePredicate = function() {
                var _this = this;
                return function(valuesOverride, subTotalsOverride, objectOverride) {
                    var currentObject = powerbi.DataViewObjects.getObject(valuesOverride, subTotalsOverride.objectName), isSubTotalsDependentObject = powerbi.DataViewObjects.getObject(valuesOverride, visuals.TablixProperties.ObjectValues), subTotalsObject = powerbi.DataViewObjects.getObject(valuesOverride, visuals.TablixProperties.ObjectSubTotals), isValuesDependentObject = _this.valuesDependentObject(subTotalsOverride.objectName), valuesOverride = powerbi.DataViewObject.getValue(isSubTotalsDependentObject, "fontFamily", void 0) && !powerbi.DataViewObject.getValue(currentObject, subTotalsOverride.propertyName, void 0), isSubTotalsDependentObject = _this.subTotalsDependentObject(subTotalsOverride.objectName), subTotalsOverride = _this.getSubTotalsValue(subTotalsOverride.objectName, subTotalsObject, "fontFamily", void 0) && !powerbi.DataViewObject.getValue(currentObject, subTotalsOverride.propertyName, void 0, objectOverride), objectOverride = !!powerbi.DataViewObject.getValue(currentObject, "fontFamily", void 0, objectOverride);
                    return isValuesDependentObject && valuesOverride || isSubTotalsDependentObject && subTotalsOverride || objectOverride;
                };
            }, TablixPropertyManager.prototype.fontColorOverridePredicate = function() {
                return function(propertyName, defaultValue, instanceId) {
                    var currentObject = powerbi.DataViewObjects.getObject(propertyName, defaultValue.objectName), propertyName = defaultValue.objectName === visuals.TablixProperties.ObjectValues ? "fontColorPrimary" : "fontColor", defaultValue = powerbi.DataViewObject.getValue(currentObject, propertyName);
                    return !!powerbi.DataViewObject.getValue(currentObject, propertyName, defaultValue, instanceId);
                };
            }, TablixPropertyManager.prototype.gridDependentObject = function(objectName) {
                return this.valuesDependentObject(objectName) || objectName === visuals.TablixProperties.ObjectRowHeaders || objectName === visuals.TablixProperties.ObjectColumnHeaders || objectName === visuals.TablixProperties.ObjectValues;
            }, TablixPropertyManager.prototype.valuesDependentObject = function(objectName) {
                return this.subTotalsDependentObject(objectName) || objectName === visuals.TablixProperties.ObjectSubTotals;
            }, TablixPropertyManager.prototype.subTotalsDependentObject = function(objectName) {
                return objectName === visuals.TablixProperties.ObjectTotal || objectName === visuals.TablixProperties.ObjectRowTotal || objectName === visuals.TablixProperties.ObjectColumnTotal;
            }, TablixPropertyManager.prototype.getSubTotalsValue = function(instanceId, subTotalsObject, propertyName, defaultValue) {
                instanceId = instanceId === visuals.TablixProperties.ObjectRowTotal ? "Row" : instanceId === visuals.TablixProperties.ObjectColumnTotal ? "Column" : void 0;
                return defaultValue = null != defaultValue ? defaultValue : powerbi.DataViewObject.getValue(subTotalsObject, propertyName), 
                powerbi.DataViewObject.getValue(subTotalsObject, propertyName, defaultValue, instanceId);
            }, TablixPropertyManager;
        }();
        visuals.TablixPropertyManager = TablixPropertyManager;
        var SparklineTextFormatter = function() {
            function SparklineTextFormatter(displayName, sparklineType, localizer) {
                this.displayName = displayName, this.sparklineType = sparklineType, this.localizer = localizer;
            }
            return SparklineTextFormatter.prototype.format = function(result, _dataPointObjects) {
                result = visuals.formatSparklines(this.displayName, this.sparklineType, result);
                if (result) return this.localizer.apply(this, __spreadArray([ result.key ], result.parameters));
            }, SparklineTextFormatter;
        }();
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            var TablixColumnWidthManager = function() {
                function TablixColumnWidthManager(dataView, isMatrix, hostPersistCallBack, matrixLeafNodes) {
                    this.columnWidthObjects = {}, this.isMatrix = isMatrix, this.updateDataView(dataView, matrixLeafNodes), 
                    this.hostPersistCallBack = hostPersistCallBack, this.visualObjectInstancesToPersist = {
                        merge: [],
                        remove: []
                    };
                }
                return TablixColumnWidthManager.prototype.updateDataView = function(dataView, matrixLeafNodes) {
                    this.previousDataView = this.currentDataView, this.previousDataView ? this.previousAutoColumnSizePropertyValue = visuals.TablixProperties.PropGeneralAutoSizeColumns.getValue(visuals.TablixPropertyManager.getMetadataObjects(this.previousDataView)) : this.previousAutoColumnSizePropertyValue = void 0, 
                    this.currentDataView = dataView, this.currentDataView ? this.currentAutoColumnSizePropertyValue = visuals.TablixProperties.PropGeneralAutoSizeColumns.getValue(visuals.TablixPropertyManager.getMetadataObjects(this.currentDataView)) : this.currentAutoColumnSizePropertyValue = void 0, 
                    this.matrixLeafNodes = matrixLeafNodes, this.updateColumnsMetadata(), this.updateTablixColumnWidths();
                }, TablixColumnWidthManager.prototype.updateColumnsMetadata = function() {
                    this.columnWidthObjects = {}, this.isMatrix ? this.updateMatrixColumnsMetadata() : this.updateTableColumnsMetadata();
                }, TablixColumnWidthManager.prototype.updateTableColumnsMetadata = function() {
                    if (this.currentDataView && this.currentDataView.table) for (var columnMetaData = this.currentDataView.table.columns, i = 0, len = columnMetaData.length; i < len; i++) {
                        var queryName = columnMetaData[i].queryName;
                        queryName && (this.columnWidthObjects[queryName] = {
                            queryName: queryName,
                            width: void 0,
                            isFixed: !1
                        });
                    }
                }, TablixColumnWidthManager.prototype.updateMatrixColumnsMetadata = function() {
                    if (this.currentDataView && this.currentDataView.matrix && this.currentDataView.matrix.rows) for (var i = 0, len = this.currentDataView.matrix.rows.levels.length; i < len; i++) {
                        var rowGroup = this.currentDataView.matrix.rows.levels[i];
                        1 === rowGroup.sources.length && (queryName = rowGroup.sources[0].queryName) && (this.columnWidthObjects[queryName] = {
                            queryName: queryName,
                            width: void 0,
                            isFixed: !1
                        });
                    }
                    if (this.matrixLeafNodes) for (var queryName, i = 0, len = this.matrixLeafNodes.length; i < len; i++) (queryName = this.matrixLeafNodes[i].queryName) && (this.columnWidthObjects[queryName] = {
                        queryName: queryName,
                        width: void 0,
                        isFixed: !1
                    });
                }, TablixColumnWidthManager.prototype.updateTablixColumnWidths = function() {
                    var columnMetaData = this.currentDataView && this.currentDataView.metadata && this.currentDataView.metadata.columns;
                    columnMetaData && (this.shouldClearAllColumnWidths() ? this.autoSizeAllColumns() : this.deserializeColumnsWidth(columnMetaData));
                }, TablixColumnWidthManager.prototype.autoSizeAllColumns = function() {
                    for (var queryName in this.columnWidthObjects) this.visualObjectInstancesToPersist.remove.push(this.generateColumnWidthObjectToPersist(queryName, void 0));
                    this.callHostToPersist();
                }, TablixColumnWidthManager.prototype.deserializeColumnsWidth = function(columnsMetadata) {
                    for (var colObj in this.columnWidthObjects) this.columnWidthObjects[colObj].isFixed = !this.currentAutoColumnSizePropertyValue, 
                    this.columnWidthObjects[colObj].width = void 0;
                    for (var i = 0, len = columnsMetadata.length; i < len; i++) {
                        var width = columnsMetadata[i], queryName = width.queryName, width = powerbi.DataViewObjects.getValue(width.objects, TablixColumnWidthManager.columnWidthProp);
                        this.columnWidthObjects.hasOwnProperty(queryName) && null != width && (this.columnWidthObjects[queryName].width = width, 
                        this.columnWidthObjects[queryName].isFixed = !0);
                    }
                }, TablixColumnWidthManager.prototype.shouldClearAllColumnWidths = function() {
                    return null != this.previousDataView && !1 === this.previousAutoColumnSizePropertyValue && null != this.currentDataView && !0 === this.currentAutoColumnSizePropertyValue;
                }, TablixColumnWidthManager.getColumnQueryName = function(column) {
                    var headerCell = column.getTablixCell();
                    switch (headerCell.type) {
                      case 0:
                        return null == headerCell.item || null == headerCell.item.metadata ? void 0 : headerCell.item.metadata.queryName;

                      case 2:
                        return headerCell.item, headerCell.item.queryName;

                      default:
                        return void headerCell.type;
                    }
                }, TablixColumnWidthManager.prototype.getColumnWidthObjects = function() {
                    return this.columnWidthObjects;
                }, TablixColumnWidthManager.prototype.getFixedColumnWidthObjects = function() {
                    var queryName, fixedOnly = {};
                    for (queryName in this.columnWidthObjects) {
                        var obj = this.columnWidthObjects[queryName];
                        obj.isFixed && (fixedOnly[queryName] = obj);
                    }
                    return fixedOnly;
                }, TablixColumnWidthManager.prototype.getPersistedColumnWidth = function(obj) {
                    obj = this.columnWidthObjects[obj];
                    return obj && obj.width;
                }, TablixColumnWidthManager.prototype.callHostToPersist = function() {
                    this.hostPersistCallBack && this.hostPersistCallBack(this.visualObjectInstancesToPersist), 
                    this.visualObjectInstancesToPersist = {
                        merge: [],
                        remove: []
                    };
                }, TablixColumnWidthManager.prototype.onColumnWidthChanged = function(queryName, width) {
                    var resizedColumn;
                    null != queryName && null != this.columnWidthObjects[queryName] && (resizedColumn = this.columnWidthObjects[queryName], 
                    -1 === width ? (resizedColumn.width = void 0, resizedColumn.isFixed = !this.currentAutoColumnSizePropertyValue, 
                    this.visualObjectInstancesToPersist.remove.push(this.generateColumnWidthObjectToPersist(resizedColumn.queryName, void 0))) : (resizedColumn.width = width, 
                    resizedColumn.isFixed = !0, this.visualObjectInstancesToPersist.merge.push(this.generateColumnWidthObjectToPersist(queryName, width))), 
                    this.callHostToPersist());
                }, TablixColumnWidthManager.prototype.onColumnsRendered = function(renderedColumns) {
                    for (var maxWidths = {}, i = 0, len = renderedColumns.length; i < len; i++) {
                        var queryName = renderedColumns[i].queryName, newWidth = renderedColumns[i].width;
                        null == maxWidths[queryName] ? maxWidths[queryName] = {
                            queryName: queryName,
                            width: newWidth,
                            isFixed: !1
                        } : newWidth > maxWidths[queryName].width && (maxWidths[queryName].width = newWidth);
                    }
                    var colWidthObj, widthChanged = !1;
                    for (queryName in this.columnWidthObjects) !maxWidths[queryName] || (colWidthObj = this.columnWidthObjects[queryName]).isFixed && null == colWidthObj.width && (colWidthObj.width = maxWidths[queryName].width, 
                    this.visualObjectInstancesToPersist.merge.push(this.generateColumnWidthObjectToPersist(queryName, colWidthObj.width)), 
                    widthChanged = !0);
                    return widthChanged && this.callHostToPersist(), widthChanged;
                }, TablixColumnWidthManager.prototype.generateColumnWidthObjectToPersist = function(queryName, width) {
                    return {
                        selector: {
                            metadata: queryName
                        },
                        objectName: "general",
                        properties: {
                            columnWidth: width
                        }
                    };
                }, TablixColumnWidthManager.columnWidthProp = {
                    objectName: "general",
                    propertyName: "columnWidth"
                }, TablixColumnWidthManager;
            }();
            controls.TablixColumnWidthManager = TablixColumnWidthManager;
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TablixUtils = powerbi.visuals.controls.internal.TablixUtils, Matrix = function() {
            function Matrix(options) {
                this.isTouchDisabled = options && options.isTouchDisabled;
            }
            return Matrix.prototype.init = function(options) {
                this.element = options.element, this.style = options.style, this.updateViewport(options.viewport), 
                this.isInteractive = options.interactivity && null != options.interactivity.selection, 
                this.hostServices = options.host, this.persistingObjects = !1, this.waitingForData = !1, 
                this.lastAllowHeaderResize = !0, this.waitingForSort = !1, this.tablixPropertyManager = new visuals.TablixPropertyManager(this.style);
            }, Matrix.getFormattingProperties = function(dataView, tablixPropertyManager) {
                return tablixPropertyManager.getMatrixObjects(dataView);
            }, Matrix.prototype.onResizing = function(finalViewport) {
                this.updateViewport(finalViewport);
            }, Matrix.prototype.getColumnWidthManager = function() {
                return this.columnWidthManager;
            }, Matrix.prototype.onDataChanged = function(rootChanged) {
                var previousDataView, formattingProperties, textSize = rootChanged.dataViews;
                textSize && 0 < textSize.length && (previousDataView = this.dataView, this.dataView = textSize[0], 
                formattingProperties = Matrix.getFormattingProperties(this.dataView, this.tablixPropertyManager), 
                this.formatters = formattingProperties.formatters, textSize = formattingProperties.general.textSize, 
                rootChanged.operationKind === powerbi.VisualDataChangeOperationKind.Append ? (rootChanged = previousDataView.matrix.rows.root !== this.dataView.matrix.rows.root, 
                this.createOrUpdateHierarchyNavigator(rootChanged), this.tablixControl.updateModels(!1, this.hierarchyNavigator.getRowHierarchy().root.children, this.hierarchyNavigator.getColumnHierarchy().root.children), 
                this.refreshControl(!1)) : (this.createOrUpdateHierarchyNavigator(!0), this.createColumnWidthManager(), 
                this.createTablixControl(formattingProperties), this.tablixControl.getBinder().onDataViewChanged(formattingProperties), 
                this.updateInternal(textSize, previousDataView))), this.waitingForData = !1, this.waitingForSort = !1;
            }, Matrix.prototype.createColumnWidthManager = function() {
                var _this = this, columnHierarchy = this.hierarchyNavigator.getColumnHierarchy();
                this.columnWidthManager ? this.persistingObjects || this.columnWidthManager.updateDataView(this.dataView, columnHierarchy.leafNodes) : this.columnWidthManager = new visuals.controls.TablixColumnWidthManager(this.dataView, !0, function(objectInstances) {
                    return _this.persistColumnWidths(objectInstances);
                }, columnHierarchy.leafNodes);
            }, Matrix.prototype.persistColumnWidths = function(objectInstances) {
                this.persistingObjects = !0, this.hostServices.persistProperties(objectInstances);
            }, Matrix.prototype.updateViewport = function(newViewport) {
                this.currentViewport = newViewport, this.tablixControl && (this.tablixControl.viewport = this.currentViewport, 
                this.verifyHeaderResize(), this.refreshControl(!1));
            }, Matrix.prototype.refreshControl = function(clear) {
                !this.element.is(":visible") && 1 !== this.getLayoutKind() || this.tablixControl.refresh(clear);
            }, Matrix.prototype.getLayoutKind = function() {
                return this.isInteractive ? 0 : 1;
            }, Matrix.prototype.createOrUpdateHierarchyNavigator = function(rootChanged) {
                var matrixNavigator = !this.dataView.metadata.segment;
                this.tablixControl ? this.hierarchyNavigator.update(this.dataView.matrix, !1, !1, !1, matrixNavigator, rootChanged, this.formatters) : (matrixNavigator = visuals.createMatrixHierarchyNavigator(this.dataView.matrix, matrixNavigator, this.formatters, this.hostServices.getLocalizedString("ListJoin_Separator"), this.tablixPropertyManager.tablixProperties, this.hostServices), 
                this.hierarchyNavigator = matrixNavigator);
            }, Matrix.prototype.createTablixControl = function(formattingProperties) {
                var textSize = formattingProperties.general.textSize;
                this.tablixControl || (this.tablixControl = this.createControl(this.hierarchyNavigator, textSize)), 
                this.tablixControl.wordWrapRowHeaders = formattingProperties.rowHeaders.wordWrap;
            }, Matrix.prototype.createControl = function(matrixNavigator, tablixOptions) {
                var _this = this, layoutKind = this.getLayoutKind(), tablixContainer = {
                    onBindRowHeader: function(item) {
                        _this.onBindRowHeader(item);
                    },
                    totalLabel: this.hostServices.getLocalizedString(TablixUtils.TotalLabel),
                    onColumnHeaderClick: function(queryName, sortDirection) {
                        return _this.onColumnHeaderClick(queryName, sortDirection);
                    },
                    showSortIcons: 0 === layoutKind,
                    tablixProperties: this.tablixPropertyManager.tablixProperties
                }, matrixBinder = new visuals.MatrixBinder(this.hierarchyNavigator, tablixContainer), layoutManager = 1 === layoutKind ? visuals.controls.internal.DashboardTablixLayoutManager.createLayoutManager(matrixBinder) : visuals.controls.internal.CanvasTablixLayoutManager.createLayoutManager(matrixBinder, this.columnWidthManager), tablixContainer = document.createElement("div");
                this.element.append(tablixContainer);
                tablixOptions = {
                    interactive: this.isInteractive,
                    enableTouchSupport: !this.isTouchDisabled,
                    layoutKind: layoutKind,
                    fontSize: visuals.TablixPropertyManager.getTextSizeInPx(tablixOptions)
                };
                return new visuals.controls.TablixControl(matrixNavigator, layoutManager, matrixBinder, tablixContainer, tablixOptions);
            }, Matrix.prototype.updateInternal = function(textSize, previousDataView) {
                var _this = this;
                1 === this.getLayoutKind() && this.tablixControl.layoutManager.adjustContentSize(visuals.converterHelper.hasImageUrlColumn(this.dataView)), 
                this.tablixControl.fontSize = visuals.TablixPropertyManager.getTextSizeInPx(textSize), 
                this.verifyHeaderResize(), this.tablixControl.updateModels(!this.persistingObjects, this.hierarchyNavigator.getRowHierarchy().root.children, this.hierarchyNavigator.getColumnHierarchy().root.children), 
                this.tablixControl.viewport = this.currentViewport;
                var shouldClearControl = this.shouldClearControl(previousDataView, this.dataView);
                setTimeout(function() {
                    _this.refreshControl(shouldClearControl);
                    var widthChanged = _this.columnWidthManager.onColumnsRendered(_this.tablixControl.layoutManager.columnWidthsToPersist);
                    _this.persistingObjects && !widthChanged && (_this.persistingObjects = !1);
                }, 0);
            }, Matrix.prototype.shouldClearControl = function(previousDataView, newDataView) {
                return !(this.waitingForSort && previousDataView && newDataView) || !powerbi.DataViewUtils.isMetadataEquivalent(previousDataView.metadata, newDataView.metadata);
            }, Matrix.prototype.onBindRowHeader = function(item) {
                this.needsMoreData(item) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, Matrix.prototype.onColumnHeaderClick = function(queryName, sortDirection) {
                this.waitingForSort = !0, this.hostServices.onCustomSort(TablixUtils.getCustomSortEventArgs(queryName, sortDirection));
            }, Matrix.prototype.needsMoreData = function(item) {
                if (this.waitingForData || !this.hierarchyNavigator.isLeaf(item) || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var loadMoreThreshold = this.tablixControl.rowDimension.getItemsCount() * TablixUtils.PreferredLoadMoreThreshold;
                return this.hierarchyNavigator.getLeafIndex(item) >= loadMoreThreshold;
            }, Matrix.prototype.enumerateObjectInstances = function(options) {
                var enumeration = new visuals.ObjectEnumerationBuilder();
                return this.dataView && this.tablixPropertyManager.enumerateObjectInstances(options, enumeration, this.dataView, visuals.controls.TablixType.Matrix), 
                enumeration.complete();
            }, Matrix.prototype.enumerateObjectRepetition = function() {
                var enumeration = [];
                return this.dataView && this.tablixPropertyManager.enumerateObjectRepetition(enumeration, this.dataView, visuals.controls.TablixType.Matrix), 
                enumeration;
            }, Matrix.prototype.shouldAllowHeaderResize = function() {
                return 1 === this.hostServices.getViewMode();
            }, Matrix.prototype.onViewModeChanged = function(viewMode) {
                this.tablixControl && this.tablixControl.toggleTouchBindings(1 !== viewMode), this.updateViewport(this.currentViewport);
            }, Matrix.prototype.verifyHeaderResize = function() {
                var currentAllowHeaderResize = this.shouldAllowHeaderResize();
                currentAllowHeaderResize !== this.lastAllowHeaderResize && (this.lastAllowHeaderResize = currentAllowHeaderResize, 
                this.tablixControl.layoutManager.setAllowHeaderResize(currentAllowHeaderResize));
            }, Matrix;
        }();
        visuals.Matrix = Matrix;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var MatrixStyler, CellStyle = powerbi.visuals.controls.internal.TablixUtils.CellStyle, EdgeSettings = powerbi.visuals.controls.internal.TablixUtils.EdgeSettings, EdgeType = powerbi.visuals.controls.internal.TablixUtils.EdgeType, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, UrlScheme = jsCommon.UrlUtils.UrlScheme, UrlUtils = jsCommon.UrlUtils;
        !function(MatrixStyler) {
            function isEvenRow(rowIndex, general, backColor) {
                rowIndex = general.rowSubtotals && backColor ? rowIndex.row.indexInSiblings : rowIndex.row.index;
                return rowIndex < 0 || rowIndex % 2 == 0;
            }
            function getBandingFontColor(isEvenRow, values) {
                return isEvenRow ? values.fontColorPrimary : values.fontColorSecondary;
            }
            function getBandingBackColor(isEvenRow, values) {
                return isEvenRow ? values.backColorPrimary : values.backColorSecondary;
            }
            MatrixStyler.setRowHeaderStyle = function(shouldApplyBanding, item, style, isSteppedLayout, formattingProperties, applyBanding) {
                void 0 === applyBanding && (applyBanding = !1);
                var shouldApplyBandingFontColor = formattingProperties.grid, propsHeaders = formattingProperties.rowHeaders, propsValues = formattingProperties.values, propsCols = formattingProperties.columnHeaders, isEven = null !== (isGrandTotal = formattingProperties.grandTotal) && void 0 !== isGrandTotal ? isGrandTotal : formattingProperties.rowGrandTotal, shouldApplyBandingBackColor = formattingProperties.subtotals || {}, subtotalsBackColor = formattingProperties.rowSubtotals || {}, bandingDefined = null !== (isSubtotalFontColorApplied = propsHeaders.outlineWeight) && void 0 !== isSubtotalFontColorApplied ? isSubtotalFontColorApplied : shouldApplyBandingFontColor.outlineWeight, isSubtotalFontColorApplied = null !== (isGrandTotal = propsHeaders.outlineColor) && void 0 !== isGrandTotal ? isGrandTotal : shouldApplyBandingFontColor.outlineColor;
                style.paddings.top = style.paddings.bottom = shouldApplyBandingFontColor.rowPadding;
                var isGrandTotal = visuals.MatrixHierarchyNavigator.isNodeGrandTotal(item);
                style.borders.top = new EdgeSettings(), (shouldApplyBanding.row.isFirst && !isSteppedLayout || isSteppedLayout && 0 === item.leafIndex) && (style.borders.top.applyParams(visuals.outline.showTop(propsHeaders.outline), bandingDefined, isSubtotalFontColorApplied, EdgeType.Outline), 
                !visuals.outline.showTop(propsHeaders.outline) && visuals.outline.showTop(propsValues.outline) && (style.paddings.top += bandingDefined)), 
                style.borders.bottom = new EdgeSettings(), shouldApplyBanding.row.isLast && (!isSteppedLayout || shouldApplyBanding.column.isLast && !formattingProperties.general.rowSubtotals) || isSteppedLayout && shouldApplyBanding.row.isFirst && item.isSubtotal ? (style.borders.bottom.applyParams(visuals.outline.showBottom(propsHeaders.outline), bandingDefined, isSubtotalFontColorApplied, EdgeType.Outline), 
                !visuals.outline.showBottom(propsHeaders.outline) && visuals.outline.showBottom(propsValues.outline) && (style.paddings.bottom += bandingDefined)) : style.borders.bottom.applyParams(shouldApplyBandingFontColor.gridHorizontal, shouldApplyBandingFontColor.gridHorizontalWeight, shouldApplyBandingFontColor.gridHorizontalColor, EdgeType.Gridline), 
                style.borders.left = new EdgeSettings(), (isSteppedLayout || shouldApplyBanding.column.isFirst) && (style.borders.left.applyParams(visuals.outline.showLeft(propsHeaders.outline), bandingDefined, isSubtotalFontColorApplied, EdgeType.Outline), 
                !visuals.outline.showLeft(propsHeaders.outline) && visuals.outline.showLeft(propsCols.outline) && (style.paddings.left += bandingDefined)), 
                style.borders.right = new EdgeSettings(), (shouldApplyBanding = isSteppedLayout || shouldApplyBanding.column.isLast) ? style.borders.right.applyParams(visuals.outline.showRight(propsHeaders.outline), bandingDefined, isSubtotalFontColorApplied, EdgeType.Outline) : style.borders.right.applyParams(shouldApplyBandingFontColor.gridVertical, shouldApplyBandingFontColor.gridVerticalWeight, shouldApplyBandingFontColor.gridVerticalColor, EdgeType.Gridline), 
                isEven.applyToHeaders && isGrandTotal ? (style.fontColor = isEven.fontColor || propsHeaders.fontColor, 
                style.backColor = isEven.backColor || propsHeaders.backColor) : (bandingDefined = propsValues.fontColorPrimary !== propsValues.fontColorSecondary || propsValues.backColorPrimary !== propsValues.backColorSecondary, 
                shouldApplyBandingFontColor = null !== (isSubtotalFontColorApplied = subtotalsBackColor.fontColor) && void 0 !== isSubtotalFontColorApplied ? isSubtotalFontColorApplied : shouldApplyBandingBackColor.fontColor, 
                isSubtotalFontColorApplied = item.hasSubtotalStyle && shouldApplyBandingFontColor, 
                shouldApplyBandingFontColor = isGrandTotal && isEven.fontColor, subtotalsBackColor = null !== (subtotalsBackColor = subtotalsBackColor.backColor) && void 0 !== subtotalsBackColor ? subtotalsBackColor : shouldApplyBandingBackColor.backColor, 
                shouldApplyBandingBackColor = item.hasSubtotalStyle && subtotalsBackColor, isEven = isGrandTotal && isEven.backColor, 
                shouldApplyBandingBackColor = (shouldApplyBanding = applyBanding && bandingDefined && shouldApplyBanding) && !shouldApplyBandingBackColor && !isEven, 
                isEven = void 0, ((shouldApplyBandingFontColor = shouldApplyBanding && !isSubtotalFontColorApplied && !shouldApplyBandingFontColor) || shouldApplyBandingBackColor) && (isEven = isEvenRow(item.position, formattingProperties.general, subtotalsBackColor)), 
                style.fontColor = shouldApplyBandingFontColor ? getBandingFontColor(isEven, propsValues) : propsHeaders.fontColor, 
                style.backColor = shouldApplyBandingBackColor ? getBandingBackColor(isEven, propsValues) : propsHeaders.backColor);
            }, MatrixStyler.setColumnHeaderStyle = function(position, isGrandTotal, style, columnFormatting) {
                var propsGrid = columnFormatting.grid, propsColumnHeaders = columnFormatting.columnHeaders, propsValues = columnFormatting.values, propsGrandTotal = null !== (outlineWeight = columnFormatting.grandTotal) && void 0 !== outlineWeight ? outlineWeight : columnFormatting.columnGrandTotal, outlineWeight = null !== (outlineColor = propsColumnHeaders.outlineWeight) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineWeight, outlineColor = null !== (outlineColor = propsColumnHeaders.outlineColor) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineColor, columnFormatting = columnFormatting.columnFormatting[isGrandTotal.queryName], isGrandTotal = visuals.MatrixHierarchyNavigator.isNodeGrandTotal(isGrandTotal);
                columnFormatting && columnFormatting.styleHeader && columnFormatting.fontColor ? style.fontColor = columnFormatting.fontColor : propsGrandTotal.applyToHeaders && isGrandTotal ? style.fontColor = propsGrandTotal.fontColor || propsColumnHeaders.fontColor : style.fontColor = propsColumnHeaders.fontColor, 
                columnFormatting && columnFormatting.styleHeader && columnFormatting.backColor ? style.backColor = columnFormatting.backColor : propsGrandTotal.applyToHeaders && isGrandTotal ? style.backColor = propsGrandTotal.backColor || propsColumnHeaders.backColor : style.backColor = propsColumnHeaders.backColor, 
                style.paddings.top = style.paddings.bottom = propsGrid.rowPadding, style.borders.top = new EdgeSettings(), 
                position.row.isFirst && style.borders.top.applyParams(visuals.outline.showTop(propsColumnHeaders.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                style.borders.bottom = new EdgeSettings(), position.row.isLast ? style.borders.bottom.applyParams(visuals.outline.showBottom(propsColumnHeaders.outline), outlineWeight, outlineColor, EdgeType.Outline) : style.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, EdgeType.Gridline), 
                style.borders.left = new EdgeSettings(), position.column.isFirst && !visuals.outline.showLeft(propsColumnHeaders.outline) && visuals.outline.showLeft(propsValues.outline) && (style.paddings.left += outlineWeight), 
                style.borders.right = new EdgeSettings(), position.column.isLast ? (style.borders.right.applyParams(visuals.outline.showRight(propsColumnHeaders.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                !visuals.outline.showRight(propsColumnHeaders.outline) && visuals.outline.showRight(propsValues.outline) && (style.paddings.right += outlineWeight)) : style.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, EdgeType.Gridline);
            }, MatrixStyler.setBodyCellStyle = function(position, item, style, steppedLayout, grandTotalProperties) {
                var columnBackColor, columnFontColor, subtotalsFontColor, columnFormatting = grandTotalProperties.grid, _g = grandTotalProperties.values, propsRows = grandTotalProperties.rowHeaders, propsColumns = grandTotalProperties.columnHeaders, bandingFontColor = grandTotalProperties.rowSubtotals || {}, _d = grandTotalProperties.columnSubtotals || {}, bandingBackColor = grandTotalProperties.subtotals || {}, outlineWeight = null !== (outlineColor = _g.outlineWeight) && void 0 !== outlineColor ? outlineColor : columnFormatting.outlineWeight, outlineColor = null !== (outlineColor = _g.outlineColor) && void 0 !== outlineColor ? outlineColor : columnFormatting.outlineColor;
                style.paddings.top = style.paddings.bottom = columnFormatting.rowPadding, style.borders.top = new EdgeSettings(), 
                position.row.isFirst && (style.borders.top.applyParams(visuals.outline.showTop(_g.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                !visuals.outline.showTop(_g.outline) && visuals.outline.showTop(propsRows.outline) && (style.paddings.top += outlineWeight)), 
                style.borders.bottom = new EdgeSettings(), position.row.isLast && (!steppedLayout || !grandTotalProperties.general.rowSubtotals) || steppedLayout && item.isRowGrandTotal ? (style.borders.bottom.applyParams(visuals.outline.showBottom(_g.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                !visuals.outline.showBottom(_g.outline) && visuals.outline.showBottom(propsRows.outline) && (style.paddings.bottom += outlineWeight)) : style.borders.bottom.applyParams(columnFormatting.gridHorizontal, columnFormatting.gridHorizontalWeight, columnFormatting.gridHorizontalColor), 
                style.borders.left = new EdgeSettings(), position.column.isFirst && style.borders.left.applyParams(visuals.outline.showLeft(_g.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                style.borders.right = new EdgeSettings(), position.column.isLast ? (style.borders.right.applyParams(visuals.outline.showRight(_g.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                !visuals.outline.showRight(_g.outline) && visuals.outline.showRight(propsColumns.outline) && (style.paddings.right += outlineWeight)) : style.borders.right.applyParams(columnFormatting.gridVertical, columnFormatting.gridVerticalWeight, columnFormatting.gridVerticalColor, EdgeType.Gridline), 
                (columnFormatting = item.columnMetadata && grandTotalProperties.columnFormatting[item.columnMetadata.queryName]) && (columnBackColor = item.isGrandTotal ? (columnFontColor = columnFormatting.styleTotal && columnFormatting.fontColor, 
                columnFormatting.styleTotal && columnFormatting.backColor) : item.hasSubtotalStyle ? (columnFontColor = columnFormatting.styleSubTotals && columnFormatting.fontColor, 
                columnFormatting.styleSubTotals && columnFormatting.backColor) : (columnFontColor = columnFormatting.styleValues && columnFormatting.fontColor, 
                columnFormatting.styleValues && columnFormatting.backColor));
                var subtotalsBackColor = item.hasColumnSubtotalStyle ? (subtotalsFontColor = null !== (subtotalsFontColor = _d.fontColor) && void 0 !== subtotalsFontColor ? subtotalsFontColor : bandingBackColor.fontColor, 
                null !== (_d = _d.backColor) && void 0 !== _d ? _d : bandingBackColor.backColor) : item.hasRowSubtotalStyle ? (subtotalsFontColor = null !== (subtotalsBackColor = bandingFontColor.fontColor) && void 0 !== subtotalsBackColor ? subtotalsBackColor : bandingBackColor.fontColor, 
                null !== (subtotalsBackColor = bandingFontColor.backColor) && void 0 !== subtotalsBackColor ? subtotalsBackColor : bandingBackColor.backColor) : (subtotalsFontColor = bandingBackColor.fontColor, 
                bandingBackColor.backColor), bandingFontColor = getBandingFontColor(bandingBackColor = isEvenRow(item.position, grandTotalProperties.general, null != subtotalsBackColor ? subtotalsBackColor : bandingFontColor.backColor), _g), bandingBackColor = getBandingBackColor(bandingBackColor, _g);
                item.isGrandTotal ? (grandTotalProperties = null !== (_g = grandTotalProperties.grandTotal) && void 0 !== _g ? _g : item.isColumnGrandTotal ? grandTotalProperties.columnGrandTotal : grandTotalProperties.rowGrandTotal, 
                style.fontColor = item.fontColor || columnFontColor || grandTotalProperties.fontColor || subtotalsFontColor || bandingFontColor, 
                style.backColor = item.backColor || columnBackColor || grandTotalProperties.backColor || subtotalsBackColor || bandingBackColor) : item.hasSubtotalStyle ? (style.fontColor = item.fontColor || columnFontColor || subtotalsFontColor || bandingFontColor, 
                style.backColor = item.backColor || columnBackColor || subtotalsBackColor || bandingBackColor) : (style.fontColor = item.fontColor || columnFontColor || bandingFontColor, 
                style.backColor = item.backColor || columnBackColor || bandingBackColor);
            }, MatrixStyler.setCornerCellStyle = function(position, style, isSteppedLayout, outlineWeight) {
                var propsGrid = outlineWeight.grid, propsCol = outlineWeight.columnHeaders, propsRow = outlineWeight.rowHeaders, outlineWeight = null !== (outlineColor = propsCol.outlineWeight) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineWeight, outlineColor = null !== (outlineColor = propsCol.outlineColor) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineColor;
                style.fontColor = propsCol.fontColor || propsRow.fontColor, style.backColor = propsCol.backColor || propsRow.backColor, 
                style.paddings.top = style.paddings.bottom = propsGrid.rowPadding, style.borders.top = new EdgeSettings(), 
                position.row.isFirst && style.borders.top.applyParams(visuals.outline.showTop(propsCol.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                style.borders.bottom = new EdgeSettings(), position.row.isLast ? style.borders.bottom.applyParams(visuals.outline.showBottom(propsCol.outline), outlineWeight, outlineColor, EdgeType.Outline) : style.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, EdgeType.Gridline), 
                style.borders.left = new EdgeSettings(), (position.column.isFirst || isSteppedLayout) && (style.borders.left.applyParams(visuals.outline.showLeft(propsCol.outline), outlineWeight, outlineColor, EdgeType.Outline), 
                !visuals.outline.showLeft(propsCol.outline) && visuals.outline.showLeft(propsRow.outline) && (style.paddings.left += outlineWeight)), 
                style.borders.right = new EdgeSettings(), style.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, EdgeType.Gridline);
            };
        }(MatrixStyler = visuals.MatrixStyler || (visuals.MatrixStyler = {}));
        var MatrixBinder = function() {
            function MatrixBinder(hierarchyNavigator, options) {
                this.hierarchyNavigator = hierarchyNavigator, this.options = options;
            }
            return MatrixBinder.prototype.onDataViewChanged = function(formattingProperties) {
                this.formattingProperties = formattingProperties, this.updateTextHeights();
            }, MatrixBinder.prototype.updateTextHeights = function() {
                this.fontSizeHeader = this.formattingProperties.general.textSize.px, this.textPropsHeader = {
                    fontFamily: TablixUtils.FontFamilyHeader,
                    fontSize: jsCommon.PixelConverter.toString(this.fontSizeHeader)
                }, this.textHeightHeader = Math.ceil(powerbi.TextMeasurementService.measureSvgTextHeight(this.textPropsHeader, "a")), 
                this.fontSizeValue = this.formattingProperties.general.textSize.px, this.textPropsValue = {
                    fontFamily: TablixUtils.FontFamilyCell,
                    fontSize: jsCommon.PixelConverter.toString(this.fontSizeValue)
                }, this.textHeightValue = Math.ceil(powerbi.TextMeasurementService.measureSvgTextHeight(this.textPropsValue, "a")), 
                this.fontSizeTotal = this.formattingProperties.general.textSize.px, this.textPropsTotal = {
                    fontFamily: TablixUtils.FontFamilyTotal,
                    fontSize: jsCommon.PixelConverter.toString(this.fontSizeTotal)
                }, this.textHeightTotal = Math.ceil(powerbi.TextMeasurementService.measureSvgTextHeight(this.textPropsTotal, "a"));
            }, MatrixBinder.prototype.onStartRenderingSession = function() {}, MatrixBinder.prototype.onEndRenderingSession = function() {}, 
            MatrixBinder.prototype.bindRowHeader = function(item, cell) {
                TablixUtils.resetCellCssClass(cell);
                var tablixProp = this.options.tablixProperties, cellStyle = new CellStyle();
                this.hierarchyNavigator && this.hierarchyNavigator.isLeaf(item) && (TablixUtils.addCellCssClass(cell, TablixUtils.CssClassMatrixRowHeaderLeaf), 
                cellStyle.borders.right = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, tablixProp.PropGridOutlineColor.getValue(null))), 
                item.isSubtotal && (cellStyle.paddings.left = TablixUtils.CellPaddingLeftMatrixTotal), 
                cell.contentWidth = 0, this.bindHeader(item, cell, cell.extension.contentHost, this.hierarchyNavigator.getRowHeaderMetadataColumn(item), cellStyle), 
                cell.contentWidth = Math.ceil(cell.contentWidth), this.options.onBindRowHeader && this.options.onBindRowHeader(item), 
                MatrixStyler.setRowHeaderStyle(cell.position, item, cellStyle, !1, this.formattingProperties), 
                cell.applyStyle(cellStyle);
            }, MatrixBinder.prototype.unbindRowHeader = function(item, cell) {
                TablixUtils.clearCellStyle(cell), TablixUtils.clearCellTextAndTooltip(cell);
            }, MatrixBinder.prototype.bindColumnHeader = function(item, cell) {
                TablixUtils.resetCellCssClass(cell);
                var cellStyle = new CellStyle(), sortableHeaderColumnMetadata = this.options.tablixProperties, overwriteTotalLabel = !1, cellElement = cell.extension.contentHost;
                (cellElement = TablixUtils.appendDiv(cellElement)).classList.add(TablixUtils.CssClassWrappingContainer), 
                cell.contentWidth = 0, this.hierarchyNavigator && this.hierarchyNavigator.isLeaf(item) && (cellStyle.borders.bottom = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, sortableHeaderColumnMetadata.PropGridOutlineColor.getValue(null)), 
                TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixColumnHeaderLeaf), TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixValueNumeric), 
                !this.options.showSortIcons || (sortableHeaderColumnMetadata = this.getSortableHeaderColumnMetadata(item)) && (this.registerColumnHeaderClickHandler(sortableHeaderColumnMetadata, cell), 
                cellElement = TablixUtils.addSortIconToColumnHeader(sortableHeaderColumnMetadata.sort, cellElement), 
                sortableHeaderColumnMetadata.sort && (cell.contentWidth = this.fontSizeHeader + TablixUtils.SortIconPadding)), 
                item.isSubtotal && item.parent && 1 < item.parent.children.length && item.parent.children[0].isSubtotal && (overwriteTotalLabel = !0)), 
                cell.extension.disableDragResize(), this.bindHeader(item, cell, cellElement, this.hierarchyNavigator.getColumnHeaderMetadataColumn(item), cellStyle, overwriteTotalLabel), 
                cell.contentWidth = Math.ceil(cell.contentWidth), MatrixStyler.setColumnHeaderStyle(cell.position, item, cellStyle, this.formattingProperties), 
                cell.applyStyle(cellStyle);
            }, MatrixBinder.prototype.unbindColumnHeader = function(item, cell) {
                TablixUtils.clearCellStyle(cell), TablixUtils.clearCellTextAndTooltip(cell), this.getSortableHeaderColumnMetadata(item) && this.unregisterColumnHeaderClickHandler(cell), 
                this.options.showSortIcons && TablixUtils.removeSortIcons(cell);
            }, MatrixBinder.prototype.bindHeader = function(item, cell, cellElement, metadata, style, value) {
                TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixHeader), style.fontFamily = TablixUtils.FontFamilyHeader, 
                style.fontColor = TablixUtils.FontColorHeaders;
                var imgHeight = this.formattingProperties.grid.imageHeight;
                if (visuals.converterHelper.isImageUrlColumn(metadata) ? cell.contentHeight = imgHeight : item.hasSubtotalStyle ? cell.contentHeight = this.textHeightTotal : cell.contentHeight = this.textHeightValue, 
                item.hasSubtotalStyle && (TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixValueTotal), 
                style.fontFamily = TablixUtils.FontFamilyTotal), item.isSubtotal && !value) return TablixUtils.setCellTextAndTooltip(this.options.totalLabel, cellElement, cell.extension.contentHost), 
                void (cell.contentWidth = powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsTotal, this.options.totalLabel));
                value = this.getHeaderLabel(item);
                if (value) return TablixUtils.getUrlScheme(metadata, value) !== UrlScheme.NONE ? (TablixUtils.appendATagToBodyCell(value, cellElement), 
                void (cell.contentWidth += powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsHeader, value))) : visuals.converterHelper.isImageUrlColumn(metadata) && UrlUtils.isValidImageUrl(value) ? (TablixUtils.appendImgTagToBodyCell(item.valueFormatted, cellElement, imgHeight), 
                void (cell.contentWidth += imgHeight * TablixUtils.ImageDefaultAspectRatio)) : (TablixUtils.setCellTextAndTooltip(value, cellElement, cell.extension.contentHost), 
                void (cell.contentWidth += powerbi.TextMeasurementService.measureSvgTextWidth(item.hasSubtotalStyle ? this.textPropsTotal : this.textPropsHeader, value)));
                cellElement.innerHTML = TablixUtils.StringNonBreakingSpace;
            }, MatrixBinder.prototype.applyWordWrapping = function(maxWidth, cell) {
                if (null != cell.containerWidth && cell.containerWidth, null != cell.containerHeight && cell.containerHeight, 
                1 === cell.type) {
                    var maxLines = this.hierarchyNavigator.getRowHeaderMetadataColumn(maxWidth);
                    if (!visuals.converterHelper.isWebUrlColumn(maxLines) && !visuals.converterHelper.isImageUrlColumn(maxLines)) {
                        var containerElement = cell.extension.contentHost;
                        visuals.controls.HTMLElementUtils.clearChildren(containerElement);
                        var text = maxWidth.valueFormatted, maxLines = new CellStyle();
                        MatrixStyler.setRowHeaderStyle(maxWidth.position, maxWidth, maxLines, !1, this.formattingProperties);
                        for (var maxWidth = cell.containerWidth - (maxLines.getExtraRight() + maxLines.getExtraLeft()), maxLines = cell.containerHeight - (maxLines.getExtraTop() + maxLines.getExtraBottom()), maxLines = Math.floor(maxLines / this.textHeightHeader), _i = 0, lines_1 = jsCommon.WordBreaker.splitByWidth(text, this.textPropsHeader, powerbi.TextMeasurementService.measureSvgTextWidth, maxWidth, maxLines, null, !0); _i < lines_1.length; _i++) {
                            var line = lines_1[_i];
                            TablixUtils.appendDiv(containerElement, line);
                        }
                    }
                }
            }, MatrixBinder.prototype.registerColumnHeaderClickHandler = function(columnMetadata, cell) {
                var _this = this;
                this.options.onColumnHeaderClick && cell.extension.registerClickHandler(function(sortDirection) {
                    TablixUtils.isValidSortClick(sortDirection) && (sortDirection = TablixUtils.reverseSort(columnMetadata.sort), 
                    _this.options.onColumnHeaderClick(columnMetadata.queryName || columnMetadata.displayName, sortDirection));
                });
            }, MatrixBinder.prototype.unregisterColumnHeaderClickHandler = function(cell) {
                this.options.onColumnHeaderClick && cell.extension.unregisterClickHandler();
            }, MatrixBinder.prototype.bindBodyCell = function(item, cell) {
                TablixUtils.resetCellCssClass(cell);
                var cellStyle = new TablixUtils.CellStyle();
                cell.contentHeight = this.textHeightValue;
                var textProps, textContent = item.kpiContent;
                textContent ? ($(cell.extension.contentHost).append(textContent), cell.contentWidth = this.fontSizeValue) : (textProps = this.textPropsValue, 
                TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixValueNumeric), item.isTotal && (TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixValueTotal), 
                cellStyle.fontFamily = TablixUtils.FontFamilyTotal, cell.contentHeight = this.textHeightTotal, 
                textProps = this.textPropsTotal), (textContent = item.textContent) && (TablixUtils.setCellTextAndTooltip(textContent, cell.extension.contentHost), 
                cell.contentWidth = powerbi.TextMeasurementService.measureSvgTextWidth(textProps, textContent))), 
                cell.contentWidth = Math.ceil(cell.contentWidth), MatrixStyler.setBodyCellStyle(cell.position, item, cellStyle, !1, this.formattingProperties), 
                cell.applyStyle(cellStyle);
            }, MatrixBinder.prototype.unbindBodyCell = function(item, cell) {
                TablixUtils.clearCellStyle(cell), TablixUtils.clearCellTextAndTooltip(cell);
            }, MatrixBinder.prototype.bindCornerCell = function(item, cell) {
                TablixUtils.resetCellCssClass(cell);
                var cornerHeaderMetadata = this.options.tablixProperties, cellStyle = new CellStyle();
                cellStyle.fontFamily = TablixUtils.FontFamilyHeader, cellStyle.fontColor = TablixUtils.FontColorHeaders, 
                cell.contentHeight = this.textHeightHeader, cell.contentWidth = 0;
                var cellElement = cell.extension.contentHost;
                (cellElement = TablixUtils.appendDiv(cellElement)).classList.add(TablixUtils.CssClassWrappingContainer), 
                item.isColumnHeaderLeaf && (TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixColumnHeaderLeaf), 
                cellStyle.borders.bottom = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, cornerHeaderMetadata.PropGridOutlineColor.getValue(null)), 
                !this.options.showSortIcons || (cornerHeaderMetadata = this.getSortableCornerColumnMetadata(item)) && (this.registerColumnHeaderClickHandler(cornerHeaderMetadata, cell), 
                cellElement = TablixUtils.addSortIconToColumnHeader(cornerHeaderMetadata ? cornerHeaderMetadata.sort : void 0, cellElement), 
                cornerHeaderMetadata.sort && (cell.contentWidth = this.fontSizeHeader + TablixUtils.SortIconPadding))), 
                TablixUtils.setCellTextAndTooltip(item.displayName, cellElement, cell.extension.contentHost), 
                cell.contentWidth += powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsHeader, item.displayName), 
                cell.contentWidth = Math.ceil(cell.contentWidth), item.isRowHeaderLeaf && TablixUtils.addCellCssClass(cell, TablixUtils.CssClassMatrixRowHeaderLeaf), 
                TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixHeader), MatrixStyler.setCornerCellStyle(cell.position, cellStyle, !1, this.formattingProperties), 
                cell.applyStyle(cellStyle), cell.extension.disableDragResize();
            }, MatrixBinder.prototype.unbindCornerCell = function(item, cell) {
                TablixUtils.clearCellStyle(cell), TablixUtils.clearCellTextAndTooltip(cell), this.options.showSortIcons && TablixUtils.removeSortIcons(cell), 
                item.isColumnHeaderLeaf && this.unregisterColumnHeaderClickHandler(cell);
            }, MatrixBinder.prototype.bindEmptySpaceHeaderCell = function(cell) {}, MatrixBinder.prototype.unbindEmptySpaceHeaderCell = function(cell) {}, 
            MatrixBinder.prototype.bindEmptySpaceFooterCell = function(cell) {}, MatrixBinder.prototype.unbindEmptySpaceFooterCell = function(cell) {}, 
            MatrixBinder.prototype.getHeaderLabel = function(item) {
                return item.valueFormatted;
            }, MatrixBinder.prototype.getCellContent = function(item) {
                return item.textContent || "";
            }, MatrixBinder.prototype.hasRowGroups = function() {
                var rows = this.hierarchyNavigator.getRowHierarchy();
                return !(!rows || !rows.levels || 0 === rows.levels.length);
            }, MatrixBinder.prototype.getSortableCornerColumnMetadata = function(item) {
                if (item.isColumnHeaderLeaf) return item.metadata;
            }, MatrixBinder.prototype.getSortableHeaderColumnMetadata = function(item) {
                var columnGroupCount = this.hierarchyNavigator.getRowHierarchy();
                if (!columnGroupCount || !columnGroupCount.levels || 0 === columnGroupCount.levels.length) return null;
                var valueSources = this.hierarchyNavigator.getValueSources(), isMultiMeasure = valueSources && 1 < valueSources.length, valueIndex = this.hierarchyNavigator.getColumnHierarchy(), columnGroupCount = valueIndex ? valueIndex.levels.length : 0;
                isMultiMeasure ? columnGroupCount-- : 1 === columnGroupCount && valueIndex.levels[0] && valueIndex.levels[0].sources && valueIndex.levels[0].sources[0] && valueIndex.levels[0].sources[0].roles && valueIndex.levels[0].sources[0].roles.Values && (columnGroupCount = 0);
                valueIndex = -1;
                return 0 === columnGroupCount ? valueIndex = item.levelSourceIndex : item.isSubtotal && (isMultiMeasure ? item.parent && 0 === item.parent.level && (valueIndex = item.levelSourceIndex) : 0 === item.level && (valueIndex = item.levelSourceIndex)), 
                -1 !== valueIndex ? valueSources[valueIndex = valueIndex || 0] : null;
            }, MatrixBinder;
        }();
        visuals.MatrixBinder = MatrixBinder;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var CellPosition = powerbi.visuals.controls.internal.TablixUtils.CellPosition, MatrixVisualBodyItem = function(_super) {
            function MatrixVisualBodyItem(dataPoint, objects, rowItem, columnItem, columnMetadata, hostServices, formatter, tooltipFormatter) {
                var _b, rowGreatestParent, columnGreatestParent, _this = this;
                if (rowItem) for (rowGreatestParent = rowItem; rowGreatestParent.parent; ) rowGreatestParent = rowGreatestParent.parent;
                if (columnItem) for (columnGreatestParent = columnItem; columnGreatestParent.parent; ) columnGreatestParent = columnGreatestParent.parent;
                var isColumnGrandTotal = columnGreatestParent && !!columnGreatestParent.isSubtotal, isColumnSubtotal = !isColumnGrandTotal && columnItem && !!columnItem.isSubtotal, isRowGrandTotal = rowGreatestParent && !!rowGreatestParent.isSubtotal, isRowSubtotal = !isRowGrandTotal && rowItem && !!rowItem.isSubtotal;
                return _.isString(dataPoint) && null !== (_b = null === (_b = null == columnMetadata ? void 0 : columnMetadata.type) || void 0 === _b ? void 0 : _b.misc) && void 0 !== _b && _b.sparkline && (dataPoint = visuals.PivotTableBinderUtils.parseSparklineData(dataPoint, hostServices)), 
                (_this = _super.call(this, dataPoint, objects, isRowSubtotal, isColumnSubtotal, isRowGrandTotal, isColumnGrandTotal, columnMetadata, formatter, tooltipFormatter, 0) || this).rowItem = rowItem, 
                _this.columnItem = columnItem, _this.hasRowSubtotalStyle = rowItem && rowItem.hasSubtotalStyle, 
                _this.hasColumnSubtotalStyle = columnItem && columnItem.hasSubtotalStyle, _this.hasSubtotalStyle = _this.hasRowSubtotalStyle || _this.hasColumnSubtotalStyle, 
                _this;
            }
            return __extends(MatrixVisualBodyItem, _super), Object.defineProperty(MatrixVisualBodyItem.prototype, "isMeasure", {
                get: function() {
                    return !0;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(MatrixVisualBodyItem.prototype, "isValidUrl", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(MatrixVisualBodyItem.prototype, "isValidImage", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), MatrixVisualBodyItem;
        }(powerbi.visuals.controls.internal.TablixUtils.TablixVisualCell);
        visuals.MatrixVisualBodyItem = MatrixVisualBodyItem, visuals.createMatrixHierarchyNavigator = function(matrix, isDataComplete, formatters, compositeGroupSeparator, tablixProperties, hierarchyNavigator, update, tooltipFormatters, subtotalByColumn) {
            return void 0 === update && (update = !0), hierarchyNavigator = new MatrixHierarchyNavigator(compositeGroupSeparator, tablixProperties, hierarchyNavigator), 
            update && hierarchyNavigator.update(matrix, !1, !1, !1, isDataComplete, !0, formatters, tooltipFormatters, subtotalByColumn), 
            hierarchyNavigator;
        };
        var MatrixHierarchyNavigator = function() {
            function MatrixHierarchyNavigator(compositeGroupSeparator, tablixProperties, hostServices) {
                this.tablixProperties = tablixProperties, this.hostServices = hostServices, this.compositeGroupSeparator = compositeGroupSeparator;
            }
            return MatrixHierarchyNavigator.prototype.getColumnHierarchyDepth = function() {
                return Math.max(this.columnHierarchy.levels.length, 1);
            }, MatrixHierarchyNavigator.prototype.getRowHierarchyDepth = function() {
                return Math.max(this.rowHierarchy.levels.length, 1);
            }, MatrixHierarchyNavigator.prototype.getLeafCount = function(matrixHierarchy) {
                matrixHierarchy = this.getMatrixHierarchy(matrixHierarchy);
                return matrixHierarchy ? matrixHierarchy.leafNodes.length : 0;
            }, MatrixHierarchyNavigator.prototype.getLeafAt = function(matrixHierarchy, index) {
                matrixHierarchy = this.getMatrixHierarchy(matrixHierarchy);
                return matrixHierarchy ? matrixHierarchy.leafNodes[index] : null;
            }, MatrixHierarchyNavigator.prototype.getLeafIndex = function(item) {
                return item.leafIndex;
            }, MatrixHierarchyNavigator.prototype.getParent = function(item) {
                return 0 === item.level ? null : item.parent;
            }, MatrixHierarchyNavigator.prototype.getIndex = function(item) {
                return item ? item.index : -1;
            }, MatrixHierarchyNavigator.prototype.isLeaf = function(item) {
                return !item.children || 0 === item.children.length;
            }, MatrixHierarchyNavigator.prototype.isRowHierarchyLeaf = function(item) {
                return !0;
            }, MatrixHierarchyNavigator.prototype.isColumnHierarchyLeaf = function(item) {
                return !1;
            }, MatrixHierarchyNavigator.prototype.isFirstItem = function(item, items) {
                return item === _.head(items);
            }, MatrixHierarchyNavigator.prototype.areAllParentsFirst = function(item, items) {
                if (!item) return !1;
                var parent = this.getParent(item);
                return parent ? this.isFirstItem(item, item.siblings) && this.areAllParentsFirst(parent, parent.siblings) : this.isFirstItem(item, item.siblings);
            }, MatrixHierarchyNavigator.prototype.isLastItem = function(item, items) {
                if (item !== _.last(items)) return !1;
                if (!this.isItemRow(item) || this.isDataComplete) return !0;
                for (var parent = item.parent; parent; ) {
                    if (parent !== _.last(parent.siblings)) return !0;
                    parent = parent.parent;
                }
                return !1;
            }, MatrixHierarchyNavigator.prototype.isItemRow = function(item) {
                if (!item) return !1;
                for (var firstLevelParent = item; firstLevelParent.parent; ) firstLevelParent = firstLevelParent.parent;
                return firstLevelParent.siblings === this.rowHierarchy.root.children;
            }, MatrixHierarchyNavigator.prototype.areAllParentsLast = function(item, items) {
                if (!item) return !1;
                var parent = this.getParent(item);
                return parent ? this.isLastItem(item, item.siblings) && this.areAllParentsLast(parent, parent.siblings) : this.isLastItem(item, item.siblings);
            }, MatrixHierarchyNavigator.prototype.getChildren = function(item) {
                return item.children;
            }, MatrixHierarchyNavigator.prototype.getChildrenLevelDifference = function(item) {
                var diff = 1 / 0, children = this.getChildren(item);
                if (!_.isEmpty(children)) for (var i = 0, ilen = children.length; i < ilen; i++) diff = Math.min(diff, children[i].level - item.level);
                return diff;
            }, MatrixHierarchyNavigator.prototype.getCount = function(items) {
                return items.length;
            }, MatrixHierarchyNavigator.prototype.getAt = function(items, index) {
                return items[index];
            }, MatrixHierarchyNavigator.prototype.getLevel = function(item) {
                return item.level;
            }, MatrixHierarchyNavigator.prototype.getRowLeafIndex = function(rowItem) {
                return this.isSteppedLayout && rowItem.isSubtotal ? rowItem.parent ? (!this.valuesOnRow && this.areRowSubtotalsBefore ? rowItem.parent : rowItem).leafIndex : this.valuesOnRow ? rowItem.levelSourceIndex : -1 : rowItem.leafIndex;
            }, MatrixHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                var valueSource, bodyCell, colIndex = columnItem.leafIndex, node = rowItem.values ? rowItem.values[columnItem.leafIndex] : void 0;
                bodyCell = node ? (rowIndex = (valueSource = this.valueSources[node.valueSourceIndex || 0]).queryName, 
                bodyCell = this.formatters[rowIndex], rowIndex = this.tooltipFormatters[rowIndex], 
                new MatrixVisualBodyItem(node.value, node.objects, rowItem, columnItem, valueSource, this.hostServices, bodyCell, rowIndex)) : new MatrixVisualBodyItem(void 0, void 0, rowItem, columnItem, void 0, this.hostServices, void 0, void 0);
                var rowIndex = this.getRowLeafIndex(rowItem);
                return bodyCell.position.row.index = rowIndex, bodyCell.position.row.indexInSiblings = rowItem.siblings.indexOf(rowItem), 
                bodyCell.position.row.isFirst = 0 === rowIndex, bodyCell.position.row.isLast = this.isDataComplete && rowIndex === this.rowHierarchy.leafNodes.length - 1, 
                bodyCell.position.column.index = colIndex, bodyCell.position.column.indexInSiblings = columnItem.siblings.indexOf(columnItem), 
                bodyCell.position.column.isFirst = 0 === colIndex, bodyCell.position.column.isLast = colIndex === this.columnHierarchy.leafNodes.length - 1, 
                node && node.objects && (bodyCell.backColor = this.tablixProperties.PropValuesBackColor.getValue(node.objects), 
                bodyCell.fontColor = this.tablixProperties.PropValuesFontColor.getValue(node.objects)), 
                bodyCell;
            }, MatrixHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                var levelSource, notMeasureSources = this.columnHierarchy.levels, rowLevels = this.rowHierarchy.levels;
                if ((columnLevel === notMeasureSources.length - 1 || 0 === notMeasureSources.length) && (levelSource = rowLevels[rowLevel])) {
                    var isRowHeaderLeaf = rowLevel === rowLevels.length - 1, isMeasureCorner = this.valuesOnRow && isRowHeaderLeaf;
                    return {
                        metadata: 1 === levelSource.sources.length || 1 < levelSource.sources.length && isMeasureCorner ? levelSource.sources[0] : null,
                        displayName: isMeasureCorner ? "" : _.map(levelSource.sources, function(source) {
                            return source.displayName;
                        }).join(this.compositeGroupSeparator),
                        isColumnHeaderLeaf: !0,
                        isRowHeaderLeaf: isRowHeaderLeaf,
                        position: this.calculateCornerCellPosition(rowLevel, columnLevel),
                        rowLevel: rowLevel,
                        columnLevel: columnLevel
                    };
                }
                if (rowLevel === rowLevels.length - 1 && (levelSource = notMeasureSources[columnLevel])) {
                    notMeasureSources = levelSource.sources.filter(function(source) {
                        return !source.isMeasure;
                    });
                    return {
                        metadata: 1 === levelSource.sources.length ? levelSource.sources[0] : null,
                        displayName: _.map(notMeasureSources, function(source) {
                            return source.displayName;
                        }).join(this.compositeGroupSeparator),
                        isColumnHeaderLeaf: !1,
                        isRowHeaderLeaf: !0,
                        position: this.calculateCornerCellPosition(rowLevel, columnLevel),
                        rowLevel: rowLevel,
                        columnLevel: columnLevel
                    };
                }
                return {
                    metadata: null,
                    displayName: "",
                    isColumnHeaderLeaf: !1,
                    isRowHeaderLeaf: !1,
                    position: this.calculateCornerCellPosition(rowLevel, columnLevel),
                    rowLevel: rowLevel,
                    columnLevel: columnLevel
                };
            }, MatrixHierarchyNavigator.prototype.calculateCornerCellPosition = function(rowHierarchyDepth, columnLevel) {
                var position = new CellPosition(), colIdx = columnLevel;
                position.row.index = position.row.indexInSiblings = colIdx, position.row.isFirst = 0 === colIdx;
                colIdx = this.getColumnHierarchyDepth();
                position.row.isLast = columnLevel === colIdx - 1;
                colIdx = rowHierarchyDepth;
                position.column.index = position.column.indexInSiblings = colIdx, position.column.isFirst = 0 === colIdx;
                rowHierarchyDepth = this.getRowHierarchyDepth();
                return position.column.isLast = colIdx === rowHierarchyDepth - 1, position;
            }, MatrixHierarchyNavigator.prototype.headerItemEquals = function(item1, item2) {
                return !(!item1 || !item2) && item1 === item2;
            }, MatrixHierarchyNavigator.prototype.bodyCellItemEquals = function(item1, item2) {
                return item1.position.isMatch(item2.position);
            }, MatrixHierarchyNavigator.prototype.cornerCellItemEquals = function(item1, item2) {
                return !(!item1 || !item2) && (item1.displayName === item2.displayName && item1.isColumnHeaderLeaf === item2.isColumnHeaderLeaf && item1.isRowHeaderLeaf === item2.isRowHeaderLeaf && item1.metadata === item2.metadata);
            }, MatrixHierarchyNavigator.prototype.getColumnHierarchy = function() {
                return this.columnHierarchy;
            }, MatrixHierarchyNavigator.prototype.getRowHierarchy = function() {
                return this.rowHierarchy;
            }, MatrixHierarchyNavigator.prototype.getValueSources = function() {
                return this.valueSources;
            }, MatrixHierarchyNavigator.prototype.valuesOnRowApplied = function() {
                return this.valuesOnRow;
            }, MatrixHierarchyNavigator.prototype.hasMultipleValueSources = function() {
                return this.multipleValueSources;
            }, MatrixHierarchyNavigator.prototype.update = function(matrix, isStepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, updateColumns, formatters, tooltipFormatters, subtotalByColumn) {
                var _this = this;
                this.isSteppedLayout = isStepped, this.valuesOnRow = valuesOnRow, this.areRowSubtotalsBefore = areRowSubtotalsBefore, 
                this.isDataComplete = isDataComplete, this.valueSources = matrix.valueSources, this.formatters = formatters, 
                this.tooltipFormatters = tooltipFormatters || {}, this.subtotalByColumn = subtotalByColumn || {}, 
                this.multipleValueSources = 1 < matrix.valueSources.length, this.rowHierarchy = this.wrapHierarchy(matrix.rows), 
                (updateColumns = updateColumns || this.valuesOnRow) && (this.columnHierarchy = this.wrapHierarchy(matrix.columns)), 
                this.valuesOnRow && this.pivotValues(), this.updateHierarchy(this.rowHierarchy, this.isSteppedLayout, this.areRowSubtotalsBefore, function(item, items) {
                    return _this.calculateRowHeaderPosition(item, items);
                }), updateColumns && (this.updateHierarchy(this.columnHierarchy, !1, !1, function(item, items) {
                    return _this.calculateColumnHeaderPosition(item, items);
                }), this.updateStaticColumnHeaders(this.columnHierarchy));
            }, MatrixHierarchyNavigator.prototype.pivotValues = function() {
                _.isEmpty(this.columnHierarchy.root.children) || this.removeValueNodesFromColumnHierarchy(this.columnHierarchy.root.children), 
                _.isEmpty(this.rowHierarchy.root.children) || this.addValueNodesToRowHierarchy(this.rowHierarchy.root.children, 0 < this.rowHierarchy.levels.length), 
                this.moveValueLevelFromColumnToRowHierarchy();
            }, MatrixHierarchyNavigator.prototype.removeValueNodesFromColumnHierarchy = function(nodes) {
                for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                    var node = nodes_1[_i];
                    if (!node.parent && this.isLeaf(node)) return nodes.length = 0, void nodes.push({
                        level: 0
                    });
                    this.isLeaf(node.children[0]) ? node.children = void 0 : this.removeValueNodesFromColumnHierarchy(node.children);
                }
            }, MatrixHierarchyNavigator.prototype.addValueNodesToRowHierarchy = function(rowHeaders, hasRowGrouping) {
                for (var rowHierarchyDepth = this.getRowHierarchyDepth(), valueSourceCount = this.valueSources.length, nodesCount = rowHeaders.length, nodeIndex = 0; nodeIndex < nodesCount; nodeIndex++) {
                    var rowHeader = rowHeaders[nodeIndex];
                    if (this.isLeaf(rowHeader)) {
                        var container = void 0, insertIndex = void 0, level = void 0;
                        this.isSteppedLayout && rowHeader.isSubtotal || !hasRowGrouping ? (rowHeaders.splice(nodeIndex, 1), 
                        container = rowHeaders, insertIndex = nodeIndex, level = rowHeader.level, nodesCount = nodesCount - 1 + valueSourceCount, 
                        nodeIndex = nodeIndex - 1 + valueSourceCount) : (rowHeader.children = [], container = rowHeader.children, 
                        insertIndex = 0, level = rowHierarchyDepth);
                        for (var i = 0; i < valueSourceCount; i++) {
                            var valueNode = this.createRowValueNode(i, valueSourceCount, rowHeader, level);
                            container.splice(insertIndex++, 0, valueNode);
                        }
                        rowHeader.values = null;
                    } else this.addValueNodesToRowHierarchy(rowHeader.children, hasRowGrouping);
                }
            }, MatrixHierarchyNavigator.prototype.moveValueLevelFromColumnToRowHierarchy = function() {
                this.rowHierarchy.levels.push(this.columnHierarchy.levels.pop());
            }, MatrixHierarchyNavigator.prototype.createRowValueNode = function(valueSourceIndex, valueSourceCount, rowHeader, level) {
                var _1, valueNode = {
                    level: level,
                    levelSourceIndex: valueSourceIndex,
                    isSubtotal: rowHeader.isSubtotal,
                    hasSubtotalStyle: !!rowHeader.hasSubtotalStyle,
                    values: {}
                }, originalValuesIndex = 0, newValuesIndex = 0;
                for (_1 in rowHeader.values) originalValuesIndex % valueSourceCount === valueSourceIndex && (valueNode.values[newValuesIndex++] = rowHeader.values[originalValuesIndex]), 
                originalValuesIndex++;
                return valueNode;
            }, MatrixHierarchyNavigator.prototype.wrapHierarchy = function(newHierarchy) {
                newHierarchy = {
                    levels: this.wrapLevels(newHierarchy.levels),
                    root: {
                        children: this.wrapNodes(newHierarchy.root.children, newHierarchy)
                    },
                    leafNodes: []
                };
                return newHierarchy;
            }, MatrixHierarchyNavigator.prototype.wrapLevels = function(levels) {
                if (levels) {
                    for (var newLevels = [], _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {
                        var level = levels_1[_i];
                        newLevels.push(powerbi.Prototype.inherit(level));
                    }
                    return newLevels;
                }
            }, MatrixHierarchyNavigator.prototype.wrapNodes = function(nodes, hierarchy) {
                if (nodes) {
                    for (var newNodes = [], _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {
                        var node = nodes_2[_i], newNode = powerbi.Prototype.inherit(node);
                        if (node.isCollapsed && !_.isEmpty(node.children)) {
                            var nodeLevel = _.find(node.children, function(child) {
                                return child.isSubtotal;
                            });
                            nodeLevel && (newNode.values = nodeLevel.values), newNode.children = null, newNode.hasSubtotalStyle = !0;
                        } else {
                            if (newNode.isSubtotal) {
                                nodeLevel = hierarchy.levels[newNode.level || 0];
                                if (1 === nodeLevel.sources.length && !1 === this.subtotalByColumn[nodeLevel.sources[0].queryName]) continue;
                            }
                            newNode.hasSubtotalStyle = !!node.isSubtotal, newNode.children = this.wrapNodes(node.children, hierarchy);
                        }
                        newNodes.push(newNode);
                    }
                    return newNodes;
                }
            }, MatrixHierarchyNavigator.prototype.updateHierarchy = function(hierarchy, isStepped, subtotalsBefore, calculatePosition) {
                0 < hierarchy.leafNodes.length && (hierarchy.leafNodes.length = 0), hierarchy.root.children && this.updateRecursive(hierarchy, hierarchy.root.children, null, hierarchy.leafNodes, isStepped, subtotalsBefore, calculatePosition);
            }, MatrixHierarchyNavigator.prototype.updateRecursive = function(hierarchy, nodes, parent, cache, isStepped, subtotalsBefore, calculatePosition) {
                for (var level, this_1 = this, i = 0, ilen = nodes.length; i < ilen; i++) !function(i) {
                    var node = nodes[i];
                    if (node.siblings = nodes, parent && (node.parent = parent), level = hierarchy === this_1.rowHierarchy && this_1.isSteppedLayout && node.isSubtotal && void 0 !== node.levelSourceIndex ? _.last(hierarchy.levels) : hierarchy.levels[node.level], 
                    node.hierarchyLevel = level) if (node.levelValues) {
                        for (var displayNames = [], tooltipDisplayNames = [], _i = 0, _a = node.levelValues; _i < _a.length; _i++) {
                            var value = _a[_i], source = level.sources[value.levelSourceIndex || 0], tooltipFormatter = this_1.formatters[source.queryName], value = value.value;
                            displayNames.push(tooltipFormatter.format(value, null));
                            tooltipFormatter = this_1.tooltipFormatters[source.queryName];
                            tooltipFormatter && tooltipDisplayNames.push(tooltipFormatter.format(value, null));
                        }
                        displayNames.length === tooltipDisplayNames.length || _.isEmpty(tooltipDisplayNames), 
                        node.valueFormatted = displayNames.join(this_1.compositeGroupSeparator), node.tooltipValueFormatted = _.isEmpty(tooltipDisplayNames) ? void 0 : tooltipDisplayNames.join(this_1.compositeGroupSeparator), 
                        node.queryName = 1 !== level.sources.length ? void 0 : level.sources[0].queryName;
                    } else {
                        source = level.sources[node.levelSourceIndex || 0];
                        node.valueFormatted = source.displayName, node.tooltipValueFormatted = source.displayName, 
                        node.queryName = source.queryName;
                    }
                    node.index = i, _.isEmpty(node.children) ? (!isStepped || !node.isSubtotal || !subtotalsBefore && node.parent && !node.parent.isSubtotal || this_1.valuesOnRow && node.parent) && (node.leafIndex = cache.length, 
                    cache.push(node)) : (isStepped && (node.leafIndex = cache.length, cache.push(node)), 
                    this_1.updateRecursive(hierarchy, node.children, node, cache, isStepped, subtotalsBefore, calculatePosition), 
                    isStepped && (_.every(node.children, function(child) {
                        return _.isEqual(child.hierarchyLevel, node.children[0].hierarchyLevel);
                    }), this_1.hasMultipleValueSources() && !_.some(node.children, function(child) {
                        return _.some(child.hierarchyLevel.sources, function(source) {
                            return !source.isMeasure;
                        });
                    }) || (node.hasSubtotalStyle = !0))), node.position = calculatePosition(node, nodes);
                }(i);
            }, MatrixHierarchyNavigator.prototype.updateStaticColumnHeaders = function(columnHierarchy) {
                var columnLeafNodes = columnHierarchy.leafNodes;
                if (columnLeafNodes && 0 < columnLeafNodes.length && (columnLeafNodes[0].identity || !this.valuesOnRow || 1 !== columnLeafNodes.length)) for (var columnLeafSources = columnHierarchy.levels[columnLeafNodes[0].level].sources, i = 0, ilen = columnLeafNodes.length; i < ilen; i++) {
                    var source, columnLeafNode = columnLeafNodes[i];
                    columnLeafNode.identity || !_.isEmpty(columnLeafNode.levelValues) || (source = columnLeafSources[columnLeafNode.levelSourceIndex || 0]) && (columnLeafNode.valueFormatted = source.displayName);
                }
            }, MatrixHierarchyNavigator.prototype.getMatrixHierarchy = function(rootNodes) {
                var columnHierarchyRootNodes = this.rowHierarchy.root.children;
                if (columnHierarchyRootNodes && rootNodes === columnHierarchyRootNodes) return this.rowHierarchy;
                columnHierarchyRootNodes = this.columnHierarchy.root.children;
                return columnHierarchyRootNodes && rootNodes === columnHierarchyRootNodes ? this.columnHierarchy : null;
            }, MatrixHierarchyNavigator.prototype.calculateRowHeaderPosition = function(item, colIdx) {
                var position = new CellPosition();
                position.row.index = this.getRowLeafIndex(item), position.row.indexInSiblings = this.getIndex(item), 
                position.row.isFirst = this.areAllParentsFirst(item, colIdx), position.row.isLast = this.areAllParentsLast(item, colIdx);
                colIdx = this.getLevel(item);
                return position.column.index = position.column.indexInSiblings = colIdx, position.column.isFirst = 0 === colIdx, 
                position.column.isLast = this.isLeaf(item), position;
            }, MatrixHierarchyNavigator.prototype.calculateColumnHeaderPosition = function(item, items) {
                var position = new CellPosition(), colIdx = this.getLevel(item);
                position.row.index = position.row.indexInSiblings = colIdx, position.row.isFirst = 0 === colIdx, 
                position.row.isLast = this.isLeaf(item);
                colIdx = this.getIndex(item);
                return position.column.index = position.column.indexInSiblings = colIdx, position.column.isFirst = this.areAllParentsFirst(item, items), 
                position.column.isLast = this.areAllParentsLast(item, items), position;
            }, MatrixHierarchyNavigator.prototype.getRowHeaderMetadataColumn = function(columns) {
                columns = this.getRowHeaderMetadataColumns(columns);
                return columns && columns[0];
            }, MatrixHierarchyNavigator.prototype.getRowHeaderMetadataColumns = function(item) {
                if (item && this.rowHierarchy) return this.getHierarchyMetadataColumns(this.rowHierarchy, item.level);
            }, MatrixHierarchyNavigator.prototype.getColumnHeaderMetadataColumn = function(columns) {
                columns = this.getColumnHeaderMetadataColumns(columns);
                return columns && columns[0];
            }, MatrixHierarchyNavigator.prototype.getColumnHeaderMetadataColumns = function(item) {
                if (item && this.columnHierarchy) return this.getHierarchyMetadataColumns(this.columnHierarchy, item.level);
            }, MatrixHierarchyNavigator.prototype.getHierarchyMetadataColumns = function(hierarchy, levelInfo) {
                if (hierarchy && hierarchy.levels && !(hierarchy.levels.length < levelInfo)) {
                    levelInfo = hierarchy.levels[levelInfo];
                    if (levelInfo && levelInfo.sources && 0 !== levelInfo.sources.length) return levelInfo.sources;
                }
            }, MatrixHierarchyNavigator.isNodeGrandTotal = function(node) {
                if (node) {
                    for (var nodeRoot = node; nodeRoot.parent; ) nodeRoot = nodeRoot.parent;
                    return nodeRoot.isSubtotal;
                }
                return !1;
            }, MatrixHierarchyNavigator;
        }();
        visuals.MatrixHierarchyNavigator = MatrixHierarchyNavigator;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(PivotTableBinderUtils) {
            var ElementBuilder = powerbi.visuals.controls.pivotTable.ElementBuilder, FontSize = visuals.Units.FontSize, PivotTableControl = powerbi.visuals.controls.pivotTable.PivotTableControl, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, UrlScheme = jsCommon.UrlUtils.UrlScheme, WordBreaker = jsCommon.WordBreaker, encodeHtml = jsCommon.StringExtensions.encodeHtml;
            function setIconElementClasses(icon, iconElement) {
                iconElement.classNames || (iconElement.classNames = []);
                var classNames = iconElement.classNames;
                switch (classNames.push("tablixIcon"), icon.layout) {
                  case "IconOnly":
                    break;

                  case "Before":
                    classNames.push("before");
                    break;

                  default:
                    classNames.push("after");
                }
                switch (icon.verticalAlignment) {
                  case "Bottom":
                    classNames.push("bottom");
                    break;

                  case "Middle":
                    classNames.push("middle");
                    break;

                  default:
                    classNames.push("top");
                }
            }
            function getSortIconClass(sortDirection) {
                switch (sortDirection) {
                  case 1:
                    return "caret-up";

                  case 2:
                    return "caret-down";
                }
            }
            function createFontInfo(fontProperties, measurer, fontInfo) {
                fontProperties.size && 8.52 === fontProperties.size.px && (fontProperties = visuals.FontProperties.inherit(fontProperties, {
                    size: FontSize.createFromPx(8)
                }));
                fontInfo = {
                    measuredFontHeight: null,
                    textProperties: visuals.FontProperties.toTextProperties(fontProperties),
                    fontProperties: fontProperties,
                    nonInheritedFontProperties: visuals.FontProperties.excludeInheritedProperties(fontProperties, fontInfo)
                };
                return measurer.addItem(fontInfo), fontInfo;
            }
            PivotTableBinderUtils.cssClassCellInteractive = "cell-interactive", PivotTableBinderUtils.cssPivotTableCellClassNoWrap = "pivotTableCellNoWrap", 
            PivotTableBinderUtils.cssPivotTableCellClassWrap = "pivotTableCellWrap", PivotTableBinderUtils.CellHorizontalPadding = 5, 
            PivotTableBinderUtils.ExpandCollapseRightMargin = 5, PivotTableBinderUtils.TablixIconMargin = 5, 
            PivotTableBinderUtils.addMeasureElement = function(container) {
                return container.insertAdjacentHTML("beforeend", ElementBuilder.build({
                    content: "",
                    classNames: null,
                    styleProperties: {
                        position: "absolute",
                        left: "0",
                        top: "0",
                        visibility: "hidden"
                    },
                    attributes: null
                }, null)), container.lastChild;
            }, PivotTableBinderUtils.measureText = function(text, textProperties) {
                return _.isEmpty(text) ? 0 : powerbi.TextMeasurementService.measureSvgTextWidth(textProperties, text);
            }, PivotTableBinderUtils.getWordWrappingLines = function(text, maxWidth, textProperties) {
                return _.isEmpty(text) ? [ text ] : (text = text.trim(), WordBreaker.splitByWidth(text, textProperties, powerbi.TextMeasurementService.measureSvgTextWidth, maxWidth, TablixUtils.WordWrappingMaxLines, void 0, !0, !0));
            }, PivotTableBinderUtils.getNetWidth = function(width, cellStyle) {
                return Math.max(0, width - (cellStyle.getExtraLeft() + cellStyle.getExtraRight()));
            }, PivotTableBinderUtils.setUnselectedStyle = function(style) {
                style.opacity = "0.3";
            }, PivotTableBinderUtils.createKpiDomString = function(kpi, kpiValue) {
                return ElementBuilder.build({
                    content: "",
                    classNames: [ visuals.KpiUtil.getClassForKpi(kpi, kpiValue) || "" ],
                    styleProperties: {
                        display: "inline-block",
                        "vertical-align": "bottom",
                        margin: "0"
                    },
                    attributes: null
                }, null);
            }, PivotTableBinderUtils.buildImage = function(image, height, altText) {
                return image = {
                    tagName: "img",
                    content: "",
                    classNames: null,
                    styleProperties: {
                        "max-height": "100%",
                        "max-width": "100%"
                    },
                    attributes: {
                        src: image
                    },
                    contextMenuHandler: function(event) {
                        event.stopPropagation();
                    }
                }, null != altText && (image.attributes.alt = altText), {
                    children: [ image ],
                    classNames: [ TablixUtils.CssClassImageContainer ],
                    styleProperties: {
                        height: PivotTableControl.pixelUnits(height),
                        width: PivotTableControl.pixelUnits(height)
                    },
                    attributes: null
                };
            }, PivotTableBinderUtils.addIconToCell = function(iconSettings, iconSize, contentBinding) {
                var containerBinding = {
                    attributes: {},
                    styleProperties: {},
                    classNames: [ "flex-container" ]
                }, iconBinding = function(icon, pxSize) {
                    pxSize = PivotTableControl.pixelUnits(pxSize);
                    if (null === icon.value) return {
                        tagName: "div",
                        styleProperties: {
                            height: pxSize,
                            width: pxSize
                        },
                        attributes: {},
                        classNames: null
                    };
                    if (icon.value, icon.value.svgId) return {
                        tagName: "svg",
                        attributes: {
                            height: pxSize,
                            width: pxSize,
                            role: "img"
                        },
                        classNames: null,
                        styleProperties: {},
                        children: [ {
                            tagName: "use",
                            attributes: {
                                href: "#" + icon.value.svgId
                            },
                            classNames: null,
                            styleProperties: {}
                        } ]
                    };
                    if (null != icon.value.url) return {
                        tagName: "img",
                        classNames: null,
                        styleProperties: {
                            height: pxSize,
                            width: pxSize
                        },
                        attributes: {
                            src: encodeHtml(icon.value.url)
                        }
                    };
                }(iconSettings, iconSize);
                switch (contentBinding.classNames.push("stretching-content"), iconSettings.layout) {
                  case "IconOnly":
                    contentBinding.children = [ iconBinding ], setIconElementClasses(iconSettings, contentBinding), 
                    containerBinding.children = [ contentBinding ];
                    break;

                  case "After":
                    setIconElementClasses(iconSettings, iconBinding), containerBinding.children = [ contentBinding, iconBinding ];
                    break;

                  default:
                    setIconElementClasses(iconSettings, iconBinding), containerBinding.children = [ iconBinding, contentBinding ];
                }
                return containerBinding;
            }, PivotTableBinderUtils.getUrlIconName = function(urlIcon, urlScheme) {
                return urlIcon ? TablixUtils.getUrlIconName(urlScheme) : null;
            }, PivotTableBinderUtils.addHyperlink = function(contents, url, iconName, clickHandler, inheritColor, createTooltip) {
                var link = {
                    tagName: "a",
                    classNames: [],
                    styleProperties: {},
                    attributes: {
                        href: url,
                        target: "_blank",
                        rel: "noopener noreferrer",
                        role: "link",
                        "aria-label": url
                    },
                    clickHandler: function(event) {
                        event.stopPropagation(), clickHandler(url, event);
                    },
                    contextMenuHandler: function(event) {
                        event.stopPropagation();
                    }
                };
                return "string" == typeof contents ? link.content = contents : link.children = [ contents ], 
                iconName && (link.content = void 0, link.children = void 0, link.classNames.push(TablixUtils.CssClassValueURLIcon, iconName)), 
                inheritColor && (link.styleProperties.color = "inherit"), createTooltip && (link.attributes.title = url), 
                link;
            }, PivotTableBinderUtils.getSortIconHeight = function(glyphHeight) {
                return glyphHeight - 1;
            }, PivotTableBinderUtils.buildSortIcon = function(sortDirection, sortIconEnabled, showFuture, defaultSortDirection, bottom, fontSize) {
                var classNames;
                return sortIconEnabled && (classNames = sortDirection ? [ "powervisuals-glyph", "sort-icon", getSortIconClass(sortDirection) ] : showFuture ? [ "powervisuals-glyph", "sort-icon", getSortIconClass(defaultSortDirection), "future" ] : [ "sort-icon" ]), 
                {
                    content: TablixUtils.StringNonBreakingSpace,
                    attributes: null,
                    styleProperties: {
                        "font-size": fontSize,
                        bottom: bottom + "px"
                    },
                    classNames: classNames
                };
            }, PivotTableBinderUtils.getSortIconClass = getSortIconClass, PivotTableBinderUtils.isValidUrl = function(metadata, content) {
                return TablixUtils.getUrlScheme(metadata, content) !== UrlScheme.NONE;
            }, PivotTableBinderUtils.replaceEncodedNewLines = function(text) {
                return text && text.replace(/&#10;/g, "<BR />");
            }, PivotTableBinderUtils.createFontInfo = createFontInfo, PivotTableBinderUtils.overrideFontInfo = function(fontInfo, overrides, measurer, includeLevels) {
                return createFontInfo(visuals.FontProperties.inherit(fontInfo.fontProperties, overrides), measurer, includeLevels);
            }, PivotTableBinderUtils.applyFontInfo = function(fontProperties, cellStyle, excludeInherited, hasContent) {
                (fontProperties = excludeInherited ? fontProperties.nonInheritedFontProperties : fontProperties.fontProperties).family && (cellStyle.fontFamily = fontProperties.family), 
                fontProperties.size && (cellStyle.fontSize = fontProperties.size), fontProperties.weight && (cellStyle.fontWeight = fontProperties.weight), 
                fontProperties.style && (cellStyle.fontStyle = fontProperties.style), fontProperties.textDecoration && hasContent && (cellStyle.textDecoration = fontProperties.textDecoration);
            }, PivotTableBinderUtils.addAlignmentCssClass = function(alignment, classes, defaultAlignment) {
                if (null == alignment || alignment === visuals.textAlignment.auto) {
                    if (!defaultAlignment) return;
                    alignment = defaultAlignment;
                }
                switch (alignment) {
                  case visuals.textAlignment.left:
                    return void classes.push(TablixUtils.CSSClassPivotTableAlignLeft);

                  case visuals.textAlignment.center:
                    return void classes.push(TablixUtils.CSSClassPivotTableAlignCenter);

                  case visuals.textAlignment.right:
                    return void classes.push(TablixUtils.CSSClassPivotTableAlignRight);

                  default:
                    return;
                }
            };
            var FontInfoMeasurer = function() {
                function FontInfoMeasurer() {
                    this.items = [];
                }
                return FontInfoMeasurer.prototype.addItem = function(fontInfo) {
                    this.items.push(fontInfo);
                }, FontInfoMeasurer.prototype.measureAll = function(measureElement) {
                    if (!_.isEmpty(this.items)) {
                        for (var elementStrings = [], _i = 0, _a = this.items; _i < _a.length; _i++) {
                            var item = _a[_i], binding = {
                                content: "a",
                                classNames: null,
                                styleProperties: visuals.FontProperties.toHTMLStyle(item.fontProperties),
                                attributes: null
                            };
                            elementStrings.push(ElementBuilder.build(binding, null));
                        }
                        var elementsString = elementStrings.join("");
                        measureElement.insertAdjacentHTML("beforeend", elementsString);
                        for (var isFirst = !0, _b = 0, _c = this.items; _b < _c.length; _b++) {
                            var item = _c[_b], element = isFirst ? (isFirst = !1, measureElement.firstChild) : element.nextSibling;
                            item.measuredFontHeight = Math.ceil(element.offsetHeight);
                        }
                        measureElement.innerHTML = "";
                    }
                }, FontInfoMeasurer;
            }();
            PivotTableBinderUtils.FontInfoMeasurer = FontInfoMeasurer;
        }(visuals.PivotTableBinderUtils || (visuals.PivotTableBinderUtils = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(PivotTableBinderUtils) {
            var encodeHtml = jsCommon.StringExtensions.encodeHtml;
            PivotTableBinderUtils.getColumnDataBarsSettings = function(minSpecified, dataBars, style) {
                if (dataBars) {
                    var min, max, zeroPosition = minSpecified.aggregates;
                    if (null != dataBars.minValue ? min = dataBars.minValue : zeroPosition && null != zeroPosition.min && _.isNumber(zeroPosition.min) && (min = zeroPosition.min), 
                    null != dataBars.maxValue ? max = dataBars.maxValue : zeroPosition && null != zeroPosition.max && _.isNumber(zeroPosition.max) && (max = zeroPosition.max), 
                    !(null == min || null == max || max < min)) {
                        var strokeSettings, minSpecified = null != dataBars.minValue, zeroPosition = null != dataBars.maxValue;
                        return (min = 0 <= min && 0 < max && !minSpecified ? 0 : min) < 0 && max < 0 && !zeroPosition && (max = 0), 
                        zeroPosition = 0 === min && 0 === max ? .5 : 0 <= min && 0 < max && minSpecified ? 0 : min < 0 && max <= 0 && zeroPosition ? 1 : (0 - min) / (max - min), 
                        style.isHighContrast && (strokeSettings = {
                            visible: !0,
                            color: visuals.ColorHelper.getThemeColor(style, visuals.ForegroundColorName),
                            width: 1
                        }), {
                            min: min,
                            max: max,
                            range: max - min,
                            zeroPosition: zeroPosition,
                            positiveColor: encodeHtml(visuals.ColorHelper.getFillColor(style, dataBars.positiveColor, visuals.BackgroundColorName)),
                            negativeColor: encodeHtml(visuals.ColorHelper.getFillColor(style, dataBars.negativeColor, visuals.BackgroundColorName)),
                            axisColor: encodeHtml(visuals.ColorHelper.getFillColor(style, dataBars.axisColor, visuals.ForegroundColorName)),
                            hideText: !!dataBars.hideText,
                            reverseDirection: !!dataBars.reverseDirection,
                            strokeSettings: strokeSettings
                        };
                    }
                }
            }, PivotTableBinderUtils.addDataBarsToCell = function(cellContentBinding, contentsStyle, dataBarContainer, zeroPosition) {
                var left = dataBarContainer.getExtraLeft() + "px", right = dataBarContainer.getExtraRight() + "px", top = dataBarContainer.getExtraTop() + "px", bottom = dataBarContainer.getExtraBottom() + "px", dataBarContainer = {
                    children: [],
                    attributes: {},
                    classNames: [],
                    styleProperties: {
                        position: "absolute",
                        left: left,
                        right: right,
                        top: top,
                        bottom: bottom
                    }
                };
                return (zeroPosition = function(strokeSettings, value) {
                    if (null != value && _.isNumber(value) && 0 !== value) {
                        var barLeft, barRight, min = strokeSettings.min, max = strokeSettings.max, styleProperties = strokeSettings.range, temp = strokeSettings.zeroPosition;
                        if (max <= value) {
                            if (1 === temp) return;
                            value = max;
                        } else if (value <= min) {
                            if (0 === temp) return;
                            value = min;
                        }
                        styleProperties = 0 === styleProperties ? (barLeft = barRight = temp, strokeSettings.positiveColor) : 0 < value ? (barLeft = temp, 
                        barRight = (value - min) / styleProperties, strokeSettings.positiveColor) : (barLeft = (value - min) / styleProperties, 
                        barRight = temp, strokeSettings.negativeColor), strokeSettings.reverseDirection && (temp = barLeft, 
                        barLeft = 1 - barRight, barRight = 1 - temp);
                        styleProperties = {
                            left: 100 * barLeft + "%",
                            width: 100 * (barRight - barLeft) + "%",
                            background: styleProperties
                        }, strokeSettings = strokeSettings.strokeSettings;
                        return strokeSettings && strokeSettings.visible && (styleProperties.outline = strokeSettings.width + "px solid " + strokeSettings.color, 
                        styleProperties["outline-offset"] = "-" + strokeSettings.width + "px"), {
                            content: "",
                            attributes: {},
                            classNames: [ "dataBar" ],
                            styleProperties: styleProperties
                        };
                    }
                }(contentsStyle, zeroPosition)) && dataBarContainer.children.push(zeroPosition), 
                zeroPosition = contentsStyle.zeroPosition, contentsStyle = {
                    content: "",
                    attributes: {},
                    classNames: [ "dataBarAxis" ],
                    styleProperties: {
                        top: "-" + top,
                        bottom: "-" + bottom,
                        left: 100 * (zeroPosition = contentsStyle.reverseDirection ? 1 - zeroPosition : zeroPosition) + "%",
                        "border-left-color": contentsStyle.axisColor
                    }
                }, dataBarContainer.children.push(contentsStyle), (contentsStyle = cellContentBinding.styleProperties).position = "absolute", 
                contentsStyle.left = left, contentsStyle.right = right, contentsStyle.top = top, 
                contentsStyle.bottom = bottom, {
                    children: [ dataBarContainer, cellContentBinding ],
                    classNames: [],
                    attributes: {},
                    styleProperties: {}
                };
            };
        }(visuals.PivotTableBinderUtils || (visuals.PivotTableBinderUtils = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(PivotTableBinderUtils) {
            var EnumExtensions = jsCommon.EnumExtensions, Markers = powerbi.visuals.Markers, SparklineDataReductionWarning = powerbi.visuals.SparklineDataReductionWarning;
            PivotTableBinderUtils.parseSparklineData = function(minXDifference, hostServices) {
                var parsedData = {
                    points: [],
                    lowX: void 0,
                    highX: void 0,
                    lowY: void 0,
                    highY: void 0,
                    minXDifference: void 0
                };
                if (!_.isEmpty(minXDifference)) {
                    var dataRaw = JSON.parse(minXDifference), lowY = +dataRaw.yl, highY = +dataRaw.yh, lowX = +dataRaw.xl, highX = +dataRaw.xh, minXDifference = null != dataRaw.md ? +dataRaw.md : void 0;
                    52 < _.size(dataRaw.p) && hostServices.setWarnings([ new SparklineDataReductionWarning() ]);
                    for (var _i = 0, _a = dataRaw.p; _i < _a.length; _i++) {
                        var row = _a[_i];
                        parsedData.points.push({
                            x: null != row[0] ? +row[0] : void 0,
                            y: null != row[1] ? +row[1] * (highY - lowY) / 100 + lowY : void 0
                        });
                    }
                    return {
                        points: _.filter(parsedData.points, function(d) {
                            return _.isFinite(d.x) && (null != d.y || _.isFinite(d.y));
                        }),
                        lowX: lowX,
                        highX: highX,
                        lowY: lowY,
                        highY: highY,
                        minXDifference: minXDifference
                    };
                }
            }, PivotTableBinderUtils.getSparklineSettings = function(sparkline, isScalar, markerColor) {
                null === (dataColor = null == isScalar ? void 0 : isScalar.misc) || void 0 === dataColor || dataColor.sparkline;
                var dataColor = markerColor.isHighContrast ? visuals.ColorHelper.getThemeColor(markerColor, visuals.ForegroundColorName) : sparkline.dataColor.solid.color, markerColor = markerColor.isHighContrast ? visuals.ColorHelper.getThemeColor(markerColor, visuals.ForegroundColorName) : sparkline.markerColor.solid.color, isScalar = (isScalar = isScalar.misc.sparkline.groupingType) && !!(isScalar.numeric || isScalar.dateTime || isScalar.temporal);
                return {
                    chartType: sparkline.chartType === visuals.sparklineChartType.line ? "Line" : "Column",
                    dataColor: dataColor,
                    strokeWidth: sparkline.strokeWidth,
                    markerType: sparkline.markers,
                    markerColor: markerColor,
                    markerSize: sparkline.markerSize,
                    markerShape: sparkline.markerShape,
                    isScalar: isScalar
                };
            }, PivotTableBinderUtils.addSparklineToCell = function(contentBinding, sparklineSettings, height, value, rowHeight, columnWidth, iconSettings, width) {
                null != value && (width = columnWidth - height.getExtraLeft() - height.getExtraRight() - (width ? width + 5 : 0), 
                height = rowHeight - height.getExtraTop() - height.getExtraBottom(), 1 < width - sparklineSettings.strokeWidth && 1 < height - sparklineSettings.strokeWidth && (children = ("Line" === sparklineSettings.chartType ? function(markerData, width, height, value) {
                    var x, dataColor = markerData.dataColor, lineBinding = markerData.strokeWidth, markerColor = markerData.markerColor, markerSize = markerData.markerSize, markerShape = markerData.markerShape, isScalar = markerData.isScalar, lineGenerator = Math.max(lineBinding, 2) + 3, dataToUse = value.points;
                    x = (isScalar ? d3.scaleLinear().domain([ value.lowX, value.highX ]) : d3.scalePoint().domain(_.map(_.range(value.lowX, value.highX + 1), function(x) {
                        return x.toString();
                    }))).range([ lineGenerator, width - lineGenerator ]);
                    var markerDefinitionBinding, y = d3.scaleLinear().domain(d3.extent(dataToUse, function(d) {
                        return d.y;
                    })).range([ height - lineGenerator, lineGenerator ]), lineGenerator = d3.line().x(function(d) {
                        return x(d.x);
                    }).y(function(d) {
                        return y(d.y);
                    }), dataToUse = _.filter(dataToUse, function(d) {
                        return null != d.y;
                    }), lineBinding = {
                        tagName: "path",
                        attributes: {
                            d: lineGenerator(dataToUse)
                        },
                        classNames: [],
                        styleProperties: {
                            stroke: dataColor,
                            "stroke-width": lineBinding.toString(),
                            "stroke-linecap": "round",
                            "stroke-linejoin": "round",
                            fill: "transparent"
                        }
                    }, markerData = function(data, _a) {
                        var markerType = _a.markerType, _a = d3.extent(data, function(d) {
                            return d.y;
                        }), min = _a[0], max = _a[1];
                        return _.filter(data, function(_a, _b) {
                            if (null == _a.y) return !1;
                            if (EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.all)) return !0;
                            var result = !1;
                            return EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.first) && (result = result || 0 === _b), 
                            EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.last) && (result = result || _b === data.length - 1), 
                            EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.negative) && (result = result || _a.y < 0), 
                            EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.highest) && (result = result || _a.y === max), 
                            EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.lowest) && (result = result || _a.y === min), 
                            result = EnumExtensions.hasFlag(markerType, visuals.sparklineMarkerType.isolated) ? result || null == (null === (_a = data[_b - 1]) || void 0 === _a ? void 0 : _a.y) && null == (null === (_b = data[_b + 1]) || void 0 === _b ? void 0 : _b.y) : result;
                        });
                    }(dataToUse, markerData);
                    {
                        var markerLineBinding;
                        _.isEmpty(markerData) || (markerDefinitionBinding = {
                            tagName: "defs",
                            classNames: [],
                            styleProperties: {},
                            attributes: {},
                            children: [ {
                                tagName: "marker",
                                classNames: [],
                                styleProperties: {},
                                attributes: {
                                    id: markerLineBinding = "markerKey" + markerSize + markerColor + markerShape,
                                    markerUnits: "strokeWidth",
                                    orient: "0",
                                    refX: "0",
                                    refY: "0",
                                    viewBox: "-6 -6 12 12",
                                    markerHeight: markerSize.toString(),
                                    markerWidth: markerSize.toString()
                                },
                                children: [ {
                                    tagName: "path",
                                    classNames: [],
                                    styleProperties: {
                                        "stroke-width": Markers.getStrokeWidth(markerShape).toString(),
                                        "stroke-opacity": "1",
                                        stroke: markerColor,
                                        fill: markerColor
                                    },
                                    attributes: {
                                        d: Markers.getPath(markerShape)
                                    }
                                } ]
                            } ]
                        }, markerData = lineGenerator(markerData), markerLineBinding = {
                            tagName: "path",
                            attributes: {
                                d: markerData
                            },
                            classNames: [],
                            styleProperties: {
                                stroke: dataColor,
                                "stroke-width": 2..toString(),
                                "stroke-opacity": "0",
                                fill: "transparent",
                                "marker-start": "url(#" + markerLineBinding + ")",
                                "marker-mid": "url(#" + markerLineBinding + ")",
                                "marker-end": "url(#" + markerLineBinding + ")"
                            }
                        });
                    }
                    return {
                        tagName: "svg",
                        children: markerLineBinding ? [ markerDefinitionBinding, lineBinding, markerLineBinding ] : [ lineBinding ],
                        classNames: [],
                        styleProperties: {},
                        attributes: {
                            height: height + "px",
                            width: width + "px"
                        }
                    };
                } : function(columnWidth, width, height, yExtent) {
                    var x, dataColor = columnWidth.dataColor, isScalar = columnWidth.isScalar, data = yExtent.points, xExtent = [ yExtent.lowX, yExtent.highX ], columnWidth = function(domainSpan, minInterval, width, domain, isScalar) {
                        if (_.isEmpty(domainSpan)) return 0;
                        var categoryWidth, domainSpan = domain[domain.length - 1] - domain[0];
                        categoryWidth = isScalar && domain && 1 < domain.length ? (categoryWidth = width * (minInterval / (domainSpan + minInterval)), 
                        Math.max(categoryWidth, 2)) : width / (1 + domainSpan);
                        return .8 * categoryWidth;
                    }(data, yExtent.minXDifference, width, xExtent, isScalar), halfColumnWidth = columnWidth / 2;
                    x = (isScalar ? d3.scaleLinear().domain(xExtent) : d3.scalePoint().domain(_.map(_.range(yExtent.lowX, yExtent.highX + 1), function(x) {
                        return x.toString();
                    }))).range([ halfColumnWidth, width - halfColumnWidth ]);
                    yExtent = d3.extent(data, function(d) {
                        return d.y;
                    });
                    yExtent[0] = Math.min(0, yExtent[0]), yExtent[1] = Math.max(0, yExtent[1]);
                    var y = d3.scaleLinear().domain(yExtent).range([ height, 0 ]), scaledY0 = y(0), widthValue = columnWidth.toString();
                    return {
                        tagName: "svg",
                        children: _.chain(data).filter(function(d) {
                            return null != d.y;
                        }).map(function(heightValue) {
                            var xValue = (x(heightValue.x) - halfColumnWidth).toString(), yValue = (scaledY0 + visuals.AxisHelper.diffScaled(y, Math.max(0, heightValue.y), 0)).toString(), heightValue = Math.abs(visuals.AxisHelper.diffScaled(y, 0, heightValue.y)).toString();
                            return {
                                tagName: "rect",
                                classNames: [],
                                styleProperties: {
                                    fill: dataColor
                                },
                                attributes: {
                                    x: xValue,
                                    y: yValue,
                                    width: widthValue,
                                    height: heightValue
                                }
                            };
                        }).value(),
                        classNames: [],
                        styleProperties: {},
                        attributes: {
                            height: height + "px",
                            width: width + "px"
                        }
                    };
                })(sparklineSettings, width, height, value)));
                var children = iconSettings && "Before" !== iconSettings.layout ? [ children, contentBinding ] : [ contentBinding, children ];
                return {
                    attributes: {},
                    styleProperties: {},
                    classNames: [ "flex-container" ],
                    children: _.filter(children, function(c) {
                        return !!c;
                    })
                };
            };
        }(visuals.PivotTableBinderUtils || (visuals.PivotTableBinderUtils = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(PivotTableSizeManagerUtils) {
            PivotTableSizeManagerUtils.persistWidths = function(persistedWidths, hostServices, onPersisting) {
                for (var visualObjectInstancesToPersist = {
                    remove: [],
                    merge: []
                }, _i = 0, persistedWidths_1 = persistedWidths; _i < persistedWidths_1.length; _i++) {
                    var persistedWidth = persistedWidths_1[_i], visualObjectInstance = {
                        selector: persistedWidth.selector,
                        objectName: visuals.TablixProperties.PropColumnWidthValue.objectName,
                        properties: {}
                    };
                    visualObjectInstance.properties[visuals.TablixProperties.PropColumnWidthValue.propertyName] = persistedWidth.value, 
                    (null == persistedWidth.value ? visualObjectInstancesToPersist.remove : visualObjectInstancesToPersist.merge).push(visualObjectInstance);
                }
                onPersisting && onPersisting(), hostServices.persistProperties(visualObjectInstancesToPersist);
            };
        }(visuals.PivotTableSizeManagerUtils || (visuals.PivotTableSizeManagerUtils = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var BrowserUtils = jsCommon.BrowserUtils, PivotTableControl = visuals.controls.pivotTable.PivotTableControl, PivotTableOptions = powerbi.visuals.PivotTableOptions, PivotTableRenderingMode = visuals.controls.pivotTable.PivotTableRenderingMode, TablixUtils = visuals.controls.internal.TablixUtils, PivotTable = function() {
            function PivotTable(options, featureSwitches) {
                void 0 === options && (options = PivotTableOptions.createDefaultConstructorOptions()), 
                this.options = options, this.featureSwitches = featureSwitches || {}, this.options.tooltipsEnabled = this.options.tooltipsEnabled, 
                this.suppressNextRender = !1, this.tooltipType = 0;
            }
            return PivotTable.prototype.init = function(options) {
                var _this = this;
                this.element = options.element, this.hostServices = options.host, this.waitingForData = !1, 
                this.style = options.style, this.tablixPropertyManager = new visuals.TablixPropertyManager(this.style), 
                this.selectionManager = new visuals.PivotTableSelectionManager(this.hostServices, this.featureSwitches), 
                this.sortingManager = new visuals.PivotTableSortingManager(this.hostServices), this.sizeManager = new visuals.PivotTableSizeManager(this.hostServices), 
                this.sizeManager.onPersisting = function() {
                    _this.suppressNextRender = !0;
                }, this.tooltipService = visuals.createTooltipService(options.host), this.valueLabel = this.hostServices.getLocalizedString(TablixUtils.ValueLabel), 
                this.totalLabel = this.hostServices.getLocalizedString(TablixUtils.TotalLabel);
            }, PivotTable.prototype.update = function(options) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return options.type & powerbi.VisualUpdateType.Data ? [ 4, this.onDataViewChanged(options.dataViews, options.operationKind, options.viewport) ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.pivotTableControl && options.type & powerbi.VisualUpdateType.Resize ? (this.pivotTableControl.setWidth(options.viewport.width), 
                            this.pivotTableControl.setHeight(options.viewport.height), [ 4, this.renderControl(PivotTableRenderingMode.Incremental, null, null) ]) : [ 3, 4 ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.updatePersistedWidths = function(previousDataView) {
                var currentAutoSizeColumns = visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.getValue(this.dataView.metadata.objects);
                if (!currentAutoSizeColumns && this.pivotTableControl) {
                    for (var columnsWidth = [], columnHeaders = this.columnHierarchyNavigator.getHierarchyLeafNodes(), columnIndex = 0, _i = 0, pages_1 = this.pivotTableControl.getColumnWidthMeasureManager().getPageColumns(); _i < pages_1.length; _i++) for (var _a = 0, widths_1 = pages_1[_i].getColumnWidths(); _a < widths_1.length; _a++) {
                        var width = widths_1[_a];
                        columnsWidth.push({
                            node: columnHeaders[columnIndex],
                            width: width
                        }), columnIndex++;
                    }
                    for (var cornersWidth = [], rowDepth = this.rowHierarchyNavigator.getHierarchyDepth(), colDepth = this.columnHierarchyNavigator.getHierarchyDepth(), i = 0; i < rowDepth; i++) cornersWidth.push({
                        corner: this.rowHierarchyNavigator.getCorner(i, colDepth - 1),
                        width: this.pivotTableControl.getRowLevelWidthMeasureManager().getLevelWidth(i)
                    });
                    this.sizeManager.setMissingWidths(columnsWidth, cornersWidth);
                } else if (currentAutoSizeColumns && previousDataView && previousDataView.metadata && previousDataView.metadata.objects && !visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.getValue(previousDataView.metadata.objects)) {
                    for (var columnHeaders = this.columnHierarchyNavigator.getHierarchyLeafNodes(), cornerItems = [], rowDepth = this.rowHierarchyNavigator.getHierarchyDepth(), colDepth = this.columnHierarchyNavigator.getHierarchyDepth(), i = 0; i < rowDepth; i++) cornerItems.push(this.rowHierarchyNavigator.getCorner(i, colDepth - 1));
                    this.sizeManager.clearWidths(columnHeaders, cornerItems), this.suppressNextRender = !1;
                }
            }, PivotTable.prototype.onDataViewChanged = function(dataViews, operationKind, viewport) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var previousDataView, isDataComplete, valuesOnRow, _this = this;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (this.setExpandCollapseEnabled(), _.isEmpty(dataViews)) ? [ 3, 5 ] : (previousDataView = this.dataView, 
                            this.dataView = dataViews[0], isDataComplete = !this.dataView.metadata.segment, 
                            this.formattingProperties = this.tablixPropertyManager.getPivotTableObjects(this.dataView, function(key) {
                                for (var _a, args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                                return (_a = _this.hostServices).getLocalizedString.apply(_a, __spreadArray([ key ], args || []));
                            }, this.expandCollapseEnabled, this.style, this.featureSwitches), this.formatters = this.formattingProperties.formatters, 
                            this.tooltipFormatters = this.formattingProperties.tooltipFormatters, valuesOnRow = this.shouldApplyValuesOnRow(), 
                            operationKind !== powerbi.VisualDataChangeOperationKind.Append ? [ 3, 2 ] : [ 4, this.onAppendDataView(previousDataView, valuesOnRow, isDataComplete) ]);

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.onNewDataView(previousDataView, viewport, valuesOnRow, isDataComplete) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return this.pivotTableControl.restoreFocus(), [ 3, 6 ];

                          case 5:
                            this.dataView = void 0, this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(void 0, void 0), 
                            this.pivotTableControl && this.pivotTableControl.clear(), _a.label = 6;

                          case 6:
                            return this.waitingForData = !1, [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.onAppendDataView = function(previousDataView, valuesOnRow, isDataComplete) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var previousRowLeafCount, visibleRowItemStart, visibleColumnItemStart;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return previousRowLeafCount = this.rowHierarchyNavigator.getHierarchyLeafCount(), 
                            visibleRowItemStart = this.getPreviousVisibleRowStart(), visibleColumnItemStart = this.getPreviousVisibleColumnStart(), 
                            this.updateHierarchyNavigators(this.formattingProperties.rowHeaders.steppedLayout, valuesOnRow, this.formattingProperties.subtotals.rowSubtotalsPosition === visuals.rowSubtotalPosition.top, isDataComplete, previousDataView.matrix.rows.root !== this.dataView.matrix.rows.root), 
                            this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            previousRowLeafCount > this.rowHierarchyNavigator.getHierarchyLeafCount() || !_.isEqual(previousDataView.metadata.columns, this.dataView.metadata.columns) ? [ 4, this.renderControl(PivotTableRenderingMode.ClearMeasurement, this.getVisibleRowStart(visibleRowItemStart, !1), this.getVisibleColumnStart(visibleColumnItemStart)) ] : [ 3, 2 ];

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.renderControl(PivotTableRenderingMode.ClearRendering, null, null) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.onNewDataView = function(previousDataView, viewport, valuesOnRow, isDataComplete) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var stepped, visibleRowItemStart, visibleColumnItemStart, previousRowLeafCount, columnHierarchy, valueSources, isExpandCollapseEnabled;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (this.updatePersistedWidths(previousDataView), stepped = this.formattingProperties.rowHeaders.steppedLayout, 
                            visibleRowItemStart = this.getPreviousVisibleRowStart(), visibleColumnItemStart = this.getPreviousVisibleColumnStart(), 
                            previousRowLeafCount = this.rowHierarchyNavigator ? this.rowHierarchyNavigator.getHierarchyLeafCount() : 0, 
                            isExpandCollapseEnabled = this.columnHierarchyNavigator ? this.columnHierarchyNavigator.getHierarchyLeafCount() : 0, 
                            this.createOrUpdateControlAndNavigators(stepped, valuesOnRow, this.formattingProperties.subtotals.rowSubtotalsPosition === visuals.rowSubtotalPosition.top, isDataComplete), 
                            columnHierarchy = this.matrixNavigator.getColumnHierarchy(), valueSources = this.matrixNavigator.getValueSources(), 
                            this.sizeManager.onDataViewChanged(columnHierarchy, valueSources, this.dataView && this.dataView.metadata && this.dataView.metadata.objects, valuesOnRow), 
                            this.sortingManager.onDataViewChanged(this.matrixNavigator.getRowHierarchy(), columnHierarchy, valueSources, stepped, valuesOnRow), 
                            this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.suppressNextRender && previousRowLeafCount === this.rowHierarchyNavigator.getHierarchyLeafCount() && isExpandCollapseEnabled === this.columnHierarchyNavigator.getHierarchyLeafCount()) ? [ 3, 2 ] : (this.pivotTableControl.clear(), 
                            this.pivotTableControl.setWidth(viewport.width), this.pivotTableControl.setHeight(viewport.height), 
                            isExpandCollapseEnabled = this.hostServices.tooltips(), this.options.tooltipsEnabled && isExpandCollapseEnabled && isExpandCollapseEnabled.enabled() ? this.tooltipType = 1 : this.tooltipType = 0, 
                            this.interactionManager && this.interactionManager.setTooltipsEnabled(1 === this.tooltipType), 
                            isExpandCollapseEnabled = this.expandCollapseEnabled && "interactive" === this.options.expandCollapse.buttonsOption, 
                            this.binder.onDataViewChanged(this.dataView, this.formattingProperties, this.style, 0 === this.tooltipType, isExpandCollapseEnabled), 
                            this.applyContainerStyles(), [ 4, this.renderControl(PivotTableRenderingMode.ClearMeasurement, this.getVisibleRowStart(visibleRowItemStart, visuals.PivotTableSortingManager.hasSortingChanged(previousDataView, this.dataView)), this.getVisibleColumnStart(visibleColumnItemStart)) ]);

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.suppressNextRender = !1, [ 2 ];
                        }
                    });
                });
            }, PivotTable.prototype.applyContainerStyles = function() {
                var valueContainerFontProperties = this.binder.getCornerContainerFontInfo().fontProperties, floatingValueContainerElement = this.pivotTableControl.getCornerContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                valueContainerFontProperties = this.binder.getColumnHeaderContainerFontInfo().fontProperties, 
                floatingValueContainerElement = this.pivotTableControl.getColumnHeaderContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                valueContainerFontProperties = this.binder.getRowHeaderContainerFontInfo().fontProperties, 
                floatingValueContainerElement = this.pivotTableControl.getRowHeaderContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                floatingValueContainerElement = this.pivotTableControl.getFloatingRowHeaderContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                valueContainerFontProperties = this.binder.getValueContainerFontInfo().fontProperties, 
                floatingValueContainerElement = this.pivotTableControl.getBodyCellContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                floatingValueContainerElement = this.pivotTableControl.getFloatingBodyCellContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
            }, PivotTable.prototype.removeContainerStyles = function(element) {
                return element.style.removeProperty("font-weight"), element.style.removeProperty("font-style"), 
                element;
            }, PivotTable.prototype.onClearSelection = function() {
                this.selectionManager.clearLocal();
            }, PivotTable.prototype.onRestoreSelection = function(matchingSelectionFound) {
                matchingSelectionFound = this.selectionManager.restoreSelectionState(matchingSelectionFound.selection, this.matrixNavigator);
                return this.renderSelection(), matchingSelectionFound;
            }, PivotTable.prototype.shouldApplyValuesOnRow = function() {
                var firstColumnLevelSources = this.dataView.matrix, valueSources = firstColumnLevelSources.valueSources, firstColumnLevelSources = firstColumnLevelSources.columns.levels;
                if (_.isEmpty(firstColumnLevelSources)) return !1;
                firstColumnLevelSources = firstColumnLevelSources[0].sources;
                return this.formattingProperties.values.valuesOnRow && 1 < valueSources.length && !(_.find(firstColumnLevelSources, function(source) {
                    return source.isMeasure;
                }) && _.find(firstColumnLevelSources, function(source) {
                    return !source.isMeasure;
                }));
            }, PivotTable.prototype.updateHierarchyNavigators = function(stepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, rootChanged) {
                this.matrixNavigator.update(this.dataView.matrix, stepped, valuesOnRow, areRowSubtotalsBefore, isDataComplete, rootChanged, this.formatters, this.tooltipFormatters, this.getSubtotalByColumn()), 
                this.rowHierarchyNavigator.setHierarchy(this.matrixNavigator.getRowHierarchy()), 
                this.columnHierarchyNavigator.setHierarchy(this.matrixNavigator.getColumnHierarchy());
            }, PivotTable.prototype.getSubtotalByColumn = function() {
                for (var columnsSubtotals = {}, staticObjects = this.dataView.metadata.objects, areRowSubtotalsEnabled = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotals.getValue(staticObjects), areRowSubtotalsPerLevel = visuals.TablixProperties.PropSubTotalsPivotTableRowSubtotalsPerLevel.getValue(staticObjects), areColumnSubtotalsEnabled = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotals.getValue(staticObjects), areColumnSubtotalsPerLevel = visuals.TablixProperties.PropSubTotalsPivotTableColumnSubtotalsPerLevel.getValue(staticObjects), _i = 0, _a = this.dataView.metadata.columns; _i < _a.length; _i++) {
                    var column = _a[_i], masterSubtotalEnabled = void 0, perLevel = void 0;
                    if (column.roles) {
                        if (column.roles[visuals.matrixRoleNames.rows]) masterSubtotalEnabled = areRowSubtotalsEnabled, 
                        perLevel = areRowSubtotalsPerLevel; else {
                            if (!column.roles[visuals.matrixRoleNames.columns]) continue;
                            masterSubtotalEnabled = areColumnSubtotalsEnabled, perLevel = areColumnSubtotalsPerLevel;
                        }
                        columnsSubtotals[column.queryName] = masterSubtotalEnabled && (!perLevel || visuals.TablixProperties.PropSubTotalsPivotTableLevelSubtotalEnabled.getValue(column.objects));
                    }
                }
                return columnsSubtotals;
            }, PivotTable.prototype.renderControl = function(renderingMode, visibleRowStart, visibleColumnStart) {
                var deferred = this.hostServices.promiseFactory().defer();
                return visibleRowStart || visibleColumnStart ? this.pivotTableControl.makeVisible(renderingMode, visibleRowStart, visibleColumnStart, function(error) {
                    error ? deferred.reject(error) : deferred.resolve(null);
                }) : this.pivotTableControl.render(renderingMode, function(error) {
                    error ? deferred.reject(error) : deferred.resolve(null);
                }), deferred.promise;
            }, PivotTable.prototype.getPreviousVisibleRowStart = function() {
                if (this.pivotTableControl) {
                    var visibleRowStart = this.pivotTableControl.getVisibleRowStart();
                    if (!visibleRowStart) return null;
                    var visibleRowStartItem = this.rowHierarchyNavigator.getHierarchyLeafAt(visibleRowStart.rowIndex);
                    return visibleRowStartItem ? {
                        item: visibleRowStartItem,
                        offset: visibleRowStart.visibleHeight
                    } : null;
                }
            }, PivotTable.prototype.getPreviousVisibleColumnStart = function() {
                if (this.pivotTableControl) {
                    var visibleColumnStart = this.pivotTableControl.getVisibleColumnStart();
                    if (!visibleColumnStart) return null;
                    var visibleColumnStartItem = this.columnHierarchyNavigator.getHierarchyLeafAt(visibleColumnStart.columnIndex);
                    return visibleColumnStartItem ? {
                        item: visibleColumnStartItem,
                        offset: visibleColumnStart.visibleWidth
                    } : null;
                }
            }, PivotTable.prototype.getVisibleRowStart = function(previousVisibleRowStart, rowIndex) {
                if (!previousVisibleRowStart) return null;
                if (0 === this.pivotTableControl.getViewport().top) return null;
                if (rowIndex) return {
                    rowIndex: 0,
                    visibleHeight: Number.MAX_VALUE
                };
                rowIndex = visuals.PivotTableSelectionManager.getMatchingHeader(previousVisibleRowStart.item, this.rowHierarchyNavigator.getHierarchyItems());
                if (!rowIndex || !this.rowHierarchyNavigator.isLeaf(rowIndex)) return null;
                rowIndex = this.rowHierarchyNavigator.getLeafIndex(rowIndex);
                return void 0 === rowIndex ? null : {
                    rowIndex: rowIndex,
                    visibleHeight: previousVisibleRowStart.offset
                };
            }, PivotTable.prototype.getVisibleColumnStart = function(previousVisibleColumnStart) {
                if (!previousVisibleColumnStart) return null;
                var matchingColumnStartItem = visuals.PivotTableSelectionManager.getMatchingHeader(previousVisibleColumnStart.item, this.columnHierarchyNavigator.getHierarchyItems());
                return matchingColumnStartItem && this.columnHierarchyNavigator.isLeaf(matchingColumnStartItem) ? {
                    columnIndex: this.columnHierarchyNavigator.getLeafIndex(matchingColumnStartItem),
                    visibleWidth: previousVisibleColumnStart.offset
                } : null;
            }, PivotTable.prototype.renderSelection = function() {
                this.pivotTableControl.render(PivotTableRenderingMode.ClearRendering);
            }, PivotTable.prototype.createOrUpdateControlAndNavigators = function(stepped, valuesOnRow, binderOptions, pivotTableContainer) {
                var _this = this, compositeGroupSeparator = this.hostServices.getLocalizedString("ListJoin_Separator");
                this.matrixNavigator || (this.matrixNavigator = new visuals.MatrixHierarchyNavigator(compositeGroupSeparator, this.tablixPropertyManager.tablixProperties, this.hostServices)), 
                this.rowHierarchyNavigator ? stepped ? this.rowHierarchyNavigator instanceof visuals.PivotTableSteppedHierarchyNavigator || (this.rowHierarchyNavigator = new visuals.PivotTableSteppedHierarchyNavigator(this.matrixNavigator)) : this.rowHierarchyNavigator instanceof visuals.PivotTableSteppedHierarchyNavigator && (this.rowHierarchyNavigator = new visuals.PivotTableHierarchyNavigator(this.matrixNavigator)) : (this.rowHierarchyNavigator = new (stepped ? visuals.PivotTableSteppedHierarchyNavigator : visuals.PivotTableHierarchyNavigator)(this.matrixNavigator), 
                this.columnHierarchyNavigator = new visuals.PivotTableHierarchyNavigator(this.matrixNavigator)), 
                this.updateHierarchyNavigators(stepped, valuesOnRow, binderOptions, pivotTableContainer, !0), 
                this.pivotTableControl ? this.pivotTableControl.getSteppedLayout() !== stepped && this.switchRowHeadersLayout(stepped) : (binderOptions = {
                    onBindRowHeader: function(item) {
                        _this.onBindRowHeader(item);
                    },
                    onHyperlinkClicked: function(url, event) {
                        return _this.onHyperlinkClicked(url, event);
                    },
                    onRowHeaderExpansionChange: function(header, isCollapsed) {
                        return _this.onHeaderExpansionChange(header, [ visuals.matrixRoleNames.rows ], isCollapsed);
                    },
                    defaultTotalLabel: this.totalLabel,
                    selectionEnabled: this.options.selection && this.options.selection.enabled,
                    sortingEnabled: this.options.sorting && this.options.sorting.enabled,
                    sortIconEnabled: this.options.sorting && this.options.sorting.showActiveSortIcon,
                    interactivityIndicatorEnabled: this.options.interactivityIndicatorEnabled,
                    hyperlinksEnabled: this.featureSwitches.conditionalTablixWebURL,
                    tablixProperties: this.tablixPropertyManager.tablixProperties
                }, (pivotTableContainer = document.createElement("div")).className = "pivotTableContainer", 
                this.element.append(pivotTableContainer), this.binder = new visuals.PivotTableBinder(binderOptions, this.selectionManager, this.sortingManager, this.hostServices, pivotTableContainer), 
                this.pivotTableControl = new PivotTableControl(pivotTableContainer, this.sizeManager, this.createControlOptions(), !1), 
                this.pivotTableControl.setClassName("pivotTable"), this.switchRowHeadersLayout(stepped), 
                this.pivotTableControl.setColumnNavigator(this.columnHierarchyNavigator), this.binder.setColumnNavigator(this.columnHierarchyNavigator), 
                this.pivotTableControl.setBinder(this.binder));
            }, PivotTable.prototype.createControlOptions = function() {
                var _this = this, scrollingEnabled = this.options.scrolling.enabled, columnResizingEnabled = this.options.columnResizing.enabled;
                this.options.tooltipsEnabled && (this.interactionManager = new visuals.PivotTableInteractionManager(this.tooltipService, this.selectionManager, this.valueLabel, this.totalLabel));
                var interactionManager = this.interactionManager, isExpandCollapseEnabled = "interactive" === this.options.expandCollapse.buttonsOption;
                return this.options.selection.enabled ? {
                    rowHeaderClickHandler: function(rowHeader, mouseEvent) {
                        return _this.onItemClick(rowHeader, mouseEvent, visuals.PivotTableSelectionMode.RowHeader);
                    },
                    rowHeaderContextMenuHandler: function(rowHeader, mouseEvent) {
                        return _this.onItemContextMenu(rowHeader, visuals.PivotTableSelectionMode.RowHeader, mouseEvent, visuals.matrixRoleNames.rows);
                    },
                    rowHeaderInteractionHandler: interactionManager ? interactionManager.getRowHeaderHandler() : null,
                    rowHeaderFocusHandler: function(rowHeader) {
                        return _this.onRowHeaderFocus(rowHeader);
                    },
                    rowHeaderExpandCollapseHandler: isExpandCollapseEnabled ? function(rowHeader, isCollapsed) {
                        return _this.onHeaderExpansionChange(rowHeader, [ visuals.matrixRoleNames.rows ], isCollapsed);
                    } : null,
                    columnHeaderClickHandler: function(columnHeader, mouseEvent) {
                        return _this.onItemClick(columnHeader, mouseEvent, visuals.PivotTableSelectionMode.ColumnHeader);
                    },
                    columnHeaderContextMenuHandler: function(columnHeader, mouseEvent) {
                        return _this.onItemContextMenu(columnHeader, visuals.PivotTableSelectionMode.ColumnHeader, mouseEvent, visuals.matrixRoleNames.columns);
                    },
                    columnHeaderInteractionHandler: interactionManager ? interactionManager.getColumnHeaderHandler() : null,
                    columnHeaderFocusHandler: function(columnHeader) {
                        return _this.onColumnHeaderFocus(columnHeader);
                    },
                    bodyCellClickHandler: function(bodyCell, mouseEvent) {
                        return _this.onItemClick(bodyCell, mouseEvent, visuals.PivotTableSelectionMode.BodyCell);
                    },
                    bodyCellContextMenuHandler: function(bodyCell, mouseEvent) {
                        return _this.onItemContextMenu(bodyCell, visuals.PivotTableSelectionMode.BodyCell, mouseEvent, visuals.matrixRoleNames.values);
                    },
                    bodyCellInteractionHandler: interactionManager ? interactionManager.getBodyHandler() : null,
                    bodyCellFocusHandler: function(bodyCell) {
                        return _this.onBodyCellFocus(bodyCell);
                    },
                    cornerCellClickHandler: function(cornerCell, mouseEvent) {
                        return _this.onCornerCellClick(cornerCell, mouseEvent);
                    },
                    cornerCellContextMenuHandler: function(cornerCell, mouseEvent) {
                        return _this.onCornerCellContextMenu(cornerCell, mouseEvent);
                    },
                    cornerCellInteractionHandler: interactionManager ? interactionManager.getCornerHandler() : null,
                    cornerCellFocusHandler: function(cornerCell) {
                        return _this.onCornerCellFocus(cornerCell);
                    },
                    cellContentActivationHandler: function(element, event) {
                        return _this.onContentActivation(element, event);
                    },
                    whitespaceClickHandler: function(mouseEvent) {
                        return _this.onWhitespaceClick();
                    },
                    scrollingEnabled: scrollingEnabled,
                    columnResizingEnabled: columnResizingEnabled,
                    rowLevelResizingEnabled: columnResizingEnabled,
                    onScroll: function() {
                        return _this.onScroll();
                    }
                } : {
                    rowHeaderClickHandler: null,
                    rowHeaderContextMenuHandler: null,
                    rowHeaderInteractionHandler: interactionManager ? interactionManager.getRowHeaderHandler() : null,
                    rowHeaderFocusHandler: null,
                    rowHeaderExpandCollapseHandler: isExpandCollapseEnabled ? function(rowHeader, isCollapsed) {
                        return _this.onHeaderExpansionChange(rowHeader, [ visuals.matrixRoleNames.rows ], isCollapsed);
                    } : null,
                    columnHeaderClickHandler: null,
                    columnHeaderContextMenuHandler: null,
                    columnHeaderInteractionHandler: interactionManager ? interactionManager.getColumnHeaderHandler() : null,
                    columnHeaderFocusHandler: null,
                    bodyCellClickHandler: null,
                    bodyCellContextMenuHandler: null,
                    bodyCellInteractionHandler: interactionManager ? interactionManager.getBodyHandler() : null,
                    bodyCellFocusHandler: null,
                    cornerCellClickHandler: null,
                    cornerCellContextMenuHandler: null,
                    cornerCellInteractionHandler: interactionManager ? interactionManager.getCornerHandler() : null,
                    cornerCellFocusHandler: null,
                    cellContentActivationHandler: null,
                    whitespaceClickHandler: null,
                    scrollingEnabled: scrollingEnabled,
                    columnResizingEnabled: columnResizingEnabled,
                    rowLevelResizingEnabled: columnResizingEnabled,
                    onScroll: function() {
                        return _this.onScroll();
                    }
                };
            }, PivotTable.prototype.onScroll = function() {
                this.interactionManager && !this.interactionManager.tooltipVisible() && this.interactionManager.hideTooltip();
            }, PivotTable.prototype.onWhitespaceClick = function() {
                this.selectionManager.onWhitespaceClick(), this.renderSelection();
            }, PivotTable.prototype.onHyperlinkClicked = function(url, event) {
                this.hostServices.onHyperlinkClick(url, event);
            }, PivotTable.prototype.onItemClick = function(matchingItem, selectMode, selectionMode) {
                this.selectionManager.isDrillingEnabled(matchingItem, selectMode, selectionMode) || (selectionMode === visuals.PivotTableSelectionMode.ColumnHeader && this.sortingManager.isColumnHeaderSortable(matchingItem) ? this.options.sorting.enabled && this.sortingManager.sortColumnHeader(matchingItem) : (matchingItem = visuals.PivotTableSelectionManager.getMatchingItem(matchingItem, selectionMode, this.rowHierarchyNavigator.getHierarchyItems(), this.columnHierarchyNavigator.getHierarchyItems(), this.rowHierarchyNavigator), 
                selectMode = BrowserUtils.isCtrlOrMeta(selectMode) || 1 === this.hostServices.dataMultiSelectMode() ? 3 : 0, 
                matchingItem && (this.selectionManager.select(matchingItem, selectionMode, selectMode), 
                this.renderSelection())));
            }, PivotTable.prototype.onRowHeaderFocus = function(hierarchyLevelText) {
                var cellInfoParts = visuals.PivotTableInteractivityUtils.getGroupingDataItems(hierarchyLevelText, this.valueLabel, !1, this.totalLabel), additionalInfo = [];
                switch (this.rowHierarchyNavigator.getExpansionState(hierarchyLevelText)) {
                  case 1:
                    additionalInfo.push(this.hostServices.getLocalizedString("FieldListProperty_Collapsed"));
                    break;

                  case 0:
                    additionalInfo.push(this.hostServices.getLocalizedString("FieldListProperty_Expanded"));
                }
                hierarchyLevelText = this.getHierarchyLevelInfo(hierarchyLevelText);
                additionalInfo.push(hierarchyLevelText), this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage(cellInfoParts, additionalInfo));
            }, PivotTable.prototype.onColumnHeaderFocus = function(item) {
                var cellInfoParts = visuals.PivotTableInteractivityUtils.getGroupingDataItems(item, this.valueLabel, !1, this.totalLabel), levelItemsCount = this.columnHierarchyNavigator.getItemsByLevel(item.position.row.index), headerIndexInLevel = levelItemsCount.indexOf(item) + 1, levelItemsCount = levelItemsCount.length, additionalInfo = [ this.hostServices.getLocalizedString("Visual_Tablix_ColumnHeader"), this.hostServices.getLocalizedString("Generic_ListPosition", headerIndexInLevel, levelItemsCount) ];
                if (this.sortingManager.isColumnHeaderSortable(item)) switch (this.sortingManager.getColumnHeaderSortDirection(item)) {
                  case 1:
                    additionalInfo.push(this.hostServices.getLocalizedString("Field_Sorted_Ascending"));
                    break;

                  case 2:
                    additionalInfo.push(this.hostServices.getLocalizedString("Field_Sorted_Descending"));
                    break;

                  default:
                    additionalInfo.push(this.hostServices.getLocalizedString("Field_Sorting_Possible"));
                }
                this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage(cellInfoParts, additionalInfo));
            }, PivotTable.prototype.onBodyCellFocus = function(cellInfoParts) {
                cellInfoParts = visuals.PivotTableInteractivityUtils.getBodyCellInfo(cellInfoParts, this.valueLabel, !1, this.totalLabel);
                this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage(cellInfoParts));
            }, PivotTable.prototype.onHeaderExpansionChange = function(nodeIndex, roles, isCollapsed) {
                var selector = this.selectionManager.createSelectorsByColumn(nodeIndex), nodeIndex = this.selectionManager.getHierarchyNodeIndex(nodeIndex);
                this.hostServices.setNodeExpansionState({
                    dataRoles: roles,
                    data: selector,
                    isCollapse: isCollapsed,
                    nodeIndex: nodeIndex
                });
            }, PivotTable.prototype.onItemContextMenu = function(item, selectionMode, mouseEvent, roleName) {
                mouseEvent.stopPropagation(), mouseEvent.preventDefault(), this.selectionManager.onItemContextMenu(item, selectionMode, mouseEvent, [ roleName ]);
            }, PivotTable.prototype.onCornerCellClick = function(cornerCell, mouseEvent) {
                this.options.sorting.enabled && this.sortingManager.isCornerSortable(cornerCell) && this.sortingManager.sortCorner(cornerCell);
            }, PivotTable.prototype.onCornerCellContextMenu = function(cornerCell, mouseEvent) {}, 
            PivotTable.prototype.onCornerCellFocus = function(cornerCell) {
                var cellInfoParts = visuals.PivotTableInteractivityUtils.getCornerCellParts(cornerCell), additionalInfo = [];
                if (this.sortingManager.isCornerSortable(cornerCell)) switch (this.sortingManager.getCornerSortDirection(cornerCell)) {
                  case 1:
                    additionalInfo.push(this.hostServices.getLocalizedString("Field_Sorted_Ascending"));
                    break;

                  case 2:
                    additionalInfo.push(this.hostServices.getLocalizedString("Field_Sorted_Descending"));
                    break;

                  default:
                    additionalInfo.push(this.hostServices.getLocalizedString("Field_Sorting_Possible"));
                }
                this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage(cellInfoParts, additionalInfo));
            }, PivotTable.prototype.onContentActivation = function(link, event) {
                link = link.querySelector("a");
                link && link.dispatchEvent(event);
            }, PivotTable.prototype.switchRowHeadersLayout = function(stepped) {
                this.pivotTableControl.setSteppedLayout(stepped), this.pivotTableControl.setRowNavigator(this.rowHierarchyNavigator), 
                this.binder.setRowNavigator(this.rowHierarchyNavigator);
            }, PivotTable.prototype.onBindRowHeader = function(item) {
                this.needsMoreData(item) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, PivotTable.prototype.needsMoreData = function(item) {
                if (this.waitingForData || !this.dataView || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var loadMoreThreshold = this.rowHierarchyNavigator.getHierarchyLeafCount() * PivotTable.preferredLoadMoreThreshold;
                return this.rowHierarchyNavigator.getLeafIndex(item) >= loadMoreThreshold;
            }, PivotTable.prototype.getFormattingModel = function() {
                if (this.dataView) return this.tablixPropertyManager.getFormattingModel(this.hostServices, this.formattingProperties, this.dataView, visuals.controls.TablixType.PivotTable, this.expandCollapseEnabled, this.featureSwitches, this.style);
            }, PivotTable.prototype.enumerateObjectInstances = function(options) {
                var _this = this, enumeration = new visuals.ObjectEnumerationBuilder();
                return this.dataView && this.tablixPropertyManager.enumerateObjectInstances(options, enumeration, this.dataView, visuals.controls.TablixType.PivotTable, function(key) {
                    for (var _a, args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                    return (_a = _this.hostServices).getLocalizedString.apply(_a, __spreadArray([ key ], args || []));
                }, this.featureSwitches, this.expandCollapseEnabled, this.style), enumeration.complete();
            }, PivotTable.prototype.enumerateObjectRepetition = function() {
                var enumeration = [];
                return this.dataView && this.tablixPropertyManager.enumerateObjectRepetition(enumeration, this.dataView, visuals.controls.TablixType.PivotTable, this.featureSwitches.conditionalTablixWebURL), 
                enumeration;
            }, PivotTable.prototype.getHierarchyLevelInfo = function(item) {
                return this.hostServices.getLocalizedString("Level") + " " + (this.rowHierarchyNavigator.getLevel(item) + 1);
            }, PivotTable.prototype.setExpandCollapseEnabled = function() {
                this.expandCollapseEnabled = this.hostServices.canExpandCollapse([ visuals.matrixRoleNames.rows ]) && "hidden" !== this.options.expandCollapse.buttonsOption;
            }, PivotTable.preferredLoadMoreThreshold = .8, PivotTable;
        }();
        visuals.PivotTable = PivotTable;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var CellStyle = powerbi.visuals.controls.internal.TablixUtils.CellStyle, CssConstants = jsCommon.CssConstants, EdgeSettings = powerbi.visuals.controls.internal.TablixUtils.EdgeSettings, ElementBuilder = powerbi.visuals.controls.pivotTable.ElementBuilder, encodeHtml = jsCommon.StringExtensions.encodeHtml, Utility = jsCommon.Utility, FontSize = visuals.Units.FontSize, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, UrlScheme = jsCommon.UrlUtils.UrlScheme, UrlUtils = jsCommon.UrlUtils, PivotTableBinder = function() {
            function PivotTableBinder(options, selectionManager, sortingManager, hostServices, container) {
                this.selectionManager = selectionManager, this.sortingManager = sortingManager, 
                this.hostServices = hostServices, this.binderOptions = options, this.measureElement = visuals.PivotTableBinderUtils.addMeasureElement(container), 
                this.legacyTooltipsEnabled = !0;
            }
            return PivotTableBinder.prototype.setRowNavigator = function(rowHierarchyNavigator) {
                this.rowNavigator = rowHierarchyNavigator;
            }, PivotTableBinder.prototype.setColumnNavigator = function(columnHierarchyNavigator) {
                this.columnNavigator = columnHierarchyNavigator;
            }, PivotTableBinder.prototype.getRowHeaderBinding = function(rowHeader, forMeasure) {
                var _this = this;
                this.binderOptions.onBindRowHeader && !forMeasure && this.binderOptions.onBindRowHeader(rowHeader);
                var iconName, contentBinding, cellBinding, legacyTooltip = rowHeader.hierarchyLevel && rowHeader.hierarchyLevel.sources, urlType = legacyTooltip && 1 < legacyTooltip.length, hasContent = encodeHtml(this.getRowHeaderLabel(rowHeader)), legacyTooltip = hasContent;
                this.formattingProperties.rowHeaders.wordWrap && (hasContent = visuals.PivotTableBinderUtils.replaceEncodedNewLines(hasContent)), 
                _.isEmpty(hasContent) && (hasContent = TablixUtils.StringNonBreakingSpace), urlType || (expandCollapseButtonBinding = this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), 
                (urlType = TablixUtils.getUrlScheme(expandCollapseButtonBinding, hasContent)) !== UrlScheme.NONE ? (contentBinding = encodeHtml(rowHeader.valueFormatted), 
                iconName = visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.rowHeaders.urlIcon, urlType), 
                contentBinding = visuals.PivotTableBinderUtils.addHyperlink(hasContent, contentBinding, iconName, function(url, event) {
                    return _this.binderOptions.onHyperlinkClicked(url, event);
                })) : TablixUtils.isImage(rowHeader, expandCollapseButtonBinding) && (contentBinding = visuals.PivotTableBinderUtils.buildImage(hasContent, this.formattingProperties.grid.imageHeight))), 
                contentBinding = contentBinding ? {
                    children: [ contentBinding ],
                    classNames: [],
                    styleProperties: {},
                    attributes: {}
                } : {
                    content: hasContent,
                    classNames: [],
                    styleProperties: {},
                    attributes: {}
                };
                var expandCollapseButtonBinding = this.getExpandCollapseButtonBinding(rowHeader);
                expandCollapseButtonBinding ? (cellBinding = {
                    attributes: {},
                    classNames: [ "expandableCell" ],
                    styleProperties: {},
                    children: [ expandCollapseButtonBinding, contentBinding ]
                }, contentBinding.classNames.push("expandableContent")) : cellBinding = contentBinding;
                hasContent = !_.isEmpty(null == hasContent ? void 0 : hasContent.trim());
                return _.assign(cellBinding.styleProperties, this.getRowHeaderStyleAttributes(rowHeader, forMeasure, hasContent)), 
                this.legacyTooltipsEnabled && (cellBinding.attributes.title = legacyTooltip), this.addRowHeaderClasses(rowHeader, !!iconName, contentBinding.classNames, cellBinding.classNames), 
                cellBinding;
            }, PivotTableBinder.prototype.getExpandCollapseButtonBinding = function(header) {
                var _this = this, buttonSize = this.getRowsExpandCollapseButtonSize(header);
                if (0 !== buttonSize) {
                    var clickHandler, glyphClass, label, headerName, content, classes = [ "expandCollapseButton" ];
                    return void 0 === header.isCollapsed ? content = "" : (glyphClass = header.isCollapsed ? "pbi-glyph-explore-content-single" : "pbi-glyph-collapse-content-single", 
                    label = header.isCollapsed ? this.hostServices.getLocalizedString("FieldListProperty_Collapsed") : this.hostServices.getLocalizedString("FieldListProperty_Expanded"), 
                    headerName = (header.name || header.tooltipValueFormatted).toString(), content = '<i aria-label="' + encodeHtml(headerName) + " " + label + '" class="glyphicon ' + glyphClass + '"></i>', 
                    this.isExpandCollapseEnabled ? (classes.push("clickable"), clickHandler = function(event) {
                        _this.binderOptions.onRowHeaderExpansionChange(header, !header.isCollapsed), event.stopPropagation();
                    }) : classes.push("disabled")), {
                        content: content,
                        classNames: classes,
                        styleProperties: {
                            width: buttonSize + TablixUtils.UnitOfMeasurement,
                            height: buttonSize + TablixUtils.UnitOfMeasurement,
                            color: this.formattingProperties.rowHeaders.expandCollapseButtonsColor,
                            "font-size": this.expandCollapseButtonFontInfo.fontProperties.size.px + TablixUtils.UnitOfMeasurement
                        },
                        attributes: {},
                        clickHandler: clickHandler
                    };
                }
            }, PivotTableBinder.prototype.getRowsExpandCollapseButtonSize = function(header) {
                return this.formattingProperties.rowHeaders.showExpandCollapseButtons && header.hierarchyLevel && (header.hierarchyLevel.canBeExpanded || header.level && this.formattingProperties.rowHeaders.steppedLayout) ? this.expandCollapseButtonFontInfo.measuredFontHeight : 0;
            }, PivotTableBinder.prototype.getColumnHeaderBinding = function(sortDirection, contentBinding) {
                var content = encodeHtml(this.getColumnHeaderLabel(sortDirection));
                this.legacyTooltipsEnabled && (showFuture = {
                    title: content
                }), this.formattingProperties.columnHeaders.wordWrap && (content = visuals.PivotTableBinderUtils.replaceEncodedNewLines(content)), 
                _.isEmpty(content) && (content = TablixUtils.StringNonBreakingSpace);
                var hyperlink = !_.isEmpty(null == content ? void 0 : content.trim()), containerBinding = this.getColumnHeaderStyle(sortDirection, this.getColumnHeaderFontInfo(sortDirection), contentBinding, hyperlink), sortIcon = containerBinding.getExtraBottom();
                sortDirection.position.row.isLast && (containerBinding.paddings.bottom += visuals.PivotTableBinderUtils.getSortIconHeight(this.glyphFontInfo.measuredFontHeight));
                var iconName, metadata = this.columnNavigator.getColumnHeaderMetadataColumn(sortDirection), urlType = TablixUtils.getUrlScheme(metadata, content), contentBinding = {
                    tagName: null,
                    content: content,
                    attributes: {},
                    classNames: [],
                    styleProperties: {}
                };
                urlType !== UrlScheme.NONE ? (hyperlink = encodeHtml(sortDirection.valueFormatted), 
                iconName = visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.columnHeaders.urlIcon, urlType), 
                contentBinding = visuals.PivotTableBinderUtils.addHyperlink(contentBinding, hyperlink, iconName, this.binderOptions.onHyperlinkClicked)) : TablixUtils.isImage(sortDirection, metadata) && (contentBinding = visuals.PivotTableBinderUtils.buildImage(content, this.formattingProperties.grid.imageHeight));
                var showFuture, containerBinding = {
                    tagName: "div",
                    children: [ contentBinding ],
                    classNames: this.getColumnHeaderClasses(sortDirection, !!iconName),
                    styleProperties: this.getColumnHeaderStyleAttributes(sortDirection, containerBinding),
                    attributes: showFuture
                };
                return sortDirection.position.row.isLast && (showFuture = this.binderOptions.sortingEnabled && this.sortingManager.isColumnHeaderSortable(sortDirection), 
                sortDirection = this.sortingManager.getColumnHeaderSortDirection(sortDirection), 
                sortIcon = visuals.PivotTableBinderUtils.buildSortIcon(sortDirection, this.binderOptions.sortIconEnabled, showFuture, visuals.PivotTableSortingManager.getNextSortDirection(sortDirection, metadata), sortIcon, this.glyphFontInfo.textProperties.fontSize), 
                containerBinding.children.push(sortIcon)), containerBinding;
            }, PivotTableBinder.prototype.getBodyCellBinding = function(bodyCell, data_1, rowHeight, columnWidth) {
                var containerAttributes, urlIconName, content = encodeHtml(this.getBodyCellContent(bodyCell));
                this.legacyTooltipsEnabled && (containerAttributes = {
                    title: content
                });
                var iconSettings = !_.isEmpty(null == content ? void 0 : content.trim()), cellStyle = this.getBodyCellStyle(bodyCell, this.getBodyCellFontInfo(bodyCell), data_1, iconSettings);
                this.formattingProperties.values.underline && iconSettings && (cellStyle.textDecoration = CssConstants.underlineValue);
                var contentBinding, hyperlink = bodyCell.columnMetadata, dataBarsSettings = hyperlink && this.columnsDataBarsSettings[hyperlink.queryName], applyNumericDataBarsForNonTotal = dataBarsSettings && !bodyCell.isTotal && !bodyCell.hasSubtotalStyle && _.isNumber(bodyCell.dataPoint), urlType = hyperlink && this.formattingProperties.columnFormatting[hyperlink.queryName], iconSettings = powerbi.StructuralObjectValue.merge(urlType && urlType.icon, bodyCell.icon), hyperlink = bodyCell.hyperlink;
                iconSettings && "IconOnly" === iconSettings.layout ? content = "" : (_.isEmpty(content) && (content = TablixUtils.StringNonBreakingSpace), 
                bodyCell.isKpi ? (content = visuals.PivotTableBinderUtils.createKpiDomString(bodyCell.columnMetadata.kpi, bodyCell.textContent), 
                containerAttributes = null) : applyNumericDataBarsForNonTotal && dataBarsSettings.hideText ? content = data_1 ? TablixUtils.StringNonBreakingSpace : "" : (this.formattingProperties.values.wordWrap && (content = visuals.PivotTableBinderUtils.replaceEncodedNewLines(content)), 
                (urlType = TablixUtils.getUrlScheme(bodyCell.columnMetadata, content)) !== UrlScheme.NONE ? (urlIconName = visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.values.urlIcon, urlType), 
                contentBinding = visuals.PivotTableBinderUtils.addHyperlink(content, encodeHtml(bodyCell.textContent), urlIconName, this.binderOptions.onHyperlinkClicked), 
                hyperlink = void 0) : this.isImage(bodyCell) ? (containerBinding = Utility.encodeUriForImageDataSvg(bodyCell.textContent), 
                contentBinding = visuals.PivotTableBinderUtils.buildImage(containerBinding, this.formattingProperties.grid.imageHeight)) : this.isSparkline(bodyCell) && (content = data_1 ? TablixUtils.StringNonBreakingSpace : "")));
                var iconSize, containerBinding = {
                    tagName: "div",
                    classNames: [],
                    styleProperties: {},
                    attributes: {}
                };
                return (contentBinding = this.binderOptions.hyperlinksEnabled && (contentBinding || "" !== content && content !== TablixUtils.StringNonBreakingSpace) && hyperlink && UrlUtils.getUrlScheme(hyperlink) !== UrlScheme.NONE ? visuals.PivotTableBinderUtils.addHyperlink(contentBinding || content, encodeHtml(hyperlink), null, this.binderOptions.onHyperlinkClicked, !0, !0) : contentBinding) ? containerBinding.children = [ contentBinding ] : containerBinding.content = content, 
                contentBinding = containerBinding, iconSettings && (iconSize = this.getBodyCellFontInfo(bodyCell).measuredFontHeight, 
                containerBinding = visuals.PivotTableBinderUtils.addIconToCell(iconSettings, iconSize, contentBinding)), 
                applyNumericDataBarsForNonTotal && !data_1 && (containerBinding = visuals.PivotTableBinderUtils.addDataBarsToCell(containerBinding, dataBarsSettings, cellStyle, bodyCell.dataPoint)), 
                !data_1 && this.isSparkline(bodyCell) && (data_1 = bodyCell.dataPoint, containerBinding = visuals.PivotTableBinderUtils.addSparklineToCell(containerBinding, this.sparklineSettings[bodyCell.columnMetadata.queryName], cellStyle, data_1, rowHeight, columnWidth, iconSettings, iconSize)), 
                this.addBodyCellClasses(bodyCell, !!urlIconName, contentBinding.classNames, containerBinding.classNames), 
                this.addBodyCellStyleAttributes(bodyCell, cellStyle, contentBinding.styleProperties, containerBinding.styleProperties), 
                containerBinding.attributes = containerAttributes, containerBinding;
            }, PivotTableBinder.prototype.getCornerCellBinding = function(cornerCell, showFuture) {
                var attributes, content = encodeHtml(this.getCornerCellLabel(cornerCell));
                this.legacyTooltipsEnabled && (attributes = {
                    title: content
                }), this.formattingProperties.columnHeaders.wordWrap && (content = visuals.PivotTableBinderUtils.replaceEncodedNewLines(content)), 
                _.isEmpty(content) && (content = TablixUtils.StringNonBreakingSpace);
                var sortIcon = !_.isEmpty(null == content ? void 0 : content.trim()), cellStyle = this.getCornerCellStyle(cornerCell, this.getCornerCellFontInfo(), showFuture, sortIcon);
                return cornerCell.position.row.isLast && (showFuture = this.binderOptions.sortingEnabled && this.sortingManager.isCornerSortable(cornerCell), 
                sortIcon = this.sortingManager.getCornerSortDirection(cornerCell), sortIcon = visuals.PivotTableBinderUtils.buildSortIcon(sortIcon, this.binderOptions.sortIconEnabled, showFuture, null == sortIcon ? 1 : sortIcon, cellStyle.getExtraBottom(), this.glyphFontInfo.textProperties.fontSize), 
                content += ElementBuilder.build(sortIcon), cellStyle.paddings.bottom += visuals.PivotTableBinderUtils.getSortIconHeight(this.glyphFontInfo.measuredFontHeight)), 
                {
                    content: content,
                    classNames: this.getCornerCellClasses(cornerCell),
                    styleProperties: cellStyle.getAttributes(),
                    attributes: attributes
                };
            }, PivotTableBinder.prototype.getApproximateRowHeaderWidth = function(buttonSize) {
                var approximateWidth, _b = this.rowNavigator.getRowHeaderMetadataColumn(buttonSize), content = this.getRowHeaderLabel(buttonSize), urlType = TablixUtils.getUrlScheme(_b, content), fontHeight = this.rowHeaderFontInfo.fontProperties.size.px;
                approximateWidth = urlType !== UrlScheme.NONE && visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.rowHeaders.urlIcon, urlType) ? fontHeight : TablixUtils.isImage(buttonSize, _b) ? this.formattingProperties.grid.imageHeight : (_b = this.getRowHeaderFontInfo(buttonSize), 
                approximateWidth = this.getRowHeaderStyle(buttonSize, _b, !0, !0), visuals.PivotTableBinderUtils.measureText(content, _b.textProperties) + (null !== (_b = null === (_b = approximateWidth.borders.left) || void 0 === _b ? void 0 : _b.weight) && void 0 !== _b ? _b : 0) + (null !== (approximateWidth = null === (approximateWidth = approximateWidth.borders.right) || void 0 === approximateWidth ? void 0 : approximateWidth.weight) && void 0 !== approximateWidth ? approximateWidth : 0));
                buttonSize = this.getRowsExpandCollapseButtonSize(buttonSize);
                return 0 < buttonSize && (approximateWidth += buttonSize + visuals.PivotTableBinderUtils.ExpandCollapseRightMargin), 
                approximateWidth;
            }, PivotTableBinder.prototype.getApproximateColumnHeaderWidth = function(_d) {
                var _b = this.columnNavigator.getColumnHeaderMetadataColumn(_d), content = this.getColumnHeaderLabel(_d), urlType = TablixUtils.getUrlScheme(_b, content);
                if (urlType !== UrlScheme.NONE && visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.columnHeaders.urlIcon, urlType)) return this.columnHeaderFontInfo.fontProperties.size.px;
                if (TablixUtils.isImage(_d, _b)) return this.formattingProperties.grid.imageHeight;
                var _b = this.getColumnHeaderFontInfo(_d), _d = this.getColumnHeaderStyle(_d, _b, !0, !0);
                return visuals.PivotTableBinderUtils.measureText(content, _b.textProperties) + (null !== (_b = null === (_b = _d.borders.left) || void 0 === _b ? void 0 : _b.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_d = _d.borders.right) || void 0 === _d ? void 0 : _d.weight) && void 0 !== _d ? _d : 0);
            }, PivotTableBinder.prototype.getApproximateBodyCellWidth = function(_d) {
                var iconSize = 0;
                if (_d.icon) {
                    if (iconSize = this.getBodyCellFontInfo(_d).measuredFontHeight, "IconOnly" === _d.icon.layout) return iconSize;
                    iconSize += visuals.PivotTableBinderUtils.TablixIconMargin;
                }
                if (_d.isKpi) return iconSize + this.valueFontInfo.fontProperties.size.px;
                var _b = _d.columnMetadata && this.columnsDataBarsSettings[_d.columnMetadata.queryName];
                if (_b && _b.hideText && !_d.isTotal && _.isNumber(_d.dataPoint)) return iconSize;
                var content = this.getBodyCellContent(_d);
                if (this.isUrlIcon(_d, content)) return iconSize + this.valueFontInfo.fontProperties.size.px;
                if (this.isImage(_d)) return iconSize + this.formattingProperties.grid.imageHeight;
                if (this.isSparkline(_d)) return iconSize;
                var _b = this.getBodyCellFontInfo(_d), _d = this.getBodyCellStyle(_d, _b, !0, !0);
                return iconSize + visuals.PivotTableBinderUtils.measureText(content, _b.textProperties) + (null !== (_b = null === (_b = _d.borders.left) || void 0 === _b ? void 0 : _b.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_d = _d.borders.right) || void 0 === _d ? void 0 : _d.weight) && void 0 !== _d ? _d : 0);
            }, PivotTableBinder.prototype.getApproximateCornerCellWidth = function(cornerCell) {
                var _b = this.getCornerCellFontInfo(), _d = this.getCornerCellStyle(cornerCell, _b, !0, !0);
                return visuals.PivotTableBinderUtils.measureText(this.getCornerCellLabel(cornerCell), _b.textProperties) + (null !== (_b = null === (_b = _d.borders.left) || void 0 === _b ? void 0 : _b.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_d = _d.borders.right) || void 0 === _d ? void 0 : _d.weight) && void 0 !== _d ? _d : 0);
            }, PivotTableBinder.prototype.getApproximateRowHeaderHeight = function(rowHeader, topBorder) {
                var contentHeight, rowHeaderInfo = this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), content = this.getRowHeaderLabel(rowHeader), lineCount = TablixUtils.getUrlScheme(rowHeaderInfo, content), expandCollapseButtonSize = this.getRowsExpandCollapseButtonSize(rowHeader);
                return contentHeight = lineCount !== UrlScheme.NONE && visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.rowHeaders.urlIcon, lineCount) ? this.rowHeaderFontInfo.fontProperties.size.px : TablixUtils.isImage(rowHeader, rowHeaderInfo) ? this.formattingProperties.grid.imageHeight : (lineCount = void 0, 
                rowHeaderInfo = this.getRowHeaderFontInfo(rowHeader), topBorder -= this.getRowsExpandCollapseButtonSize(rowHeader), 
                contentHeight = this.getRowHeaderStyle(rowHeader, rowHeaderInfo, !0, !0), lineCount = this.formattingProperties.rowHeaders.wordWrap ? visuals.PivotTableBinderUtils.getWordWrappingLines(content, visuals.PivotTableBinderUtils.getNetWidth(topBorder, contentHeight), rowHeaderInfo.textProperties).length : 1, 
                topBorder = null !== (topBorder = null === (topBorder = contentHeight.borders.top) || void 0 === topBorder ? void 0 : topBorder.weight) && void 0 !== topBorder ? topBorder : 0, 
                contentHeight = null !== (contentHeight = null === (contentHeight = contentHeight.borders.bottom) || void 0 === contentHeight ? void 0 : contentHeight.weight) && void 0 !== contentHeight ? contentHeight : 0, 
                rowHeaderInfo.measuredFontHeight * lineCount + topBorder + contentHeight), void 0 === rowHeader.isCollapsed ? contentHeight : Math.max(expandCollapseButtonSize, contentHeight);
            }, PivotTableBinder.prototype.getApproximateColumnHeaderHeight = function(bottomBorder, topBorder) {
                var columnHeaderInfo = this.columnNavigator.getColumnHeaderMetadataColumn(bottomBorder), lineCount = this.getColumnHeaderLabel(bottomBorder), urlType = TablixUtils.getUrlScheme(columnHeaderInfo, lineCount);
                if (urlType !== UrlScheme.NONE && visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.columnHeaders.urlIcon, urlType)) return this.columnHeaderFontInfo.fontProperties.size.px;
                if (TablixUtils.isImage(bottomBorder, columnHeaderInfo)) return this.formattingProperties.grid.imageHeight;
                var columnHeaderInfo = this.getColumnHeaderFontInfo(bottomBorder), bottomBorder = this.getColumnHeaderStyle(bottomBorder, columnHeaderInfo, !0, !0), lineCount = this.formattingProperties.columnHeaders.wordWrap ? visuals.PivotTableBinderUtils.getWordWrappingLines(lineCount, visuals.PivotTableBinderUtils.getNetWidth(topBorder, bottomBorder), columnHeaderInfo.textProperties).length : 1, topBorder = null !== (topBorder = null === (topBorder = bottomBorder.borders.top) || void 0 === topBorder ? void 0 : topBorder.weight) && void 0 !== topBorder ? topBorder : 0, bottomBorder = null !== (bottomBorder = null === (bottomBorder = bottomBorder.borders.bottom) || void 0 === bottomBorder ? void 0 : bottomBorder.weight) && void 0 !== bottomBorder ? bottomBorder : 0;
                return columnHeaderInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, PivotTableBinder.prototype.getApproximateBodyCellHeight = function(bodyCell, topBorder) {
                var bodyCellInfo = this.getBodyCellFontInfo(bodyCell);
                if (bodyCell.icon && "IconOnly" === bodyCell.icon.layout) return bodyCellInfo.measuredFontHeight;
                if (bodyCell.isKpi) return this.valueFontInfo.fontProperties.size.px;
                var lineCount = this.getBodyCellContent(bodyCell);
                if (this.isUrlIcon(bodyCell, lineCount)) return this.valueFontInfo.fontProperties.size.px;
                if (this.isImage(bodyCell)) return this.formattingProperties.grid.imageHeight;
                if (this.isSparkline(bodyCell)) return bodyCellInfo.measuredFontHeight;
                var bottomBorder = this.getBodyCellStyle(bodyCell, bodyCellInfo, !0, !0), lineCount = this.formattingProperties.values.wordWrap && null != topBorder ? (bodyCell.icon && (topBorder -= bodyCellInfo.measuredFontHeight + visuals.PivotTableBinderUtils.TablixIconMargin), 
                visuals.PivotTableBinderUtils.getWordWrappingLines(lineCount, visuals.PivotTableBinderUtils.getNetWidth(topBorder, bottomBorder), bodyCellInfo.textProperties).length) : 1, topBorder = null !== (topBorder = null === (topBorder = bottomBorder.borders.top) || void 0 === topBorder ? void 0 : topBorder.weight) && void 0 !== topBorder ? topBorder : 0, bottomBorder = null !== (bottomBorder = null === (bottomBorder = bottomBorder.borders.bottom) || void 0 === bottomBorder ? void 0 : bottomBorder.weight) && void 0 !== bottomBorder ? bottomBorder : 0;
                return bodyCellInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, PivotTableBinder.prototype.getApproximateCornerCellHeight = function(lineCount, topBorder) {
                var cornerCellInfo = this.getCornerCellFontInfo(), bottomBorder = this.getCornerCellStyle(lineCount, cornerCellInfo, !0, !0), lineCount = this.formattingProperties.columnHeaders.wordWrap ? visuals.PivotTableBinderUtils.getWordWrappingLines(this.getCornerCellLabel(lineCount), visuals.PivotTableBinderUtils.getNetWidth(topBorder, bottomBorder), cornerCellInfo.textProperties).length : 1, topBorder = null !== (topBorder = null === (topBorder = bottomBorder.borders.top) || void 0 === topBorder ? void 0 : topBorder.weight) && void 0 !== topBorder ? topBorder : 0, bottomBorder = null !== (bottomBorder = null === (bottomBorder = bottomBorder.borders.bottom) || void 0 === bottomBorder ? void 0 : bottomBorder.weight) && void 0 !== bottomBorder ? bottomBorder : 0;
                return cornerCellInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, PivotTableBinder.prototype.isUrlIcon = function(bodyCell, urlType) {
                urlType = TablixUtils.getUrlScheme(bodyCell.columnMetadata, urlType);
                return urlType !== UrlScheme.NONE && !!visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.values.urlIcon, urlType);
            }, PivotTableBinder.prototype.getColumnHeaderFontInfo = function(header) {
                return visuals.MatrixHierarchyNavigator.isNodeGrandTotal(header) ? this.grandTotalColumnHeaderFontInfo : header.hasSubtotalStyle ? this.subtotalColumnHeaderFontInfo : this.columnHeaderFontInfo;
            }, PivotTableBinder.prototype.getRowHeaderFontInfo = function(header) {
                return visuals.MatrixHierarchyNavigator.isNodeGrandTotal(header) ? this.grandTotalRowHeaderFontInfo : header.hasSubtotalStyle ? this.subtotalRowHeaderFontInfo : this.rowHeaderFontInfo;
            }, PivotTableBinder.prototype.getBodyCellFontInfo = function(bodyCell) {
                return bodyCell.isColumnGrandTotal ? this.columnGrandTotalFontInfo : bodyCell.isRowGrandTotal ? this.rowGrandTotalFontInfo : bodyCell.isColumnSubTotal ? this.columnSubtotalFontInfo : bodyCell.isRowSubTotal || bodyCell.hasSubtotalStyle ? this.rowSubtotalFontInfo : this.valueFontInfo;
            }, PivotTableBinder.prototype.getCornerCellFontInfo = function() {
                return this.columnHeaderFontInfo;
            }, PivotTableBinder.prototype.addRowHeaderClasses = function(rowHeader, urlIcon, contentClasses, cellClasses) {
                var defaultAlignment, rowHeadersFormatting = this.formattingProperties.rowHeaders;
                rowHeadersFormatting.wordWrap ? contentClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassWrap) : contentClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassNoWrap), 
                urlIcon && contentClasses.push(TablixUtils.CssClassValueURLIconContainer), this.binderOptions.interactivityIndicatorEnabled && this.binderOptions.selectionEnabled && visuals.PivotTableSelectionManager.hasIdentity(rowHeader) && cellClasses.push(visuals.PivotTableBinderUtils.cssClassCellInteractive), 
                urlIcon && (defaultAlignment = visuals.textAlignment.center), visuals.PivotTableBinderUtils.addAlignmentCssClass(rowHeadersFormatting.alignment, contentClasses, defaultAlignment);
            }, PivotTableBinder.prototype.getColumnHeaderClasses = function(headerSortable, urlIcon) {
                var classes = [], alignment = this.formattingProperties.columnHeaders, columnFormatting = this.formattingProperties.columnFormatting[headerSortable.queryName];
                this.formattingProperties.columnHeaders.wordWrap ? classes.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassWrap) : classes.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassNoWrap), 
                urlIcon && classes.push(TablixUtils.CssClassValueURLIconContainer);
                var headerSelectable = visuals.PivotTableSelectionManager.hasIdentity(headerSortable), headerSortable = this.sortingManager.isColumnHeaderSortable(headerSortable);
                this.binderOptions.interactivityIndicatorEnabled && (this.binderOptions.selectionEnabled && headerSelectable && !headerSortable || this.binderOptions.sortingEnabled && headerSortable && !headerSelectable) && classes.push(visuals.PivotTableBinderUtils.cssClassCellInteractive);
                var defaultAlignment, alignment = columnFormatting && columnFormatting.styleHeader && columnFormatting.alignment || alignment.alignment;
                return urlIcon && (defaultAlignment = visuals.textAlignment.center), visuals.PivotTableBinderUtils.addAlignmentCssClass(alignment, classes, defaultAlignment), 
                classes;
            }, PivotTableBinder.prototype.addBodyCellClasses = function(bodyCell, urlIcon, contentClasses, columnFormatting) {
                var alignment;
                this.formattingProperties.values.wordWrap ? contentClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassWrap) : contentClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassNoWrap), 
                urlIcon && contentClasses.push(TablixUtils.CssClassValueURLIconContainer), !this.binderOptions.interactivityIndicatorEnabled || !this.binderOptions.selectionEnabled || bodyCell.isColumnGrandTotal && bodyCell.isRowGrandTotal || columnFormatting.push(visuals.PivotTableBinderUtils.cssClassCellInteractive);
                var defaultAlignment, columnFormatting = bodyCell.columnMetadata && bodyCell.columnMetadata.queryName, columnFormatting = this.formattingProperties.columnFormatting[columnFormatting];
                !columnFormatting || (bodyCell.isGrandTotal ? columnFormatting.styleTotal : bodyCell.hasSubtotalStyle ? columnFormatting.styleSubTotals : columnFormatting.styleValues) && (alignment = columnFormatting.alignment), 
                urlIcon ? defaultAlignment = visuals.textAlignment.center : !bodyCell.isKpi && bodyCell.isNumeric && (defaultAlignment = visuals.textAlignment.right), 
                visuals.PivotTableBinderUtils.addAlignmentCssClass(alignment, contentClasses, defaultAlignment);
            }, PivotTableBinder.prototype.getCornerCellClasses = function(alignment) {
                var classes = [];
                this.formattingProperties.columnHeaders.wordWrap ? classes.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassWrap) : classes.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassNoWrap), 
                this.binderOptions.interactivityIndicatorEnabled && this.binderOptions.sortingEnabled && this.sortingManager.isCornerSortable(alignment) && classes.push(visuals.PivotTableBinderUtils.cssClassCellInteractive);
                alignment = this.formattingProperties.columnHeaders.titleAlignment;
                return alignment === visuals.textAlignment.auto && (alignment = this.formattingProperties.columnHeaders.alignment), 
                visuals.PivotTableBinderUtils.addAlignmentCssClass(alignment, classes), classes;
            }, PivotTableBinder.prototype.getSteppedLayoutIndentation = function(rowHeader) {
                return this.rowNavigator.getLevel(rowHeader) * this.formattingProperties.rowHeaders.steppedLayoutIndentation;
            }, PivotTableBinder.prototype.getRowHeaderStyle = function(rowHeader, hasRowHeaderFormattingStyle, hasGrandTotalStyle, hasSubtotalStyle) {
                var cellStyle = new CellStyle(visuals.PivotTableBinderUtils.CellHorizontalPadding, visuals.PivotTableBinderUtils.CellHorizontalPadding);
                this.formattingProperties.rowHeaders.underline && hasSubtotalStyle && (cellStyle.textDecoration = CssConstants.underlineValue), 
                rowHeader.position.column.isLast && (rowHeaderFormatting = this.binderOptions.tablixProperties, 
                cellStyle.borders.right = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, rowHeaderFormatting.PropGridOutlineColor.getValue(null))), 
                cellStyle.fontColor = TablixUtils.FontColorHeaders, visuals.MatrixStyler.setRowHeaderStyle(rowHeader.position, rowHeader, cellStyle, this.formattingProperties.rowHeaders.steppedLayout, this.formattingProperties, this.formattingProperties.values.bandedRowHeaders), 
                visuals.PivotTableBinderUtils.applyFontInfo(hasRowHeaderFormattingStyle, cellStyle, !hasGrandTotalStyle, hasSubtotalStyle);
                var rowHeaderFormatting = this.formattingProperties.columnFormatting[rowHeader.queryName], hasRowHeaderFormattingStyle = rowHeaderFormatting && rowHeaderFormatting.styleHeader, hasGrandTotalStyle = visuals.MatrixHierarchyNavigator.isNodeGrandTotal(rowHeader) && this.formattingProperties.rowGrandTotal.applyToHeaders, hasSubtotalStyle = rowHeader.hasSubtotalStyle && this.formattingProperties.rowSubtotals.applyToHeaders;
                return hasRowHeaderFormattingStyle && rowHeaderFormatting.fontColor ? cellStyle.fontColor = rowHeaderFormatting.fontColor : hasGrandTotalStyle && this.formattingProperties.rowGrandTotal.fontColor ? cellStyle.fontColor = this.formattingProperties.rowGrandTotal.fontColor : hasSubtotalStyle && this.formattingProperties.rowSubtotals.fontColor && (cellStyle.fontColor = this.formattingProperties.rowSubtotals.fontColor), 
                hasRowHeaderFormattingStyle && rowHeaderFormatting.backColor ? cellStyle.backColor = rowHeaderFormatting.backColor : hasGrandTotalStyle && this.formattingProperties.rowGrandTotal.backColor ? cellStyle.backColor = this.formattingProperties.rowGrandTotal.backColor : hasSubtotalStyle && this.formattingProperties.rowSubtotals.backColor && (cellStyle.backColor = this.formattingProperties.rowSubtotals.backColor), 
                this.formattingProperties.rowHeaders.steppedLayout && (cellStyle.paddings.left += this.getSteppedLayoutIndentation(rowHeader)), 
                cellStyle;
            }, PivotTableBinder.prototype.getRowHeaderStyleAttributes = function(rowHeader, forMeasure, style) {
                style = this.getRowHeaderStyle(rowHeader, this.getRowHeaderFontInfo(rowHeader), forMeasure, style).getAttributes();
                return this.selectionManager.isRowHeaderHighlighted(rowHeader) || visuals.PivotTableBinderUtils.setUnselectedStyle(style), 
                style;
            }, PivotTableBinder.prototype.getColumnHeaderStyle = function(hasSubtotalStyle, hasColumnFormattingStyle, hasGrandTotalStyle, hasContent) {
                var cellStyle = new CellStyle(visuals.PivotTableBinderUtils.CellHorizontalPadding, visuals.PivotTableBinderUtils.CellHorizontalPadding);
                hasSubtotalStyle.position.row.isLast && (columnFormatting = this.binderOptions.tablixProperties, 
                cellStyle.borders.bottom = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, columnFormatting.PropGridOutlineColor.getValue(null))), 
                cellStyle.fontColor = TablixUtils.FontColorHeaders, visuals.MatrixStyler.setColumnHeaderStyle(hasSubtotalStyle.position, hasSubtotalStyle, cellStyle, this.formattingProperties), 
                visuals.PivotTableBinderUtils.applyFontInfo(hasColumnFormattingStyle, cellStyle, !hasGrandTotalStyle, hasContent);
                var columnFormatting = this.formattingProperties.columnFormatting[hasSubtotalStyle.queryName], hasColumnFormattingStyle = columnFormatting && columnFormatting.styleHeader, hasGrandTotalStyle = visuals.MatrixHierarchyNavigator.isNodeGrandTotal(hasSubtotalStyle) && this.formattingProperties.columnGrandTotal.applyToHeaders, hasSubtotalStyle = hasSubtotalStyle.hasSubtotalStyle && this.formattingProperties.columnSubtotals.applyToHeaders;
                return hasColumnFormattingStyle && columnFormatting.fontColor ? cellStyle.fontColor = columnFormatting.fontColor : hasGrandTotalStyle && this.formattingProperties.columnGrandTotal.fontColor ? cellStyle.fontColor = this.formattingProperties.columnGrandTotal.fontColor : hasSubtotalStyle && this.formattingProperties.columnSubtotals.fontColor && (cellStyle.fontColor = this.formattingProperties.columnSubtotals.fontColor), 
                hasColumnFormattingStyle && columnFormatting.backColor ? cellStyle.backColor = columnFormatting.backColor : hasGrandTotalStyle && this.formattingProperties.columnGrandTotal.backColor ? cellStyle.backColor = this.formattingProperties.columnGrandTotal.backColor : hasSubtotalStyle && this.formattingProperties.columnSubtotals.backColor && (cellStyle.backColor = this.formattingProperties.columnSubtotals.backColor), 
                this.formattingProperties.columnHeaders.underline && hasContent && (cellStyle.textDecoration = CssConstants.underlineValue), 
                cellStyle;
            }, PivotTableBinder.prototype.getColumnHeaderStyleAttributes = function(columnHeader, style) {
                style = style.getAttributes();
                return this.selectionManager.isColumnHeaderHighlighted(columnHeader) || visuals.PivotTableBinderUtils.setUnselectedStyle(style), 
                style;
            }, PivotTableBinder.prototype.getBodyCellStyle = function(bodyCell, fontInfo, forMeasure, hasContent) {
                var cellStyle = new CellStyle(visuals.PivotTableBinderUtils.CellHorizontalPadding, visuals.PivotTableBinderUtils.CellHorizontalPadding);
                return visuals.MatrixStyler.setBodyCellStyle(bodyCell.position, bodyCell, cellStyle, this.formattingProperties.rowHeaders.steppedLayout, this.formattingProperties), 
                visuals.PivotTableBinderUtils.applyFontInfo(fontInfo, cellStyle, !forMeasure, hasContent), 
                cellStyle;
            }, PivotTableBinder.prototype.addBodyCellStyleAttributes = function(bodyCell, cellStyle, contentStyleAttributes, containerStyleAttributes) {
                cellStyle.setAttributes(containerStyleAttributes), containerStyleAttributes.position = "relative", 
                this.selectionManager.isBodyCellHighlighted(bodyCell) || visuals.PivotTableBinderUtils.setUnselectedStyle(containerStyleAttributes);
            }, PivotTableBinder.prototype.getCornerCellStyle = function(cornerCell, fontInfo, forMeasure, hasContent) {
                var tablixProp, cellStyle = new CellStyle(visuals.PivotTableBinderUtils.CellHorizontalPadding, visuals.PivotTableBinderUtils.CellHorizontalPadding);
                return cellStyle.fontColor = TablixUtils.FontColorHeaders, this.formattingProperties.columnHeaders.underline && hasContent && (cellStyle.textDecoration = CssConstants.underlineValue), 
                cornerCell.position.row.isLast && (tablixProp = this.binderOptions.tablixProperties, 
                cellStyle.borders.bottom = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, tablixProp.PropGridOutlineColor.getValue(null))), 
                visuals.MatrixStyler.setCornerCellStyle(cornerCell.position, cellStyle, this.formattingProperties.rowHeaders.steppedLayout, this.formattingProperties), 
                visuals.PivotTableBinderUtils.applyFontInfo(fontInfo, cellStyle, !forMeasure, hasContent), 
                cellStyle;
            }, PivotTableBinder.prototype.getColumnHeaderLabel = function(columnHeader) {
                return this.getHeaderContent(columnHeader, this.columnNavigator.getColumnHeaderMetadataColumn(columnHeader), this.columnNavigator.isColumnHeaderMultiValueSubtotal(columnHeader), this.formattingProperties.columnHeaders.wordWrap);
            }, PivotTableBinder.prototype.getRowHeaderLabel = function(rowHeader) {
                return this.getHeaderContent(rowHeader, this.rowNavigator.getRowHeaderMetadataColumn(rowHeader), this.rowNavigator.isRowHeaderMultiValueSubtotal(rowHeader), this.formattingProperties.rowHeaders.wordWrap);
            }, PivotTableBinder.prototype.getBodyCellContent = function(bodyCell) {
                return this.formattingProperties.values.wordWrap ? bodyCell.textContent : visuals.TextUtil.replaceSpaceWithNBSP(bodyCell.textContent);
            }, PivotTableBinder.prototype.getCornerCellLabel = function(corner) {
                return this.formattingProperties.columnHeaders.wordWrap ? corner.displayName : visuals.TextUtil.replaceSpaceWithNBSP(corner.displayName);
            }, PivotTableBinder.prototype.getHeaderContent = function(header, metadata, overwriteSubtotalLabel, wordWrap) {
                if (header.isSubtotal && !overwriteSubtotalLabel) {
                    var value = this.formattingProperties.columnFormatting[metadata.queryName], value = value ? value.subtotalLabel : this.binderOptions.defaultTotalLabel;
                    return wordWrap ? value : visuals.TextUtil.replaceSpaceWithNBSP(value);
                }
                value = header.valueFormatted;
                return visuals.PivotTableBinderUtils.isValidUrl(metadata, value) ? value : value && TablixUtils.isValidImage(header, metadata, value) ? Utility.encodeUriForImageDataSvg(value) : wordWrap ? value : visuals.TextUtil.replaceSpaceWithNBSP(value);
            }, PivotTableBinder.prototype.onDataViewChanged = function(dataView, formattingProperties, style, usingDefaultRowHeaderFontFamily, usingDefaultColumnHeaderFontFamily) {
                this.formattingProperties = formattingProperties, this.legacyTooltipsEnabled = usingDefaultRowHeaderFontFamily, 
                this.isExpandCollapseEnabled = !!usingDefaultColumnHeaderFontFamily;
                var generalFontSize = formattingProperties.general.textSize, measurer = new visuals.PivotTableBinderUtils.FontInfoMeasurer(), columnFormattingProperties = {}, usingDefaultRowHeaderFontFamily = {}, usingDefaultColumnHeaderFontFamily = {};
                columnFormattingProperties.family = formattingProperties.columnHeaders.fontFamily || TablixUtils.FontFamilyHeader, 
                columnFormattingProperties.size = formattingProperties.columnHeaders.fontSize || generalFontSize, 
                formattingProperties.columnHeaders.bold && (columnFormattingProperties.weight = CssConstants.boldValue), 
                formattingProperties.columnHeaders.italic && (columnFormattingProperties.style = CssConstants.italicValue), 
                formattingProperties.columnHeaders.underline && (columnFormattingProperties.textDecoration = CssConstants.underlineValue), 
                this.columnHeaderContainerFontInfo = visuals.PivotTableBinderUtils.createFontInfo(columnFormattingProperties, measurer), 
                this.columnHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.columnHeaderContainerFontInfo, {}, measurer), 
                usingDefaultColumnHeaderFontFamily.family = formattingProperties.rowHeaders.fontFamily || TablixUtils.FontFamilyHeader, 
                usingDefaultColumnHeaderFontFamily.size = formattingProperties.rowHeaders.fontSize || generalFontSize, 
                formattingProperties.rowHeaders.bold && (usingDefaultColumnHeaderFontFamily.weight = CssConstants.boldValue), 
                formattingProperties.rowHeaders.italic && (usingDefaultColumnHeaderFontFamily.style = CssConstants.italicValue), 
                formattingProperties.rowHeaders.underline && (usingDefaultColumnHeaderFontFamily.textDecoration = CssConstants.underlineValue), 
                this.rowHeaderContainerFontInfo = visuals.PivotTableBinderUtils.createFontInfo(usingDefaultColumnHeaderFontFamily, measurer), 
                this.rowHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.rowHeaderContainerFontInfo, {}, measurer), 
                this.expandCollapseButtonFontInfo = visuals.PivotTableBinderUtils.createFontInfo({
                    family: "PowrMDL2",
                    size: formattingProperties.rowHeaders.expandCollapseButtonsSize || this.rowHeaderFontInfo.fontProperties.size
                }, measurer);
                usingDefaultColumnHeaderFontFamily = formattingProperties.values.fontFamily || TablixUtils.FontFamilyCell;
                usingDefaultRowHeaderFontFamily.family = usingDefaultColumnHeaderFontFamily, usingDefaultRowHeaderFontFamily.size = formattingProperties.values.fontSize || generalFontSize, 
                formattingProperties.values.bold && (usingDefaultRowHeaderFontFamily.weight = CssConstants.boldValue), 
                formattingProperties.values.italic && (usingDefaultRowHeaderFontFamily.style = CssConstants.italicValue), 
                formattingProperties.values.underline && (usingDefaultRowHeaderFontFamily.textDecoration = CssConstants.underlineValue), 
                this.valueContainerFontInfo = visuals.PivotTableBinderUtils.createFontInfo(usingDefaultRowHeaderFontFamily, measurer), 
                this.valueFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.valueContainerFontInfo, {}, measurer), 
                this.columnSubtotalFontInfo = this.getSubtotalFontInfo(formattingProperties.columnSubtotals, measurer), 
                this.rowSubtotalFontInfo = this.getSubtotalFontInfo(formattingProperties.rowSubtotals, measurer), 
                this.columnGrandTotalFontInfo = this.getGrandTotalFontInfo(formattingProperties.columnGrandTotal, measurer, this.columnSubtotalFontInfo), 
                this.rowGrandTotalFontInfo = this.getGrandTotalFontInfo(formattingProperties.rowGrandTotal, measurer, this.rowSubtotalFontInfo);
                usingDefaultColumnHeaderFontFamily = this.columnHeaderFontInfo.fontProperties.family === TablixUtils.FontFamilyHeader, 
                usingDefaultRowHeaderFontFamily = this.rowHeaderFontInfo.fontProperties.family === TablixUtils.FontFamilyHeader;
                formattingProperties.columnSubtotals.applyToHeaders ? this.subtotalColumnHeaderFontInfo = this.subtotalRowHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.columnSubtotalFontInfo, {}, measurer, 4) : this.subtotalColumnHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.columnHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultColumnHeaderFontFamily), measurer), 
                formattingProperties.rowSubtotals.applyToHeaders ? this.subtotalRowHeaderFontInfo = this.subtotalRowHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.rowSubtotalFontInfo, {}, measurer, 4) : this.subtotalRowHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.rowHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultRowHeaderFontFamily), measurer), 
                formattingProperties.columnGrandTotal.applyToHeaders ? this.grandTotalColumnHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.columnGrandTotalFontInfo, {}, measurer, 4) : this.grandTotalColumnHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.columnHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultColumnHeaderFontFamily), measurer, 1), 
                formattingProperties.rowGrandTotal.applyToHeaders ? this.grandTotalRowHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.rowGrandTotalFontInfo, {}, measurer, 4) : this.grandTotalRowHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.rowHeaderFontInfo, PivotTableBinder.applyBold(usingDefaultRowHeaderFontFamily), measurer, 1), 
                this.glyphFontInfo = visuals.PivotTableBinderUtils.createFontInfo({
                    family: TablixUtils.FontFamilyGlyphs,
                    size: FontSize.createFromPt((formattingProperties.columnHeaders.fontSize || generalFontSize).pt * TablixUtils.SortIconFontSizeRatio),
                    lineHeight: "100%"
                }, measurer), measurer.measureAll(this.measureElement), this.columnsDataBarsSettings = {};
                var columnFormatting = formattingProperties.columnFormatting;
                if (columnFormatting && dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) for (var _i = 0, _a = dataView.matrix.valueSources; _i < _a.length; _i++) (queryName = (column = _a[_i]).queryName) && columnFormatting[queryName] && (this.columnsDataBarsSettings[queryName] = visuals.PivotTableBinderUtils.getColumnDataBarsSettings(column, columnFormatting[queryName].dataBarsSettings, style));
                this.sparklineSettings = {};
                var sparklineFormatting = formattingProperties.sparklines;
                if (sparklineFormatting && dataView && dataView.matrix && !_.isEmpty(dataView.matrix.valueSources)) for (var _b = 0, _c = dataView.matrix.valueSources; _b < _c.length; _b++) {
                    var column, queryName = (column = _c[_b]).queryName, type = column.type;
                    queryName && sparklineFormatting[queryName] && (this.sparklineSettings[queryName] = visuals.PivotTableBinderUtils.getSparklineSettings(sparklineFormatting[queryName], type, style));
                }
            }, PivotTableBinder.prototype.getGrandTotalFontInfo = function(grandTotalProperties, measurer, subtotalFontInfo) {
                var totalFormattingProperties = {}, grandTotalFontFamily = grandTotalProperties.fontFamily;
                return totalFormattingProperties.family = grandTotalFontFamily, totalFormattingProperties.size = grandTotalProperties.fontSize, 
                grandTotalProperties.bold && grandTotalFontFamily && (totalFormattingProperties.weight = CssConstants.boldValue), 
                grandTotalProperties.italic && (totalFormattingProperties.style = CssConstants.italicValue), 
                grandTotalProperties.underline && (totalFormattingProperties.textDecoration = CssConstants.underlineValue), 
                visuals.PivotTableBinderUtils.overrideFontInfo(subtotalFontInfo, totalFormattingProperties, measurer, 1);
            }, PivotTableBinder.prototype.isImage = function(bodyCell) {
                return visuals.converterHelper.isImageUrlColumn(bodyCell.columnMetadata);
            }, PivotTableBinder.prototype.isSparkline = function(misc) {
                var misc = misc.columnMetadata, misc = null === (misc = null == misc ? void 0 : misc.type) || void 0 === misc ? void 0 : misc.misc;
                return null != misc && null != misc.sparkline;
            }, PivotTableBinder.applyBold = function(usingDefault) {
                return {
                    family: usingDefault ? TablixUtils.FontFamilyTotal : void 0,
                    weight: usingDefault ? void 0 : CssConstants.boldValue
                };
            }, PivotTableBinder.prototype.getSubtotalFontInfo = function(subtotalsProperties, measurer) {
                var subtotalFontWeight, subtotalFontFamily = subtotalsProperties.fontFamily;
                subtotalFontFamily || this.valueFontInfo.fontProperties.family !== TablixUtils.FontFamilyCell ? subtotalFontWeight = !0 : this.valueFontInfo.fontProperties.family === TablixUtils.FontFamilyCell && (subtotalFontFamily = TablixUtils.FontFamilyTotal);
                var subtotalFormattingProperties = {};
                return subtotalFormattingProperties.family = subtotalFontFamily, subtotalFormattingProperties.size = subtotalsProperties.fontSize, 
                subtotalsProperties.bold && subtotalFontWeight && (subtotalFormattingProperties.weight = CssConstants.boldValue), 
                subtotalsProperties.italic && (subtotalFormattingProperties.style = CssConstants.italicValue), 
                subtotalsProperties.underline && (subtotalFormattingProperties.textDecoration = CssConstants.underlineValue), 
                visuals.PivotTableBinderUtils.overrideFontInfo(this.valueFontInfo, subtotalFormattingProperties, measurer);
            }, PivotTableBinder.prototype.getCornerContainerFontInfo = function() {
                return this.columnHeaderContainerFontInfo;
            }, PivotTableBinder.prototype.getColumnHeaderContainerFontInfo = function() {
                return this.columnHeaderContainerFontInfo;
            }, PivotTableBinder.prototype.getRowHeaderContainerFontInfo = function() {
                return this.rowHeaderContainerFontInfo;
            }, PivotTableBinder.prototype.getValueContainerFontInfo = function() {
                return this.valueContainerFontInfo;
            }, PivotTableBinder;
        }();
        visuals.PivotTableBinder = PivotTableBinder;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var PivotTableSteppedHierarchyNavigator = function() {
            function PivotTableHierarchyNavigator(matrixNavigator) {
                this.matrixNavigator = matrixNavigator;
            }
            return PivotTableHierarchyNavigator.prototype.setHierarchy = function(hierarchy) {
                this.hierarchy = hierarchy, this.floatingLeaves = [], this.getLeaves(this.getFloatingHierarchyItems(), this.floatingLeaves);
            }, PivotTableHierarchyNavigator.prototype.hasHierarchy = function() {
                return !_.isEmpty(this.hierarchy.levels);
            }, PivotTableHierarchyNavigator.prototype.getHierarchyDepth = function() {
                return Math.max(this.hierarchy.levels.length, 1);
            }, PivotTableHierarchyNavigator.prototype.getHierarchyLeafNodes = function() {
                return this.hierarchy.leafNodes;
            }, PivotTableHierarchyNavigator.prototype.getHierarchyLeafCount = function() {
                return this.hierarchy.leafNodes.length;
            }, PivotTableHierarchyNavigator.prototype.getHierarchyLeafAt = function(index) {
                return this.hierarchy.leafNodes[index];
            }, PivotTableHierarchyNavigator.prototype.getFloatingHierarchyLeafCount = function() {
                return this.floatingLeaves.length;
            }, PivotTableHierarchyNavigator.prototype.getFloatingHierarchyLeafAt = function(index) {
                return this.floatingLeaves[index];
            }, PivotTableHierarchyNavigator.prototype.getHierarchyItems = function() {
                return this.hierarchy.root.children || [];
            }, PivotTableHierarchyNavigator.prototype.getFloatingHierarchyItems = function() {
                return null;
            }, PivotTableHierarchyNavigator.prototype.getLeafIndex = function(item) {
                return this.matrixNavigator.getLeafIndex(item);
            }, PivotTableHierarchyNavigator.prototype.isLeaf = function(item) {
                return this.matrixNavigator.isLeaf(item);
            }, PivotTableHierarchyNavigator.prototype.isLastItem = function(item, items) {
                return this.matrixNavigator.isLastItem(item, items);
            }, PivotTableHierarchyNavigator.prototype.getParent = function(item) {
                return this.matrixNavigator.getParent(item);
            }, PivotTableHierarchyNavigator.prototype.getIndex = function(item) {
                return this.matrixNavigator.getIndex(item);
            }, PivotTableHierarchyNavigator.prototype.getPathIndices = function(item) {
                for (var result = [ this.getIndex(item) ], parent = this.getParent(item); parent; ) result = __spreadArray([ this.getIndex(parent) ], result || []), 
                parent = this.getParent(parent);
                return result;
            }, PivotTableHierarchyNavigator.prototype.getNodeFromPath = function(indices) {
                if (!(_.isEmpty(indices) || indices.length > this.hierarchy.levels.length)) {
                    for (var node = this.hierarchy.root, _i = 0, indices_2 = indices; _i < indices_2.length; _i++) {
                        var index = indices_2[_i];
                        if (!(node = node.children[index])) return;
                    }
                    return node;
                }
            }, PivotTableHierarchyNavigator.prototype.getLeafAncestorAtLevel = function(leafNode, targetLevel) {
                0 <= targetLevel && this.getLevel(leafNode);
                for (var node = leafNode; this.getLevel(node) > targetLevel; ) node = this.getParent(node);
                return node;
            }, PivotTableHierarchyNavigator.prototype.getItemsByLevel = function(levelIndex) {
                var items = [];
                return this.findLevelItems(levelIndex, this.hierarchy.root, -1, items), items;
            }, PivotTableHierarchyNavigator.prototype.findLevelItems = function(levelIndex, root, rootLevel, items) {
                if (!_.isEmpty(root.children)) for (var childLevel = rootLevel + 1, _i = 0, _a = root.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    childLevel === levelIndex || childLevel + this.matrixNavigator.getChildrenLevelDifference(child) > levelIndex ? items.push(child) : childLevel < levelIndex && this.findLevelItems(levelIndex, child, childLevel, items);
                }
            }, PivotTableHierarchyNavigator.prototype.getExpansionState = function(item) {
                return item.isCollapsed ? 1 : !1 === item.isCollapsed ? 0 : 2;
            }, PivotTableHierarchyNavigator.prototype.getChildren = function(item) {
                return this.matrixNavigator.getChildren(item);
            }, PivotTableHierarchyNavigator.prototype.getLevel = function(item) {
                return this.matrixNavigator.getLevel(item);
            }, PivotTableHierarchyNavigator.prototype.getIntersection = function(rowItem, bodyItem) {
                bodyItem = this.matrixNavigator.getIntersection(rowItem, bodyItem);
                return bodyItem && bodyItem.objects && (bodyItem.icon = visuals.TablixProperties.PropValuesIcon.getValue(bodyItem.objects), 
                bodyItem.hyperlink = visuals.TablixProperties.PropValuesWebURL.getValue(bodyItem.objects)), 
                bodyItem;
            }, PivotTableHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                return this.matrixNavigator.getCorner(rowLevel, columnLevel);
            }, PivotTableHierarchyNavigator.prototype.getRowLevel = function(cornerItem) {
                return cornerItem.rowLevel;
            }, PivotTableHierarchyNavigator.prototype.getColumnLevel = function(cornerItem) {
                return cornerItem.columnLevel;
            }, PivotTableHierarchyNavigator.prototype.getRowHeaderMetadataColumn = function(item) {
                return this.matrixNavigator.getRowHeaderMetadataColumn(item);
            }, PivotTableHierarchyNavigator.prototype.getRowHeaderMetadataColumns = function(item) {
                return this.matrixNavigator.getRowHeaderMetadataColumns(item);
            }, PivotTableHierarchyNavigator.prototype.getColumnHeaderMetadataColumn = function(item) {
                return this.matrixNavigator.getColumnHeaderMetadataColumn(item);
            }, PivotTableHierarchyNavigator.prototype.getColumnHeaderMetadataColumns = function(item) {
                return this.matrixNavigator.getColumnHeaderMetadataColumns(item);
            }, PivotTableHierarchyNavigator.prototype.valuesOnRowApplied = function() {
                return this.matrixNavigator.valuesOnRowApplied();
            }, PivotTableHierarchyNavigator.prototype.hasMultipleValueSources = function() {
                return this.matrixNavigator.hasMultipleValueSources();
            }, PivotTableHierarchyNavigator.prototype.isColumnHeaderMultiValueSubtotal = function(header) {
                return header.isSubtotal && header.parent && header.parent.isSubtotal;
            }, PivotTableHierarchyNavigator.prototype.isRowHeaderMultiValueSubtotal = function(header) {
                return this.valuesOnRowApplied() && header.parent && header.parent.isSubtotal;
            }, PivotTableHierarchyNavigator.prototype.getLeaves = function(items, leaves) {
                if (!_.isEmpty(items)) for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
                    var item = items_3[_i];
                    this.isLeaf(item) ? leaves.push(item) : this.getLeaves(this.getChildren(item), leaves);
                }
            }, PivotTableHierarchyNavigator.prototype.getColumnIndexFromQueryName = function(queryName) {
                return null;
            }, PivotTableHierarchyNavigator;
        }(), PivotTableSteppedHierarchyNavigator = function(_super) {
            function PivotTableSteppedHierarchyNavigator() {
                return null !== _super && _super.apply(this, arguments) || this;
            }
            return __extends(PivotTableSteppedHierarchyNavigator, _super), PivotTableSteppedHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                return this.isLeaf(rowItem) || _.isEmpty(rowItem.children) || !rowItem.children[0].isSubtotal || this.valuesOnRowApplied() ? _super.prototype.getIntersection.call(this, rowItem, columnItem) : _super.prototype.getIntersection.call(this, rowItem.children[0], columnItem);
            }, PivotTableSteppedHierarchyNavigator.prototype.getChildren = function(item) {
                return !_.isEmpty(item.children) && item.children[0].isSubtotal ? item.children.slice(1) : item.children;
            }, PivotTableSteppedHierarchyNavigator.prototype.getHierarchyDepth = function() {
                return 0 < _super.prototype.getHierarchyDepth.call(this) ? 1 : 0;
            }, PivotTableSteppedHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                var adjustedRowLevel = columnLevel === this.matrixNavigator.getColumnHierarchyDepth() - 1 ? 0 : this.matrixNavigator.getRowHierarchyDepth() - 1;
                return _super.prototype.getCorner.call(this, adjustedRowLevel, columnLevel);
            }, PivotTableSteppedHierarchyNavigator.prototype.getFloatingHierarchyItems = function() {
                var items = this.getHierarchyItems();
                if (_.isEmpty(items)) return null;
                for (var index = 0, floatingItems = []; ;) {
                    var item = items[index];
                    if (!item || !item.isSubtotal) break;
                    floatingItems.push(item), index++;
                }
                return _.isEmpty(floatingItems) ? null : floatingItems;
            }, PivotTableSteppedHierarchyNavigator.prototype.isRowHeaderMultiValueSubtotal = function(header) {
                return this.valuesOnRowApplied() && header.isSubtotal;
            }, PivotTableSteppedHierarchyNavigator.prototype.getLeaves = function(items, leaves) {
                if (!_.isEmpty(items)) for (var _i = 0, items_4 = items; _i < items_4.length; _i++) {
                    var item = items_4[_i];
                    leaves.push(item), this.getLeaves(this.getChildren(item), leaves);
                }
            }, PivotTableSteppedHierarchyNavigator.prototype.getPathIndices = function(item) {
                return [ this.getLeafIndex(item) ];
            }, PivotTableSteppedHierarchyNavigator.prototype.getNodeFromPath = function(indices) {
                if (1 === indices.length) return this.getHierarchyLeafAt(indices[0]);
            }, PivotTableSteppedHierarchyNavigator.prototype.getItemsByLevel = function(levelIndex) {
                return __spreadArray([], this.getHierarchyLeafNodes() || []);
            }, PivotTableSteppedHierarchyNavigator.prototype.getLeafAncestorAtLevel = function(leafNode, levelIndex) {
                return leafNode;
            }, PivotTableSteppedHierarchyNavigator;
        }(visuals.PivotTableHierarchyNavigator = PivotTableSteppedHierarchyNavigator);
        visuals.PivotTableSteppedHierarchyNavigator = PivotTableSteppedHierarchyNavigator;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var PivotTableInteractionManager = function() {
            function PivotTableInteractionManager(tooltipService, selectionManager, valueLabel, totalLabel) {
                this.tooltipService = tooltipService, this.selectionManager = selectionManager, 
                this.valueLabel = valueLabel, this.totalLabel = totalLabel, this.tooltipsEnabled = !0;
            }
            return PivotTableInteractionManager.prototype.getRowHeaderHandler = function() {
                var _this = this;
                return this.getHeaderHandler(function(headerItem) {
                    return headerItem.isSubtotal && _this.rowHierarchyNavigator.valuesOnRowApplied() && _this.rowHierarchyNavigator.isRowHeaderMultiValueSubtotal(headerItem);
                }, function(headerItem) {
                    return _this.rowHierarchyNavigator.isRowHeaderMultiValueSubtotal(headerItem);
                }, visuals.matrixRoleNames.rows);
            }, PivotTableInteractionManager.prototype.getColumnHeaderHandler = function() {
                var _this = this;
                return this.getHeaderHandler(function(headerItem) {
                    return headerItem.isSubtotal && !_this.rowHierarchyNavigator.valuesOnRowApplied() && _this.columnHierarchyNavigator.isColumnHeaderMultiValueSubtotal(headerItem);
                }, function(headerItem) {
                    return _this.columnHierarchyNavigator.isColumnHeaderMultiValueSubtotal(headerItem);
                }, visuals.matrixRoleNames.columns);
            }, PivotTableInteractionManager.prototype.getBodyHandler = function() {
                var _this = this;
                return {
                    addTooltip: function(bodyCell, bodyElement) {
                        return _this.addBodyTooltip(bodyCell, bodyElement);
                    },
                    removeTooltip: function(_bodyCell, bodyElement) {
                        return _this.removeTooltip(bodyElement);
                    },
                    isTooltipEnabled: function(bodyElement) {
                        return _this.tooltipsEnabled;
                    },
                    setTooltipDelegate: function() {
                        return debug.assertFail("not implemented");
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.onDataViewChanged = function(rowHierarchyNavigator, columnHierarchyNavigator) {
                this.rowHierarchyNavigator = rowHierarchyNavigator, this.columnHierarchyNavigator = columnHierarchyNavigator;
            }, PivotTableInteractionManager.prototype.addBodyTooltip = function(item, selection) {
                var _this = this, selection = d3.select(selection);
                this.tooltipService.addTooltip(selection, function() {
                    return visuals.PivotTableInteractivityUtils.getBodyCellTooltipInfo(item, _this.valueLabel);
                }, function() {
                    var itemSelectionId = _this.getItemSelectionId(item, visuals.matrixRoleNames.values, void 0);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, PivotTableInteractionManager.prototype.getCornerHandler = function() {
                var _this = this;
                return {
                    addTooltip: function(cornerCell, cornerElement) {
                        return _this.addCornerTooltip(cornerCell, cornerElement);
                    },
                    removeTooltip: function(_cornerCell, cornerElement) {
                        return _this.removeTooltip(cornerElement);
                    },
                    isTooltipEnabled: function(cornerCell) {
                        return _this.tooltipsEnabled && !_.isEmpty(cornerCell.displayName);
                    },
                    setTooltipDelegate: function() {
                        return debug.assertFail("not implemented");
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.tooltipVisible = function() {
                return this.tooltipService && this.tooltipService.visible();
            }, PivotTableInteractionManager.prototype.hideTooltip = function() {
                this.tooltipService && this.tooltipService.hide();
            }, PivotTableInteractionManager.prototype.setTooltipsEnabled = function(enabled) {
                this.tooltipsEnabled = enabled;
            }, PivotTableInteractionManager.prototype.addHeaderTooltip = function(item, isTouchScreenOptimizedEnabled, shouldAddNodeValue, isMultiValueSubtotal, role) {
                var _a, _this = this, selection = d3.select(isTouchScreenOptimizedEnabled), isTouchScreenOptimizedEnabled = null === (isTouchScreenOptimizedEnabled = (_a = this.tooltipService).isTouchScreenOptimizedEnabled) || void 0 === isTouchScreenOptimizedEnabled ? void 0 : isTouchScreenOptimizedEnabled.call(_a), excluded = ((_a = {})[0] = !isTouchScreenOptimizedEnabled, 
                _a);
                this.tooltipService.addTooltip(selection, function() {
                    return visuals.PivotTableInteractivityUtils.getHeaderTooltipInfo(item, shouldAddNodeValue, isMultiValueSubtotal, _this.totalLabel, _this.valueLabel);
                }, function() {
                    var itemSelectionId = _this.getItemSelectionId(item, role, excluded);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, PivotTableInteractionManager.prototype.addCornerTooltip = function(item, selection) {
                var _this = this, selection = d3.select(selection);
                this.tooltipService.addTooltip(selection, function() {
                    return visuals.PivotTableInteractivityUtils.getCornerCellTooltipInfo(item);
                }, function() {
                    var itemSelectionId = _this.getItemSelectionId(item, void 0, void 0);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, PivotTableInteractionManager.prototype.getHeaderHandler = function(shouldAddNodeValue, isTotalNode, roleName) {
                var _this = this;
                return {
                    addTooltip: function(headerCell, headerElement) {
                        return _this.addHeaderTooltip(headerCell, headerElement, shouldAddNodeValue, isTotalNode, roleName);
                    },
                    removeTooltip: function(_headerCell, headerElement) {
                        return _this.removeTooltip(headerElement);
                    },
                    isTooltipEnabled: function(headerCell) {
                        return _this.tooltipsEnabled && void 0 !== headerCell.valueFormatted;
                    },
                    setTooltipDelegate: function() {
                        return debug.assertFail("not implemented");
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, PivotTableInteractionManager.prototype.removeTooltip = function(selection) {
                selection = d3.select(selection);
                this.tooltipService.removeTooltips(selection);
            }, PivotTableInteractionManager.prototype.getItemSelectionId = function(selectors, selector, excluded) {
                selectors = this.selectionManager.createSelectorsByColumn(selectors), selector = selectors && visuals.SelectionId.fromSelectorsByColumnAndRoles(selectors, selector);
                return selector && excluded && (selector.exclude = __assign(__assign({}, selector.exclude), null != excluded ? excluded : {})), 
                selector;
            }, PivotTableInteractionManager;
        }();
        visuals.PivotTableInteractionManager = PivotTableInteractionManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var PivotTableSortingManager = function() {
            function PivotTableSortingManager(hostServices) {
                this.hostServices = hostServices;
            }
            return PivotTableSortingManager.prototype.onDataViewChanged = function(rowHierarchy, columnHierarchy, valueSources, isSteppedLayout, valuesOnRowApplied) {
                this.isSteppedLayout = isSteppedLayout, this.valuesOnRowApplied = valuesOnRowApplied, 
                this.nonMeasureRowLevels = this.getNonMeasureRowLevels(rowHierarchy), this.valueSources = valueSources, 
                this.hasRows = rowHierarchy && !_.isEmpty(this.nonMeasureRowLevels), this.hasColumns = columnHierarchy && !_.isEmpty(columnHierarchy.levels), 
                this.measureCount = valueSources ? valueSources.length : 0;
            }, PivotTableSortingManager.hasSortingChanged = function(previousDataView, newColumns) {
                if (!previousDataView || !newColumns) return !1;
                var previousColumns = previousDataView.metadata.columns;
                if (_.isEmpty(previousColumns)) return !1;
                newColumns = newColumns.metadata.columns;
                if (_.isEmpty(newColumns)) return !1;
                for (var _i = 0, newColumns_1 = newColumns; _i < newColumns_1.length; _i++) {
                    var state_1 = function(newColumn) {
                        var previousColumn = _.find(previousColumns, function(previousColumn) {
                            return newColumn.queryName === previousColumn.queryName;
                        });
                        if (previousColumn && newColumn.sort !== previousColumn.sort) return {
                            value: !0
                        };
                    }(newColumns_1[_i]);
                    if ("object" == typeof state_1) return state_1.value;
                }
                return !1;
            }, PivotTableSortingManager.prototype.isCornerSortable = function(header) {
                return this.hasRows && null != header.metadata && header.position.row.isLast && (!this.valuesOnRowApplied || !header.position.column.isLast);
            }, PivotTableSortingManager.prototype.getNonMeasureRowLevels = function(rowHierarchy) {
                if (this.valuesOnRowApplied) {
                    var levels = [];
                    return levels.push.apply(levels, rowHierarchy.levels || []), levels.pop(), levels;
                }
                return rowHierarchy.levels;
            }, PivotTableSortingManager.prototype.isColumnHeaderSortable = function(header) {
                var hasIdentity = visuals.PivotTableSelectionManager.hasIdentity(header);
                return this.hasRows && 0 < this.measureCount && !hasIdentity && header.position.row.isLast && !this.valuesOnRowApplied;
            }, PivotTableSortingManager.prototype.getCornerSortDirection = function(header) {
                if (!this.isCornerSortable(header)) return null;
                if (this.isSteppedLayout) {
                    for (var sortDirection = null, _i = 0, _a = this.nonMeasureRowLevels; _i < _a.length; _i++) {
                        var levelSortDirection = _a[_i];
                        if (1 !== levelSortDirection.sources.length) return null;
                        levelSortDirection = levelSortDirection.sources[0].sort;
                        if (null == levelSortDirection) return null;
                        if (null !== sortDirection) {
                            if (levelSortDirection !== sortDirection) return null;
                        } else sortDirection = levelSortDirection;
                    }
                    return sortDirection;
                }
                return this.nonMeasureRowLevels[header.position.column.index].sources[0].sort;
            }, PivotTableSortingManager.prototype.getColumnHeaderSortDirection = function(header) {
                return this.isColumnHeaderSortable(header) ? this.getMeasureSortDirection(this.getMeasureQueryName(header)) : null;
            }, PivotTableSortingManager.prototype.getMeasureQueryName = function(header) {
                return (this.hasColumns && 1 === this.measureCount ? this.valueSources[0] : header).queryName;
            }, PivotTableSortingManager.prototype.sortCorner = function(corner) {
                var currentSort = this.getCornerSortDirection(corner), futureSortDirection = PivotTableSortingManager.getNextSortDirection(currentSort);
                if (this.isSteppedLayout) for (var sortDescriptors = [], _i = 0, _a = this.nonMeasureRowLevels; _i < _a.length; _i++) {
                    var level = _a[_i];
                    sortDescriptors.push({
                        queryName: level.sources[0].queryName,
                        sortDirection: futureSortDirection
                    });
                } else sortDescriptors = [ {
                    queryName: corner.metadata.queryName,
                    sortDirection: futureSortDirection
                } ];
                this.hostServices.onCustomSort({
                    sortDescriptors: sortDescriptors
                });
            }, PivotTableSortingManager.prototype.sortColumnHeader = function(header) {
                var sortDirection = this.getColumnHeaderSortDirection(header), column = this.getMeasureColumn(this.getMeasureQueryName(header));
                this.hostServices.onCustomSort({
                    sortDescriptors: [ {
                        queryName: this.getMeasureQueryName(header),
                        sortDirection: PivotTableSortingManager.getNextSortDirection(sortDirection, column)
                    } ]
                });
            }, PivotTableSortingManager.getNextSortDirection = function(currentSortDirection, column) {
                return void 0 === currentSortDirection ? PivotTableSortingManager.getDefaultSortDirection(column) : 1 === currentSortDirection ? 2 : 1;
            }, PivotTableSortingManager.getDefaultSortDirection = function(column) {
                return column && column.isMeasure && column.type && column.type.numeric && !column.type.temporal ? 2 : 1;
            }, PivotTableSortingManager.prototype.getMeasureSortDirection = function(valueSource) {
                valueSource = this.getMeasureColumn(valueSource);
                if (null != valueSource) return valueSource.sort;
            }, PivotTableSortingManager.prototype.getMeasureColumn = function(queryName) {
                return _.find(this.valueSources, function(value) {
                    return value.queryName === queryName;
                });
            }, PivotTableSortingManager;
        }();
        visuals.PivotTableSortingManager = PivotTableSortingManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var PivotTableSelectionMode, TablixUtils = powerbi.visuals.controls.internal.TablixUtils;
        function isBodyItem(item) {
            return 0 === item.type;
        }
        !function(PivotTableSelectionMode) {
            PivotTableSelectionMode[PivotTableSelectionMode.RowHeader = 0] = "RowHeader", PivotTableSelectionMode[PivotTableSelectionMode.ColumnHeader = 1] = "ColumnHeader", 
            PivotTableSelectionMode[PivotTableSelectionMode.BodyCell = 2] = "BodyCell";
        }(PivotTableSelectionMode = visuals.PivotTableSelectionMode || (visuals.PivotTableSelectionMode = {}));
        var PivotTableSelectionManager = function() {
            function PivotTableSelectionManager(hostServices, featureSwitches) {
                this.hostServices = hostServices, this.featureSwitches = featureSwitches, this.clearLocal();
            }
            return PivotTableSelectionManager.prototype.onItemContextMenu = function(item, selectionMode, mouseEvent, args) {
                var contextMenuItems;
                visuals.EventBubblingUtil.markAsHandled(mouseEvent), !this.isEmpty() && this.isItemSelected(item, !0) ? (contextMenuItems = this.selectedItems, 
                selectionMode = this.selectionMode) : contextMenuItems = [ item ];
                args = this.createContextMenuArgs(item, selectionMode, contextMenuItems, mouseEvent, args);
                args && this.hostServices.onContextMenu(args);
            }, PivotTableSelectionManager.prototype.onWhitespaceClick = function() {
                this.clearLocal(), this.hostServices.onSelect(this.createSelectArgs(this.selectedItems));
            }, PivotTableSelectionManager.prototype.isDrillingEnabled = function(item, args, selectionMode) {
                args = this.createSelectingArgs(item, selectionMode, args);
                return this.hostServices.onSelecting(args), 1 === args.action;
            }, PivotTableSelectionManager.prototype.select = function(item, selectionMode, multiSelectionMode) {
                this.updateSelection(item, selectionMode, multiSelectionMode, !1), this.hostServices.onSelect(this.createSelectArgs(this.selectedItems, multiSelectionMode));
            }, PivotTableSelectionManager.prototype.updateSelection = function(item, selectionMode, multiSelectionMode, isContextClick) {
                if (isContextClick || selectionMode === this.selectionMode || this.clearLocal(), 
                this.createSelectorsByColumn(item)) if (this.isItemSelected(item, isContextClick)) {
                    if (isContextClick) return !1;
                    1 === this.selectedItems.length && 1 !== multiSelectionMode ? this.clearLocal() : 3 === multiSelectionMode ? this.unselectItem(item) : 0 === multiSelectionMode && (this.selectedItems = [ item ]);
                } else 0 !== multiSelectionMode && selectionMode === this.selectionMode || this.clearLocal(), 
                this.selectionMode = selectionMode, this.selectedItems.push(item), this.hostServices.canSelect(this.createSelectArgs(this.selectedItems)) || (this.selectedItems = [ item ]); else this.clearLocal();
                return !0;
            }, PivotTableSelectionManager.prototype.isRowHeaderHighlighted = function(header) {
                if (this.isEmpty()) return !0;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                    var selectedItem = _a[_i];
                    if (this.isRowHeaderOnSelectedPath(selectedItem, header)) return !0;
                }
                return !1;
            }, PivotTableSelectionManager.prototype.isColumnHeaderHighlighted = function(header) {
                if (this.isEmpty()) return !0;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                    var selectedItem = _a[_i];
                    if (this.isColumnHeaderOnSelectedPath(selectedItem, header)) return !0;
                }
                return !1;
            }, PivotTableSelectionManager.prototype.isBodyCellHighlighted = function(bodyCell) {
                if (this.isEmpty()) return !0;
                for (var _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                    var selected = _a[_i];
                    if (this.isBodyCellOnSelectedPath(selected, bodyCell)) return !0;
                }
                return !1;
            }, PivotTableSelectionManager.prototype.isRowHeaderOnSelectedPath = function(item, header) {
                if (this.selectionMode === PivotTableSelectionMode.ColumnHeader) return !0;
                item = isBodyItem(item) ? item.rowItem : item;
                return this.isOnSelectedPath(this.getEffectiveSelectedHeader(item), header);
            }, PivotTableSelectionManager.prototype.isColumnHeaderOnSelectedPath = function(item, header) {
                if (this.selectionMode === PivotTableSelectionMode.RowHeader) return !0;
                item = isBodyItem(item) ? item.columnItem : item;
                return this.isOnSelectedPath(this.getEffectiveSelectedHeader(item), header);
            }, PivotTableSelectionManager.prototype.isBodyCellOnSelectedPath = function(selectedItem, bodyCell) {
                return this.isRowHeaderOnSelectedPath(selectedItem, bodyCell.rowItem) && this.isColumnHeaderOnSelectedPath(selectedItem, bodyCell.columnItem);
            }, PivotTableSelectionManager.prototype.isOnSelectedPath = function(selectedItem, header) {
                if (!selectedItem) return !0;
                for (var current = selectedItem; current; ) {
                    if (current === header) return !0;
                    current = current.parent;
                }
                for (current = header; current; ) {
                    if (current === selectedItem) return !0;
                    current = current.parent;
                }
                return !1;
            }, PivotTableSelectionManager.prototype.onDataViewChanged = function(rowHierarchyNavigator, columnHierarchyNavigator) {
                this.rowHierarchyNavigator = rowHierarchyNavigator, this.columnHierarchyNavigator = columnHierarchyNavigator;
                var rowItems = rowHierarchyNavigator && rowHierarchyNavigator.getHierarchyItems(), columnItems = columnHierarchyNavigator && columnHierarchyNavigator.getHierarchyItems();
                if (!this.isEmpty()) {
                    for (var newSelectedItems = [], _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                        var selectedItem = _a[_i], newSelectedItem = PivotTableSelectionManager.getMatchingItem(selectedItem, this.selectionMode, rowItems, columnItems, rowHierarchyNavigator);
                        newSelectedItem ? newSelectedItems.push(newSelectedItem) : newSelectedItems.push(selectedItem);
                    }
                    this.selectedItems = newSelectedItems;
                }
            }, PivotTableSelectionManager.getMatchingItem = function(selectedItem, selectionMode, rowItems, columnItems, hierarchyNavigator) {
                switch (selectionMode) {
                  case PivotTableSelectionMode.RowHeader:
                    return this.getMatchingHeader(selectedItem, rowItems);

                  case PivotTableSelectionMode.ColumnHeader:
                    return this.getMatchingHeader(selectedItem, columnItems);

                  case PivotTableSelectionMode.BodyCell:
                    var columnItem = selectedItem, rowItem = this.getMatchingHeader(columnItem.rowItem, rowItems), columnItem = this.getMatchingHeader(columnItem.columnItem, columnItems);
                    return rowItem && columnItem ? hierarchyNavigator.getIntersection(rowItem, columnItem) : null;
                }
            }, PivotTableSelectionManager.getMatchingHeader = function(selectedItem, items) {
                if (items) for (var _i = 0, items_5 = items; _i < items_5.length; _i++) {
                    var matching = items_5[_i];
                    if (this.areHeadersEqual(selectedItem, matching)) return matching;
                    matching = this.getMatchingHeader(selectedItem, matching.children);
                    if (matching) return matching;
                }
                return null;
            }, PivotTableSelectionManager.areHeadersEqual = function(item1, item2) {
                if (powerbi.DataViewScopeIdentity.equals(item1.identity, item2.identity) && item1.queryName === item2.queryName) {
                    if (!item1.parent && !item2.parent) return !0;
                    if (item1.parent && item2.parent) return this.areHeadersEqual(item1.parent, item2.parent);
                }
                return !1;
            }, PivotTableSelectionManager.getMatchingItemById = function(selectorsByColumn, selectionMode, rowItems, columnItems, hierarchyNavigator) {
                var selectorsByColumnKeys = _.keys(selectorsByColumn.dataMap), columnQueryNames = _.chain(hierarchyNavigator.getColumnHierarchy().levels).filter(function(level) {
                    return !level.sources[0].isMeasure;
                }).map(function(level) {
                    return level.sources[0].queryName;
                }).filter(function(queryName) {
                    return _.includes(selectorsByColumnKeys, queryName);
                }).value(), rowQueryNames = _.chain(hierarchyNavigator.getRowHierarchy().levels).map(function(level) {
                    return level.sources[0].queryName;
                }).filter(function(queryName) {
                    return _.includes(selectorsByColumnKeys, queryName);
                }).value();
                switch (selectionMode) {
                  case PivotTableSelectionMode.RowHeader:
                    return this.getMatchingHeaderById(selectorsByColumn, rowQueryNames, rowItems);

                  case PivotTableSelectionMode.ColumnHeader:
                    return this.getMatchingHeaderById(selectorsByColumn, columnQueryNames, columnItems);

                  case PivotTableSelectionMode.BodyCell:
                    var rowItem = this.getMatchingHeaderById(selectorsByColumn, rowQueryNames, rowItems), columnItem = this.getMatchingHeaderById(selectorsByColumn, columnQueryNames, columnItems);
                    return rowItem && columnItem ? hierarchyNavigator.getIntersection(rowItem, columnItem) : null;
                }
            }, PivotTableSelectionManager.getMatchingHeaderById = function(selectorsByColumn, queryNames, items) {
                if (items) for (var _i = 0, items_6 = items; _i < items_6.length; _i++) for (var item = items_6[_i], this_2 = this, i = 0, ilen = queryNames.length; i < ilen; i++) {
                    var state_2 = function(i, matching) {
                        var currentQueryName = queryNames[i];
                        if (this_2.headerMatchesId(selectorsByColumn, currentQueryName, item)) {
                            if (1 === matching) return {
                                value: item
                            };
                            item.children;
                            matching = this_2.getMatchingHeaderById(selectorsByColumn, _.filter(queryNames, function(queryName) {
                                return queryName !== currentQueryName;
                            }), item.children);
                            return matching ? {
                                value: matching
                            } : void 0;
                        }
                    }(i, ilen);
                    if ("object" == typeof state_2) return state_2.value;
                }
                return null;
            }, PivotTableSelectionManager.headerMatchesId = function(selectorsByColumn, queryName, node) {
                return !!(queryName === node.queryName && selectorsByColumn.dataMap && selectorsByColumn.dataMap[queryName] && powerbi.DataViewScopeIdentity.equals(_.head(selectorsByColumn.dataMap[queryName]), node.identity));
            }, PivotTableSelectionManager.areCornerItemsEqual = function(item1, item2) {
                return !(!item1.metadata || !item2.metadata) && item1.metadata.queryName === item2.metadata.queryName;
            }, PivotTableSelectionManager.prototype.clearLocal = function() {
                this.selectedItems = [];
            }, PivotTableSelectionManager.prototype.restoreSelectionState = function(selection, hierarchyNavigator) {
                if (this.clearLocal(), _.isEmpty(selection)) return !0;
                for (var foundMatchingId = !1, selectedItems = this.selectedItems, _i = 0, selection_1 = selection; _i < selection_1.length; _i++) {
                    var selectorsByColumn = selection_1[_i], newSelectedItem = this.determineSelectionModeFromIds(selectorsByColumn, hierarchyNavigator);
                    null != newSelectedItem && (this.selectionMode = newSelectedItem, (newSelectedItem = PivotTableSelectionManager.getMatchingItemById(selectorsByColumn, newSelectedItem, hierarchyNavigator.getRowHierarchy().root.children, hierarchyNavigator.getColumnHierarchy().root.children, hierarchyNavigator)) && (selectedItems.push(newSelectedItem), 
                    foundMatchingId = !0));
                }
                return foundMatchingId;
            }, PivotTableSelectionManager.prototype.determineSelectionModeFromIds = function(selectorsByColumn, hierarchyNavigator) {
                if (!selectorsByColumn) return this.selectionMode;
                var key, columnQueryNames = _.map(hierarchyNavigator.getColumnHierarchy().levels, function(level) {
                    return level.sources[0].queryName;
                }), columnMatchFound = !1, rowQueryNames = _.map(hierarchyNavigator.getRowHierarchy().levels, function(level) {
                    return level.sources[0].queryName;
                }), rowMatchFound = !1;
                for (key in selectorsByColumn.dataMap) if (_.includes(columnQueryNames, key)) columnMatchFound = !0; else {
                    if (!_.includes(rowQueryNames, key)) return;
                    rowMatchFound = !0;
                }
                return columnMatchFound && rowMatchFound ? PivotTableSelectionMode.BodyCell : columnMatchFound ? PivotTableSelectionMode.ColumnHeader : rowMatchFound ? PivotTableSelectionMode.RowHeader : void 0;
            }, PivotTableSelectionManager.prototype.isEmpty = function() {
                return _.isEmpty(this.selectedItems);
            }, PivotTableSelectionManager.prototype.isItemSelected = function(item, considerMixedSelections) {
                void 0 === considerMixedSelections && (considerMixedSelections = !1);
                for (var bodyItem = isBodyItem(item) ? item : void 0, _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                    var selectedItem = _a[_i];
                    if (isBodyItem(selectedItem) && bodyItem) {
                        if (this.areBodyCellsEqual(selectedItem, bodyItem)) return !0;
                    } else if (selectedItem === item) return !0;
                }
                return !(!considerMixedSelections || this.isEmpty() || !bodyItem) && this.isBodyCellHighlighted(bodyItem);
            }, PivotTableSelectionManager.prototype.unselectItem = function(item) {
                var _this = this;
                isBodyItem(item) ? _.remove(this.selectedItems, function(selectedItem) {
                    return _this.areBodyCellsEqual(selectedItem, item);
                }) : _.pull(this.selectedItems, item);
            }, PivotTableSelectionManager.prototype.areBodyCellsEqual = function(bodyCell1, bodyCell2) {
                return bodyCell1.rowItem === bodyCell2.rowItem && bodyCell1.columnItem === bodyCell2.columnItem;
            }, PivotTableSelectionManager.prototype.getEffectiveSelectedHeader = function(header) {
                return header && !header.identity ? this.getEffectiveSelectedHeader(header.parent) : header;
            }, PivotTableSelectionManager.prototype.getEffectiveSelectedNodes = function(header) {
                return header.parent ? [ this.getEffectiveSelectedHeader(header) ] : header.identity ? [ header ] : header.siblings;
            }, PivotTableSelectionManager.getRoleNames = function(selectionMode) {
                switch (selectionMode) {
                  case PivotTableSelectionMode.ColumnHeader:
                    return [ visuals.matrixRoleNames.columns ];

                  case PivotTableSelectionMode.RowHeader:
                    return [ visuals.matrixRoleNames.rows ];

                  case PivotTableSelectionMode.BodyCell:
                    return [ visuals.matrixRoleNames.values ];
                }
            }, PivotTableSelectionManager.prototype.createSelectingArgs = function(item, selectionMode, mouseEvent) {
                return {
                    visualObjects: this.getVisualObjects([ item ]),
                    position: PivotTableSelectionManager.getMouseEventPosition(mouseEvent),
                    dataRoles: PivotTableSelectionManager.getRoleNames(selectionMode)
                };
            }, PivotTableSelectionManager.prototype.createSelectArgs = function(items, multiSelectionMode) {
                for (var visualObjects = [], _i = 0, items_7 = items; _i < items_7.length; _i++) {
                    var selector = items_7[_i], selector = this.createSelectorsByColumn(selector);
                    selector && visualObjects.push({
                        objectName: "",
                        selectorsByColumn: selector
                    });
                }
                return {
                    visualObjects: this.getVisualObjects(items),
                    selectionMode: multiSelectionMode
                };
            }, PivotTableSelectionManager.prototype.getVisualObjects = function(items) {
                for (var visualObjects = [], _i = 0, items_8 = items; _i < items_8.length; _i++) {
                    var selector = items_8[_i], selector = this.createSelectorsByColumn(selector);
                    selector && visualObjects.push({
                        objectName: "",
                        selectorsByColumn: selector
                    });
                }
                return visualObjects;
            }, PivotTableSelectionManager.prototype.createContextMenuArgs = function(rightClickedItem, itemKind, selectedItems, args, roleNames) {
                for (var _this = this, data = [], _i = 0, selectedItems_1 = selectedItems; _i < selectedItems_1.length; _i++) {
                    var selector = selectedItems_1[_i], selector = this.createSelectorsByColumn(selector);
                    selector && data.push(selector);
                }
                var singleValue, thisValue, args = {
                    dataRoles: roleNames,
                    data: data,
                    position: PivotTableSelectionManager.getMouseEventPosition(args)
                };
                if (isBodyItem(rightClickedItem) || (args.nodeIndex = this.getHierarchyNodeIndex(rightClickedItem)), 
                (_.isEmpty(data) || data.every(function(selector) {
                    return _.isEmpty(selector.dataMap);
                })) && isBodyItem(rightClickedItem) && rightClickedItem.isColumnGrandTotal && rightClickedItem.isRowGrandTotal) {
                    var isSparkline_1 = null === (thisValue = null === (thisValue = null === (thisValue = rightClickedItem.columnMetadata) || void 0 === thisValue ? void 0 : thisValue.type) || void 0 === thisValue ? void 0 : thisValue.misc) || void 0 === thisValue ? void 0 : thisValue.sparkline;
                    return args.copyArgs = {
                        singleValue: function() {
                            return isSparkline_1 ? rightClickedItem.textContent : String(rightClickedItem.dataPoint);
                        }
                    }, args;
                }
                return isBodyItem(rightClickedItem) ? (null === (thisValue = null === (thisValue = null === (thisValue = rightClickedItem.columnMetadata) || void 0 === thisValue ? void 0 : thisValue.type) || void 0 === thisValue ? void 0 : thisValue.misc) || void 0 === thisValue ? void 0 : thisValue.sparkline) ? singleValue = rightClickedItem.textContent : null != (thisValue = rightClickedItem.dataPoint) && (singleValue = TablixUtils.convertValueToString(thisValue, this.featureSwitches.utcDates)) : singleValue = rightClickedItem.tooltipValueFormatted, 
                args.copyArgs = {
                    grid: function() {
                        return _this.generateGridCopyCallback(selectedItems, itemKind);
                    }
                }, void 0 !== singleValue && (args.copyArgs.singleValue = function() {
                    return String(singleValue);
                }), args;
            }, PivotTableSelectionManager.prototype.generateGridCopyCallback = function(selectedItems, itemKind) {
                var info, itemsToCopy = selectedItems.slice(), grid = [];
                switch (itemKind) {
                  case PivotTableSelectionMode.BodyCell:
                    itemsToCopy = this.collectSelectedBodyNodes(itemsToCopy), info = visuals.PivotTableInteractivityUtils.getGivenBodyCellsInfo(itemsToCopy, this.rowHierarchyNavigator, this.columnHierarchyNavigator, this.hostServices.getLocalizedString(TablixUtils.ValueLabel)), 
                    grid.push.apply(grid, __spreadArray([ info.headers ], info.values || []));
                    break;

                  case PivotTableSelectionMode.ColumnHeader:
                    for (var headersWithMeasureSiblings = [], _i = 0, _a = itemsToCopy; _i < _a.length; _i++) {
                        var item = _a[_i];
                        this.columnHierarchyNavigator.isLeaf(item) && this.columnHierarchyNavigator.getColumnHeaderMetadataColumn(item).isMeasure ? headersWithMeasureSiblings.push.apply(headersWithMeasureSiblings, item.siblings || []) : headersWithMeasureSiblings.push(item);
                    }
                    info = visuals.PivotTableInteractivityUtils.getGivenGroupingDataItems([], itemsToCopy = headersWithMeasureSiblings, this.rowHierarchyNavigator, this.columnHierarchyNavigator, this.hostServices.getLocalizedString(TablixUtils.ValueLabel)), 
                    grid.push.apply(grid, __spreadArray([ info.headers ], info.values || []));
                    break;

                  case PivotTableSelectionMode.RowHeader:
                    info = visuals.PivotTableInteractivityUtils.getGivenGroupingDataItems(itemsToCopy, [], this.rowHierarchyNavigator, this.columnHierarchyNavigator, this.hostServices.getLocalizedString(TablixUtils.ValueLabel)), 
                    grid.push.apply(grid, __spreadArray([ info.headers ], info.values || []));
                }
                return {
                    grid: grid,
                    coveragePercentage: info ? info.coveragePercentage : void 0
                };
            }, PivotTableSelectionManager.prototype.getHierarchyNodeIndex = function(node) {
                for (var nodeIndex = []; node && null != node.index; ) nodeIndex.splice(0, 0, node.index), 
                node = node.parent;
                return nodeIndex;
            }, PivotTableSelectionManager.prototype.collectSelectedBodyNodes = function(itemsToSelect) {
                for (var highlightedItems = [], _i = 0, itemsToSelect_1 = itemsToSelect; _i < itemsToSelect_1.length; _i++) {
                    var rowHeaders, selectedRange, item = itemsToSelect_1[_i];
                    !item.isSubtotal && item.columnItem.identity && item.rowItem.identity ? highlightedItems.push(item) : (rowHeaders = [], 
                    selectedRange = [], item.isRowGrandTotal || (rowHeaders = this.getEffectiveSelectedNodes(item.rowItem)), 
                    item.isColumnGrandTotal || (selectedRange = this.getEffectiveSelectedNodes(item.columnItem)), 
                    selectedRange = visuals.PivotTableInteractivityUtils.explodeHeadersToBodyItems(this.rowHierarchyNavigator, this.columnHierarchyNavigator, rowHeaders, selectedRange), 
                    highlightedItems.push.apply(highlightedItems, selectedRange || []));
                }
                for (var i = 0; i < highlightedItems.length; i++) for (var item1 = highlightedItems[i], j = i + 1; j < highlightedItems.length; j++) {
                    var item2 = highlightedItems[j];
                    _.isEqual(item1, item2) && (highlightedItems.splice(j, 1), j--);
                }
                return highlightedItems;
            }, PivotTableSelectionManager.prototype.createSelectorsByColumn = function(item) {
                return isBodyItem(item) ? this.createSelectorsByColumnForBodyCell(item) : this.createSelectorsByColumnForHeader(item);
            }, PivotTableSelectionManager.prototype.createSelectorsByColumnForHeader = function(header) {
                var queryName = header.queryName, dataMap = {};
                return PivotTableSelectionManager.addHeaderIdentities(header, dataMap) ? {
                    dataMap: dataMap,
                    metadata: [ queryName ]
                } : void 0;
            }, PivotTableSelectionManager.prototype.createSelectorsByColumnForBodyCell = function(columnQueryName) {
                var dataMap = {}, columnQueryName = (PivotTableSelectionManager.addHeaderIdentities(columnQueryName.rowItem, dataMap), 
                PivotTableSelectionManager.addHeaderIdentities(columnQueryName.columnItem, dataMap), 
                null === (columnQueryName = columnQueryName.columnMetadata) || void 0 === columnQueryName ? void 0 : columnQueryName.queryName);
                return {
                    dataMap: dataMap,
                    metadata: columnQueryName ? [ columnQueryName ] : void 0
                };
            }, PivotTableSelectionManager.addHeaderIdentities = function(header, dataMap) {
                for (var path = []; header; ) header.identity && path.splice(0, 0, header), header = header.parent;
                for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
                    var node = path_1[_i];
                    dataMap[node.queryName] = [ node.identity ];
                }
                return 0 < path.length;
            }, PivotTableSelectionManager.hasIdentity = function(header) {
                return PivotTableSelectionManager.addHeaderIdentities(header, {});
            }, PivotTableSelectionManager.getMouseEventPosition = function(mouseEvent) {
                return {
                    x: mouseEvent.clientX,
                    y: mouseEvent.clientY
                };
            }, PivotTableSelectionManager;
        }();
        visuals.PivotTableSelectionManager = PivotTableSelectionManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var DataViewMatrixUtils = powerbi.data.DataViewMatrixUtils, DataViewScopeTotal = powerbi.data.DataViewScopeTotal, PivotTableSizeManager = function() {
            function PivotTableSizeManager(hostServices) {
                this.hostServices = hostServices;
            }
            return PivotTableSizeManager.prototype.onDataViewChanged = function(columnHierarchy, valueSources, metatdataObjects, valuesOnRowApplied) {
                this.columnHierarchy = columnHierarchy, this.valueSources = valueSources, this.metatdataObjects = metatdataObjects, 
                this.valuesOnRowApplied = valuesOnRowApplied, this.hasColumnGrouping = 0 < DataViewMatrixUtils.getColumnGroupingLevelsCount(this.columnHierarchy), 
                this.hasMultiMeasureOnColumns = !_.isEmpty(this.valueSources) && 1 < this.valueSources.length && !this.valuesOnRowApplied, 
                this.headerPendingChanges = [], this.cornerPendingChanges = [];
            }, PivotTableSizeManager.prototype.getNodeSelector = function(header) {
                if (!this.hasColumnGrouping) {
                    if (header.queryName) return {
                        metadata: header.queryName
                    };
                    if (this.valuesOnRowApplied) return null;
                }
                for (var selector = {}; header; ) {
                    if (this.hasMultiMeasureOnColumns && header.level === this.columnHierarchy.levels.length - 1) selector.metadata = header.queryName; else if (header.isSubtotal) {
                        for (var totalExprs = [], _i = 0, levelSources_1 = this.columnHierarchy.levels[header.level].sources; _i < levelSources_1.length; _i++) {
                            var source = levelSources_1[_i];
                            _.isEmpty(source.identityExprs) || totalExprs.push.apply(totalExprs, source.identityExprs || []);
                        }
                        _.isEmpty(totalExprs) || (selector.data = [ DataViewScopeTotal.fromExprs(totalExprs) ]);
                    } else header.identity && (selector.data ? selector.data.splice(0, 0, header.identity) : selector.data = [ header.identity ]);
                    header = header.parent;
                }
                return selector;
            }, PivotTableSizeManager.prototype.getCornerSelector = function(corner) {
                if (corner.metadata && corner.metadata.queryName) return {
                    metadata: corner.metadata.queryName
                };
            }, PivotTableSizeManager.prototype.getHeaderPendingChange = function(header) {
                return _.find(this.headerPendingChanges, function(change) {
                    return visuals.PivotTableSelectionManager.areHeadersEqual(change.cell, header);
                });
            }, PivotTableSizeManager.prototype.getCornerPendingChange = function(corner) {
                return _.find(this.cornerPendingChanges, function(change) {
                    return visuals.PivotTableSelectionManager.areCornerItemsEqual(change.cell, corner);
                });
            }, PivotTableSizeManager.prototype.queueHeaderPendingChange = function(header, width) {
                var pendingChange = this.getHeaderPendingChange(header);
                pendingChange ? pendingChange.width = width : this.headerPendingChanges.push({
                    cell: header,
                    width: width
                });
            }, PivotTableSizeManager.prototype.queueCornerPendingChange = function(corner, width) {
                var pendingChange = this.getCornerPendingChange(corner);
                pendingChange ? pendingChange.width = width : this.cornerPendingChanges.push({
                    cell: corner,
                    width: width
                });
            }, PivotTableSizeManager.prototype.getColumnWidth = function(header) {
                var objects, pendingChange = this.getHeaderPendingChange(header);
                return pendingChange ? pendingChange.width : (this.hasColumnGrouping ? objects = header.objects : header.queryName ? objects = this.valueSources[header.levelSourceIndex || 0].objects : this.valuesOnRowApplied && (objects = this.metatdataObjects), 
                visuals.TablixProperties.PropColumnWidthValue.getValue(objects));
            }, PivotTableSizeManager.prototype.setColumnWidth = function(header, width) {
                var selector = this.getNodeSelector(header);
                this.queueHeaderPendingChange(header, width), visuals.PivotTableSizeManagerUtils.persistWidths([ {
                    selector: selector,
                    value: width
                } ], this.hostServices, this.onPersisting);
            }, PivotTableSizeManager.prototype.getRowHeight = function(header) {}, PivotTableSizeManager.prototype.setRowHeight = function(header, height) {}, 
            PivotTableSizeManager.prototype.getRowLevelWidth = function(cornerCell) {
                var pendingChange = this.getCornerPendingChange(cornerCell);
                return pendingChange ? pendingChange.width : cornerCell.metadata && cornerCell.metadata.objects ? visuals.TablixProperties.PropColumnWidthValue.getValue(cornerCell.metadata.objects) : void 0;
            }, PivotTableSizeManager.prototype.setRowLevelWidth = function(cornerCell, width) {
                var selector = this.getCornerSelector(cornerCell);
                selector && (this.queueCornerPendingChange(cornerCell, width), visuals.PivotTableSizeManagerUtils.persistWidths([ {
                    selector: selector,
                    value: width
                } ], this.hostServices, this.onPersisting));
            }, PivotTableSizeManager.prototype.getColumnLevelHeight = function(cornerCell) {}, 
            PivotTableSizeManager.prototype.setColumnLevelHeight = function(cornerCell, height) {}, 
            PivotTableSizeManager.prototype.setMissingWidths = function(headersWidth, cornersWidth) {
                for (var widthsToPersist = [], _i = 0, headersWidth_1 = headersWidth; _i < headersWidth_1.length; _i++) {
                    var headerWidth = headersWidth_1[_i], node = headerWidth.node, width = headerWidth.width;
                    null == this.getColumnWidth(node) && (this.queueHeaderPendingChange(node, width), 
                    widthsToPersist.push({
                        selector: this.getNodeSelector(node),
                        value: width
                    }));
                }
                for (var _a = 0, cornersWidth_1 = cornersWidth; _a < cornersWidth_1.length; _a++) {
                    var selector = cornersWidth_1[_a], corner = selector.corner, width = selector.width, selector = this.getCornerSelector(corner);
                    selector && null == this.getRowLevelWidth(corner) && (this.queueCornerPendingChange(corner, width), 
                    widthsToPersist.push({
                        selector: selector,
                        value: width
                    }));
                }
                _.isEmpty(widthsToPersist) || visuals.PivotTableSizeManagerUtils.persistWidths(widthsToPersist, this.hostServices, this.onPersisting);
            }, PivotTableSizeManager.prototype.clearWidths = function(columnHeaders, cornerItems) {
                for (var widthsToPersist = [], _i = 0, columnHeaders_1 = columnHeaders; _i < columnHeaders_1.length; _i++) {
                    var node = columnHeaders_1[_i];
                    null != this.getColumnWidth(node) && widthsToPersist.push({
                        selector: this.getNodeSelector(node),
                        value: void 0
                    }), this.queueHeaderPendingChange(node, void 0);
                }
                for (var _a = 0, cornerItems_1 = cornerItems; _a < cornerItems_1.length; _a++) {
                    var corner = cornerItems_1[_a];
                    null != this.getRowLevelWidth(corner) && widthsToPersist.push({
                        selector: this.getCornerSelector(corner),
                        value: void 0
                    }), this.queueCornerPendingChange(corner, void 0);
                }
                _.isEmpty(widthsToPersist) || visuals.PivotTableSizeManagerUtils.persistWidths(widthsToPersist, this.hostServices, this.onPersisting);
            }, PivotTableSizeManager;
        }();
        visuals.PivotTableSizeManager = PivotTableSizeManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TablixColumnWidthManager = powerbi.visuals.controls.TablixColumnWidthManager, TablixControl = powerbi.visuals.controls.TablixControl, TablixType = powerbi.visuals.controls.TablixType, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, Table = function() {
            function Table(options) {
                this.isTouchDisabled = options && options.isTouchDisabled;
            }
            return Table.prototype.init = function(options) {
                this.element = options.element, this.updateViewport(options.viewport), this.isInteractive = options.interactivity && null != options.interactivity.selection, 
                this.getLocalizedString = options.host.getLocalizedString.bind(options.host), this.hostServices = options.host, 
                this.persistingObjects = !1, this.waitingForData = !1, this.lastAllowHeaderResize = !0, 
                this.waitingForSort = !1, this.style = options.style, this.tablixPropertyManager = new visuals.TablixPropertyManager(this.style);
            }, Table.converter = function(dataView, tablixPropertyManager) {
                var table = dataView.table;
                table.rows;
                var visualTable = powerbi.Prototype.inherit(table);
                visualTable.visualRows = [];
                for (var i = 0; i < table.rows.length; i++) {
                    var visualRow = {
                        index: i,
                        values: table.rows[i]
                    };
                    visualTable.visualRows.push(visualRow);
                }
                return visualTable.formattingProperties = tablixPropertyManager.getTableObjects(dataView), 
                visualTable;
            }, Table.prototype.onResizing = function(finalViewport) {
                this.updateViewport(finalViewport);
            }, Table.prototype.getColumnWidthManager = function() {
                return this.columnWidthManager;
            }, Table.prototype.onDataChanged = function(options) {
                var visualTable = options.dataViews;
                if (visualTable && 0 < visualTable.length) {
                    var previousDataView = this.dataView;
                    if (this.dataView = visualTable[0], this.persistingObjects) return void (this.persistingObjects = !1);
                    visualTable = Table.converter(this.dataView, this.tablixPropertyManager);
                    options.operationKind === powerbi.VisualDataChangeOperationKind.Append ? (this.createOrUpdateHierarchyNavigator(visualTable), 
                    this.tablixControl.updateModels(!1, visualTable.visualRows, visualTable.columns), 
                    this.refreshControl(!1)) : (this.createOrUpdateHierarchyNavigator(visualTable), 
                    this.createColumnWidthManager(), this.createOrUpdateTablixControl(visualTable), 
                    this.updateInternal(previousDataView, visualTable));
                }
                this.waitingForData = !1, this.waitingForSort = !1;
            }, Table.prototype.createColumnWidthManager = function() {
                var _this = this;
                this.columnWidthManager ? this.columnWidthManager.updateDataView(this.dataView) : this.columnWidthManager = new TablixColumnWidthManager(this.dataView, !1, function(objectInstances) {
                    return _this.persistColumnWidths(objectInstances);
                });
            }, Table.prototype.persistColumnWidths = function(objectInstances) {
                this.persistingObjects = !0, this.hostServices.persistProperties(objectInstances);
            }, Table.prototype.updateViewport = function(newViewport) {
                this.currentViewport = newViewport, this.tablixControl && (this.tablixControl.viewport = this.currentViewport, 
                this.verifyHeaderResize(), this.refreshControl(!1));
            }, Table.prototype.refreshControl = function(clear) {
                !this.element.is(":visible") && 1 !== this.getLayoutKind() || this.tablixControl.refresh(clear);
            }, Table.prototype.getLayoutKind = function() {
                return this.isInteractive ? 0 : 1;
            }, Table.prototype.createOrUpdateHierarchyNavigator = function(dataNavigator) {
                var isDataComplete = !this.dataView.metadata.segment;
                this.tablixControl ? this.hierarchyNavigator.update(dataNavigator, isDataComplete, dataNavigator.formattingProperties.formatters) : (dataNavigator = new visuals.TableHierarchyNavigator(dataNavigator, isDataComplete, dataNavigator.formattingProperties.formatters, this.tablixPropertyManager.tablixProperties), 
                this.hierarchyNavigator = dataNavigator);
            }, Table.prototype.createOrUpdateTablixControl = function(visualTable) {
                this.tablixControl ? this.tablixControl.getBinder().updateDataView(visualTable) : this.tablixControl = this.createControl(this.hierarchyNavigator, visualTable);
            }, Table.prototype.createControl = function(dataNavigator, tablixContainer) {
                var _this = this, layoutKind = this.getLayoutKind(), tablixOptions = tablixContainer.formattingProperties.general.textSize, layoutManager = {
                    onBindRowHeader: function(item) {
                        return _this.onBindRowHeader(item);
                    },
                    onColumnHeaderClick: function(queryName, sortDirection) {
                        return _this.onColumnHeaderClick(queryName, sortDirection);
                    },
                    layoutKind: layoutKind,
                    columnWidthManager: this.columnWidthManager,
                    tablixProperties: this.tablixPropertyManager.tablixProperties
                }, tableBinder = new visuals.TableBinder(layoutManager, tablixContainer), layoutManager = 1 === layoutKind ? visuals.controls.internal.DashboardTablixLayoutManager.createLayoutManager(tableBinder) : visuals.controls.internal.CanvasTablixLayoutManager.createLayoutManager(tableBinder, this.columnWidthManager), tablixContainer = document.createElement("div");
                this.element.append(tablixContainer);
                tablixOptions = {
                    interactive: this.isInteractive,
                    enableTouchSupport: !this.isTouchDisabled,
                    layoutKind: layoutKind,
                    fontSize: visuals.TablixPropertyManager.getTextSizeInPx(tablixOptions)
                };
                return new TablixControl(dataNavigator, layoutManager, tableBinder, tablixContainer, tablixOptions);
            }, Table.prototype.updateInternal = function(previousDataView, totals) {
                var _this = this, textSize = totals.formattingProperties.general.textSize;
                1 === this.getLayoutKind() && this.tablixControl.layoutManager.adjustContentSize(visuals.converterHelper.hasImageUrlColumn(this.dataView)), 
                this.tablixControl.fontSize = visuals.TablixPropertyManager.getTextSizeInPx(textSize), 
                this.tablixControl.wordWrapColumnHeaders = totals.formattingProperties.columnHeaders.wordWrap, 
                this.verifyHeaderResize(), this.tablixControl.updateModels(!0, totals.visualRows, totals.columns);
                totals = this.createTotalsRow(this.dataView);
                this.tablixControl.rowDimension.setFooter(totals), this.tablixControl.viewport = this.currentViewport;
                var shouldClearControl = this.shouldClearControl(previousDataView, this.dataView);
                setTimeout(function() {
                    _this.refreshControl(shouldClearControl);
                    var widthChanged = _this.columnWidthManager.onColumnsRendered(_this.tablixControl.layoutManager.columnWidthsToPersist);
                    _this.persistingObjects && !widthChanged && (_this.persistingObjects = !1);
                }, 0);
            }, Table.prototype.shouldClearControl = function(previousDataView, newDataView) {
                return !(this.waitingForSort && previousDataView && newDataView) || !powerbi.DataViewUtils.isMetadataEquivalent(previousDataView.metadata, newDataView.metadata);
            }, Table.prototype.createTotalsRow = function(dataView) {
                if (!visuals.TablixProperties.PropGeneralTableTotals.getValue(dataView.metadata.objects)) return null;
                var totals = dataView.table.totals;
                if (!totals || 0 === totals.length) return null;
                for (var totalRow = [], i = 0, len = dataView.table.columns.length; i < len; ++i) {
                    var totalValue = totals[i];
                    null != totalValue ? totalRow.push(totalValue) : totalRow.push(0 === i ? this.getLocalizedString("TableTotalLabel") : "");
                }
                return {
                    totalCells: totalRow,
                    objects: dataView.table.totals.objects
                };
            }, Table.prototype.onBindRowHeader = function(item) {
                this.needsMoreData(item) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, Table.prototype.onColumnHeaderClick = function(queryName, sortDirection) {
                this.waitingForSort = !0, this.hostServices.onCustomSort(TablixUtils.getCustomSortEventArgs(queryName, sortDirection));
            }, Table.prototype.needsMoreData = function(item) {
                if (this.waitingForData || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var loadMoreThreshold = this.tablixControl.rowDimension.getItemsCount() * TablixUtils.PreferredLoadMoreThreshold;
                return this.hierarchyNavigator.getIndex(item) >= loadMoreThreshold;
            }, Table.prototype.enumerateObjectInstances = function(options) {
                var enumeration = new visuals.ObjectEnumerationBuilder();
                return this.dataView && this.tablixPropertyManager.enumerateObjectInstances(options, enumeration, this.dataView, TablixType.Table), 
                enumeration.complete();
            }, Table.prototype.enumerateObjectRepetition = function() {
                var enumeration = [];
                return this.dataView && this.tablixPropertyManager.enumerateObjectRepetition(enumeration, this.dataView, TablixType.Table), 
                enumeration;
            }, Table.prototype.shouldAllowHeaderResize = function() {
                return 1 === this.hostServices.getViewMode();
            }, Table.prototype.onViewModeChanged = function(viewMode) {
                this.tablixControl && this.tablixControl.toggleTouchBindings(1 !== viewMode), this.updateViewport(this.currentViewport);
            }, Table.prototype.verifyHeaderResize = function() {
                var currentAllowHeaderResize = this.shouldAllowHeaderResize();
                currentAllowHeaderResize !== this.lastAllowHeaderResize && (this.lastAllowHeaderResize = currentAllowHeaderResize, 
                this.tablixControl.layoutManager.setAllowHeaderResize(currentAllowHeaderResize));
            }, Table;
        }();
        visuals.Table = Table;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TableStyler, CellStyle = powerbi.visuals.controls.internal.TablixUtils.CellStyle, EdgeSettings = powerbi.visuals.controls.internal.TablixUtils.EdgeSettings, EdgeType = powerbi.visuals.controls.internal.TablixUtils.EdgeType, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, UrlScheme = jsCommon.UrlUtils.UrlScheme, UrlUtils = jsCommon.UrlUtils, WordBreaker = jsCommon.WordBreaker;
        !function(TableStyler) {
            TableStyler.setColumnHeaderStyle = function(position, cellStyle, outlineValues, columnFormatting, outlineColumns) {
                cellStyle.fontFamily = TablixUtils.FontFamilyHeader, cellStyle.fontColor = TablixUtils.FontColorHeaders, 
                cellStyle.borders.bottom = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, outlineColumns.PropGridOutlineColor.getValue(null));
                var propsGrid = outlineValues.grid, props = outlineValues.columnHeaders, outlineColor = outlineValues.total, outlineWeight = outlineValues.values, outlineTotal = outlineColor.outline, outlineColumns = props.outline, outlineValues = outlineWeight.outline, outlineWeight = null !== (outlineColor = props.outlineWeight) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineWeight, outlineColor = null !== (outlineColor = props.outlineColor) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineColor;
                cellStyle.borders.top = new EdgeSettings(), cellStyle.borders.top.applyParams(visuals.outline.showTop(outlineColumns), outlineWeight, outlineColor, EdgeType.Outline), 
                cellStyle.borders.bottom = new EdgeSettings(), cellStyle.borders.bottom.applyParams(visuals.outline.showBottom(outlineColumns), outlineWeight, outlineColor, EdgeType.Outline), 
                cellStyle.borders.left = new EdgeSettings(), position.column.isFirst && (cellStyle.borders.left.applyParams(visuals.outline.showLeft(outlineColumns), outlineWeight, outlineColor, EdgeType.Outline), 
                visuals.outline.showLeft(outlineColumns) || !visuals.outline.showLeft(outlineTotal) && !visuals.outline.showLeft(outlineValues) || (cellStyle.paddings.left += outlineWeight)), 
                cellStyle.borders.right = new EdgeSettings(), position.column.isLast ? (cellStyle.borders.right.applyParams(visuals.outline.showRight(outlineColumns), outlineWeight, outlineColor, EdgeType.Outline), 
                visuals.outline.showRight(outlineColumns) || !visuals.outline.showRight(outlineTotal) && !visuals.outline.showRight(outlineValues) || (cellStyle.paddings.right += outlineWeight)) : cellStyle.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, EdgeType.Gridline), 
                columnFormatting && columnFormatting.styleHeader && columnFormatting.fontColor ? cellStyle.fontColor = columnFormatting.fontColor : cellStyle.fontColor = props.fontColor, 
                columnFormatting && columnFormatting.styleHeader && columnFormatting.backColor ? cellStyle.backColor = columnFormatting.backColor : cellStyle.backColor = props.backColor, 
                cellStyle.paddings.top = cellStyle.paddings.bottom = propsGrid.rowPadding;
            }, TableStyler.setBodyCellStyle = function(position, item, cellStyle, outlineColumns, columnFormatting, outlineValues) {
                position.row.isLast || (cellStyle.borders.bottom = new EdgeSettings(visuals.TablixProperties.PropGridHorizontalWeight.defaultValue, outlineValues.PropGridHorizontalColor.getValue(null)));
                var propsGrid = outlineColumns.grid, props = outlineColumns.values, outlineColor = outlineColumns.total, outlineWeight = outlineColumns.columnHeaders, outlineTotal = outlineColor.outline, outlineValues = props.outline, outlineColumns = outlineWeight.outline, outlineWeight = null !== (outlineColor = props.outlineWeight) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineWeight, outlineColor = null !== (outlineColor = props.outlineColor) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineColor;
                cellStyle.borders.top = new EdgeSettings(), position.row.isFirst && cellStyle.borders.top.applyParams(visuals.outline.showTop(outlineValues), outlineWeight, outlineColor, EdgeType.Outline), 
                cellStyle.borders.bottom = new EdgeSettings(), position.row.isLast ? cellStyle.borders.bottom.applyParams(visuals.outline.showBottom(outlineValues), outlineWeight, outlineColor, EdgeType.Outline) : cellStyle.borders.bottom.applyParams(propsGrid.gridHorizontal, propsGrid.gridHorizontalWeight, propsGrid.gridHorizontalColor, EdgeType.Gridline), 
                cellStyle.borders.left = new EdgeSettings(), position.column.isFirst && (cellStyle.borders.left.applyParams(visuals.outline.showLeft(outlineValues), outlineWeight, outlineColor, EdgeType.Outline), 
                visuals.outline.showLeft(outlineValues) || !visuals.outline.showLeft(outlineTotal) && !visuals.outline.showLeft(outlineColumns) || (cellStyle.paddings.left += outlineWeight)), 
                cellStyle.borders.right = new EdgeSettings(), position.column.isLast ? (cellStyle.borders.right.applyParams(visuals.outline.showRight(outlineValues), outlineWeight, outlineColor, EdgeType.Outline), 
                visuals.outline.showRight(outlineValues) || !visuals.outline.showRight(outlineTotal) && !visuals.outline.showRight(outlineColumns) || (cellStyle.paddings.right += outlineWeight)) : cellStyle.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, EdgeType.Gridline), 
                item.fontColor ? cellStyle.fontColor = item.fontColor : columnFormatting && columnFormatting.styleValues && columnFormatting.fontColor ? cellStyle.fontColor = columnFormatting.fontColor : cellStyle.fontColor = position.row.index % 2 == 0 ? props.fontColorPrimary : props.fontColorSecondary, 
                item.backColor ? cellStyle.backColor = item.backColor : columnFormatting && columnFormatting.styleValues && columnFormatting.backColor ? cellStyle.backColor = columnFormatting.backColor : cellStyle.backColor = position.row.index % 2 == 0 ? props.backColorPrimary : props.backColorSecondary, 
                cellStyle.paddings.top = cellStyle.paddings.bottom = propsGrid.rowPadding;
            }, TableStyler.setFooterBodyCellStyle = function(position, item, cellStyle, outlineColumns, columnFormatting, outlineValues) {
                cellStyle.fontFamily = TablixUtils.FontFamilyTotal, cellStyle.borders.top = new EdgeSettings(visuals.TablixProperties.PropGridOutlineWeight.defaultValue, outlineValues.PropGridOutlineColor.getValue(null));
                var columnFontColor, columnBackColor, props = outlineColumns.total, propsGrid = outlineColumns.grid, outlineColor = outlineColumns.values, outlineWeight = outlineColumns.columnHeaders, outlineTotal = props.outline, outlineValues = outlineColor.outline, outlineColumns = outlineWeight.outline, outlineWeight = null !== (outlineColor = props.outlineWeight) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineWeight, outlineColor = null !== (outlineColor = props.outlineColor) && void 0 !== outlineColor ? outlineColor : propsGrid.outlineColor;
                cellStyle.borders.top = new EdgeSettings(), cellStyle.borders.top.applyParams(visuals.outline.showTop(outlineTotal), outlineWeight, outlineColor, EdgeType.Outline), 
                cellStyle.borders.bottom = new EdgeSettings(), cellStyle.borders.bottom.applyParams(visuals.outline.showBottom(outlineTotal), outlineWeight, outlineColor, EdgeType.Outline), 
                cellStyle.borders.left = new EdgeSettings(), position.column.isFirst && (cellStyle.borders.left.applyParams(visuals.outline.showLeft(outlineTotal), outlineWeight, outlineColor, EdgeType.Outline), 
                visuals.outline.showLeft(outlineTotal) || !visuals.outline.showLeft(outlineValues) && !visuals.outline.showLeft(outlineColumns) || (cellStyle.paddings.left += outlineWeight)), 
                cellStyle.borders.right = new EdgeSettings(), position.column.isLast ? (cellStyle.borders.right.applyParams(visuals.outline.showRight(outlineTotal), outlineWeight, outlineColor, EdgeType.Outline), 
                visuals.outline.showRight(outlineTotal) || !visuals.outline.showRight(outlineValues) && !visuals.outline.showRight(outlineColumns) || (cellStyle.paddings.right += outlineWeight)) : cellStyle.borders.right.applyParams(propsGrid.gridVertical, propsGrid.gridVerticalWeight, propsGrid.gridVerticalColor, EdgeType.Gridline), 
                columnFormatting && columnFormatting.styleTotal && (columnFontColor = columnFormatting.fontColor, 
                columnBackColor = columnFormatting.backColor), cellStyle.fontColor = item.fontColor || columnFontColor || props.fontColor, 
                cellStyle.backColor = item.backColor || columnBackColor || props.backColor, cellStyle.paddings.top = cellStyle.paddings.bottom = propsGrid.rowPadding;
            };
        }(TableStyler = visuals.TableStyler || (visuals.TableStyler = {}));
        var TableBinder = function() {
            function TableBinder(options, dataView) {
                this.options = options, dataView && this.updateDataView(dataView);
            }
            return TableBinder.prototype.updateDataView = function(dataView) {
                this.tableDataView = dataView, this.formattingProperties = dataView.formattingProperties, 
                this.updateTextHeights(), this.hasImage() ? this.rowHeight = Math.max(this.textHeightValue, this.formattingProperties.grid.imageHeight) : this.rowHeight = this.textHeightValue;
            }, TableBinder.prototype.updateTextHeights = function() {
                this.fontSizeHeader = this.formattingProperties.general.textSize.px, this.textPropsHeader = {
                    fontFamily: TablixUtils.FontFamilyHeader,
                    fontSize: jsCommon.PixelConverter.toString(this.fontSizeHeader)
                }, this.textHeightHeader = Math.ceil(powerbi.TextMeasurementService.measureSvgTextHeight(this.textPropsHeader, "a")), 
                this.fontSizeValue = this.formattingProperties.general.textSize.px, this.textPropsValue = {
                    fontFamily: TablixUtils.FontFamilyCell,
                    fontSize: jsCommon.PixelConverter.toString(this.fontSizeValue)
                }, this.textHeightValue = Math.ceil(powerbi.TextMeasurementService.measureSvgTextHeight(this.textPropsValue, "a")), 
                this.fontSizeTotal = this.formattingProperties.general.textSize.px, this.textPropsTotal = {
                    fontFamily: TablixUtils.FontFamilyTotal,
                    fontSize: jsCommon.PixelConverter.toString(this.fontSizeTotal)
                }, this.textHeightTotal = Math.ceil(powerbi.TextMeasurementService.measureSvgTextHeight(this.textPropsTotal, "a"));
            }, TableBinder.prototype.hasImage = function() {
                return _.some(this.tableDataView.columns, function(col) {
                    return visuals.converterHelper.isImageUrlColumn(col);
                });
            }, TableBinder.prototype.getColumnFormatting = function(column) {
                return this.formattingProperties.columnFormatting[column.queryName];
            }, TableBinder.prototype.onStartRenderingSession = function() {}, TableBinder.prototype.onEndRenderingSession = function() {}, 
            TableBinder.prototype.bindRowHeader = function(item, cell) {
                item.totalCells ? cell.contentHeight = this.textHeightTotal : cell.contentHeight = this.rowHeight, 
                TablixUtils.clearCellStyle(cell), this.options.onBindRowHeader && this.options.onBindRowHeader(item);
            }, TableBinder.prototype.unbindRowHeader = function(item, cell) {}, TableBinder.prototype.bindColumnHeader = function(item, cell) {
                var _this = this;
                cell.extension.disableDragResize(), TablixUtils.resetCellCssClass(cell), TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixHeader), 
                TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixColumnHeaderLeaf);
                var cellStyle = new CellStyle();
                TableStyler.setColumnHeaderStyle(cell.position, cellStyle, this.formattingProperties, this.getColumnFormatting(item), this.options.tablixProperties);
                var contentElement = cell.extension.contentHost;
                (contentElement = TablixUtils.appendDiv(contentElement)).classList.add(TablixUtils.CssClassWrappingContainer);
                var wordWrappingLines, maxTextWidth = this.getWordWrappingWidth(item.queryName, cell, cellStyle), lastLine = (wordWrappingLines = null != maxTextWidth ? this.getWordWrappingLines(item.displayName, maxTextWidth) : wordWrappingLines) && 1 < wordWrappingLines.length;
                if (lastLine) {
                    cell.contentHeight = wordWrappingLines.length * this.textHeightHeader;
                    for (var i = 0, len = wordWrappingLines.length; i < len - 1; i++) TablixUtils.appendDiv(contentElement, wordWrappingLines[i]);
                    contentElement = TablixUtils.appendDiv(contentElement);
                } else cell.contentHeight = this.textHeightHeader;
                this.sortIconsEnabled() && (contentElement = TablixUtils.addSortIconToColumnHeader(item.sort, contentElement), 
                item.sort && !lastLine && (cell.contentWidth = this.fontSizeHeader + TablixUtils.SortIconPadding));
                var columnTitle = item.displayName;
                lastLine ? (lastLine = _.last(wordWrappingLines), TablixUtils.setCellText(lastLine, contentElement), 
                TablixUtils.setCellTooltip(columnTitle, cell.extension.contentHost), cell.contentWidth = maxTextWidth) : (TablixUtils.setCellTextAndTooltip(columnTitle, contentElement, cell.extension.contentHost), 
                cell.contentWidth += powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsHeader, columnTitle)), 
                cell.contentWidth = Math.ceil(cell.contentWidth), this.options.onColumnHeaderClick && cell.extension.registerClickHandler(function(sortDirection) {
                    TablixUtils.isValidSortClick(sortDirection) && (sortDirection = TablixUtils.reverseSort(item.sort), 
                    _this.options.onColumnHeaderClick(item.queryName || item.displayName, sortDirection));
                }), cell.applyStyle(cellStyle);
            }, TableBinder.prototype.getWordWrappingLines = function(text, maxWidth) {
                return WordBreaker.splitByWidth(text, this.textPropsHeader, powerbi.TextMeasurementService.measureSvgTextWidth, maxWidth, TablixUtils.WordWrappingMaxLines, void 0, !0);
            }, TableBinder.prototype.getWordWrappingWidth = function(columnQueryName, cell, cellStyle) {
                var cellContainerWidth;
                if (this.formattingProperties.columnHeaders.wordWrap && 0 === this.options.layoutKind && (cell.isColumnResizing() && 0 <= cell.containerWidth ? cellContainerWidth = cell.containerWidth : this.options.columnWidthManager && (cellContainerWidth = this.options.columnWidthManager.getPersistedColumnWidth(columnQueryName)), 
                null != cellContainerWidth)) return Math.max(0, cellContainerWidth - (cellStyle.getExtraLeft() + cellStyle.getExtraRight()));
            }, TableBinder.prototype.unbindColumnHeader = function(item, cell) {
                TablixUtils.clearCellStyle(cell), TablixUtils.clearCellTextAndTooltip(cell), this.sortIconsEnabled() && TablixUtils.removeSortIcons(cell), 
                this.options.onColumnHeaderClick && cell.extension.unregisterClickHandler();
            }, TableBinder.prototype.bindBodyCell = function(item, cell) {
                TablixUtils.resetCellCssClass(cell), this.setBodyContent(item, cell), cell.contentWidth = Math.ceil(cell.contentWidth), 
                item.isTotal ? (TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixValueTotal), 
                TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTableFooter)) : item.position.row.isLast ? TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTableBodyCellBottom) : TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTableBodyCell), 
                item.isNumeric && TablixUtils.addCellCssClass(cell, TablixUtils.CssClassTablixValueNumeric);
                var cellStyle = new CellStyle();
                item.isTotal ? TableStyler.setFooterBodyCellStyle(cell.position, item, cellStyle, this.formattingProperties, this.getColumnFormatting(item.columnMetadata), this.options.tablixProperties) : TableStyler.setBodyCellStyle(cell.position, item, cellStyle, this.formattingProperties, this.getColumnFormatting(item.columnMetadata), this.options.tablixProperties), 
                cell.applyStyle(cellStyle);
            }, TableBinder.prototype.setBodyContent = function(item, cell) {
                var element = cell.extension.contentHost, kpi = this.formattingProperties.grid.imageHeight, text = item.textContent;
                item.isTotal ? cell.contentHeight = this.textHeightTotal : item.isImage ? cell.contentHeight = kpi : cell.contentHeight = this.textHeightValue;
                var UrlType = TablixUtils.getUrlScheme(item.columnMetadata, item.textContent);
                if (UrlType !== UrlScheme.NONE) {
                    var showUrlIcon = this.formattingProperties.values.urlIcon, iconName = void 0;
                    return showUrlIcon && (iconName = TablixUtils.getUrlIconName(UrlType)), showUrlIcon && null != iconName ? TablixUtils.appendATagToBodyCell(text, element, iconName) : TablixUtils.appendATagToBodyCell(text, element), 
                    void (cell.contentWidth = showUrlIcon ? this.fontSizeValue : powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsValue, text));
                }
                if (item.isImage && UrlUtils.isValidImageUrl(text)) return TablixUtils.appendImgTagToBodyCell(text, element, kpi), 
                void (cell.contentWidth = kpi * TablixUtils.ImageDefaultAspectRatio);
                kpi = item.kpiContent;
                return kpi ? ($(element).append(kpi), void (cell.contentWidth = this.fontSizeValue)) : text ? (TablixUtils.setCellTextAndTooltip(text, element), 
                void (item.isTotal ? cell.contentWidth = powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsTotal, text) : cell.contentWidth = powerbi.TextMeasurementService.measureSvgTextWidth(this.textPropsValue, text))) : (TablixUtils.setCellTextAndTooltip(" ", element), 
                void (cell.contentWidth = 0));
            }, TableBinder.prototype.unbindBodyCell = function(item, cell) {
                TablixUtils.clearCellStyle(cell), TablixUtils.clearCellTextAndTooltip(cell);
            }, TableBinder.prototype.bindCornerCell = function(item, cell) {
                cell.contentWidth = 0;
            }, TableBinder.prototype.unbindCornerCell = function(item, cell) {}, TableBinder.prototype.bindEmptySpaceHeaderCell = function(cell) {}, 
            TableBinder.prototype.unbindEmptySpaceHeaderCell = function(cell) {}, TableBinder.prototype.bindEmptySpaceFooterCell = function(cell) {}, 
            TableBinder.prototype.unbindEmptySpaceFooterCell = function(cell) {}, TableBinder.prototype.getHeaderLabel = function(item) {
                return item ? item.displayName : "";
            }, TableBinder.prototype.getCellContent = function(item) {
                return item;
            }, TableBinder.prototype.hasRowGroups = function() {
                return !1;
            }, TableBinder.prototype.sortIconsEnabled = function() {
                return 0 === this.options.layoutKind;
            }, TableBinder;
        }();
        visuals.TableBinder = TableBinder;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var CellPosition = powerbi.visuals.controls.internal.TablixUtils.CellPosition, TablixVisualCell = powerbi.visuals.controls.internal.TablixUtils.TablixVisualCell, TableHierarchyNavigator = function() {
            function TableHierarchyNavigator(tableDataView, isDataComplete, formatters, tablixProperties) {
                this.tableDataView = tableDataView, this.isDataComplete = isDataComplete, this.formatters = formatters, 
                this.tablixProperties = tablixProperties;
            }
            return TableHierarchyNavigator.prototype.getColumnHierarchyDepth = function() {
                return 1;
            }, TableHierarchyNavigator.prototype.getRowHierarchyDepth = function() {
                return 1;
            }, TableHierarchyNavigator.prototype.getLeafCount = function(hierarchy) {
                return hierarchy.length;
            }, TableHierarchyNavigator.prototype.getLeafAt = function(hierarchy, index) {
                return hierarchy[index];
            }, TableHierarchyNavigator.prototype.getParent = function(item) {
                return null;
            }, TableHierarchyNavigator.prototype.getIndex = function(item) {
                return item ? this.isRow(item) ? item.index : this.getColumnIndex(item) : -1;
            }, TableHierarchyNavigator.prototype.isRow = function(item) {
                return !!item && (void 0 !== item.index && void 0 !== item.values);
            }, TableHierarchyNavigator.prototype.getColumnIndex = function(item) {
                return TableHierarchyNavigator.getIndex(this.tableDataView.columns, item);
            }, TableHierarchyNavigator.prototype.isLeaf = function(item) {
                return !0;
            }, TableHierarchyNavigator.prototype.isRowHierarchyLeaf = function(cornerItem) {
                return !1;
            }, TableHierarchyNavigator.prototype.isColumnHierarchyLeaf = function(cornerItem) {
                return !0;
            }, TableHierarchyNavigator.prototype.isFirstItem = function(item, items) {
                return item === items[0];
            }, TableHierarchyNavigator.prototype.areAllParentsFirst = function(item, items) {
                return this.isFirstItem(item, items);
            }, TableHierarchyNavigator.prototype.isLastItem = function(item, items) {
                return (items === this.tableDataView.columns || this.isDataComplete) && item === _.last(items);
            }, TableHierarchyNavigator.prototype.areAllParentsLast = function(item, items) {
                return this.isLastItem(item, items);
            }, TableHierarchyNavigator.prototype.getChildren = function(item) {
                return null;
            }, TableHierarchyNavigator.prototype.getChildrenLevelDifference = function(item) {
                return 1 / 0;
            }, TableHierarchyNavigator.prototype.getCount = function(items) {
                return items.length;
            }, TableHierarchyNavigator.prototype.getAt = function(items, index) {
                return items[index];
            }, TableHierarchyNavigator.prototype.getLevel = function(item) {
                return 0;
            }, TableHierarchyNavigator.prototype.getIntersection = function(rowObjects, cellItem) {
                var value, isTotal = !1, position = new CellPosition(), cellObject = TableHierarchyNavigator.getIndex(this.tableDataView.columns, cellItem);
                position.column.index = cellObject, position.column.isFirst = 0 === cellObject, 
                position.column.isLast = cellObject === this.tableDataView.columns.length - 1;
                var rowIndex, objects = null != rowObjects.totalCells ? (isTotal = !0, value = rowObjects.totalCells[cellObject], 
                rowObjects.objects && rowObjects.objects[cellObject]) : (rowIndex = (objects = rowObjects).index, 
                position.row.index = rowIndex, position.row.isFirst = 0 === rowIndex, position.row.isLast = this.isDataComplete && rowIndex === this.tableDataView.rows.length - 1, 
                value = objects.values[cellObject], objects.values.objects && objects.values.objects[cellObject]), cellItem = new TablixVisualCell(value, objects, !1, !1, isTotal, !1, cellItem, this.formatters[cellItem.queryName]);
                return cellItem.position = position, rowObjects && rowObjects.values && (!(rowObjects = rowObjects.values.objects) || (cellObject = rowObjects[cellObject]) && (cellItem.backColor = this.tablixProperties.PropValuesBackColor.getValue(cellObject))), 
                cellItem;
            }, TableHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                return null;
            }, TableHierarchyNavigator.prototype.headerItemEquals = function(item1, item2) {
                return item1 === item2 || (item1.displayName && item2.displayName ? powerbi.DataViewUtils.areMetadataColumnsEquivalent(item1, item2) : !(!this.isRow(item1) || !this.isRow(item2)) && item1.index === item2.index);
            }, TableHierarchyNavigator.prototype.bodyCellItemEquals = function(item1, item2) {
                return item1.isMatch(item2);
            }, TableHierarchyNavigator.prototype.cornerCellItemEquals = function(item1, item2) {
                return !0;
            }, TableHierarchyNavigator.prototype.update = function(table, isDataComplete, formatters) {
                this.tableDataView = table, this.isDataComplete = isDataComplete, this.formatters = formatters;
            }, TableHierarchyNavigator.getIndex = function(items, item) {
                for (var index = 0, len = items.length; index < len; index++) {
                    var arrayItem = items[index];
                    if (null != arrayItem.index && null != item.index && arrayItem.index === item.index) return index;
                    if (item === items[index]) return index;
                }
                return -1;
            }, TableHierarchyNavigator;
        }();
        visuals.TableHierarchyNavigator = TableHierarchyNavigator;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var CssConstants = jsCommon.CssConstants, CellStyle = powerbi.visuals.controls.internal.TablixUtils.CellStyle, ElementBuilder = visuals.controls.pivotTable.ElementBuilder, encodeHtml = jsCommon.StringExtensions.encodeHtml, Utility = jsCommon.Utility, FontSize = visuals.Units.FontSize, TableExUtils = powerbi.visuals.controls.internal.TableExUtils, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, UrlScheme = jsCommon.UrlUtils.UrlScheme, UrlUtils = jsCommon.UrlUtils, TableExBinder = function() {
            function TableExBinder(options, selectionManager, container, host) {
                this.options = options, this.selectionManager = selectionManager, this.measureElement = visuals.PivotTableBinderUtils.addMeasureElement(container), 
                this.legacyTooltipsEnabled = !0, this.hostServices = host;
            }
            return TableExBinder.prototype.getRowHeaderBinding = function(rowHeader, forMeasurement, isA11yTable) {
                return this.options.onBindRowHeader && !forMeasurement && this.options.onBindRowHeader(rowHeader), 
                isA11yTable && !forMeasurement && this.selectionManager.isItemSelected(rowHeader) ? {
                    attributes: {},
                    classNames: [],
                    styleProperties: {
                        background: "black",
                        border: "1px solid white",
                        width: "4px"
                    }
                } : {
                    content: "",
                    classNames: null,
                    styleProperties: null,
                    attributes: void 0
                };
            }, TableExBinder.prototype.getColumnHeaderBinding = function(columnHeader, forMeasure, cellStyle) {
                var _a = this.formattingProperties.columnHeaders, columnFormatting = this.formattingProperties.columnFormatting[columnHeader.metadata.queryName], content = encodeHtml(this.getColumnHeaderLabel(columnHeader)), attributes = {};
                cellStyle && (attributes.role = "columnheader", attributes["aria-colindex"] = TableExUtils.getAriaColIndex(columnHeader.position.column.index).toString()), 
                this.legacyTooltipsEnabled && (attributes.title = content), _.isEmpty(content) && (content = TablixUtils.StringNonBreakingSpace), 
                _a.wordWrap && (content = visuals.PivotTableBinderUtils.replaceEncodedNewLines(content));
                var classes = !_.isEmpty(content.trim()), cellStyle = this.getColumnHeaderStyle(columnHeader, forMeasure, classes), classes = cellStyle.getExtraBottom();
                cellStyle.paddings.bottom += visuals.PivotTableBinderUtils.getSortIconHeight(this.glyphFontInfo.measuredFontHeight);
                classes = visuals.PivotTableBinderUtils.buildSortIcon(visuals.TableExSortingManager.getSortDirection(columnHeader), this.options.sortIconEnabled, this.options.sortingEnabled, visuals.PivotTableSortingManager.getDefaultSortDirection(columnHeader.metadata), classes, this.glyphFontInfo.textProperties.fontSize);
                content += ElementBuilder.build(classes, {});
                var classes = powerbi.Prototype.inherit(this.columnHeaderClasses), _a = columnFormatting && columnFormatting.styleHeader && columnFormatting.alignment || _a.alignment;
                return visuals.PivotTableBinderUtils.addAlignmentCssClass(_a, classes), null !== (_a = this.isHeaderAutoWidth) && void 0 !== _a && _a.call(this, columnHeader) && (cellStyle.maxWidth = this.getMeasureElementMaxWidth(forMeasure)), 
                {
                    content: content,
                    classNames: classes,
                    styleProperties: cellStyle.getAttributes(),
                    attributes: attributes
                };
            }, TableExBinder.prototype.getRowReferenceQueryName = function() {
                return this.formattingProperties.rowWithReferenceText.rowWithReferenceText;
            }, TableExBinder.prototype.getRowBinding = function(row, isFloating, rowBinding, _b) {
                rowBinding = null !== (_b = null === (_b = null == _b ? void 0 : _b.dataPoint) || void 0 === _b ? void 0 : _b.toString()) && void 0 !== _b ? _b : rowBinding, 
                rowBinding = {
                    classNames: [],
                    attributes: {},
                    styleProperties: {},
                    children: [ this.getCheckboxCellBinding(row, isFloating, this.hostServices.getLocalizedString("Visual_Tablix_ReferenceRowWithText", rowBinding)) ]
                };
                return this.selectionManager.isRowHighlighted(row) || rowBinding.classNames.push("unselected"), 
                this.selectionManager.isItemSelected(row) && (rowBinding.styleProperties.filter = "brightness(0.9)"), 
                rowBinding;
            }, TableExBinder.prototype.getCheckboxCellBinding = function(row, isFloating, selectRowLabel) {
                var checkboxCellBinding = {
                    attributes: {
                        role: "gridcell",
                        "aria-colindex": "1",
                        tabindex: "0"
                    },
                    classNames: [],
                    styleProperties: {
                        position: "absolute",
                        "box-sizing": "border-box",
                        width: "100%",
                        height: "100%"
                    }
                };
                return isFloating || (checkboxCellBinding.children = [ {
                    tagName: "label",
                    attributes: {},
                    classNames: [],
                    styleProperties: {
                        opacity: "0"
                    },
                    children: [ {
                        tagName: "input",
                        attributes: {
                            type: "checkbox",
                            "checkbox-rowindex": row.index.toString()
                        },
                        classNames: [],
                        styleProperties: {}
                    }, {
                        tagName: null,
                        content: selectRowLabel,
                        attributes: {},
                        classNames: [],
                        styleProperties: {}
                    } ]
                } ], this.selectionManager.isItemSelected(row) && (checkboxCellBinding.children[0].children[0].attributes.checked = "")), 
                checkboxCellBinding;
            }, TableExBinder.prototype.getBodyCellBinding = function(bodyCell, forMeasure, rowHeight, columnWidth, a11yTable) {
                var attributes, urlIconName, content = encodeHtml(this.getBodyCellContent(bodyCell));
                this.legacyTooltipsEnabled && (attributes = {
                    title: content
                });
                var contentBinding, hasContent = !_.isEmpty(content.trim()), cellStyle = this.getBodyCellStyle(bodyCell, forMeasure, hasContent), maxWidth = bodyCell.columnMetadata, data_2 = this.columnsDataBarsSettings[bodyCell.columnMetadata.queryName], urlType = this.formattingProperties.columnFormatting[maxWidth.queryName], iconSettings = powerbi.StructuralObjectValue.merge(urlType && urlType.icon, bodyCell.icon), maxWidth = bodyCell.hyperlink;
                iconSettings && "IconOnly" === iconSettings.layout ? content = "" : (_.isEmpty(content) && (content = TablixUtils.StringNonBreakingSpace), 
                bodyCell.isKpi ? (content = this.getKpiContentString(bodyCell), attributes = null) : data_2 && !bodyCell.isTotal && _.isNumber(bodyCell.dataPoint) && data_2.hideText ? content = forMeasure ? TablixUtils.StringNonBreakingSpace : "" : (this.formattingProperties.values.wordWrap && (content = visuals.PivotTableBinderUtils.replaceEncodedNewLines(content)), 
                (urlType = TablixUtils.getUrlScheme(bodyCell.columnMetadata, content)) !== UrlScheme.NONE ? (urlIconName = visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.values.urlIcon, urlType), 
                contentBinding = visuals.PivotTableBinderUtils.addHyperlink(content, encodeHtml(bodyCell.textContent), urlIconName, this.options.onHyperlinkClicked), 
                maxWidth = void 0) : this.isImage(bodyCell) ? (containerBinding = Utility.encodeUriForImageDataSvg(bodyCell.textContent), 
                contentBinding = visuals.PivotTableBinderUtils.buildImage(encodeHtml(containerBinding), this.formattingProperties.grid.imageHeight, bodyCell.altText)) : this.isSparkline(bodyCell) && (content = forMeasure ? TablixUtils.StringNonBreakingSpace : ""))), 
                this.options.hyperlinksEnabled && (contentBinding || "" !== content && content !== TablixUtils.StringNonBreakingSpace) && maxWidth && UrlUtils.getUrlScheme(maxWidth) !== UrlScheme.NONE && (contentBinding = visuals.PivotTableBinderUtils.addHyperlink(contentBinding || content, encodeHtml(maxWidth), null, this.options.onHyperlinkClicked, !0, !0));
                var containerBinding = {};
                null === (maxWidth = this.isBodyCellAutoWidth) || void 0 === maxWidth || !maxWidth.call(this, bodyCell) || void 0 !== (maxWidth = this.getMeasureElementMaxWidth(forMeasure)) && (containerBinding["max-width"] = maxWidth);
                var iconSize, containerBinding = contentBinding = contentBinding ? {
                    tagName: "div",
                    children: [ contentBinding ],
                    classNames: [],
                    styleProperties: containerBinding,
                    attributes: {}
                } : {
                    tagName: "div",
                    content: content,
                    classNames: [],
                    styleProperties: containerBinding,
                    attributes: {}
                };
                return iconSettings && (iconSize = this.getBodyCellFontInfo(bodyCell).measuredFontHeight, 
                containerBinding = visuals.PivotTableBinderUtils.addIconToCell(iconSettings, iconSize, contentBinding)), 
                data_2 && !forMeasure && !bodyCell.isTotal && _.isNumber(bodyCell.dataPoint) && (containerBinding = visuals.PivotTableBinderUtils.addDataBarsToCell(containerBinding, data_2, cellStyle, bodyCell.dataPoint)), 
                !forMeasure && this.isSparkline(bodyCell) && (data_2 = bodyCell.dataPoint, containerBinding = visuals.PivotTableBinderUtils.addSparklineToCell(containerBinding, this.sparklineSettings[bodyCell.columnMetadata.queryName], cellStyle, data_2, rowHeight, columnWidth, iconSettings, iconSize)), 
                this.addBodyCellClasses(bodyCell, !!urlIconName, contentBinding.classNames, containerBinding.classNames), 
                this.addBodyCellStyleAttributes(bodyCell, forMeasure, contentBinding.styleProperties, containerBinding.styleProperties, hasContent, a11yTable), 
                containerBinding.attributes = attributes, containerBinding;
            }, TableExBinder.prototype.getMeasureElementMaxWidth = function(forMeasure) {
                return this.formattingProperties.values.wordWrap && forMeasure && this.getViewport ? this.getViewport().width - powerbi.visuals.controls.pivotTable.ScrollbarWidth - 3 + "px" : void 0;
            }, TableExBinder.prototype.getCornerCellBinding = function(cornerCell) {
                return {
                    content: "",
                    classNames: null,
                    styleProperties: null,
                    attributes: void 0
                };
            }, TableExBinder.prototype.getApproximateRowHeaderWidth = function(rowHeader) {
                return 0;
            }, TableExBinder.prototype.getApproximateColumnHeaderWidth = function(_b) {
                var _d = this.getColumnHeaderStyle(_b, !0, !0);
                return visuals.PivotTableBinderUtils.measureText(this.getColumnHeaderLabel(_b), this.getColumnHeaderFontInfo(_b).textProperties) + (null !== (_b = null === (_b = _d.borders.left) || void 0 === _b ? void 0 : _b.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_d = _d.borders.right) || void 0 === _d ? void 0 : _d.weight) && void 0 !== _d ? _d : 0);
            }, TableExBinder.prototype.getApproximateBodyCellWidth = function(_d) {
                var iconSize = 0;
                if (_d.icon) {
                    if (iconSize = this.getBodyCellFontInfo(_d).measuredFontHeight, "IconOnly" === _d.icon.layout) return iconSize;
                    iconSize += visuals.PivotTableBinderUtils.TablixIconMargin;
                }
                if (_d.isKpi) return iconSize + this.valueFontInfo.fontProperties.size.px;
                var _b = _d.columnMetadata && this.columnsDataBarsSettings[_d.columnMetadata.queryName];
                if (_b && _b.hideText && !_d.isTotal && _.isNumber(_d.dataPoint)) return iconSize;
                var content = this.getBodyCellContent(_d), _b = TablixUtils.getUrlScheme(_d.columnMetadata, content);
                if (_b !== UrlScheme.NONE && visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.values.urlIcon, _b)) return iconSize + this.valueFontInfo.fontProperties.size.px;
                if (this.isImage(_d)) return iconSize + this.formattingProperties.grid.imageHeight;
                if (this.isSparkline(_d)) return iconSize;
                var _b = this.getBodyCellFontInfo(_d), _d = this.getBodyCellStyle(_d, !0, !0);
                return iconSize + visuals.PivotTableBinderUtils.measureText(content, _b.textProperties) + (null !== (_b = null === (_b = _d.borders.left) || void 0 === _b ? void 0 : _b.weight) && void 0 !== _b ? _b : 0) + (null !== (_d = null === (_d = _d.borders.right) || void 0 === _d ? void 0 : _d.weight) && void 0 !== _d ? _d : 0);
            }, TableExBinder.prototype.getApproximateCornerCellWidth = function(cornerCell) {
                return 0;
            }, TableExBinder.prototype.getApproximateRowHeaderHeight = function(rowHeader, width) {
                return 0;
            }, TableExBinder.prototype.getApproximateColumnHeaderHeight = function(lineCount, topBorder) {
                var columnHeaderInfo = this.getColumnHeaderFontInfo(lineCount), bottomBorder = this.getColumnHeaderStyle(lineCount, !0, !0), lineCount = this.formattingProperties.columnHeaders.wordWrap && null != topBorder ? visuals.PivotTableBinderUtils.getWordWrappingLines(this.getColumnHeaderLabel(lineCount), visuals.PivotTableBinderUtils.getNetWidth(topBorder, bottomBorder), columnHeaderInfo.textProperties).length : 1, topBorder = null !== (topBorder = null === (topBorder = bottomBorder.borders.top) || void 0 === topBorder ? void 0 : topBorder.weight) && void 0 !== topBorder ? topBorder : 0, bottomBorder = null !== (bottomBorder = null === (bottomBorder = bottomBorder.borders.bottom) || void 0 === bottomBorder ? void 0 : bottomBorder.weight) && void 0 !== bottomBorder ? bottomBorder : 0;
                return columnHeaderInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, TableExBinder.prototype.getApproximateBodyCellHeight = function(bodyCell, topBorder) {
                var fontInfo = this.getBodyCellFontInfo(bodyCell);
                if (bodyCell.icon && "IconOnly" === bodyCell.icon.layout) return fontInfo.measuredFontHeight;
                if (bodyCell.isKpi) return this.valueFontInfo.fontProperties.size.px;
                var lineCount = this.getBodyCellContent(bodyCell), bottomBorder = TablixUtils.getUrlScheme(bodyCell.columnMetadata, lineCount);
                if (bottomBorder !== UrlScheme.NONE && visuals.PivotTableBinderUtils.getUrlIconName(this.formattingProperties.values.urlIcon, bottomBorder)) return this.valueFontInfo.fontProperties.size.px;
                if (this.isImage(bodyCell)) return this.formattingProperties.grid.imageHeight;
                if (this.isSparkline(bodyCell)) return fontInfo.measuredFontHeight;
                var bottomBorder = this.getBodyCellStyle(bodyCell, !0, !0), lineCount = this.formattingProperties.values.wordWrap && null != topBorder ? (bodyCell.icon && (topBorder -= fontInfo.measuredFontHeight + visuals.PivotTableBinderUtils.TablixIconMargin), 
                visuals.PivotTableBinderUtils.getWordWrappingLines(lineCount, visuals.PivotTableBinderUtils.getNetWidth(topBorder, bottomBorder), fontInfo.textProperties).length) : 1, topBorder = null !== (topBorder = null === (topBorder = bottomBorder.borders.top) || void 0 === topBorder ? void 0 : topBorder.weight) && void 0 !== topBorder ? topBorder : 0, bottomBorder = null !== (bottomBorder = null === (bottomBorder = bottomBorder.borders.bottom) || void 0 === bottomBorder ? void 0 : bottomBorder.weight) && void 0 !== bottomBorder ? bottomBorder : 0;
                return fontInfo.measuredFontHeight * lineCount + topBorder + bottomBorder;
            }, TableExBinder.prototype.getApproximateCornerCellHeight = function(cornerCell, width) {
                return 0;
            }, TableExBinder.prototype.updateFormattingProperties = function(dataView, formattingProperties, style, totalFormattingProperties) {
                this.formattingProperties = formattingProperties, this.legacyTooltipsEnabled = totalFormattingProperties;
                var generalFontSize = formattingProperties.general.textSize, measurer = new visuals.PivotTableBinderUtils.FontInfoMeasurer(), columnFormattingProperties = {}, totalFontFamily = {}, totalFormattingProperties = {};
                columnFormattingProperties.family = formattingProperties.columnHeaders.fontFamily || TablixUtils.FontFamilyHeader, 
                columnFormattingProperties.size = formattingProperties.columnHeaders.fontSize || generalFontSize, 
                formattingProperties.columnHeaders.bold && (columnFormattingProperties.weight = CssConstants.boldValue), 
                formattingProperties.columnHeaders.italic && (columnFormattingProperties.style = CssConstants.italicValue), 
                formattingProperties.columnHeaders.underline && (columnFormattingProperties.textDecoration = CssConstants.underlineValue), 
                this.columnHeaderContainerFontInfo = visuals.PivotTableBinderUtils.createFontInfo(columnFormattingProperties, measurer), 
                this.columnHeaderFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.columnHeaderContainerFontInfo, {}, measurer), 
                totalFontFamily.family = formattingProperties.values.fontFamily || TablixUtils.FontFamilyCell, 
                totalFontFamily.size = formattingProperties.values.fontSize || generalFontSize, 
                formattingProperties.values.bold && (totalFontFamily.weight = CssConstants.boldValue), 
                formattingProperties.values.italic && (totalFontFamily.style = CssConstants.italicValue), 
                formattingProperties.values.underline && (totalFontFamily.textDecoration = CssConstants.underlineValue), 
                this.valueContainerFontInfo = visuals.PivotTableBinderUtils.createFontInfo(totalFontFamily, measurer), 
                this.valueFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.valueContainerFontInfo, {}, measurer);
                var totalFontWeight, totalFontFamily = formattingProperties.total.fontFamily;
                totalFontFamily || this.valueFontInfo.fontProperties.family !== TablixUtils.FontFamilyCell ? totalFontWeight = !0 : this.valueFontInfo.fontProperties.family === TablixUtils.FontFamilyCell && (totalFontFamily = TablixUtils.FontFamilyTotal), 
                totalFormattingProperties.family = totalFontFamily, totalFormattingProperties.size = formattingProperties.total.fontSize, 
                formattingProperties.total.bold && totalFontWeight && (totalFormattingProperties.weight = CssConstants.boldValue), 
                formattingProperties.total.italic && (totalFormattingProperties.style = CssConstants.italicValue), 
                formattingProperties.total.underline && (totalFormattingProperties.textDecoration = CssConstants.underlineValue), 
                this.totalFontInfo = visuals.PivotTableBinderUtils.overrideFontInfo(this.valueFontInfo, totalFormattingProperties, measurer), 
                this.glyphFontInfo = visuals.PivotTableBinderUtils.createFontInfo({
                    family: TablixUtils.FontFamilyGlyphs,
                    size: FontSize.createFromPt((formattingProperties.columnHeaders.fontSize || generalFontSize).pt * TablixUtils.SortIconFontSizeRatio),
                    lineHeight: "100%"
                }, measurer), measurer.measureAll(this.measureElement), this.columnHeaderClasses = [], 
                this.formattingProperties.columnHeaders.wordWrap ? this.columnHeaderClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassWrap) : this.columnHeaderClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassNoWrap), 
                this.options.interactivityIndicatorEnabled && this.options.sortingEnabled && this.columnHeaderClasses.push(visuals.PivotTableBinderUtils.cssClassCellInteractive), 
                this.columnsDataBarsSettings = {};
                var columnFormatting = formattingProperties.columnFormatting;
                if (columnFormatting && dataView && dataView.table && !_.isEmpty(dataView.table.columns)) for (var _i = 0, _a = dataView.table.columns; _i < _a.length; _i++) (queryName = (column = _a[_i]).queryName) && columnFormatting[queryName] && (this.columnsDataBarsSettings[queryName] = visuals.PivotTableBinderUtils.getColumnDataBarsSettings(column, columnFormatting[queryName].dataBarsSettings, style));
                this.sparklineSettings = {};
                var sparklineFormatting = formattingProperties.sparklines;
                if (sparklineFormatting && dataView && dataView.table && !_.isEmpty(dataView.table.columns)) for (var _b = 0, _c = dataView.table.columns; _b < _c.length; _b++) {
                    var column, queryName = (column = _c[_b]).queryName, type = column.type;
                    queryName && sparklineFormatting[queryName] && (this.sparklineSettings[queryName] = visuals.PivotTableBinderUtils.getSparklineSettings(sparklineFormatting[queryName], type, style));
                }
            }, TableExBinder.prototype.getColumnHeaderContainerFontInfo = function() {
                return this.columnHeaderContainerFontInfo;
            }, TableExBinder.prototype.getValueContainerFontInfo = function() {
                return this.valueContainerFontInfo;
            }, TableExBinder.prototype.getColumnHeaderLabel = function(wordWrap) {
                var text = wordWrap.metadata.displayName, wordWrap = this.formattingProperties.columnHeaders.wordWrap;
                return this.ensureMeasuringSafeText(text, wordWrap);
            }, TableExBinder.prototype.getBodyCellContent = function(wordWrap) {
                var text = wordWrap.textContent, wordWrap = this.formattingProperties.values.wordWrap;
                return this.ensureMeasuringSafeText(text, wordWrap);
            }, TableExBinder.prototype.ensureMeasuringSafeText = function(text, wordWrap) {
                return text ? wordWrap ? _.isEmpty(text.trim()) ? "" : text : visuals.TextUtil.replaceNewlineAndSpaceWithNBSP(text) : "";
            }, TableExBinder.prototype.addBodyCellStyleAttributes = function(bodyCell, forMeasure, contentStyleAttributes, containerStyleAttributes, hasContent, a11yTable) {
                this.getBodyCellStyle(bodyCell, forMeasure, hasContent).setAttributes(containerStyleAttributes), 
                containerStyleAttributes.position = "relative", this.selectionManager.isBodyCellHighlighted(bodyCell) || a11yTable || visuals.PivotTableBinderUtils.setUnselectedStyle(containerStyleAttributes);
            }, TableExBinder.prototype.getColumnHeaderStyle = function(columnHeader, forMeasure, hasContent) {
                var cellStyle = new CellStyle(visuals.PivotTableBinderUtils.CellHorizontalPadding, visuals.PivotTableBinderUtils.CellHorizontalPadding);
                return visuals.TableStyler.setColumnHeaderStyle(columnHeader.position, cellStyle, this.formattingProperties, this.getColumnFormatting(columnHeader.metadata), this.options.tablixProperties), 
                cellStyle.fontFamily = void 0, this.formattingProperties.columnHeaders.underline && hasContent && (cellStyle.textDecoration = CssConstants.underlineValue), 
                visuals.PivotTableBinderUtils.applyFontInfo(this.columnHeaderFontInfo, cellStyle, !forMeasure, hasContent), 
                cellStyle;
            }, TableExBinder.prototype.getBodyCellStyle = function(bodyCell, forMeasure, hasContent) {
                var cellStyle = new CellStyle(visuals.PivotTableBinderUtils.CellHorizontalPadding, visuals.PivotTableBinderUtils.CellHorizontalPadding);
                return bodyCell.isRowGrandTotal ? (visuals.TableStyler.setFooterBodyCellStyle(bodyCell.position, bodyCell, cellStyle, this.formattingProperties, this.getColumnFormatting(bodyCell.columnMetadata), this.options.tablixProperties), 
                this.formattingProperties.total.underline && hasContent && (cellStyle.textDecoration = CssConstants.underlineValue), 
                visuals.PivotTableBinderUtils.applyFontInfo(this.totalFontInfo, cellStyle, !forMeasure, hasContent)) : (visuals.TableStyler.setBodyCellStyle(bodyCell.position, bodyCell, cellStyle, this.formattingProperties, this.getColumnFormatting(bodyCell.columnMetadata), this.options.tablixProperties), 
                this.formattingProperties.values.underline && hasContent && (cellStyle.textDecoration = CssConstants.underlineValue), 
                visuals.PivotTableBinderUtils.applyFontInfo(this.valueFontInfo, cellStyle, !forMeasure, hasContent)), 
                cellStyle;
            }, TableExBinder.prototype.addBodyCellClasses = function(bodyCell, urlIcon, contentClasses, containerClasses) {
                var alignment, defaultAlignment, columnFormatting = this.formattingProperties.columnFormatting[bodyCell.columnMetadata.queryName];
                this.formattingProperties.values.wordWrap ? contentClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassWrap) : contentClasses.push(visuals.PivotTableBinderUtils.cssPivotTableCellClassNoWrap), 
                urlIcon && contentClasses.push(TablixUtils.CssClassValueURLIconContainer), this.options.interactivityIndicatorEnabled && this.options.selectionEnabled && !bodyCell.isRowGrandTotal && containerClasses.push(visuals.PivotTableBinderUtils.cssClassCellInteractive), 
                !columnFormatting || (bodyCell.isTotal ? columnFormatting.styleTotal : columnFormatting.styleValues) && (alignment = columnFormatting.alignment), 
                urlIcon ? defaultAlignment = visuals.textAlignment.center : bodyCell.isNumeric && (defaultAlignment = visuals.textAlignment.right), 
                visuals.PivotTableBinderUtils.addAlignmentCssClass(alignment, contentClasses, defaultAlignment);
            }, TableExBinder.prototype.getKpiContentString = function(bodyCell) {
                return visuals.PivotTableBinderUtils.createKpiDomString(bodyCell.columnMetadata.kpi, bodyCell.textContent);
            }, TableExBinder.prototype.getColumnHeaderFontInfo = function(header) {
                return this.columnHeaderFontInfo;
            }, TableExBinder.prototype.getBodyCellFontInfo = function(bodyCell) {
                return bodyCell.isRowGrandTotal ? this.totalFontInfo : this.valueFontInfo;
            }, TableExBinder.prototype.getColumnFormatting = function(column) {
                return this.formattingProperties.columnFormatting[column.queryName];
            }, TableExBinder.prototype.isImage = function(bodyCell) {
                return !(bodyCell.isRowGrandTotal && !_.isEmpty(bodyCell.columnMetadata.identityExprs)) && visuals.converterHelper.isImageUrlColumn(bodyCell.columnMetadata);
            }, TableExBinder.prototype.isSparkline = function(misc) {
                var misc = misc.columnMetadata, misc = null === (misc = null == misc ? void 0 : misc.type) || void 0 === misc ? void 0 : misc.misc;
                return null != misc && null != misc.sparkline;
            }, TableExBinder;
        }();
        visuals.TableExBinder = TableExBinder;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var CellPosition = powerbi.visuals.controls.internal.TablixUtils.CellPosition, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, TableExRowHierarchyNavigator = function() {
            function TableExColumnHierarchyNavigator() {}
            return TableExColumnHierarchyNavigator.prototype.hasHierarchy = function() {
                return !0;
            }, TableExColumnHierarchyNavigator.prototype.update = function(columns) {
                this.updateColumns(columns);
            }, TableExColumnHierarchyNavigator.prototype.getColumns = function() {
                return this.columns;
            }, TableExColumnHierarchyNavigator.prototype.getHierarchyDepth = function() {
                return 1;
            }, TableExColumnHierarchyNavigator.prototype.getHierarchyLeafCount = function() {
                return _.size(this.columns);
            }, TableExColumnHierarchyNavigator.prototype.getHierarchyLeafAt = function(index) {
                return this.columns[index];
            }, TableExColumnHierarchyNavigator.prototype.getFloatingHierarchyLeafCount = function() {
                return 0;
            }, TableExColumnHierarchyNavigator.prototype.getFloatingHierarchyLeafAt = function(index) {
                return null;
            }, TableExColumnHierarchyNavigator.prototype.getHierarchyItems = function() {
                return this.columns;
            }, TableExColumnHierarchyNavigator.prototype.getFloatingHierarchyItems = function() {
                return null;
            }, TableExColumnHierarchyNavigator.prototype.getLeafIndex = function(item) {
                return item.position.column.index;
            }, TableExColumnHierarchyNavigator.prototype.isLeaf = function(item) {
                return !0;
            }, TableExColumnHierarchyNavigator.prototype.isLastItem = function(item, items) {
                return item.position.column.index === items.length - 1;
            }, TableExColumnHierarchyNavigator.prototype.getParent = function(item) {
                return null;
            }, TableExColumnHierarchyNavigator.prototype.getChildren = function(item) {
                return null;
            }, TableExColumnHierarchyNavigator.prototype.getLevel = function(item) {
                return 0;
            }, TableExColumnHierarchyNavigator.prototype.getIndex = function(item) {
                return item.position.column.index;
            }, TableExColumnHierarchyNavigator.prototype.getPathIndices = function(item) {
                return [ this.getIndex(item) ];
            }, TableExColumnHierarchyNavigator.prototype.getNodeFromPath = function(indices) {
                if (1 === indices.length) return this.columns[indices[0]];
            }, TableExColumnHierarchyNavigator.prototype.getItemsByLevel = function(levelIndex) {
                return __spreadArray([], this.columns || []);
            }, TableExColumnHierarchyNavigator.prototype.getLeafAncestorAtLevel = function(leafNode, levelIndex) {
                return leafNode;
            }, TableExColumnHierarchyNavigator.prototype.getExpansionState = function(item) {
                return 2;
            }, TableExColumnHierarchyNavigator.prototype.getFirstDescendentLeafIndex = function(item) {
                return this.getLeafIndex(item);
            }, TableExColumnHierarchyNavigator.prototype.getIntersection = function(rowItem, columnItem) {
                return null;
            }, TableExColumnHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                return null;
            }, TableExColumnHierarchyNavigator.prototype.getRowLevel = function(cornerItem) {
                return 0;
            }, TableExColumnHierarchyNavigator.prototype.getColumnLevel = function(cornerItem) {
                return 0;
            }, TableExColumnHierarchyNavigator.prototype.isColumnHeaderMultiValueSubtotal = function(header) {
                return !1;
            }, TableExColumnHierarchyNavigator.prototype.isRowHeaderMultiValueSubtotal = function(header) {
                return !1;
            }, TableExColumnHierarchyNavigator.prototype.getColumnIndexFromQueryName = function(queryName) {
                return _.find(this.columns, function(column) {
                    return column.metadata.queryName === queryName;
                });
            }, TableExColumnHierarchyNavigator.prototype.updateColumns = function(columns) {
                this.columns = [];
                for (var columnCount = columns.length, i = 0; i < columnCount; i++) this.columns.push({
                    metadata: columns[i],
                    position: this.calculateItemPosition(i, columnCount)
                });
            }, TableExColumnHierarchyNavigator.prototype.calculateItemPosition = function(columnIndex, columnCount) {
                var position = new CellPosition();
                return position.row.index = position.row.indexInSiblings = 0, position.row.isFirst = !0, 
                position.row.isLast = !0, position.column.index = position.column.indexInSiblings = columnIndex, 
                position.column.isFirst = 0 === columnIndex, position.column.isLast = columnIndex === columnCount - 1, 
                position;
            }, TableExColumnHierarchyNavigator;
        }();
        visuals.TableExColumnHierarchyNavigator = TableExRowHierarchyNavigator;
        TableExRowHierarchyNavigator = function() {
            function TableExRowHierarchyNavigator(tablixProperties, hostServices) {
                this.tablixProperties = tablixProperties, this.hostServices = hostServices;
            }
            return TableExRowHierarchyNavigator.prototype.update = function(rows, identities, total, isDataComplete, columns, formattingProperties) {
                this.isDataComplete = isDataComplete, this.formattingProperties = formattingProperties, 
                this.formatters = formattingProperties.formatters, this.tooltipFormatters = formattingProperties.tooltipFormatters || {}, 
                this.updateRows(rows, identities), this.updateFloatingRow(total, columns);
            }, TableExRowHierarchyNavigator.prototype.hasHierarchy = function() {
                return !1;
            }, TableExRowHierarchyNavigator.prototype.getRows = function() {
                return this.rows;
            }, TableExRowHierarchyNavigator.prototype.getHierarchyDepth = function() {
                return 1;
            }, TableExRowHierarchyNavigator.prototype.getHierarchyLeafCount = function() {
                return _.size(this.rows);
            }, TableExRowHierarchyNavigator.prototype.getHierarchyLeafAt = function(index) {
                return this.rows[index];
            }, TableExRowHierarchyNavigator.prototype.getFloatingHierarchyLeafCount = function() {
                return this.floatingRow ? 1 : 0;
            }, TableExRowHierarchyNavigator.prototype.getFloatingHierarchyLeafAt = function(index) {
                return this.floatingRow;
            }, TableExRowHierarchyNavigator.prototype.getHierarchyItems = function() {
                return this.rows;
            }, TableExRowHierarchyNavigator.prototype.getFloatingHierarchyItems = function() {
                return this.floatingRow ? [ this.floatingRow ] : null;
            }, TableExRowHierarchyNavigator.prototype.getLeafIndex = function(item) {
                return item.index;
            }, TableExRowHierarchyNavigator.prototype.isLeaf = function(item) {
                return !0;
            }, TableExRowHierarchyNavigator.prototype.isLastItem = function(item, items) {
                return this.isDataComplete && item.index === items.length - 1;
            }, TableExRowHierarchyNavigator.prototype.getParent = function(item) {
                return null;
            }, TableExRowHierarchyNavigator.prototype.getIndex = function(item) {
                return item.index;
            }, TableExRowHierarchyNavigator.prototype.getPathIndices = function(item) {
                return [ this.getIndex(item) ];
            }, TableExRowHierarchyNavigator.prototype.getNodeFromPath = function(indices) {
                if (1 === indices.length) return this.rows[indices[0]];
            }, TableExRowHierarchyNavigator.prototype.getItemsByLevel = function(levelIndex) {
                return [ this.rows[0] ];
            }, TableExRowHierarchyNavigator.prototype.getChildren = function(item) {
                return null;
            }, TableExRowHierarchyNavigator.prototype.getLevel = function(item) {
                return 0;
            }, TableExRowHierarchyNavigator.prototype.getLeafAncestorAtLevel = function(leafNode, levelIndex) {
                return null;
            }, TableExRowHierarchyNavigator.prototype.getExpansionState = function(item) {
                return 2;
            }, TableExRowHierarchyNavigator.prototype.getIntersection = function(rowItem, rowIndex) {
                var isRowGrandTotal = rowIndex.position.column.index, value = rowItem.values[isRowGrandTotal], objects = rowItem.values.objects && rowItem.values.objects[isRowGrandTotal], tooltipFormatter = rowIndex.metadata.queryName, cellItem = rowIndex.metadata, isRowGrandTotal = rowItem === this.floatingRow;
                _.isString(value) && null !== (formatter = null === (cellPosition = null == cellItem ? void 0 : cellItem.type) || void 0 === cellPosition ? void 0 : cellPosition.misc) && void 0 !== formatter && formatter.sparkline && (value = visuals.PivotTableBinderUtils.parseSparklineData(value, this.hostServices));
                var cellPosition = new CellPosition(), formatter = rowIndex.position;
                cellPosition.column.index = formatter.column.index, cellPosition.column.isFirst = formatter.column.isFirst, 
                cellPosition.column.isLast = formatter.column.isLast;
                var textContent, tooltipContent, rowIndex = rowItem.index;
                cellPosition.row.index = rowIndex, cellPosition.row.isFirst = 0 === rowIndex, cellPosition.row.isLast = this.isDataComplete && rowItem === _.last(this.rows), 
                isRowGrandTotal && !cellItem.isMeasure && 0 === formatter.column.index ? textContent = tooltipContent = this.formattingProperties.total.totalLabel : (formatter = this.formatters[tooltipFormatter], 
                tooltipFormatter = this.tooltipFormatters[tooltipFormatter], textContent = formatter ? formatter.format(value, objects) : null != value ? "" + value : "", 
                tooltipContent = tooltipFormatter ? tooltipFormatter.format(value, objects) : textContent);
                cellItem = {
                    position: cellPosition,
                    dataPoint: value,
                    isRowGrandTotal: isRowGrandTotal,
                    columnMetadata: cellItem,
                    isTotal: isRowGrandTotal,
                    textContent: textContent,
                    tooltipContent: tooltipContent,
                    isKpi: cellItem && TablixUtils.isValidStatusGraphic(cellItem.kpi, textContent),
                    isNumeric: cellItem && cellItem.type.numeric && !cellItem.kpi
                };
                return objects && (cellItem.backColor = this.tablixProperties.PropValuesBackColor.getValue(objects), 
                cellItem.fontColor = this.tablixProperties.PropValuesFontColor.getValue(objects), 
                cellItem.icon = visuals.TablixProperties.PropValuesIcon.getValue(objects), cellItem.hyperlink = visuals.TablixProperties.PropValuesWebURL.getValue(objects), 
                cellItem.altText = visuals.TablixProperties.PropAltTextValue.getValue(objects)), 
                cellItem;
            }, TableExRowHierarchyNavigator.prototype.getCorner = function(rowLevel, columnLevel) {
                return {};
            }, TableExRowHierarchyNavigator.prototype.getRowLevel = function(cornerItem) {
                return 0;
            }, TableExRowHierarchyNavigator.prototype.getColumnLevel = function(cornerItem) {
                return 0;
            }, TableExRowHierarchyNavigator.prototype.isColumnHeaderMultiValueSubtotal = function(header) {
                return !1;
            }, TableExRowHierarchyNavigator.prototype.isRowHeaderMultiValueSubtotal = function(header) {
                return !1;
            }, TableExRowHierarchyNavigator.prototype.getColumnIndexFromQueryName = function(queryName) {}, 
            TableExRowHierarchyNavigator.prototype.updateRows = function(rows, identities) {
                this.rows = [];
                for (var i = 0; i < rows.length; i++) this.rows.push({
                    index: i,
                    values: rows[i],
                    identity: identities ? identities[i] : void 0
                });
            }, TableExRowHierarchyNavigator.prototype.updateFloatingRow = function(total, columns) {
                _.isEmpty(total) ? this.floatingRow = null : this.floatingRow = {
                    index: 0,
                    values: total,
                    identity: void 0
                };
            }, TableExRowHierarchyNavigator;
        }();
        visuals.TableExRowHierarchyNavigator = TableExRowHierarchyNavigator;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TableExInteractionManager = function() {
            function TableExInteractionManager(tooltipService, selectionManager, totalLabel) {
                this.tooltipService = tooltipService, this.selectionManager = selectionManager, 
                this.tooltipsEnabled = !0;
            }
            return TableExInteractionManager.prototype.getBodyHandler = function() {
                var _this = this;
                return {
                    addTooltip: function(bodyCell, bodyElement) {
                        return _this.addBodyTooltip(bodyCell, bodyElement);
                    },
                    removeTooltip: function(bodyCell, bodyElement) {
                        return _this.removeTooltip(bodyElement);
                    },
                    isTooltipEnabled: function(bodyCell) {
                        return _this.tooltipsEnabled && _this.isBodyTooltipEnabled(bodyCell);
                    },
                    setTooltipDelegate: function(getItemFn, element) {
                        return _this.setTooltipDelegate(getItemFn, element);
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, TableExInteractionManager.prototype.getHeaderHandler = function() {
                var _this = this;
                return {
                    addTooltip: function(headerCell, headerElement) {
                        return _this.addHeaderTooltip(headerCell, headerElement);
                    },
                    removeTooltip: function(headerCell, headerElement) {
                        return _this.removeTooltip(headerElement);
                    },
                    isTooltipEnabled: function(headerCell) {
                        return _this.tooltipsEnabled;
                    },
                    setTooltipDelegate: function() {
                        return debug.assertFail("not implemented");
                    },
                    isTooltipEnabledGeneric: function() {
                        return _this.tooltipsEnabled;
                    }
                };
            }, TableExInteractionManager.prototype.onDataViewChanged = function(rowHierarchyNavigator, columnHierarchyNavigator) {
                this.rowHierarchyNavigator = rowHierarchyNavigator, this.columnHierarchyNavigator = columnHierarchyNavigator;
            }, TableExInteractionManager.prototype.tooltipVisible = function() {
                return this.tooltipService && this.tooltipService.visible();
            }, TableExInteractionManager.prototype.hideTooltip = function() {
                this.tooltipService && this.tooltipService.hide();
            }, TableExInteractionManager.prototype.setTooltipsEnabled = function(enabled) {
                this.tooltipsEnabled = enabled;
            }, TableExInteractionManager.prototype.addBodyTooltip = function(item, selection) {
                var _this = this, selection = d3.select(selection);
                this.tooltipService.addTooltip(selection, function(args) {
                    return _this.getBodyTooltipInfo(item, args);
                }, function(itemSelectionId) {
                    itemSelectionId = _this.getItemSelectionId(item, itemSelectionId);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, TableExInteractionManager.prototype.setTooltipDelegate = function(getItemFn, selection) {
                var _this = this, selection = d3.select(selection);
                this.tooltipService.addTooltip(selection, function(tooltipEventArgs) {
                    return _this.getBodyTooltipInfo(getItemFn(tooltipEventArgs), tooltipEventArgs);
                }, function(itemSelectionId) {
                    itemSelectionId = _this.getItemSelectionId(getItemFn(itemSelectionId), itemSelectionId);
                    return itemSelectionId && [ itemSelectionId ];
                });
            }, TableExInteractionManager.prototype.addHeaderTooltip = function(item, _b) {
                var _this = this, selection = d3.select(_b), isTouchScreenOptimizedEnabled = null === (_b = (isTouchScreenOptimizedEnabled = this.tooltipService).isTouchScreenOptimizedEnabled) || void 0 === _b ? void 0 : _b.call(isTouchScreenOptimizedEnabled);
                this.tooltipService.addTooltip(selection, function(args) {
                    return _this.getHeaderTooltipInfo(item, args);
                }, isTouchScreenOptimizedEnabled ? function(args) {
                    return _this.getItemSelectionId(item, args);
                } : function(args) {});
            }, TableExInteractionManager.prototype.removeTooltip = function(selection) {
                selection = d3.select(selection);
                this.tooltipService.removeTooltips(selection);
            }, TableExInteractionManager.prototype.isBodyTooltipEnabled = function(item) {
                return !item.isRowGrandTotal || !_.isEmpty(item.textContent);
            }, TableExInteractionManager.prototype.getHeaderTooltipInfo = function(item, args) {
                return [ {
                    displayName: item.metadata.displayName
                } ];
            }, TableExInteractionManager.prototype.getBodyTooltipInfo = function(item, args) {
                if (this.rowHierarchyNavigator && item) {
                    var kpi, tooltipItems = [], displayName = this.rowHierarchyNavigator.getHierarchyLeafAt(item.position.row.index);
                    return item.isRowGrandTotal || (kpi = this.getGroupingTooltipInfo(displayName)) && tooltipItems.push.apply(tooltipItems, kpi || []), 
                    item.columnMetadata.isMeasure ? (displayName = item.columnMetadata.displayName, 
                    item.isKpi ? (kpi = {
                        metadata: item.columnMetadata.kpi,
                        value: item.tooltipContent
                    }, tooltipItems.push({
                        displayName: displayName,
                        kpiValue: kpi
                    })) : _.isEmpty(item.tooltipContent) || tooltipItems.push({
                        displayName: displayName,
                        value: item.tooltipContent
                    })) : item.isRowGrandTotal && !_.isEmpty(item.tooltipContent) && tooltipItems.push({
                        displayName: item.tooltipContent
                    }), _.isEmpty(tooltipItems) ? void 0 : tooltipItems;
                }
            }, TableExInteractionManager.prototype.getGroupingTooltipInfo = function(rowItem) {
                if (this.columnHierarchyNavigator && this.rowHierarchyNavigator) {
                    for (var tooltipItems = [], _i = 0, columns_11 = this.columnHierarchyNavigator.getColumns(); _i < columns_11.length; _i++) {
                        var intersection, groupingColumnItem = columns_11[_i];
                        groupingColumnItem.metadata.isMeasure || (intersection = this.rowHierarchyNavigator.getIntersection(rowItem, groupingColumnItem), 
                        tooltipItems.push({
                            displayName: groupingColumnItem.metadata.displayName,
                            value: intersection.tooltipContent
                        }));
                    }
                    return tooltipItems;
                }
            }, TableExInteractionManager.prototype.getItemSelectionId = function(rowItem, args) {
                if (this.rowHierarchyNavigator && rowItem && !rowItem.isRowGrandTotal) {
                    rowItem = this.rowHierarchyNavigator.getHierarchyLeafAt(rowItem.position.row.index);
                    return visuals.SelectionId.fromSelectorsByColumn(this.selectionManager.createSelectorsByColumn(rowItem));
                }
            }, TableExInteractionManager;
        }();
        visuals.TableExInteractionManager = TableExInteractionManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TablixUtils = powerbi.visuals.controls.internal.TablixUtils, TableExSelectionManager = function() {
            function TableExSelectionManager(hostServices, featureSwitches) {
                this.hostServices = hostServices, this.featureSwitches = featureSwitches, this.totalLabel = this.hostServices.getLocalizedString(TablixUtils.TotalLabel), 
                this.clearLocal();
            }
            return TableExSelectionManager.prototype.onBodyCellContextMenu = function(bodyCell, args) {
                var contextMenuItems;
                visuals.EventBubblingUtil.markAsHandled(args), this.isTableEmpty() || (contextMenuItems = this.getRowFromCell(bodyCell), 
                contextMenuItems = !this.isSelectionEmpty() && this.isItemSelected(contextMenuItems) ? this.selectedItems : [ contextMenuItems ], 
                (args = this.createContextMenuArgs(bodyCell, contextMenuItems, args)) && this.hostServices.onContextMenu(args));
            }, TableExSelectionManager.prototype.onBodyCellClick = function(bodyCell, selectionMode, rowIndex) {
                this.isTableEmpty() || (bodyCell ? bodyCell.isRowGrandTotal ? this.clearHost() : this.select(this.getRowFromCell(bodyCell), selectionMode) : this.select(this.rows[rowIndex], selectionMode));
            }, TableExSelectionManager.prototype.onWhitespaceClick = function() {
                this.clearHost();
            }, TableExSelectionManager.prototype.isDrillingEnabled = function(bodyCell, args) {
                if (!this.isTableEmpty()) {
                    args = {
                        visualObjects: this.getVisualObjects([ this.getRowFromCell(bodyCell) ]),
                        position: TableExSelectionManager.getMouseEventPosition(args)
                    };
                    return this.hostServices.onSelecting(args), 1 === args.action;
                }
            }, TableExSelectionManager.prototype.select = function(row, selectionMode, isContextClick, suppressHostCalls) {
                if (void 0 === isContextClick && (isContextClick = !1), this.isItemSelected(row)) {
                    if (isContextClick) return;
                    1 === this.selectedItems.length && 1 !== selectionMode ? this.clearLocal() : 3 === selectionMode ? this.unselectItem(row) : 0 === selectionMode && (this.selectedItems = [ row ]);
                } else 0 === selectionMode && this.clearLocal(), this.selectedItems.push(row), suppressHostCalls || this.hostServices.canSelect(this.createSelectArgs(this.selectedItems)) || (this.selectedItems = [ row ]);
                suppressHostCalls || this.hostServices.onSelect(this.createSelectArgs(this.selectedItems, selectionMode));
            }, TableExSelectionManager.prototype.isRowHighlighted = function(row) {
                return !(!this.isSelectionEmpty() && !this.isTableEmpty()) || this.isItemSelected(row);
            }, TableExSelectionManager.prototype.isBodyCellHighlighted = function(bodyCell) {
                return !(!this.isSelectionEmpty() && !this.isTableEmpty()) || this.isItemSelected(this.getRowFromCell(bodyCell));
            }, TableExSelectionManager.prototype.onDataViewChanged = function(rowNavigator, columnNavigator) {
                if (this.rowNavigator = rowNavigator, this.rows = rowNavigator && rowNavigator.getRows(), 
                this.totalRow = rowNavigator && rowNavigator.getFloatingHierarchyLeafAt(0), this.columns = columnNavigator && columnNavigator.getColumns(), 
                !this.isSelectionEmpty()) {
                    for (var newSelectedItems = [], _i = 0, _a = this.selectedItems; _i < _a.length; _i++) {
                        var selectedItem = _a[_i], newSelectedItem = TableExSelectionManager.getMatchingRow(selectedItem, this.rows);
                        newSelectedItem ? newSelectedItems.push(newSelectedItem) : newSelectedItems.push(selectedItem);
                    }
                    this.selectedItems = newSelectedItems;
                }
            }, TableExSelectionManager.prototype.clearLocal = function() {
                this.selectedItems = [];
            }, TableExSelectionManager.prototype.isSelectionEmpty = function() {
                return _.isEmpty(this.selectedItems);
            }, TableExSelectionManager.prototype.isTableEmpty = function() {
                return !this.rows;
            }, TableExSelectionManager.prototype.isItemSelected = function(item) {
                return -1 !== this.selectedItems.indexOf(item);
            }, TableExSelectionManager.prototype.unselectItem = function(item) {
                _.pull(this.selectedItems, item);
            }, TableExSelectionManager.prototype.clearHost = function() {
                this.clearLocal(), this.hostServices.onSelect(this.createSelectArgs([]));
            }, TableExSelectionManager.prototype.restoreSelection = function(selection) {
                if (this.clearLocal(), _.isEmpty(selection)) return !0;
                var idQueryNames = _.keys(selection[0].dataMap);
                if (1 !== idQueryNames.length) return !1;
                var groupFieldsQueryNames = _.chain(this.columns).filter(function(column) {
                    return !column.metadata.isMeasure;
                }).map(function(column) {
                    return column.metadata.queryName;
                }).value(), queryName = idQueryNames[0];
                if (!_.includes(groupFieldsQueryNames, queryName)) return !1;
                for (var foundMatch = !1, unmatchedSelectorsByColumn = _.clone(selection), _i = 0, _a = this.rows; _i < _a.length; _i++) {
                    for (var row = _a[_i], matchingSelectorByColumn = void 0, _b = 0, unmatchedSelectorsByColumn_1 = unmatchedSelectorsByColumn; _b < unmatchedSelectorsByColumn_1.length; _b++) {
                        var dataPoint = unmatchedSelectorsByColumn_1[_b], id = dataPoint.dataMap[queryName][0];
                        if (dataPoint.dataMap[queryName].length, powerbi.data.Selector.isScopeIdentity(id), 
                        powerbi.DataViewScopeIdentity.equals(id, row.identity)) {
                            matchingSelectorByColumn = dataPoint;
                            break;
                        }
                    }
                    matchingSelectorByColumn && (this.select(row, 3, !1, !0), _.remove(unmatchedSelectorsByColumn, matchingSelectorByColumn), 
                    foundMatch = !0);
                }
                return foundMatch;
            }, TableExSelectionManager.prototype.getRowFromCell = function(bodyCell) {
                return !bodyCell.isRowGrandTotal || bodyCell.isRowGrandTotal && this.totalRow, bodyCell.isRowGrandTotal ? this.totalRow : this.rows[bodyCell.position.row.index];
            }, TableExSelectionManager.prototype.createContextMenuArgs = function(bodyCell, items, args) {
                for (var _this = this, data = [], _i = 0, items_9 = items; _i < items_9.length; _i++) {
                    var selector = items_9[_i], selector = this.createSelectorsByColumn(selector);
                    selector && data.push(selector);
                }
                _.isEmpty(data) && this.rows.length;
                args = {
                    data: data,
                    position: TableExSelectionManager.getMouseEventPosition(args)
                };
                return args.copyArgs = {
                    singleValue: function() {
                        var _b;
                        return (null === (_b = null === (_b = bodyCell.columnMetadata.type) || void 0 === _b ? void 0 : _b.misc) || void 0 === _b ? void 0 : _b.sparkline) ? bodyCell.textContent : TablixUtils.convertValueToString(bodyCell.dataPoint, _this.featureSwitches.utcDates);
                    },
                    grid: function() {
                        var coveragePercentage = items.length, columnsCount = _this.columns.length, grid = new Array(coveragePercentage + 1);
                        grid[0] = new Array(columnsCount), _this.columns.forEach(function(column, columnIdx) {
                            grid[0][columnIdx] = column.metadata.displayName;
                        }), items.forEach(function(row, rowIdx) {
                            var line = grid[rowIdx + 1] = new Array(columnsCount);
                            _this.columns.forEach(function(column, columnIdx) {
                                line[columnIdx] = _this.rowNavigator.getIntersection(row, column).textContent;
                            });
                        }), bodyCell.isRowGrandTotal && _this.totalRow && _this.totalRow.values && _.isEmpty(_this.totalRow.values[0]) && (grid[1][0] = _this.totalLabel);
                        coveragePercentage = 0;
                        return 0 !== _this.rows.length && (coveragePercentage = Math.round(items.length / _this.rows.length * 100)), 
                        {
                            grid: grid,
                            coveragePercentage: coveragePercentage
                        };
                    }
                }, args;
            }, TableExSelectionManager.prototype.createSelectArgs = function(items, selectionMode) {
                return void 0 === selectionMode && (selectionMode = 0), {
                    visualObjects: this.getVisualObjects(items),
                    selectionMode: selectionMode
                };
            }, TableExSelectionManager.prototype.getVisualObjects = function(items) {
                for (var visualObjects = [], _i = 0, items_10 = items; _i < items_10.length; _i++) {
                    var selector = items_10[_i], selector = this.createSelectorsByColumn(selector);
                    selector && visualObjects.push({
                        objectName: "",
                        selectorsByColumn: selector
                    });
                }
                return visualObjects;
            }, TableExSelectionManager.prototype.createSelectorsByColumn = function(item) {
                var dataMap, firstGroup = _.find(this.columns, function(column) {
                    return !column.metadata.isMeasure;
                });
                firstGroup && ((measuresQueryNames = {})[firstGroup.metadata.queryName] = [ item.identity ], 
                dataMap = measuresQueryNames);
                var measuresQueryNames = _(this.columns).filter(function(column) {
                    return column.metadata.isMeasure;
                }).map(function(column) {
                    return column.metadata.queryName;
                }).value();
                if (dataMap || !_.isEmpty(measuresQueryNames)) return {
                    dataMap: dataMap,
                    metadata: measuresQueryNames
                };
            }, TableExSelectionManager.getMouseEventPosition = function(mouseEvent) {
                return {
                    x: mouseEvent.clientX,
                    y: mouseEvent.clientY
                };
            }, TableExSelectionManager.getMatchingRow = function(row, rows) {
                if (_.isEmpty(rows)) return null;
                for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                    var current = rows_1[_i];
                    if (powerbi.DataViewScopeIdentity.equals(current.identity, row.identity)) return current;
                }
                return null;
            }, TableExSelectionManager.getMatchingColumnHeader = function(columnHeader, columnHeaders) {
                for (var _i = 0, columnHeaders_2 = columnHeaders; _i < columnHeaders_2.length; _i++) {
                    var current = columnHeaders_2[_i];
                    if (this.areHeadersEqual(current, columnHeader)) return current;
                }
                return null;
            }, TableExSelectionManager.areHeadersEqual = function(item1, item2) {
                return item1.metadata.queryName === item2.metadata.queryName;
            }, TableExSelectionManager;
        }();
        visuals.TableExSelectionManager = TableExSelectionManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TableExSizeManager = function() {
            function TableExSizeManager(hostServices) {
                this.hostServices = hostServices, this.pendingChanges = [];
            }
            return TableExSizeManager.prototype.onDataViewChanged = function() {
                this.pendingChanges = [];
            }, TableExSizeManager.getSelector = function(header) {
                return {
                    metadata: header.metadata.queryName
                };
            }, TableExSizeManager.prototype.getPendingChange = function(header) {
                return _.find(this.pendingChanges, function(change) {
                    return visuals.TableExSelectionManager.areHeadersEqual(change.header, header);
                });
            }, TableExSizeManager.prototype.queuePendingChange = function(header, width) {
                var pendingChange = this.getPendingChange(header);
                pendingChange ? pendingChange.width = width : this.pendingChanges.push({
                    header: header,
                    width: width
                });
            }, TableExSizeManager.prototype.getColumnWidth = function(objects) {
                var pendingChange = this.getPendingChange(objects);
                if (pendingChange) return pendingChange.width;
                objects = objects.metadata.objects;
                return objects ? visuals.TablixProperties.PropColumnWidthValue.getValue(objects) : void 0;
            }, TableExSizeManager.prototype.setColumnWidth = function(header, width) {
                this.queuePendingChange(header, width), visuals.PivotTableSizeManagerUtils.persistWidths([ {
                    selector: TableExSizeManager.getSelector(header),
                    value: width
                } ], this.hostServices, this.onPersisting);
            }, TableExSizeManager.prototype.getRowHeight = function(header) {}, TableExSizeManager.prototype.setRowHeight = function(header, height) {}, 
            TableExSizeManager.prototype.getRowLevelWidth = function(cornerCell) {}, TableExSizeManager.prototype.setRowLevelWidth = function(cornerCell, width) {}, 
            TableExSizeManager.prototype.getColumnLevelHeight = function(cornerCell) {}, TableExSizeManager.prototype.setColumnLevelHeight = function(cornerCell, height) {}, 
            TableExSizeManager.prototype.setMissingWidths = function(headersWidth) {
                for (var widthsToPersist = [], _i = 0, headersWidth_2 = headersWidth; _i < headersWidth_2.length; _i++) {
                    var width = headersWidth_2[_i], header = width.header, width = width.width;
                    null == this.getColumnWidth(header) && (this.queuePendingChange(header, width), 
                    widthsToPersist.push({
                        selector: TableExSizeManager.getSelector(header),
                        value: width
                    }));
                }
                _.isEmpty(widthsToPersist) || visuals.PivotTableSizeManagerUtils.persistWidths(widthsToPersist, this.hostServices, this.onPersisting);
            }, TableExSizeManager.prototype.clearWidths = function(columnHeaders) {
                for (var widthsToPersist = [], _i = 0, columnHeaders_3 = columnHeaders; _i < columnHeaders_3.length; _i++) {
                    var header = columnHeaders_3[_i];
                    null != this.getColumnWidth(header) && widthsToPersist.push({
                        selector: TableExSizeManager.getSelector(header),
                        value: void 0
                    }), this.queuePendingChange(header, void 0);
                }
                _.isEmpty(widthsToPersist) || visuals.PivotTableSizeManagerUtils.persistWidths(widthsToPersist, this.hostServices, this.onPersisting);
            }, TableExSizeManager;
        }();
        visuals.TableExSizeManager = TableExSizeManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var TableExSortingManager = function() {
            function TableExSortingManager(hostServices) {
                this.hostServices = hostServices;
            }
            return TableExSortingManager.prototype.sort = function(header, columns, append) {
                void 0 === append && (append = !1);
                var resultSortDescriptors, newColumnSortDescriptor = TableExSortingManager.getSortDirection(header), newColumnSortDescriptor = visuals.PivotTableSortingManager.getNextSortDirection(newColumnSortDescriptor, header.metadata), queryName = header.metadata.queryName, newColumnSortDescriptor = {
                    queryName: queryName,
                    sortDirection: newColumnSortDescriptor
                };
                append ? (resultSortDescriptors = _.chain(columns).filter(function(column) {
                    return void 0 !== column.sortOrder && column.queryName !== queryName;
                }).sortBy(function(column) {
                    return column.sortOrder;
                }).map(function(column) {
                    return {
                        queryName: column.queryName,
                        sortDirection: column.sort
                    };
                }).value()).push(newColumnSortDescriptor) : resultSortDescriptors = [ newColumnSortDescriptor ], 
                this.hostServices.onCustomSort({
                    sortDescriptors: resultSortDescriptors
                });
            }, TableExSortingManager.hasSortingChanged = function(previousDataView, newColumns) {
                if (!previousDataView || !newColumns) return !1;
                var previousColumns = previousDataView.metadata.columns;
                if (_.isEmpty(previousColumns)) return !1;
                newColumns = newColumns.metadata.columns;
                if (_.isEmpty(newColumns)) return !1;
                for (var _i = 0, newColumns_2 = newColumns; _i < newColumns_2.length; _i++) {
                    var state_3 = function(newColumn) {
                        var previousColumn = _.find(previousColumns, function(previousColumn) {
                            return newColumn.queryName === previousColumn.queryName;
                        });
                        if (previousColumn && newColumn.sort !== previousColumn.sort) return {
                            value: !0
                        };
                    }(newColumns_2[_i]);
                    if ("object" == typeof state_3) return state_3.value;
                }
                return !1;
            }, TableExSortingManager.getSortDirection = function(header) {
                return header.metadata.sort;
            }, TableExSortingManager;
        }();
        visuals.TableExSortingManager = TableExSortingManager;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var BrowserUtils = jsCommon.BrowserUtils, PivotTableControl = powerbi.visuals.controls.pivotTable.PivotTableControl, PivotTableRenderingMode = powerbi.visuals.controls.pivotTable.PivotTableRenderingMode, TableExUtils = powerbi.visuals.controls.internal.TableExUtils, TablixType = powerbi.visuals.controls.TablixType, TablixUtils = powerbi.visuals.controls.internal.TablixUtils, UrlScheme = jsCommon.UrlUtils.UrlScheme, TableEx = function() {
            function TableEx(options, featureSwitches) {
                void 0 === options && (options = visuals.TableExOptions.createDefaultConstructorOptions()), 
                this.options = options, this.featureSwitches = featureSwitches || {}, this.options.tooltipsEnabled = this.options.tooltipsEnabled, 
                this.suppressNextRender = !1, this.tooltipType = 0;
            }
            return TableEx.prototype.init = function(options) {
                var _this = this;
                this.element = options.element, this.hostServices = options.host, this.waitingForData = !1, 
                this.style = options.style, this.tablixPropertyManager = new visuals.TablixPropertyManager(this.style), 
                this.selectionManager = new visuals.TableExSelectionManager(this.hostServices, this.featureSwitches), 
                this.sortingManager = new visuals.TableExSortingManager(this.hostServices), this.sizeManager = new visuals.TableExSizeManager(this.hostServices), 
                this.sizeManager.onPersisting = function() {
                    _this.suppressNextRender = !0;
                }, this.tooltipService = visuals.createTooltipService(options.host);
            }, TableEx.prototype.update = function(options) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return options.type & powerbi.VisualUpdateType.Data || 2 === options.resizeMode ? [ 4, this.onDataViewChanged(options.dataViews, options.operationKind, options.viewport) ] : [ 3, 2 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.pivotTableControl && options.type & powerbi.VisualUpdateType.Resize ? (this.pivotTableControl.setWidth(options.viewport.width), 
                            this.pivotTableControl.setHeight(options.viewport.height), [ 4, this.renderControl(!1, null, null) ]) : [ 3, 4 ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, TableEx.prototype.updatePersistedWidths = function(previousDataView) {
                var currentAutoSizeColumns = visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.getValue(this.dataView.metadata.objects);
                if (!currentAutoSizeColumns && this.pivotTableControl) {
                    for (var columnsWidth = [], columnHeaders = this.columnHierarchyNavigator.getColumns(), columnIndex = 0, _i = 0, pages_2 = this.pivotTableControl.getColumnWidthMeasureManager().getPageColumns(); _i < pages_2.length; _i++) for (var _a = 0, widths_2 = pages_2[_i].getColumnWidths(); _a < widths_2.length; _a++) {
                        var width = widths_2[_a];
                        columnsWidth.push({
                            header: columnHeaders[columnIndex],
                            width: width
                        }), columnIndex++;
                    }
                    this.sizeManager.setMissingWidths(columnsWidth);
                } else currentAutoSizeColumns && previousDataView && previousDataView.metadata && previousDataView.metadata.objects && !visuals.TablixProperties.PropColumnPivotTableAutoSizeColumns.getValue(previousDataView.metadata.objects) && (this.sizeManager.clearWidths(this.columnHierarchyNavigator.getColumns()), 
                this.suppressNextRender = !1);
            }, TableEx.prototype.onDataViewChanged = function(dataViews, operationKind, viewport) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var previousDataView, isDataComplete, _this = this;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _.isEmpty(dataViews) ? [ 3, 5 ] : (previousDataView = this.dataView, this.dataView = dataViews[0], 
                            this.formattingProperties = this.tablixPropertyManager.getTableExObjects(this.dataView, function(key) {
                                for (var _a, args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                                return (_a = _this.hostServices).getLocalizedString.apply(_a, __spreadArray([ key ], args || []));
                            }, this.style, this.featureSwitches), isDataComplete = !this.dataView.metadata.segment, 
                            operationKind !== powerbi.VisualDataChangeOperationKind.Append ? [ 3, 2 ] : [ 4, this.onAppendDataView(previousDataView, isDataComplete) ]);

                          case 1:
                            return _a.sent(), [ 3, 4 ];

                          case 2:
                            return [ 4, this.onNewDataView(previousDataView, viewport, isDataComplete) ];

                          case 3:
                            _a.sent(), _a.label = 4;

                          case 4:
                            return this.pivotTableControl.restoreFocusOnNextBlur(), this.pivotTableControl.restoreFocus(), 
                            [ 3, 6 ];

                          case 5:
                            this.dataView = void 0, this.selectionManager.onDataViewChanged(void 0, void 0), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(void 0, void 0), 
                            this.pivotTableControl && this.pivotTableControl.clear(), _a.label = 6;

                          case 6:
                            return this.waitingForData = !1, [ 2 ];
                        }
                    });
                });
            }, TableEx.prototype.onAppendDataView = function(previousDataView, isDataComplete) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.updateHierarchyNavigators(isDataComplete), this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            [ 4, this.renderControl(!1, null, null) ];

                          case 1:
                            return _a.sent(), [ 2 ];
                        }
                    });
                });
            }, TableEx.prototype.onNewDataView = function(previousDataView, viewport, isDataComplete) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var visibleRowItemStart, visibleColumnItemStart, previousRowLeafCount, hostTooltipService;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return (this.updatePersistedWidths(previousDataView), visibleRowItemStart = this.getPreviousVisibleRowStart(), 
                            visibleColumnItemStart = this.getPreviousVisibleColumnStart(), previousRowLeafCount = this.rowHierarchyNavigator ? this.rowHierarchyNavigator.getHierarchyLeafCount() : 0, 
                            hostTooltipService = this.columnHierarchyNavigator ? this.columnHierarchyNavigator.getHierarchyLeafCount() : 0, 
                            this.createOrUpdateControlAndNavigators(isDataComplete), this.sizeManager.onDataViewChanged(), 
                            this.selectionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.interactionManager && this.interactionManager.onDataViewChanged(this.rowHierarchyNavigator, this.columnHierarchyNavigator), 
                            this.suppressNextRender && previousRowLeafCount === this.rowHierarchyNavigator.getHierarchyLeafCount() && hostTooltipService === this.columnHierarchyNavigator.getHierarchyLeafCount()) ? [ 3, 2 ] : (this.pivotTableControl.clear(), 
                            this.pivotTableControl.setWidth(viewport.width), this.pivotTableControl.setHeight(viewport.height), 
                            hostTooltipService = this.hostServices.tooltips(), this.options.tooltipsEnabled && hostTooltipService && hostTooltipService.enabled() ? this.tooltipType = 1 : this.tooltipType = 0, 
                            this.interactionManager && this.interactionManager.setTooltipsEnabled(1 === this.tooltipType), 
                            this.binder.updateFormattingProperties(this.dataView, this.formattingProperties, this.style, 0 === this.tooltipType), 
                            this.applyContainerStyle(), [ 4, this.renderControl(!0, this.getVisibleRowStart(visibleRowItemStart, visuals.TableExSortingManager.hasSortingChanged(previousDataView, this.dataView)), this.getVisibleColumnStart(visibleColumnItemStart)) ]);

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.suppressNextRender = !1, [ 2 ];
                        }
                    });
                });
            }, TableEx.prototype.applyContainerStyle = function() {
                var valueContainerFontProperties = this.binder.getColumnHeaderContainerFontInfo().fontProperties, floatingValueContainerElement = this.pivotTableControl.getColumnHeaderContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                floatingValueContainerElement = this.pivotTableControl.getFloatingRowHeaderContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                valueContainerFontProperties = this.binder.getValueContainerFontInfo().fontProperties, 
                floatingValueContainerElement = this.pivotTableControl.getBodyCellContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
                floatingValueContainerElement = this.pivotTableControl.getFloatingBodyCellContainer();
                this.removeContainerStyles(floatingValueContainerElement), visuals.FontProperties.applyStyleToElement(valueContainerFontProperties, floatingValueContainerElement);
            }, TableEx.prototype.removeContainerStyles = function(element) {
                return element.style.removeProperty("font-weight"), element.style.removeProperty("font-style"), 
                element;
            }, TableEx.prototype.onClearSelection = function() {
                this.selectionManager.clearLocal();
            }, TableEx.prototype.onRestoreSelection = function(result) {
                if (this.selectionManager) {
                    result = this.selectionManager.restoreSelection(result.selection);
                    return this.renderSelection(), result;
                }
                return !1;
            }, TableEx.prototype.updateHierarchyNavigators = function(isDataComplete) {
                this.rowHierarchyNavigator.update(this.dataView.table.rows, this.dataView.table.identity, this.dataView.table.totals, isDataComplete, this.dataView.table.columns, this.formattingProperties), 
                this.columnHierarchyNavigator.update(this.dataView.table.columns);
            }, TableEx.prototype.renderControl = function(mode, visibleRowStart, visibleColumnStart) {
                var deferred = this.hostServices.promiseFactory().defer(), mode = mode ? PivotTableRenderingMode.ClearMeasurement : PivotTableRenderingMode.Incremental;
                return visibleRowStart || visibleColumnStart ? this.pivotTableControl.makeVisible(mode, visibleRowStart, visibleColumnStart, function(error) {
                    error ? deferred.reject(error) : deferred.resolve(null);
                }) : this.pivotTableControl.render(mode, function(error) {
                    error ? deferred.reject(error) : deferred.resolve(null);
                }), deferred.promise;
            }, TableEx.prototype.getPreviousVisibleRowStart = function() {
                if (this.pivotTableControl) {
                    var visibleRowStart = this.pivotTableControl.getVisibleRowStart();
                    if (!visibleRowStart) return null;
                    var visibleRowStartItem = this.rowHierarchyNavigator.getHierarchyLeafAt(visibleRowStart.rowIndex);
                    return visibleRowStartItem ? {
                        item: visibleRowStartItem,
                        offset: visibleRowStart.visibleHeight
                    } : null;
                }
            }, TableEx.prototype.getPreviousVisibleColumnStart = function() {
                if (this.pivotTableControl) {
                    var visibleColumnStart = this.pivotTableControl.getVisibleColumnStart();
                    if (!visibleColumnStart) return null;
                    var visibleColumnStartItem = this.columnHierarchyNavigator.getHierarchyLeafAt(visibleColumnStart.columnIndex);
                    return visibleColumnStartItem ? {
                        item: visibleColumnStartItem,
                        offset: visibleColumnStart.visibleWidth
                    } : null;
                }
            }, TableEx.prototype.getVisibleRowStart = function(previousVisibleRowStart, matchingRowStartItem) {
                if (!previousVisibleRowStart) return null;
                if (0 === this.pivotTableControl.getViewport().top) return null;
                if (matchingRowStartItem) return {
                    rowIndex: 0,
                    visibleHeight: Number.MAX_VALUE
                };
                matchingRowStartItem = visuals.TableExSelectionManager.getMatchingRow(previousVisibleRowStart.item, this.rowHierarchyNavigator.getRows());
                return matchingRowStartItem && this.rowHierarchyNavigator.isLeaf(matchingRowStartItem) ? {
                    rowIndex: this.rowHierarchyNavigator.getLeafIndex(matchingRowStartItem),
                    visibleHeight: previousVisibleRowStart.offset
                } : null;
            }, TableEx.prototype.getVisibleColumnStart = function(previousVisibleColumnStart) {
                if (!previousVisibleColumnStart) return null;
                var matchingColumnStartItem = visuals.TableExSelectionManager.getMatchingColumnHeader(previousVisibleColumnStart.item, this.columnHierarchyNavigator.getColumns());
                return matchingColumnStartItem && this.columnHierarchyNavigator.isLeaf(matchingColumnStartItem) ? {
                    columnIndex: this.columnHierarchyNavigator.getLeafIndex(matchingColumnStartItem),
                    visibleWidth: previousVisibleColumnStart.offset
                } : null;
            }, TableEx.prototype.renderSelection = function() {
                this.pivotTableControl.render(PivotTableRenderingMode.ClearRendering);
            }, TableEx.prototype.createOrUpdateControlAndNavigators = function(tableExContainer) {
                var isA11yTable, _this = this;
                this.rowHierarchyNavigator || (this.rowHierarchyNavigator = new visuals.TableExRowHierarchyNavigator(this.tablixPropertyManager.tablixProperties, this.hostServices), 
                this.columnHierarchyNavigator = new visuals.TableExColumnHierarchyNavigator()), 
                this.updateHierarchyNavigators(tableExContainer), this.pivotTableControl || (isA11yTable = {
                    interactivityIndicatorEnabled: this.options.interactivityIndicatorEnabled,
                    selectionEnabled: this.options.selection && this.options.selection.enabled,
                    sortIconEnabled: this.options.sorting && this.options.sorting.showActiveSortIcon,
                    sortingEnabled: this.options.sorting && this.options.sorting.enabled,
                    hyperlinksEnabled: this.featureSwitches.conditionalTablixWebURL,
                    tablixProperties: this.tablixPropertyManager.tablixProperties,
                    onBindRowHeader: function(item) {
                        return _this.onBindRowHeader(item);
                    },
                    onHyperlinkClicked: function(url, event) {
                        return _this.onHyperlinkClicked(url, event);
                    }
                }, (tableExContainer = document.createElement("div")).className = "tableExContainer", 
                this.element.append(tableExContainer), this.binder = new visuals.TableExBinder(isA11yTable, this.selectionManager, tableExContainer, this.hostServices), 
                isA11yTable = this.featureSwitches.a11yTable, this.pivotTableControl = new PivotTableControl(tableExContainer, this.sizeManager, this.createControlOptions(), isA11yTable, this.hostServices.getLocalizedString(TablixUtils.RowSelection), this.hostServices.getLocalizedString(TablixUtils.SelectRow), this.onVerticalScrollButtonClick.bind(this), this.onHorizontalScrollButtonClick.bind(this)), 
                this.binder.getViewport = function() {
                    return _this.pivotTableControl.getViewport();
                }.bind(this), this.binder.isHeaderAutoWidth = function(columnHeader) {
                    return void 0 === _this.sizeManager.getColumnWidth(columnHeader);
                }.bind(this), this.binder.isBodyCellAutoWidth = function(columnHeader) {
                    columnHeader = _this.columnHierarchyNavigator.getColumns()[columnHeader.position.column.index];
                    return void 0 === _this.sizeManager.getColumnWidth(columnHeader);
                }.bind(this), this.pivotTableControl.setClassName("tableEx"), this.pivotTableControl.setRowNavigator(this.rowHierarchyNavigator), 
                this.pivotTableControl.setColumnNavigator(this.columnHierarchyNavigator), this.pivotTableControl.setBinder(this.binder));
            }, TableEx.prototype.createControlOptions = function() {
                var _this = this, scrollingEnabled = this.options.scrolling.enabled, columnResizingEnabled = this.options.columnResizing.enabled;
                this.options.tooltipsEnabled && (this.interactionManager = this.interactionManager = new visuals.TableExInteractionManager(this.tooltipService, this.selectionManager, this.hostServices.getLocalizedString(TablixUtils.TotalLabel)));
                var interactionManager = this.interactionManager;
                return this.options.selection.enabled ? {
                    rowHeaderClickHandler: null,
                    rowHeaderContextMenuHandler: null,
                    rowHeaderInteractionHandler: null,
                    rowHeaderFocusHandler: null,
                    rowHeaderExpandCollapseHandler: null,
                    columnHeaderClickHandler: function(columnHeader, mouseEvent) {
                        return _this.onColumnHeaderClick(columnHeader, mouseEvent);
                    },
                    columnHeaderContextMenuHandler: null,
                    columnHeaderInteractionHandler: interactionManager ? interactionManager.getHeaderHandler() : null,
                    columnHeaderFocusHandler: function(columnHeader) {
                        return _this.onColumnHeaderFocus(columnHeader);
                    },
                    bodyCellClickHandler: function(bodyCell, mouseEvent, rowIndex) {
                        return _this.onBodyCellClick(bodyCell, mouseEvent, rowIndex);
                    },
                    bodyCellContextMenuHandler: function(bodyCell, mouseEvent) {
                        return _this.onBodyCellContextMenu(bodyCell, mouseEvent);
                    },
                    bodyCellInteractionHandler: interactionManager ? interactionManager.getBodyHandler() : null,
                    bodyCellFocusHandler: function(item, rowIndex) {
                        return _this.onBodyCellFocus(item, rowIndex);
                    },
                    cornerCellClickHandler: null,
                    cornerCellContextMenuHandler: null,
                    cornerCellInteractionHandler: null,
                    cornerCellFocusHandler: null,
                    cellContentActivationHandler: function(element, mouseEvent) {
                        return _this.onContentActivation(element, mouseEvent);
                    },
                    whitespaceClickHandler: function(mouseEvent) {
                        return _this.onWhitespaceClick();
                    },
                    scrollingEnabled: scrollingEnabled,
                    columnResizingEnabled: columnResizingEnabled,
                    rowLevelResizingEnabled: !1,
                    onScroll: function() {
                        return _this.onScroll();
                    }
                } : {
                    rowHeaderClickHandler: null,
                    rowHeaderContextMenuHandler: null,
                    rowHeaderInteractionHandler: null,
                    rowHeaderFocusHandler: null,
                    rowHeaderExpandCollapseHandler: null,
                    columnHeaderClickHandler: null,
                    columnHeaderContextMenuHandler: null,
                    columnHeaderInteractionHandler: interactionManager ? interactionManager.getHeaderHandler() : null,
                    columnHeaderFocusHandler: null,
                    bodyCellClickHandler: null,
                    bodyCellContextMenuHandler: null,
                    bodyCellInteractionHandler: interactionManager ? interactionManager.getBodyHandler() : null,
                    bodyCellFocusHandler: null,
                    cornerCellClickHandler: null,
                    cornerCellContextMenuHandler: null,
                    cornerCellInteractionHandler: null,
                    cornerCellFocusHandler: null,
                    cellContentActivationHandler: null,
                    whitespaceClickHandler: null,
                    scrollingEnabled: scrollingEnabled,
                    columnResizingEnabled: columnResizingEnabled,
                    rowLevelResizingEnabled: !1,
                    onScroll: function() {
                        return _this.onScroll();
                    }
                };
            }, TableEx.prototype.onScroll = function() {
                this.interactionManager && !this.interactionManager.tooltipVisible() && this.interactionManager.hideTooltip();
            }, TableEx.prototype.onHyperlinkClicked = function(url, event) {
                this.hostServices.onHyperlinkClick(url, event);
            }, TableEx.prototype.onBodyCellClick = function(bodyCell, mouseEvent, rowIndex) {
                var selectionMode;
                null != mouseEvent && mouseEvent.preventDefault(), this.pivotTableControl.restoreFocusOnNextBlur(), 
                bodyCell ? (this.featureSwitches.a11yTable && this.pivotTableControl.setAsFocus(bodyCell.position.row.index, bodyCell.position.column.index, "body"), 
                this.selectionManager.isDrillingEnabled(bodyCell, mouseEvent) || (selectionMode = void 0, 
                selectionMode = BrowserUtils.isCtrlOrMeta(mouseEvent) || 1 === this.hostServices.dataMultiSelectMode() ? 3 : mouseEvent.shiftKey ? 1 : 0, 
                this.selectionManager.onBodyCellClick(bodyCell, selectionMode), this.renderSelection())) : (this.featureSwitches.a11yTable && this.pivotTableControl.setAsFocus(rowIndex, -1, "body"), 
                null != mouseEvent && mouseEvent.shiftKey ? this.selectionManager.onBodyCellClick(void 0, 1, rowIndex) : this.selectionManager.onBodyCellClick(void 0, 3, rowIndex), 
                this.renderSelection(), this.onBodyCellFocus(void 0, rowIndex));
            }, TableEx.prototype.onBodyCellContextMenu = function(bodyCell, mouseEvent) {
                mouseEvent.stopPropagation(), mouseEvent.preventDefault(), this.selectionManager.onBodyCellContextMenu(bodyCell, mouseEvent);
            }, TableEx.prototype.onVerticalScrollButtonClick = function(rowStart, message) {
                message = this.hostServices.getLocalizedString("Table_Location_Vertical", this.getAriaRowIndex(rowStart), this.getAriaRowIndex(message));
                this.hostServices.alertScreenReader(message);
            }, TableEx.prototype.onHorizontalScrollButtonClick = function(columnStart, message) {
                message = this.hostServices.getLocalizedString("Table_Location_Horizontal", this.getAriaColIndex(columnStart), this.getAriaColIndex(message));
                this.hostServices.alertScreenReader(message);
            }, TableEx.prototype.getAriaRowIndex = function(rowIndex) {
                return rowIndex + 1;
            }, TableEx.prototype.getAriaColIndex = function(colIndex) {
                return colIndex + 1;
            }, TableEx.prototype.onBodyCellFocus = function(bodycell, additionalInfo_1) {
                var _a, column, _c, rowSelectionLabel, content;
                bodycell ? (_a = bodycell.isRowGrandTotal ? this.rowHierarchyNavigator.getFloatingHierarchyLeafAt(bodycell.position.row.index) : this.rowHierarchyNavigator.getHierarchyLeafAt(bodycell.position.row.index), 
                column = this.columnHierarchyNavigator.getHierarchyLeafAt(bodycell.position.column.index), 
                content = this.rowHierarchyNavigator.getIntersection(_a, column), content = [ this.hostServices.getLocalizedString("DataGrid_Cell", null !== (_a = bodycell.altText) && void 0 !== _a ? _a : content.tooltipContent, column.metadata.displayName, TableExUtils.getAriaRowIndex(bodycell.position.row.index)) ], 
                TablixUtils.getUrlScheme(column.metadata, bodycell.tooltipContent) !== UrlScheme.NONE && (_c = this.hostServices.getLocalizedString("RichTextbox_Link_DefaultText"), 
                content.unshift(_c)), null !== (_c = null === (_c = bodycell.icon) || void 0 === _c ? void 0 : _c.value) && void 0 !== _c && _c.descriptionKey && (rowSelectionLabel = this.hostServices.getLocalizedString(bodycell.icon.value.descriptionKey), 
                content.unshift(rowSelectionLabel)), this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage({
                    displayNameParts: [],
                    valueParts: [],
                    concatenatedParts: [ [ 0 ] ]
                }, content))) : (rowSelectionLabel = this.hostServices.getLocalizedString(TablixUtils.RowSelection), 
                content = this.rowHierarchyNavigator.getHierarchyLeafAt(additionalInfo_1), content = this.selectionManager.isItemSelected(content) ? this.hostServices.getLocalizedString(TablixUtils.SelectedLabel) : this.hostServices.getLocalizedString(TablixUtils.NotSelectedLabel), 
                additionalInfo_1 = [ this.hostServices.getLocalizedString("DataGrid_Cell", content, rowSelectionLabel, TableExUtils.getAriaRowIndex(additionalInfo_1)) ], 
                this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage({
                    displayNameParts: [],
                    valueParts: [],
                    concatenatedParts: [ [ 0 ] ]
                }, additionalInfo_1)));
            }, TableEx.prototype.onColumnHeaderClick = function(columnHeader, shouldAppendSortedColumn) {
                this.featureSwitches.a11yTable && (this.pivotTableControl.restoreFocusOnNextBlur(), 
                this.pivotTableControl.setAsFocus(columnHeader.position.row.index, columnHeader.position.column.index, "header")), 
                this.dataView && this.options.sorting.enabled && (shouldAppendSortedColumn = this.featureSwitches.tableMultiSort && shouldAppendSortedColumn.shiftKey, 
                this.sortingManager.sort(columnHeader, this.dataView.table.columns, shouldAppendSortedColumn));
            }, TableEx.prototype.onColumnHeaderFocus = function(columnHeader) {
                var columnSortMessage, info = {
                    displayNameParts: [ columnHeader.metadata.displayName ],
                    valueParts: [],
                    concatenatedParts: [ [ 0 ] ]
                }, additionalInfo = this.columnHierarchyNavigator.getItemsByLevel(columnHeader.position.row.index), headerIndexInLevel = additionalInfo.indexOf(columnHeader) + 1, additionalInfo = additionalInfo.length, additionalInfo = [ this.hostServices.getLocalizedString("Visual_Tablix_ColumnHeader"), this.hostServices.getLocalizedString("Generic_ListPosition", headerIndexInLevel, additionalInfo) ];
                switch (columnHeader.metadata.sort) {
                  case 1:
                    columnSortMessage = this.hostServices.getLocalizedString("Field_Sorted_Ascending");
                    break;

                  case 2:
                    columnSortMessage = this.hostServices.getLocalizedString("Field_Sorted_Descending");
                    break;

                  default:
                    columnSortMessage = this.hostServices.getLocalizedString("Field_Sorting_Possible");
                }
                columnSortMessage && additionalInfo.push(columnSortMessage), this.hostServices.alertScreenReader(visuals.PivotTableInteractivityUtils.getScreenReaderMessage(info, additionalInfo));
            }, TableEx.prototype.onContentActivation = function(link, event) {
                link = link.querySelector("a");
                link && link.dispatchEvent(event);
            }, TableEx.prototype.onWhitespaceClick = function() {
                this.selectionManager.onWhitespaceClick(), this.renderSelection();
            }, TableEx.prototype.onBindRowHeader = function(item) {
                this.needsMoreData(item) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, TableEx.prototype.needsMoreData = function(item) {
                if (this.waitingForData || !this.dataView || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var loadMoreThreshold = this.rowHierarchyNavigator.getHierarchyLeafCount() * TablixUtils.PreferredLoadMoreThreshold;
                return this.rowHierarchyNavigator.getLeafIndex(item) >= loadMoreThreshold;
            }, TableEx.prototype.getFormattingModel = function() {
                if (this.dataView) return this.tablixPropertyManager.getFormattingModel(this.hostServices, this.formattingProperties, this.dataView, TablixType.TableEx, void 0, this.featureSwitches, this.style);
            }, TableEx.prototype.enumerateObjectInstances = function(options) {
                var _this = this, enumeration = new visuals.ObjectEnumerationBuilder();
                return this.dataView && this.tablixPropertyManager.enumerateObjectInstances(options, enumeration, this.dataView, TablixType.TableEx, function(key) {
                    for (var _a, args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                    return (_a = _this.hostServices).getLocalizedString.apply(_a, __spreadArray([ key ], args || []));
                }, this.featureSwitches, void 0, this.style), enumeration.complete();
            }, TableEx.prototype.enumerateObjectRepetition = function() {
                var enumeration = [];
                return this.dataView && this.tablixPropertyManager.enumerateObjectRepetition(enumeration, this.dataView, TablixType.TableEx, this.featureSwitches.conditionalTablixWebURL), 
                enumeration;
            }, TableEx;
        }();
        visuals.TableEx = TableEx;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var MatrixHierarchyNavigator = powerbi.visuals.MatrixHierarchyNavigator;
        !function(PivotTableInteractivityUtils) {
            function getBodyCellInfo(item, valueLabel, columnHeaderInfo, _f) {
                void 0 === columnHeaderInfo && (columnHeaderInfo = !0);
                var columnItem = item.columnItem, _c = item.rowItem, partIndex = 0, parts = {
                    displayNameParts: [],
                    valueParts: [],
                    concatenatedParts: [],
                    headerParts: [],
                    otherType: {}
                }, kpi = _c && !_.isEmpty(_c.values), rowHeaderInfo = _c && getBodyGroupingDataItems(_c, valueLabel, columnHeaderInfo, _f);
                rowHeaderInfo && ((_c = parts.displayNameParts).push.apply(_c, rowHeaderInfo.displayNameParts || []), 
                (_c = parts.valueParts).push.apply(_c, rowHeaderInfo.valueParts || []), (_c = parts.headerParts).push.apply(_c, _.map(rowHeaderInfo.valueParts, function() {
                    return !0;
                })), parts.concatenatedParts.push(_.map(rowHeaderInfo.displayNameParts, function() {
                    return partIndex++;
                })));
                columnHeaderInfo = columnItem && getBodyGroupingDataItems(columnItem, valueLabel, columnHeaderInfo, _f);
                return columnHeaderInfo && ((_f = parts.displayNameParts).push.apply(_f, columnHeaderInfo.displayNameParts || []), 
                (_f = parts.valueParts).push.apply(_f, columnHeaderInfo.valueParts || []), (_f = parts.headerParts).push.apply(_f, _.map(columnHeaderInfo.valueParts, function() {
                    return !0;
                })), parts.concatenatedParts.push(_.map(columnHeaderInfo.displayNameParts, function() {
                    return partIndex++;
                }))), kpi && (parts.displayNameParts.push(item.columnMetadata.displayName), parts.concatenatedParts.push([ partIndex++ ]), 
                parts.headerParts.push(!1), item.isKpi ? (kpi = {
                    metadata: item.columnMetadata.kpi,
                    value: item.tooltipContent
                }, (parts.otherType[parts.displayNameParts.length - 1] = {}).kpiValue = kpi, parts.valueParts.push(item.tooltipContent)) : _.isEmpty(item.tooltipContent) || parts.valueParts.push(item.tooltipContent)), 
                parts;
            }
            function reconcileDataHierarchyParts(partCollection) {
                for (var dataItems = {
                    headers: _.uniq(_.flatten(_.map(partCollection, function(p) {
                        return p.displayNameParts;
                    }))),
                    isHeader: {},
                    values: []
                }, dataItemsValues = dataItems.values, masterHeader = dataItems.headers, dataItemsIsHeader = dataItems.isHeader, nameToMasterHeaderIndex = {}, i = 0; i < masterHeader.length; i++) nameToMasterHeaderIndex[masterHeader[i]] = i;
                for (var _i = 0, partCollection_1 = partCollection; _i < partCollection_1.length; _i++) {
                    for (var part = partCollection_1[_i], thisValues = _.fill(new Array(masterHeader.length), ""), i = 0; i < part.displayNameParts.length; i++) {
                        var thisValue = part.valueParts[i], headerIndex = nameToMasterHeaderIndex[part.displayNameParts[i]];
                        thisValues[headerIndex] = thisValue, part.headerParts && (dataItems.isHeader[headerIndex] = part.headerParts[i]);
                    }
                    dataItemsValues.push(thisValues);
                }
                if (!_.isEmpty(partCollection) && partCollection[0].headerParts) for (var n = 0; n < dataItemsValues.length; n++) !function(n) {
                    for (var currentRow = dataItemsValues[n], matchingRowIndices = [], i = n + 1; i < dataItemsValues.length; i++) {
                        var thisRow = dataItemsValues[i];
                        _.every(thisRow, function(value, k) {
                            return dataItemsIsHeader[k] && value === currentRow[k] || !dataItemsIsHeader[k] && ("" === value || "" === currentRow[k]);
                        }) && matchingRowIndices.push(i);
                    }
                    if (0 < matchingRowIndices.length) for (var holes = _.reduce(currentRow, function(accumulator, value, i) {
                        return "" === value && accumulator.push(i), accumulator;
                    }, []), _a = 0, matchingRowIndices_1 = matchingRowIndices; _a < matchingRowIndices_1.length; _a++) for (var match = matchingRowIndices_1[_a], matchingRow = dataItemsValues[match], i = 0; i < holes.length; i++) {
                        var hole = holes[i], thisValue = matchingRow[hole];
                        "" !== thisValue && (currentRow[hole] = thisValue, holes.splice(i, 1), i--);
                    }
                    matchingRowIndices.sort(function(a, b) {
                        return b - a;
                    });
                    for (var _b = 0, matchingRowIndices_2 = matchingRowIndices; _b < matchingRowIndices_2.length; _b++) {
                        var indexToRemove = matchingRowIndices_2[_b];
                        dataItemsValues.splice(indexToRemove, 1);
                    }
                }(n);
                return dataItems;
            }
            function concatenatePartsToTooltipInfo(parts) {
                for (var tooltipItems = [], _i = 0, _a = parts.concatenatedParts; _i < _a.length; _i++) !function(concatenation) {
                    var itemIndex = _.filter(parts.displayNameParts, function(_, i) {
                        return -1 !== concatenation.indexOf(i);
                    }), lastItemIndex = _.filter(parts.valueParts, function(_, i) {
                        return -1 !== concatenation.indexOf(i);
                    });
                    (0 < itemIndex.length || 0 < lastItemIndex.length) && (tooltipItems.push({
                        displayName: itemIndex.join(" "),
                        value: lastItemIndex.join(" ")
                    }), parts.otherType && (itemIndex = _.first(concatenation), _.has(parts.otherType, String(itemIndex)) && (lastItemIndex = tooltipItems.length - 1, 
                    delete tooltipItems[lastItemIndex].value, tooltipItems[lastItemIndex] = __assign(__assign({}, tooltipItems[lastItemIndex]), parts.otherType[itemIndex]))));
                }(_a[_i]);
                return tooltipItems;
            }
            function getGroupingTooltipDataIems(valueParts, displayNameParts) {
                valueParts = getGroupingDataItems(valueParts, displayNameParts), displayNameParts = valueParts.displayNameParts, 
                valueParts = valueParts.valueParts;
                if (0 < displayNameParts.length || 0 < valueParts.length) return {
                    displayName: displayNameParts.join(" "),
                    value: valueParts.join(" ")
                };
            }
            function getBodyGroupingDataItems(headerItem, valueLabel, skipTotalHeaders, totalLabel) {
                void 0 === skipTotalHeaders && (skipTotalHeaders = !0);
                var metadataColumn = getHeaderLevelSources(headerItem), queryName = headerItem.queryName, metadataColumn = _.find(metadataColumn, function(column) {
                    return column.queryName === queryName;
                });
                return getGroupingDataItems(headerItem = metadataColumn && metadataColumn.isMeasure ? headerItem.parent : headerItem, valueLabel, skipTotalHeaders, totalLabel);
            }
            function getGroupingDataItems(headerItem, valueLabel, skipTotalHeaders, totalLabel) {
                void 0 === skipTotalHeaders && (skipTotalHeaders = !0);
                for (var displayNameParts = [], valueParts = []; headerItem; ) if (skipTotalHeaders && headerItem.isSubtotal) headerItem = headerItem.parent; else {
                    var metadataColumns = getHeaderLevelSources(headerItem);
                    if (!_.isEmpty(metadataColumns)) {
                        for (var compositeDisplayNameParts = [], _i = 0, metadataColumns_1 = metadataColumns; _i < metadataColumns_1.length; _i++) {
                            var metadataColumn = metadataColumns_1[_i];
                            compositeDisplayNameParts.push(metadataColumn.isMeasure ? valueLabel : metadataColumn.displayName);
                        }
                        displayNameParts.push(compositeDisplayNameParts.join(" ")), _.every(metadataColumns, function(c) {
                            return c.isMeasure;
                        }) ? valueParts.push(metadataColumns[0].displayName) : headerItem.isSubtotal ? valueParts.push(totalLabel) : valueParts.push(headerItem.tooltipValueFormatted);
                    }
                    headerItem = headerItem.parent;
                }
                return {
                    displayNameParts: displayNameParts = displayNameParts.reverse(),
                    valueParts: valueParts = valueParts.reverse()
                };
            }
            function explodeHeadersToBodyItems(rowHierarchyNavigator, columnHierarchyNavigator, rowLeaves, columnItems) {
                _.isEmpty(rowLeaves) && (rowLeaves = rowHierarchyNavigator.getHierarchyItems()), 
                _.isEmpty(columnItems) && (columnItems = columnHierarchyNavigator.getHierarchyItems()), 
                rowHierarchyNavigator.getLeaves(rowLeaves, rowLeaves = []);
                rowLeaves = _.filter(rowLeaves, function(leaf) {
                    return !leaf.isSubtotal;
                });
                columnHierarchyNavigator.getLeaves(columnItems, columnLeaves = []);
                for (var columnLeaves = _.filter(columnLeaves, function(leaf) {
                    return !leaf.isSubtotal;
                }), allBodyNodes = [], _i = 0, rowLeaves_1 = rowLeaves; _i < rowLeaves_1.length; _i++) for (var rowLeaf = rowLeaves_1[_i], _a = 0, columnLeaves_1 = columnLeaves; _a < columnLeaves_1.length; _a++) {
                    var columnLeaf = columnLeaves_1[_a];
                    allBodyNodes.push(rowHierarchyNavigator.getIntersection(rowLeaf, columnLeaf));
                }
                return allBodyNodes.filter(function(node) {
                    return !node.isSubtotal && !node.isGrandTotal;
                });
            }
            function getHeaderLevelSources(headerItem) {
                var sources = headerItem.hierarchyLevel && headerItem.hierarchyLevel.sources;
                return _.isEmpty(sources) ? [] : _.every(sources, function(source) {
                    return source.isMeasure;
                }) ? [ sources[headerItem.levelSourceIndex || 0] ] : sources;
            }
            PivotTableInteractivityUtils.getBodyCellInfo = getBodyCellInfo, PivotTableInteractivityUtils.getBodyCellTooltipInfo = function(item, valueLabel) {
                return concatenatePartsToTooltipInfo(getBodyCellInfo(item, valueLabel));
            }, PivotTableInteractivityUtils.getGivenBodyCellsInfo = function(items, rowHierarchyNavigator, numLeaves, valueLabel) {
                for (var partCollection = [], _i = 0, items_11 = items; _i < items_11.length; _i++) {
                    var item = items_11[_i];
                    partCollection.push(getBodyCellInfo(item, valueLabel));
                }
                var coveragePercentage = 0;
                return 0 != (numLeaves = rowHierarchyNavigator.getHierarchyLeafCount() * numLeaves.getHierarchyLeafCount()) && (coveragePercentage = Math.round(items.length / numLeaves * 100)), 
                __assign({
                    coveragePercentage: coveragePercentage
                }, reconcileDataHierarchyParts(partCollection));
            }, PivotTableInteractivityUtils.reconcileDataHierarchyParts = reconcileDataHierarchyParts, 
            PivotTableInteractivityUtils.concatenatePartsToTooltipInfo = concatenatePartsToTooltipInfo, 
            PivotTableInteractivityUtils.getCornerCellTooltipInfo = function(cornerCellItem) {
                return [ {
                    displayName: cornerCellItem.displayName
                } ];
            }, PivotTableInteractivityUtils.getHeaderTooltipInfo = function(headerItem, shouldAddNodeValue, tooltipItems, headerInfo, valueLabel) {
                return MatrixHierarchyNavigator.isNodeGrandTotal(headerItem) ? tooltipItems(headerItem) ? [ {
                    displayName: headerItem.tooltipValueFormatted
                } ] : [ {
                    displayName: headerInfo
                } ] : (tooltipItems = [], (headerInfo = getGroupingTooltipDataIems(headerItem, valueLabel)) && tooltipItems.push(headerInfo), 
                shouldAddNodeValue(headerItem) && tooltipItems.push({
                    displayName: valueLabel,
                    value: headerItem.valueFormatted
                }), tooltipItems);
            }, PivotTableInteractivityUtils.getGroupingTooltipDataIems = getGroupingTooltipDataIems, 
            PivotTableInteractivityUtils.getGroupingDataItems = getGroupingDataItems, PivotTableInteractivityUtils.getGivenGroupingDataItems = function(allBodyNodes, coveragePercentage, rowHierarchyNavigator, numLeaves, valueLabel) {
                allBodyNodes = explodeHeadersToBodyItems(rowHierarchyNavigator, numLeaves, allBodyNodes, coveragePercentage), 
                (coveragePercentage = 0) != (numLeaves = rowHierarchyNavigator.getHierarchyLeafCount() * numLeaves.getHierarchyLeafCount()) && (coveragePercentage = Math.round(allBodyNodes.length / numLeaves * 100));
                for (var partCollection = [], _i = 0, allBodyNodes_1 = allBodyNodes; _i < allBodyNodes_1.length; _i++) {
                    var node = allBodyNodes_1[_i];
                    partCollection.push(getBodyCellInfo(node, valueLabel));
                }
                return __assign({
                    coveragePercentage: coveragePercentage
                }, reconcileDataHierarchyParts(partCollection));
            }, PivotTableInteractivityUtils.explodeHeadersToBodyItems = explodeHeadersToBodyItems, 
            PivotTableInteractivityUtils.getCornerCellParts = function(cornerCellItem) {
                return {
                    displayNameParts: [ cornerCellItem.displayName ],
                    valueParts: [ null ]
                };
            }, PivotTableInteractivityUtils.getScreenReaderMessage = function(cellInfoParts, additionalInfo) {
                for (var message = [], i = 0; i < cellInfoParts.displayNameParts.length; i++) {
                    var part = cellInfoParts.displayNameParts[i], value = cellInfoParts.valueParts[i];
                    null != value && (part += ": " + value), message.push(part);
                }
                if (!_.isEmpty(additionalInfo)) for (var _i = 0, additionalInfo_2 = additionalInfo; _i < additionalInfo_2.length; _i++) {
                    var info = additionalInfo_2[_i];
                    message.push(info);
                }
                return message.join(". ");
            };
        }(visuals.PivotTableInteractivityUtils || (visuals.PivotTableInteractivityUtils = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(es6) {
    !function(powerbi) {
        !function(visuals) {
            visuals.importPivotTableModule = function() {}, visuals.importTableExModule = function() {}, 
            visuals.importMatrixModule = function() {}, visuals.importTableModule = function() {};
        }(powerbi.visuals || (powerbi.visuals = {}));
    }(es6.powerbi || (es6.powerbi = {}));
}(es6 = es6 || {}), function(powerbi) {
    !function(visuals) {
        visuals.initializePivotTablesFactoryES6 = function() {
            visuals.setCreatePivotTable(function(options, featureSwitches) {
                return es6.powerbi.visuals.importPivotTableModule().then(function(m) {
                    return new m.PivotTable(options, featureSwitches);
                });
            }), visuals.setCreateTableEx(function(options, featureSwitched) {
                return es6.powerbi.visuals.importTableExModule().then(function(m) {
                    return new m.TableEx(options, featureSwitched);
                });
            }), visuals.setCreateMatrix(function() {
                return es6.powerbi.visuals.importMatrixModule().then(function(m) {
                    return new m.Matrix();
                });
            }), visuals.setCreateTable(function() {
                return es6.powerbi.visuals.importTableModule().then(function(m) {
                    return new m.Table();
                });
            });
        };
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {});
this.parseTimeMarkers = this.parseTimeMarkers || {};
var marker = this.parseTimeMarkers['pivotTableVisuals.js'] || (this.parseTimeMarkers['pivotTableVisuals.js'] = {});
marker.endEval = window.jsCommon && window.jsCommon.performance && window.jsCommon.performance.now ? window.jsCommon.performance.now() : Date.now(); marker.isExternal = false;
