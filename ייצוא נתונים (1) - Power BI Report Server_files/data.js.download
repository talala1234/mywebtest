"use strict";

var powerbi, __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        return (extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        })(d, b);
    };
    return function(d, b) {
        if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        function __() {
            this.constructor = d;
        }
        extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
    };
}(), __spreadArray = this && this.__spreadArray || function(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
    return to;
}, __assign = this && this.__assign || function() {
    return (__assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) for (var p in s = arguments[i]) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        return t;
    }).apply(this, arguments);
}, __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; 0 <= i; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : 3 < c ? d(target, key, r) : d(target, key)) || r);
    return 3 < c && r && Object.defineProperty(target, key, r), r;
}, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P = P || Promise)(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            var value;
            result.done ? resolve(result.value) : ((value = result.value) instanceof P ? value : new P(function(resolve) {
                resolve(value);
            })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}, __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (1 & t[0]) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
    };
    return "function" == typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return function(op) {
                if (f) throw new TypeError("Generator is already executing.");
                for (;_; ) try {
                    if (f = 1, y && (t = 2 & op[0] ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 
                    0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                    switch (y = 0, (op = t ? [ 2 & op[0], t.value ] : op)[0]) {
                      case 0:
                      case 1:
                        t = op;
                        break;

                      case 4:
                        return _.label++, {
                            value: op[1],
                            done: !1
                        };

                      case 5:
                        _.label++, y = op[1], op = [ 0 ];
                        continue;

                      case 7:
                        op = _.ops.pop(), _.trys.pop();
                        continue;

                      default:
                        if (!(t = 0 < (t = _.trys).length && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
                            _ = 0;
                            continue;
                        }
                        if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (6 === op[0] && _.label < t[1]) {
                            _.label = t[1], t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2], _.ops.push(op);
                            break;
                        }
                        t[2] && _.ops.pop(), _.trys.pop();
                        continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [ 6, e ], y = 0;
                } finally {
                    f = t = 0;
                }
                if (5 & op[0]) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: !0
                };
            }([ n, v ]);
        };
    }
};

!function(powerbi) {
    !function(telemetry) {
        var Utility = jsCommon.Utility, telemetryEventFactory = powerbi.telemetryEventFactory, EventFactories = powerbi.telemetry.EventFactories;
        Utility ? Utility.generateGuid : Function.prototype;
        telemetry.DataQueryDataEventName = "PBI.Data.QueryData", telemetry.DataQueryData = EventFactories[telemetry.DataQueryDataEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataQueryDataEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                optionalParameters: [ "requestId", "synchronous", "fromCache", "resultCount" ],
                loggers: telemetry.DataQueryDataLoggers
            });
        }, telemetry.DataQueryCancellationEventName = "PBI.Data.QueryCancellation", telemetry.DataQueryCancellation = EventFactories[telemetry.DataQueryCancellationEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataQueryCancellationEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.DataQueryCancellationLoggers,
                logRatio: 1e-4
            });
        }, telemetry.DataClientCacheHitEventName = "PBI.Data.ClientCacheHit", telemetry.DataClientCacheHit = EventFactories[telemetry.DataClientCacheHitEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataClientCacheHitEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.DataClientCacheHitLoggers,
                logRatio: 1e-4
            });
        }, telemetry.DataGetConceptualSchemaEventName = "PBI.Data.GetConceptualSchema", 
        telemetry.DataGetConceptualSchema = EventFactories[telemetry.DataGetConceptualSchemaEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataGetConceptualSchemaEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                optionalParameters: [ "requestId" ],
                loggers: telemetry.DataGetConceptualSchemaLoggers
            });
        }, telemetry.DataClearConceptualSchemaCacheEventName = "PBI.Data.ClearConceptualSchemaCache", 
        telemetry.DataClearConceptualSchemaCache = EventFactories[telemetry.DataClearConceptualSchemaCacheEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataClearConceptualSchemaCacheEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.DataClearConceptualSchemaCacheLoggers
            });
        }, telemetry.DataExecuteQueryEventName = "PBI.Data.ExecuteQuery", telemetry.DataExecuteQuery = EventFactories[telemetry.DataExecuteQueryEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataExecuteQueryEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                optionalParameters: [ "requestId" ],
                loggers: telemetry.DataExecuteQueryLoggers
            });
        }, telemetry.DataDsrToDataViewEventName = "PBI.Data.DsrToDataView", telemetry.DataDsrToDataView = EventFactories[telemetry.DataDsrToDataViewEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataDsrToDataViewEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                optionalParameters: [ "jsonparse", "categorical", "table", "tree", "matrix", "single", "script" ],
                loggers: telemetry.DataDsrToDataViewLoggers,
                logRatio: 1e-4
            });
        }, telemetry.DataSampledDataViewKindAccessEventName = "PBI.Data.SampledDataViewKindAccess", 
        telemetry.DataSampledDataViewKindAccess = EventFactories[telemetry.DataSampledDataViewKindAccessEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataSampledDataViewKindAccessEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.DataSampledDataViewKindAccessLoggers,
                logRatio: 1e-4
            });
        }, telemetry.DataDataViewKindAccessEventName = "PBI.Data.DataViewKindAccess", telemetry.DataDataViewKindAccess = EventFactories[telemetry.DataDataViewKindAccessEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.DataDataViewKindAccessEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.DataDataViewKindAccessLoggers
            });
        };
    }(powerbi.telemetry || (powerbi.telemetry = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var DsrDataReader = function() {
                function DsrDataReader(host, communication, telemetryService, featureSwitches, timeoutService, delayedQueryResultResolver, preferredMaxConnections, queryContextProvider) {
                    this.proxy = new dsr.ExecuteSemanticQueryProxy(host, communication, timeoutService, telemetryService, delayedQueryResultResolver, preferredMaxConnections, featureSwitches, queryContextProvider), 
                    this.featureSwitches = featureSwitches, this.telemetryService = telemetryService;
                }
                return DsrDataReader.prototype.execute = function(options) {
                    return this.proxy.execute(options);
                }, DsrDataReader.prototype.transform = function(obj, kinds, perfId, performanceActivity) {
                    return void 0 === obj ? {
                        dataView: {
                            metadata: {
                                columns: []
                            },
                            error: {
                                code: "UndefinedData"
                            }
                        }
                    } : dsr.read(kinds, obj, this.featureSwitches, this.telemetryService, perfId, performanceActivity);
                }, DsrDataReader.prototype.stopCommunication = function() {
                    this.proxy.stopCommunication();
                }, DsrDataReader.prototype.resumeCommunication = function() {
                    this.proxy.resumeCommunication();
                }, Object.defineProperty(DsrDataReader.prototype, "cache", {
                    get: function() {
                        return this.proxy.cache();
                    },
                    enumerable: !1,
                    configurable: !0
                }), DsrDataReader.prototype.setLocalCacheResult = function(options, dataAsObject) {
                    this.proxy.setLocalCacheResult(options, dataAsObject);
                }, DsrDataReader.prototype.setPreferredMaxConnections = function(max) {
                    this.proxy.setPreferredMaxConnections(max);
                }, DsrDataReader;
            }();
            dsr.DsrDataReader = DsrDataReader;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var BingSocialDataReader = function() {
                function BingSocialDataReader(host, httpService, options) {
                    options = options || {}, this.promiseFactory = host.promiseFactory(), this.client = options.client || new bingSocial.BingSocialClient(httpService), 
                    this.tileRequestDataFactory = options.tileRequestDataFactory || new bingSocial.TileRequestDataFactory();
                }
                return BingSocialDataReader.prototype.execute = function(tileRequestData) {
                    var deferred = tileRequestData.command, searchKey = deferred.searchKey, tileRequestData = deferred.queryType;
                    if (!searchKey || !tileRequestData) return null;
                    deferred = this.promiseFactory.defer(), tileRequestData = this.tileRequestDataFactory.getTileRequestData(tileRequestData);
                    return tileRequestData ? this.client.requestData(deferred, searchKey, tileRequestData) : deferred.reject(), 
                    powerbi.createRejectablePromise2(deferred);
                }, BingSocialDataReader.prototype.transform = function(obj) {
                    return {
                        dataView: obj
                    };
                }, BingSocialDataReader;
            }();
            bingSocial.BingSocialDataReader = BingSocialDataReader;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_1;
    (function(bingSocial) {
        !function(ChartDataViewConstructorUtils) {
            function createMetadataColumn(name, columnIndex, roleName, valueType, colors) {
                var metadataColumn = {};
                metadataColumn[roleName] = !0;
                metadataColumn = {
                    displayName: name,
                    queryName: name,
                    index: columnIndex,
                    isMeasure: !valueType,
                    type: valueType || powerbi.ValueType.fromDescriptor({
                        numeric: !0
                    }),
                    roles: metadataColumn
                };
                return metadataColumn = colors ? powerbi.Prototype.inherit(metadataColumn, function(c) {
                    return c.objects = {
                        dataPoint: {
                            fill: {
                                solid: {
                                    color: colors[name]
                                }
                            }
                        }
                    };
                }) : metadataColumn;
            }
            function getFieldFromString(obj, fieldName) {
                for (var _i = 0, fields_1 = fieldName.split("."); _i < fields_1.length; _i++) {
                    var field = fields_1[_i];
                    if (!(null != obj && field in obj)) return null;
                    obj = obj[field];
                }
                return obj;
            }
            ChartDataViewConstructorUtils.createMetadataColumn = createMetadataColumn, ChartDataViewConstructorUtils.getFieldFromString = getFieldFromString, 
            ChartDataViewConstructorUtils.createDataView = function(data, fieldName, categoryRoleName, valuesRoleName, dataView) {
                void 0 === (dataView = dataView || {}).percentize && (dataView.percentize = !0);
                var columnRef = data_1.SQExprBuilder.columnRef(data_1.SQExprBuilder.entity(null, "table"), "Column");
                return (dataView = data_1.createCategoricalDataViewBuilder().withCategory(function(data, identityField, fieldName, categoryRoleName, mapping) {
                    for (var categoryValues = [], _i = 0, data_2 = data; _i < data_2.length; _i++) {
                        var fieldVal = getFieldFromString(data_2[_i], fieldName);
                        mapping && !(fieldVal = "function" == typeof mapping ? mapping(fieldVal) : mapping[fieldVal]) || categoryValues.push(fieldVal);
                    }
                    return {
                        source: createMetadataColumn(_.last(fieldName.split(".")), 0, categoryRoleName, powerbi.ValueType.fromDescriptor({
                            text: !0
                        })),
                        identityFrom: {
                            fields: [ identityField ]
                        },
                        values: categoryValues
                    };
                }(data, columnRef, fieldName, categoryRoleName, dataView.mapping)).withValues(function(columnMetadata, min, max) {
                    var dataValues = _.map(columnMetadata, function(item) {
                        return item.Count;
                    }), columnMetadata = createMetadataColumn("Count", 1, min);
                    max.percentize && (dataValues = function(dataValues, valueMetadataColumn) {
                        return valueMetadataColumn.objects = valueMetadataColumn.objects || {}, valueMetadataColumn.objects.general = {
                            formatString: "0%"
                        }, function(dataValues) {
                            var sum = dataValues.reduce(function(currentSum, next) {
                                return currentSum + next;
                            }, 0);
                            return dataValues.map(function(val) {
                                return val / sum;
                            });
                        }(dataValues);
                    }(dataValues, columnMetadata));
                    min = _.min(dataValues), max = _.max(dataValues);
                    return columnMetadata.aggregates = {
                        min: min,
                        max: max
                    }, {
                        columns: [ {
                            source: columnMetadata,
                            values: dataValues
                        } ]
                    };
                }(data, valuesRoleName, dataView)).build()).metadata.objects = {
                    labels: {
                        show: !0
                    },
                    categoryLabels: {
                        show: !0
                    }
                }, dataView;
            };
        }(bingSocial.ChartDataViewConstructorUtils || (bingSocial.ChartDataViewConstructorUtils = {}));
    })((data_1 = powerbi.data || (powerbi.data = {})).bingSocial || (data_1.bingSocial = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_3;
    (function(bingSocial) {
        var ActivityChartResponseFormatter = function() {
            function ActivityChartResponseFormatter() {}
            return ActivityChartResponseFormatter.prototype.formatResponse = function(counts) {
                for (var counts = counts[0].value, _i = 0, data_4 = counts; _i < data_4.length; _i++) {
                    var d = data_4[_i];
                    d.source = "Bing", d.CreatedAt = bingSocial.ChartDataViewConstructorUtils.getFieldFromString(d, "Request.RequestTime");
                }
                counts = this.getCountsPerTime(counts, "source");
                return this.createLineChartDataView([ "Bing" ], counts, {
                    Bing: "#FFB900"
                });
            }, ActivityChartResponseFormatter.prototype.getCountsPerTime = function(data, fieldName, mapping) {
                for (var countsPerTime = {}, _i = 0, data_5 = data; _i < data_5.length; _i++) {
                    var item = data_5[_i], createdAt = item.CreatedAt, fieldVal = bingSocial.ChartDataViewConstructorUtils.getFieldFromString(item, fieldName);
                    mapping && !(fieldVal = mapping[fieldVal]) || (countsPerTime[createdAt] = countsPerTime[createdAt] || {}, 
                    countsPerTime[createdAt][fieldVal] = item.Count);
                }
                return countsPerTime;
            }, ActivityChartResponseFormatter.prototype.createLineChartDataView = function(labels, counts, metadataColumns) {
                var subtotals = Object.keys(counts), sortedCreatedAtValues = ActivityChartResponseFormatter.sortDateStrings(subtotals), createdAtValueColumn = sortedCreatedAtValues.map(function(createdAt) {
                    return new Date(createdAt);
                }), values = {}, maximums = {}, minimums = {}, subtotals = {};
                ActivityChartResponseFormatter.getTableData(sortedCreatedAtValues, labels, counts, values, maximums, minimums, subtotals);
                createdAtValueColumn = {
                    source: {
                        queryName: "CreatedAt",
                        displayName: "CreatedAt",
                        type: powerbi.ValueType.fromDescriptor({
                            dateTime: !0
                        }),
                        index: 0
                    },
                    values: createdAtValueColumn
                }, metadataColumns = this.createMetadataColumns(labels, metadataColumns);
                return {
                    metadata: {
                        columns: metadataColumns
                    },
                    categorical: {
                        values: data_3.DataViewTransform.createValueColumns(this.createValueColumns(labels, metadataColumns, values, maximums, minimums, subtotals)),
                        categories: [ createdAtValueColumn ]
                    }
                };
            }, ActivityChartResponseFormatter.getTableData = function(createdAtValues, labels, countsPerTime, values, maximums, minimums, subtotals) {
                for (var _i = 0, labels_1 = labels; _i < labels_1.length; _i++) values[label = labels_1[_i]] = [], 
                subtotals[label] = 0;
                for (var _a = 0, createdAtValues_1 = createdAtValues; _a < createdAtValues_1.length; _a++) for (var createdAt = createdAtValues_1[_a], _b = 0, labels_2 = labels; _b < labels_2.length; _b++) {
                    var label = labels_2[_b], count = countsPerTime[createdAt][label] || 0;
                    values[label].push(count), maximums[label] = maximums[label] ? Math.max(maximums[label], count) : count, 
                    minimums[label] = minimums[label] ? Math.min(minimums[label], count) : count, subtotals[label] += count;
                }
            }, ActivityChartResponseFormatter.prototype.createMetadataColumns = function(labels, colors) {
                for (var metadataColumns = [ bingSocial.ChartDataViewConstructorUtils.createMetadataColumn("CreatedAt", 0, "Category", powerbi.ValueType.fromDescriptor({
                    text: !0
                })) ], i = 0; i < labels.length; i++) {
                    var metadataColumn = labels[i], metadataColumn = bingSocial.ChartDataViewConstructorUtils.createMetadataColumn(metadataColumn, i + 1, "Y", null, colors);
                    metadataColumns.push(metadataColumn);
                }
                return metadataColumns;
            }, ActivityChartResponseFormatter.prototype.createValueColumns = function(labels, metadata, values, maximums, minimums, subtotals) {
                for (var valueColumns = [], i = 0; i < labels.length; i++) {
                    var label = labels[i];
                    valueColumns.push(ActivityChartResponseFormatter.createValueColumn(values[label], minimums[label], maximums[label], subtotals[label], metadata[i + 1]));
                }
                return valueColumns;
            }, ActivityChartResponseFormatter.createValueColumn = function(values, min, max, subtotal, metadata) {
                return {
                    source: metadata,
                    values: values,
                    min: min,
                    max: max,
                    subtotal: subtotal
                };
            }, ActivityChartResponseFormatter.sortDateStrings = function(arr) {
                return arr.sort(function(a, b) {
                    return new Date(a).getTime() - new Date(b).getTime();
                });
            }, ActivityChartResponseFormatter;
        }();
        bingSocial.ActivityChartResponseFormatter = ActivityChartResponseFormatter;
    })((data_3 = powerbi.data || (powerbi.data = {})).bingSocial || (data_3.bingSocial = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var CountChangeResponseFormatter = function() {
                function CountChangeResponseFormatter() {}
                return CountChangeResponseFormatter.prototype.formatResponse = function(metadata_1) {
                    var change = parseInt(metadata_1[0], 10), metadata = parseInt(metadata_1[1], 10);
                    if (0 === metadata) {
                        metadata_1 = this.getMetadata("N/A");
                        return {
                            single: {
                                value: 0,
                                column: metadata_1.columns[0]
                            },
                            metadata: metadata_1
                        };
                    }
                    change = (change - metadata) / metadata, metadata = this.getMetadata("+0.0%;-0.0%");
                    return {
                        single: {
                            value: change,
                            column: metadata.columns[0]
                        },
                        metadata: metadata
                    };
                }, CountChangeResponseFormatter.prototype.getMetadata = function(formatString) {
                    return {
                        columns: [ {
                            displayName: "Count Change",
                            isMeasure: !0,
                            type: powerbi.ValueType.fromDescriptor({
                                numeric: !0
                            }),
                            objects: {
                                general: {
                                    formatString: formatString
                                }
                            }
                        } ]
                    };
                }, CountChangeResponseFormatter;
            }();
            bingSocial.CountChangeResponseFormatter = CountChangeResponseFormatter;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var CountResponseFormatter = function() {
                function CountResponseFormatter() {}
                return CountResponseFormatter.prototype.formatResponse = function(responses) {
                    var column = {
                        displayName: "Count",
                        isMeasure: !0,
                        type: powerbi.ValueType.fromDescriptor({
                            integer: !0
                        })
                    };
                    return {
                        single: {
                            value: responses[0],
                            column: column
                        },
                        metadata: {
                            columns: [ column ]
                        }
                    };
                }, CountResponseFormatter;
            }();
            bingSocial.CountResponseFormatter = CountResponseFormatter;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var RawDataResponseFormatter = function() {
                function RawDataResponseFormatter() {}
                return RawDataResponseFormatter.prototype.formatResponse = function(responses) {
                    return {
                        metadata: {
                            columns: []
                        },
                        bingSocial: responses[0].value
                    };
                }, RawDataResponseFormatter;
            }();
            bingSocial.RawDataResponseFormatter = RawDataResponseFormatter;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var BingNewsResponseFormatter = function() {
                function BingNewsResponseFormatter() {}
                return BingNewsResponseFormatter.prototype.formatResponse = function(responses) {
                    return {
                        metadata: {
                            columns: []
                        },
                        bingSocial: responses[0].value
                    };
                }, BingNewsResponseFormatter;
            }();
            bingSocial.BingNewsResponseFormatter = BingNewsResponseFormatter;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_6;
    (function(bingSocial) {
        var MapResponseFormatter = function() {
            function MapResponseFormatter(fieldName, options) {
                this.fieldName = fieldName, this.options = options || {};
            }
            return MapResponseFormatter.prototype.formatResponse = function(dataView) {
                var transforms = dataView[0].value;
                if (this.options.logarithmic) for (var _i = 0, data_7 = transforms; _i < data_7.length; _i++) {
                    var d = data_7[_i];
                    d.Count = Math.log(d.Count);
                }
                dataView = bingSocial.ChartDataViewConstructorUtils.createDataView(transforms, this.fieldName, "Category", "Y", {
                    mapping: this.options.mapping,
                    percentize: !1
                });
                dataView.metadata.columns[0].type = powerbi.ValueType.fromDescriptor({
                    geography: {
                        country: !0
                    }
                });
                transforms = {
                    selects: [ {
                        type: powerbi.ValueType.fromDescriptor({
                            text: !0
                        }),
                        roles: {
                            Category: !0
                        }
                    }, {
                        type: powerbi.ValueType.fromDescriptor({
                            numeric: !0
                        }),
                        roles: {
                            Y: !0,
                            Gradient: !0
                        }
                    } ],
                    objects: {
                        dataPoint: [ {
                            properties: {
                                fillRule: {
                                    linearGradient2: {
                                        min: {
                                            color: data_6.SQExprBuilder.text("#FFF0CC")
                                        },
                                        max: {
                                            color: data_6.SQExprBuilder.text("#FFB600")
                                        }
                                    }
                                }
                            }
                        } ]
                    }
                };
                return data_6.DataViewTransform.apply({
                    prototype: dataView,
                    objectDescriptors: {
                        dataPoint: {
                            properties: {
                                fill: {
                                    type: {
                                        fill: {
                                            solid: {
                                                color: !0
                                            }
                                        }
                                    }
                                },
                                fillRule: {
                                    type: {
                                        fillRule: {}
                                    },
                                    rule: {
                                        inputRole: "Gradient",
                                        output: {
                                            property: "fill",
                                            selector: [ "Category" ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    transforms: transforms,
                    colorAllocatorFactory: window.powerbi.visuals.createColorAllocatorFactory(),
                    dataViewMappings: window.powerbi.visuals.getTreemapCapabilities().dataViewMappings,
                    dataRoles: null,
                    visualStyle: powerbi.visuals.visualStyles.create(),
                    featureSwitches: {}
                }).dataViews[0];
            }, MapResponseFormatter;
        }();
        bingSocial.MapResponseFormatter = MapResponseFormatter;
    })((data_6 = powerbi.data || (powerbi.data = {})).bingSocial || (data_6.bingSocial = {}));
}(powerbi = powerbi || {}), function(data_8) {
    (function(bingSocial) {
        var TreeMapResponseFormatter = function() {
            function TreeMapResponseFormatter(fieldName, options) {
                this.fieldName = fieldName, this.options = options || {};
            }
            return TreeMapResponseFormatter.prototype.formatResponse = function(data) {
                data = data[0].value;
                return bingSocial.ChartDataViewConstructorUtils.createDataView(data, this.fieldName, "Group", "Values", this.options);
            }, TreeMapResponseFormatter;
        }();
        bingSocial.TreeMapResponseFormatter = TreeMapResponseFormatter;
    })((data_8 = data_8.data || (data_8.data = {})).bingSocial || (data_8.bingSocial = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var TileRequestData = function() {
                function TileRequestData(urlTemplates, responseFormatter) {
                    this.urlTemplates = urlTemplates, this.responseFormatter = responseFormatter;
                }
                return TileRequestData.prototype.getUrlTemplates = function() {
                    return this.urlTemplates;
                }, TileRequestData.prototype.getResponseFormatter = function() {
                    return this.responseFormatter;
                }, TileRequestData;
            }();
            bingSocial.TileRequestData = TileRequestData;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(bingSocial) {
            var TileRequestDataFactory = function() {
                function TileRequestDataFactory() {}
                return TileRequestDataFactory.prototype.getTileRequestData = function(queryType) {
                    return TileRequestDataFactory.tileRequestData[queryType];
                }, TileRequestDataFactory.createUrl = function(source, typeStr) {
                    return "powerbi/providers/bingsocial/?source={{source}}&type={{type}}&searchKey={{searchKey}}&newsApiVersion={{newsApiVersion}}".replace(/{{source}}/g, source).replace(/{{type}}/g, typeStr).replace(/{{newsApiVersion}}/g, "v6");
                }, TileRequestDataFactory.languageMapping = {
                    aa: "Afar",
                    af: "Afrikaans",
                    agq: "Aghem",
                    ak: "Akan",
                    sq: "Albanian",
                    gsw: "Alsatian",
                    am: "Amharic",
                    ar: "Arabic",
                    hy: "Armenian",
                    as: "Assamese",
                    ast: "Asturian",
                    asa: "Asu",
                    "az-Cyrl": "Azerbaijani (Cyrillic)",
                    "az-Latn": "Azerbaijani (Latin)",
                    ksf: "Bafia",
                    "bm-Latn": "Bamanankan (Latin)",
                    bn: "Bangla",
                    bas: "Basaa",
                    ba: "Bashkir",
                    eu: "Basque",
                    be: "Belarusian",
                    bem: "Bemba",
                    bez: "Bena",
                    byn: "Blin",
                    brx: "Bodo",
                    "bs-Cyrl": "Bosnian (Cyrillic)",
                    "bs-Latn": "Bosnian (Latin)",
                    br: "Breton",
                    bg: "Bulgarian",
                    my: "Burmese",
                    ca: "Catalan",
                    "tzm-Arab": "Central Atlas Tamazight (Arabic)",
                    "tzm-Latn": "Central Atlas Tamazight (Latin)",
                    "tzm-Tfng": "Central Atlas Tamazight (Tifinagh)",
                    "ku-Arab": "Central Kurdish",
                    "chr-Cher": "Cherokee (Cherokee)",
                    cgg: "Chiga",
                    "zh-Hans": "Chinese (Simplified)",
                    "zh-Hant": "Chinese (Traditional)",
                    swc: "Congo Swahili",
                    kw: "Cornish",
                    co: "Corsican",
                    hr: "Croatian",
                    cs: "Czech",
                    da: "Danish",
                    prs: "Dari",
                    dv: "Divehi",
                    dua: "Duala",
                    nl: "Dutch",
                    dz: "Dzongkha",
                    bin: "Edo",
                    ebu: "Embu",
                    en: "English",
                    eo: "Esperanto",
                    et: "Estonian",
                    ee: "Ewe",
                    ewo: "Ewondo",
                    fo: "Faroese",
                    fil: "Filipino",
                    fi: "Finnish",
                    fr: "French",
                    fur: "Friulian",
                    "ff-Latn": "Fulah",
                    gl: "Galician",
                    lg: "Ganda",
                    ka: "Georgian",
                    de: "German",
                    el: "Greek",
                    kl: "Greenlandic",
                    gn: "Guarani",
                    gu: "Gujarati",
                    guz: "Gusii",
                    ht: "Haitian",
                    "ha-Latn": "Hausa (Latin)",
                    haw: "Hawaiian",
                    he: "Hebrew",
                    hi: "Hindi",
                    mww: "Hmong Daw",
                    hu: "Hungarian",
                    is: "Icelandic",
                    ig: "Igbo",
                    smn: "Inari Sami",
                    id: "Indonesian",
                    ia: "Interlingua",
                    "iu-Cans": "Inuktitut (Canadian Aboriginal Syllabics)",
                    "iu-Latn": "Inuktitut (Latin)",
                    iv: "Invariant Language",
                    ga: "Irish",
                    xh: "isiXhosa",
                    zu: "isiZulu",
                    it: "Italian",
                    ja: "Japanese",
                    "jv-Latn": "Javanese (Latin)",
                    dyo: "Jola-Fonyi",
                    quc: "K'iche'",
                    kea: "Kabuverdianu",
                    kab: "Kabyle",
                    kkj: "Kako",
                    kln: "Kalenjin",
                    kam: "Kamba",
                    kn: "Kannada",
                    kr: "Kanuri",
                    "ks-Deva": "Kashmiri (Devanagari)",
                    "ks-Arab": "Kashmiri (Perso-Arabic)",
                    kk: "Kazakh",
                    km: "Khmer",
                    ki: "Kikuyu",
                    rw: "Kinyarwanda",
                    sw: "Kiswahili",
                    kok: "Konkani",
                    ko: "Korean",
                    khq: "Koyra Chiini",
                    ses: "Koyraboro Senni",
                    nmg: "Kwasio",
                    ky: "Kyrgyz",
                    lkt: "Lakota",
                    lag: "Langi",
                    lo: "Lao",
                    lv: "Latvian",
                    ln: "Lingala",
                    lt: "Lithuanian",
                    dsb: "Lower Sorbian",
                    lu: "Luba-Katanga",
                    smj: "Lule Sami",
                    luo: "Luo",
                    lb: "Luxembourgish",
                    luy: "Luyia",
                    mk: "Macedonian",
                    jmc: "Machame",
                    mgh: "Makhuwa-Meetto",
                    kde: "Makonde",
                    mg: "Malagasy",
                    ms: "Malay (Latin)",
                    ml: "Malayalam",
                    mt: "Maltese",
                    mni: "Manipuri",
                    gv: "Manx",
                    mi: "Maori",
                    arn: "Mapudungun",
                    mr: "Marathi",
                    mas: "Masai",
                    mer: "Meru",
                    mgo: "Meta'",
                    moh: "Mohawk",
                    "mn-Cyrl": "Mongolian (Cyrillic)",
                    "mn-Mong": "Mongolian (Traditional Mongolian)",
                    mfe: "Morisyen",
                    mua: "Mundang",
                    nqo: "N'Ko",
                    naq: "Nama",
                    ne: "Nepali",
                    nnh: "Ngiemboon",
                    jgo: "Ngomba",
                    nd: "North Ndebele",
                    kmr: "Northern Kurdish",
                    se: "Northern Sami",
                    nb: "Norwegian Bokmål",
                    nn: "Norwegian Nynorsk",
                    nus: "Nuer",
                    nyn: "Nyankole",
                    oc: "Occitan",
                    or: "Odia",
                    om: "Oromo",
                    "os-Cyrl": "Ossetian (Cyrillic)",
                    pap: "Papiamento",
                    ps: "Pashto",
                    fa: "Persian",
                    pl: "Polish",
                    pt: "Portuguese",
                    "pa-Arab": "Punjabi (Arabic)",
                    "pa-Guru": "Punjabi (Gurmukhi)",
                    quz: "Quechua",
                    otq: "Querétaro Otomi",
                    ksh: "Ripuarian",
                    ro: "Romanian",
                    rm: "Romansh",
                    rof: "Rombo",
                    rn: "Rundi",
                    ru: "Russian",
                    rwk: "Rwa",
                    ssy: "Saho",
                    sah: "Sakha",
                    saq: "Samburu",
                    sg: "Sango",
                    sbp: "Sangu",
                    sa: "Sanskrit",
                    gd: "Scottish Gaelic",
                    seh: "Sena",
                    "sr-Cyrl": "Serbian (Cyrillic)",
                    "sr-Latn": "Serbian (Latin)",
                    st: "Sesotho",
                    nso: "Sesotho sa Leboa",
                    tn: "Setswana",
                    ksb: "Shambala",
                    sn: "Shona",
                    "sd-Arab": "Sindhi (Arabic)",
                    "sd-Deva": "Sindhi (Devanagari)",
                    si: "Sinhala",
                    ss: "siSwati",
                    sms: "Skolt Sami",
                    sk: "Slovak",
                    sl: "Slovenian",
                    xog: "Soga",
                    so: "Somali",
                    nr: "South Ndebele",
                    sma: "Southern Sami",
                    es: "Spanish",
                    "zgh-Tfng": "Standard Moroccan Tamazight (Tifinagh)",
                    sv: "Swedish",
                    syr: "Syriac",
                    "shi-Latn": "Tachelhit (Latin)",
                    "shi-Tfng": "Tachelhit (Tifinagh)",
                    dav: "Taita",
                    "tg-Cyrl": "Tajik (Cyrillic)",
                    ta: "Tamil",
                    twq: "Tasawaq",
                    "tt-Cyrl": "Tatar (Cyrillic)",
                    te: "Telugu",
                    teo: "Teso",
                    th: "Thai",
                    bo: "Tibetan",
                    tig: "Tigre",
                    ti: "Tigrinya",
                    to: "Tongan",
                    tr: "Turkish",
                    "tk-Latn": "Turkmen (Latin)",
                    uk: "Ukrainian",
                    hsb: "Upper Sorbian",
                    ur: "Urdu",
                    "ug-Arab": "Uyghur (Arabic)",
                    "uz-Cyrl": "Uzbek (Cyrillic)",
                    "uz-Latn": "Uzbek (Latin)",
                    "uz-Arab": "Uzbek (Perso-Arabic)",
                    "vai-Latn": "Vai (Latin)",
                    "vai-Vaii": "Vai (Vai)",
                    "ca-ES-valencia": "Valencian",
                    ve: "Venda",
                    vi: "Vietnamese",
                    vo: "Volapük",
                    vun: "Vunjo",
                    wae: "Walser",
                    cy: "Welsh",
                    fy: "Western Frisian",
                    wal: "Wolaytta",
                    wo: "Wolof",
                    ts: "Xitsonga",
                    yav: "Yangben",
                    ii: "Yi",
                    yi: "Yiddish",
                    yo: "Yoruba",
                    yua: "Yucatec Maya",
                    dje: "Zarma",
                    az: "Azerbaijani",
                    bm: "Bamanankan",
                    bs: "Bosnian",
                    tzm: "Central Atlas Tamazight",
                    chr: "Cherokee",
                    zh: "Chinese",
                    ha: "Hausa",
                    iu: "Inuktitut",
                    jv: "Javanese",
                    ks: "Kashmiri",
                    mn: "Mongolian",
                    os: "Ossetian",
                    pa: "Punjabi",
                    sr: "Serbian",
                    sd: "Sindhi",
                    zgh: "Standard Moroccan Tamazight",
                    shi: "Tachelhit",
                    tg: "Tajik",
                    tt: "Tatar",
                    tk: "Turkmen",
                    ug: "Uyghur",
                    uz: "Uzbek",
                    vai: "Vai"
                }, TileRequestDataFactory.languageOptions = {
                    mapping: function(loc) {
                        if ("string" == typeof loc && loc) {
                            for (var languageName, languageCode = loc; languageCode; ) {
                                if (languageCode in TileRequestDataFactory.languageMapping) {
                                    languageName = TileRequestDataFactory.languageMapping[languageCode];
                                    break;
                                }
                                var lastHyphenIndex = Math.max(languageCode.lastIndexOf("-"), 0), languageCode = languageCode.substring(0, lastHyphenIndex);
                            }
                            return languageName || loc;
                        }
                    }
                }, TileRequestDataFactory.tileRequestData = {
                    bingVolume: new bingSocial.TileRequestData([ TileRequestDataFactory.createUrl("Bing", "Volume") ], new bingSocial.CountResponseFormatter()),
                    bingVolumeChange: new bingSocial.TileRequestData([ TileRequestDataFactory.createUrl("Bing", "Volume"), TileRequestDataFactory.createUrl("Bing", "VolumeChange") ], new bingSocial.CountChangeResponseFormatter()),
                    activity: new bingSocial.TileRequestData([ TileRequestDataFactory.createUrl("Bing", "Activity") ], new bingSocial.ActivityChartResponseFormatter()),
                    languages: new bingSocial.TileRequestData([ TileRequestDataFactory.createUrl("Bing", "Language") ], new bingSocial.TreeMapResponseFormatter("Query._Microsoft.Language", TileRequestDataFactory.languageOptions)),
                    news: new bingSocial.TileRequestData([ TileRequestDataFactory.createUrl("Bing", "News") ], new bingSocial.BingNewsResponseFormatter()),
                    location: new bingSocial.TileRequestData([ TileRequestDataFactory.createUrl("Bing", "Location") ], new bingSocial.MapResponseFormatter("User.Country", {
                        logarithmic: !0
                    }))
                }, TileRequestDataFactory;
            }();
            bingSocial.TileRequestDataFactory = TileRequestDataFactory;
        }(data.bingSocial || (data.bingSocial = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        data.createDataReaderFactory = function(plugins, extensions) {
            return new DataReaderFactory(plugins, extensions);
        };
        var DataReaderFactory = function() {
            function DataReaderFactory(plugins, extensions) {
                if (extensions) for (var type in extensions) !function(type) {
                    _.find(plugins, function(p) {
                        return p.name === extensions[type].extends;
                    }), extensions[type].extends, _.some(plugins, function(p) {
                        return p.name === extensions[type].name;
                    });
                }(type);
                this.plugins = plugins, this.extensions = extensions || {};
            }
            return DataReaderFactory.prototype.getPlugin = function(type) {
                return this.plugins[type || "dsr"];
            }, DataReaderFactory.prototype.getExtension = function(type) {
                return this.extensions[type];
            }, DataReaderFactory;
        }();
        function defaultReaderType(type) {
            return type || "dsr";
        }
        !function(DataReaderUtils) {
            function readerType(reference) {
                return defaultReaderType(reference.type);
            }
            function findSchemas(query) {
                if (query) {
                    var schemas = [];
                    return new SchemaNameFinder(schemas).run(query), schemas;
                }
            }
            function findTypeFromSchemas(references, schemaNames) {
                for (var types = [], _i = 0, references_1 = references; _i < references_1.length; _i++) {
                    var currentType = references_1[_i];
                    (_.isEmpty(schemaNames) || _.includes(schemaNames, currentType.name)) && (currentType = readerType(currentType), 
                    _.includes(types, currentType) || types.push(currentType));
                }
                return types;
            }
            DataReaderUtils.findTypes = function(references, query) {
                return findTypeFromSchemas(references, findSchemas(query));
            }, DataReaderUtils.findTypesFromExprs = function(references, exprs) {
                if (_.isEmpty(references)) return [];
                if (!_.isEmpty(exprs)) {
                    for (var schemaNames = [], _i = 0, exprs_1 = exprs; _i < exprs_1.length; _i++) {
                        var entity = exprs_1[_i];
                        entity instanceof data.SQColumnRefExpr && (entity = entity.getTargetEntity(), schemaNames.push(entity.schema));
                    }
                    schemaNames = _.uniq(schemaNames);
                }
                return findTypeFromSchemas(references, schemaNames);
            }, DataReaderUtils.readerType = readerType, DataReaderUtils.findSchemas = findSchemas, 
            DataReaderUtils.uniqueReaderTypes = function(references) {
                return _.chain(references).map(readerType).uniq().value();
            };
            var SchemaNameFinder = function() {
                function SchemaNameFinder(schemas) {
                    this.schemas = schemas;
                }
                return SchemaNameFinder.prototype.run = function(query) {
                    for (var fromClause = query.from(), _i = 0, _a = fromClause.keys(); _i < _a.length; _i++) {
                        var fromKey = _a[_i];
                        fromClause.source(fromKey).accept(this, void 0);
                    }
                }, SchemaNameFinder.prototype.visitEntity = function(source) {
                    this.visitEntityOrPod(source);
                }, SchemaNameFinder.prototype.visitPod = function(source) {
                    this.visitEntityOrPod(source);
                }, SchemaNameFinder.prototype.visitSubquery = function(source) {
                    this.run(source.subquery);
                }, SchemaNameFinder.prototype.visitExpr = function(_source) {}, SchemaNameFinder.prototype.visitEntityOrPod = function(schemas) {
                    var schema = schemas.schema, schemas = this.schemas;
                    _.includes(schemas, schema) || schemas.push(schema);
                }, SchemaNameFinder;
            }();
        }(data.DataReaderUtils || (data.DataReaderUtils = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var ArrayExtensions = jsCommon.ArrayExtensions;
        data.createDataReaderProvider = function(factory, hostServices) {
            return new DataReaderProvider(factory, hostServices);
        };
        var DataReaderProvider = function() {
            function DataReaderProvider(factory, hostServices) {
                this.factory = factory, this.hostServices = hostServices, this.readers = {}, this.queryGen = {}, 
                this.schemaReaders = {};
            }
            return DataReaderProvider.prototype.reader = function(typeOrTypes) {
                var _this = this;
                return this.findSinglePropertyDefinition(ArrayExtensions.ensureArray(typeOrTypes), function(p) {
                    return p.reader(_this.hostServices);
                }, _.noop, this.readers);
            }, DataReaderProvider.prototype.readerType = function(resolution) {
                var _this = this, resolution = this.resolvePluginProperty(ArrayExtensions.ensureArray(resolution), function(p) {
                    return p.reader(_this.hostServices);
                }, _.noop, this.readers);
                return resolution && resolution.type;
            }, DataReaderProvider.prototype.queryGenerator = function(typeOrTypes) {
                return this.findSinglePropertyDefinition(ArrayExtensions.ensureArray(typeOrTypes), function(p) {
                    return p.queryGenerator && p.queryGenerator();
                }, _.noop, this.queryGen);
            }, DataReaderProvider.prototype.queryExtensionLookup = function(basePluginLookup) {
                var references = ArrayExtensions.ensureArray(basePluginLookup), types = _.chain(references).map(function(reference) {
                    return data.DataReaderUtils.readerType(reference);
                }).uniq().value(), basePluginLookup = this.findSingleBasePropertyDefinition(types, function(e) {
                    return e.queryExtensionProvider && wrapQueryExtensionProvider(e.name, references, e.queryExtensionProvider);
                });
                return function(extension, base) {
                    if (extension || base) return extension ? function(query, queryRewrites) {
                        return extension(query, queryRewrites, base);
                    } : base;
                }(this.findSingleExtensionPropertyDefinition(types, function(e) {
                    return e.queryExtensionProvider && wrapQueryExtensionProvider(e.name, references, e.queryExtensionProvider);
                }), basePluginLookup);
            }, DataReaderProvider.prototype.schemaReader = function(type) {
                var _this = this;
                return this.findSinglePropertyDefinition([ type ], function(p) {
                    return p.schemaReader && p.schemaReader(_this.hostServices);
                }, function(e) {
                    return e.schemaReader && e.schemaReader(_this.hostServices);
                }, this.schemaReaders);
            }, DataReaderProvider.prototype.getCacheKey = function(types) {
                types = ArrayExtensions.ensureArray(types);
                return types.length < 2 ? types[0] : "[" + types.join(",") + "]";
            }, DataReaderProvider.prototype.findSinglePropertyDefinition = function(types, pluginCheck, resolution, cache) {
                var cacheKey = this.getCacheKey(types), cached = cache[cacheKey];
                if (cached) return cached;
                resolution = this.resolvePluginProperty(types, pluginCheck, resolution, cache);
                return resolution ? cache[cacheKey] = resolution.property : void 0;
            }, DataReaderProvider.prototype.findSingleExtensionPropertyDefinition = function(types, extensionCheck) {
                for (var result, _i = 0, types_1 = types; _i < types_1.length; _i++) {
                    var current = types_1[_i], plugin = this.factory.getPlugin(current);
                    if (plugin) {
                        if (basePluginName && basePluginName !== plugin.name) return;
                        basePluginName = plugin.name;
                    } else {
                        current = this.factory.getExtension(current);
                        if (!current) return;
                        if (basePluginName && basePluginName !== current.extends) return;
                        var basePluginName = current.extends, current = extensionCheck(current);
                        if (current) {
                            if (result && current !== result) return;
                            result = current;
                        }
                    }
                }
                return result;
            }, DataReaderProvider.prototype.findSingleBasePropertyDefinition = function(types, pluginCheck) {
                for (var result, _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var current = types_2[_i], current = this.factory.getPlugin(current);
                    if (current) {
                        if (basePluginName && basePluginName !== current.name) return;
                        var basePluginName = current.name, current = pluginCheck(current);
                        if (current) {
                            if (result && current !== result) return;
                            result = current;
                        }
                    }
                }
                return result;
            }, DataReaderProvider.prototype.resolvePluginProperty = function(types, pluginCheck, extensionCheck, cache) {
                for (var result, _i = 0, types_3 = types; _i < types_3.length; _i++) {
                    var current = types_3[_i], current = this.resolveProperty(current, pluginCheck, extensionCheck, cache);
                    if (!current || result && current.property !== result.property) return;
                    result = current;
                }
                return result;
            }, DataReaderProvider.prototype.resolveProperty = function(type, pluginCheck, extensionCheck, cache) {
                var cacheKey, result;
                if (cache && (result = cache[cacheKey = this.getCacheKey(type)])) return {
                    type: type,
                    property: result
                };
                var extension = this.factory.getPlugin(type);
                if (extension) return (result = pluginCheck(extension)) ? (cache && (cache[cacheKey] = result), 
                {
                    type: type,
                    property: result
                }) : void 0;
                extension = this.factory.getExtension(type);
                return extension ? (result = extensionCheck(extension)) ? (cache && (cache[cacheKey] = result), 
                {
                    type: type,
                    property: result
                }) : this.resolveProperty(extension.extends, pluginCheck, extensionCheck, cache) : void 0;
            }, DataReaderProvider;
        }();
        function wrapQueryExtensionProvider(extensionType, references, extensionProvider) {
            for (var matchingDataReaderDataSources = [], _i = 0, references_2 = references; _i < references_2.length; _i++) {
                var reference = references_2[_i], type = data.DataReaderUtils.readerType(reference);
                type === extensionType && matchingDataReaderDataSources.push(reference[type]);
            }
            return extensionProvider(matchingDataReaderDataSources);
        }
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(Impl) {
            function applyDefaultsHasReductionAlgorithm(mapping) {
                mapping.dataReductionAlgorithm || function(select) {
                    select = select.select;
                    return !!select && _.some(select, function(selectMapping) {
                        return !!selectMapping.dataReductionAlgorithm;
                    });
                }(mapping) || (mapping.dataReductionAlgorithm = {
                    top: {}
                });
            }
            Impl.applyDataReductionDefaults = function(mapping) {
                var table;
                mapping.categorical && ((table = mapping.categorical).dataReductionAlgorithm || (table.categories && applyDefaultsHasReductionAlgorithm(table.categories), 
                (table = table.values) && table.group && function(mapping) {
                    mapping.group, mapping.group.dataReductionAlgorithm || (mapping.group.dataReductionAlgorithm = {
                        top: {}
                    });
                }(table))), !mapping.table || (table = mapping.table).rows && applyDefaultsHasReductionAlgorithm(table.rows), 
                mapping.matrix && function(matrix) {
                    matrix.rows && applyDefaultsHasReductionAlgorithm(matrix.rows);
                    matrix.columns && applyDefaultsHasReductionAlgorithm(matrix.columns);
                }(mapping.matrix);
            };
        }(data.Impl || (data.Impl = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        data.applyDataReductionDefaults = function(mappings) {
            for (var mappingsLength = mappings.length, i = 0; i < mappingsLength; i++) {
                var currentMapping = mappings[i];
                data.Impl.applyDataReductionDefaults(currentMapping);
            }
        };
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var ArrayExtensions = jsCommon.ArrayExtensions;
        data.compileDataView = function(strategy) {
            var mappings = strategy.mappings;
            if (!mappings) return [];
            var roles = strategy.roles || [], strategy = new DefaultDataViewMappingCompilerStrategy(strategy.queryDefn, strategy.queryProjections, strategy.schema, strategy.objectDescriptors, strategy.objectDefinitions, strategy.roles || [], strategy.featureSwitches, strategy.transformPluginService), compiler = new data.DataViewMappingCompiler(strategy, roles);
            return _.map(mappings, function(dataViewMapping) {
                return compiler.compileMapping(dataViewMapping);
            });
        };
        var DefaultDataViewMappingCompilerStrategy = function() {
            function DefaultDataViewMappingCompilerStrategy(queryDefn, queryProjections, schema, objectDescriptors, objectDefinitions, roles, featureSwitches, transformPluginService) {
                this.featureSwitches = featureSwitches, this.transformPluginService = transformPluginService, 
                this.queryDefn = queryDefn, this.queryProjections = queryProjections, this.schema = schema, 
                this.objectDescriptors = objectDescriptors, this.objectDefinitions = objectDefinitions, 
                this.roles = roles, this.exprEvaluationContext = data.SQExprUtils.buildExprEvaluationContext(this.queryDefn.from());
            }
            return DefaultDataViewMappingCompilerStrategy.prototype.compileRole = function(projection, aggregates) {
                var isScalarKeySupported_1, itemWithPossibleScalarKey_1, _this = this, selects = this.queryDefn.select(), projections = this.queryProjections[projection], dataRole = ArrayExtensions.findItemWithName(this.roles, projection);
                projections && 0 < projections.all().length && (isScalarKeySupported_1 = !1, dataRole && (isScalarKeySupported_1 = data.ScalarKeyUtils.isScalarKeySupportedForRole(this.schema, this.queryDefn, this.queryProjections, dataRole.name)), 
                itemWithPossibleScalarKey_1 = this.getScalarKeyRoleItemQueryRef(projections), (compiledRole = _.map(projections.all(), function(projection) {
                    var isActiveRoleItem = projection.queryRef === itemWithPossibleScalarKey_1;
                    return _this.createDataViewRoleItem(selects.withName(projection.queryRef), dataRole, isScalarKeySupported_1, isActiveRoleItem);
                })).filter(function(v) {
                    return v.scalarKeyInfo && v.scalarKeyInfo.hasScalarKey;
                }).length);
                var compiledRole = {
                    role: projection,
                    items: compiledRole
                }, projection = this.queryProjections[projection];
                return projection && (projection.showAll && (compiledRole.showAll = !0), projection.activeProjectionRefs && (compiledRole.activeItems = projection.activeProjectionRefs)), 
                aggregates && (compiledRole.aggregates = _.cloneDeep(aggregates)), compiledRole;
            }, DefaultDataViewMappingCompilerStrategy.prototype.getScalarKeyRoleItemQueryRef = function(projections) {
                _.isEmpty(projections.all());
                var activeProjectionRefs = projections.activeProjectionRefs;
                return _.isEmpty(activeProjectionRefs) ? projections.all()[0].queryRef : _.last(activeProjectionRefs);
            }, DefaultDataViewMappingCompilerStrategy.prototype.createDataViewRoleItem = function(select, transforms_2, roleSupportsScalarKey, isDesignatedScalarKeyRoleItem) {
                var item = {
                    queryName: select.name
                }, type = this.tryGetExprType(select.expr);
                if (type && (item.type = type), transforms_2 && null != transforms_2.joinPredicate) item.joinPredicate = transforms_2.joinPredicate; else if (data.SQExpr.isTransformOutputRoleRef(select.expr)) {
                    transforms_2 = this.queryDefn.transforms();
                    if (!_.isEmpty(transforms_2)) for (var isJoinPredicateSet = !1, _i = 0, transforms_1 = transforms_2; _i < transforms_1.length; _i++) {
                        var outputRoles = transforms_1[_i], outputRoles = null === (outputRoles = this.transformPluginService.getTransformPlugin(outputRoles.algorithm)) || void 0 === outputRoles ? void 0 : outputRoles.outputRoles;
                        if (!_.isEmpty(outputRoles)) for (var _b = 0, outputRoles_1 = outputRoles; _b < outputRoles_1.length; _b++) {
                            var outputRole = outputRoles_1[_b];
                            if (outputRole.algorithmRole === select.expr.role && null != outputRole.joinPredicateBehavior) {
                                item.joinPredicate = outputRole.joinPredicateBehavior, isJoinPredicateSet = !0;
                                break;
                            }
                        }
                        if (isJoinPredicateSet) break;
                    }
                }
                return item.scalarKeyInfo = {
                    hasScalarKey: roleSupportsScalarKey && isDesignatedScalarKeyRoleItem
                }, item;
            }, DefaultDataViewMappingCompilerStrategy.prototype.tryGetExprType = function(metadata) {
                metadata = metadata.getMetadata(this.schema, this.exprEvaluationContext);
                if (metadata) return metadata.type;
            }, DefaultDataViewMappingCompilerStrategy.prototype.compileMetadata = function() {
                for (var metadata = {
                    columns: []
                }, orderBy = this.queryDefn.orderBy(), this_1 = this, _i = 0, _a = this.queryDefn.select(); _i < _a.length; _i++) !function(select) {
                    var sortDefinition = _.find(orderBy, function(o) {
                        return data.SQExpr.equals(o.expr, select.expr);
                    }), parameterMetadata = data.SQExprUtils.getParameterMetadata(select.expr, this_1.schema);
                    metadata.columns.push({
                        displayName: void 0,
                        queryName: select.name,
                        type: this_1.tryGetExprType(select.expr),
                        sort: sortDefinition && sortDefinition.direction,
                        parameter: parameterMetadata
                    });
                }(_a[_i]);
                var objectDescriptors = this.objectDescriptors, objectDefinitions = this.objectDefinitions;
                if (!objectDefinitions || !objectDescriptors) return metadata;
                var objectsForAllSelectors = data.DataViewObjectEvaluationUtils.groupObjectsBySelector(objectDefinitions), evalContext = data.createEmptyEvalContext(), visualStyle = powerbi.visuals.visualStyles.create();
                if (_.isEmpty(objectsForAllSelectors.metadataOnce) || (objects = this.evaluateMetadataOnceObjects(objectsForAllSelectors.metadataOnce, evalContext, visualStyle)) && (metadata.objects = objects), 
                !_.isEmpty(objectsForAllSelectors.metadata)) for (var _b = 0, _c = metadata.columns; _b < _c.length; _b++) {
                    var objects, column = _c[_b];
                    (objects = this.evaluateMetadataObjects(column, objectsForAllSelectors.metadata, evalContext, visualStyle)) && (column.objects = objects);
                }
                return metadata;
            }, DefaultDataViewMappingCompilerStrategy.prototype.evaluateMetadataOnceObjects = function(objectDefns, evalContext, visualStyle) {
                for (var metadataObjects, evaluator = new data.DataViewObjectEvaluator(this.featureSwitches, visualStyle), _i = 0, objectDefns_1 = objectDefns; _i < objectDefns_1.length; _i++) {
                    var objects = objectDefns_1[_i], selectorId = objects.selector && objects.selector.id, objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evaluator, evalContext, this.objectDescriptors, objects.objects);
                    objects && powerbi.DataViewObjects.mergeObjects(metadataObjects = metadataObjects || {}, objects, selectorId);
                }
                return metadataObjects;
            }, DefaultDataViewMappingCompilerStrategy.prototype.evaluateMetadataObjects = function(column, objectDefns, evalContext, visualStyle) {
                for (var columnObjects, evaluator = new data.DataViewObjectEvaluator(this.featureSwitches, visualStyle), _i = 0, objectDefns_2 = objectDefns; _i < objectDefns_2.length; _i++) {
                    var objects = objectDefns_2[_i], selector = objects.selector;
                    !selector.metadata || selector.metadata !== column.queryName || (objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evaluator, evalContext, this.objectDescriptors, objects.objects)) && powerbi.DataViewObjects.mergeObjects(columnObjects = columnObjects || {}, objects, selector.id);
                }
                return columnObjects;
            }, DefaultDataViewMappingCompilerStrategy.prototype.compileScriptDefinition = function(mapping, scriptInput) {
                scriptInput = powerbi.ScriptResultUtil.getScriptInputFromScriptDefinition(this.queryProjections, this.queryDefn.select(), this.schema, mapping, scriptInput.objects);
                return {
                    source: mapping.source,
                    provider: mapping.provider,
                    scriptInput: scriptInput,
                    scriptSourceDefault: mapping.scriptSourceDefault,
                    scriptProviderDefault: mapping.scriptProviderDefault,
                    scriptOutputType: mapping.scriptOutputType
                };
            }, DefaultDataViewMappingCompilerStrategy;
        }();
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var Version = jsCommon.Version;
        data.ObjectPropertyVersionWildcard = "*", function(DataViewObjectVersioning) {
            function getThemePropertyIdFromTypeDictionary(renamedObjectVersionDictionary, objectName, propertyName, version) {
                var renamedProperty = renamedObjectVersionDictionary && renamedObjectVersionDictionary[objectName] && renamedObjectVersionDictionary[objectName][propertyName];
                if (renamedProperty) {
                    for (var id = renamedProperty.currentId; renamedProperty && Version.lt(version, renamedProperty.version); ) id = renamedProperty.previousId, 
                    renamedProperty = renamedProperty.previous;
                    return id;
                }
            }
            function getVersionForDefinition(addedObjectPropertyVersionDictionary, propertyDefn, selector, type, objectName, propertyName, targetVersion, isExprBound) {
                return Version.max(validVersionObject(addedObjectPropertyVersionDictionary[data.ObjectPropertyVersionWildcard], objectName, propertyName, propertyDefn, selector, targetVersion, isExprBound), validVersionObject(addedObjectPropertyVersionDictionary[type], objectName, propertyName, propertyDefn, selector, targetVersion, isExprBound));
            }
            function validVersionObject(objectVersionDictionary, propertyVersionDictionary, propertyName, propertyDefn, selector, targetVersion, isExprBound) {
                propertyVersionDictionary = objectVersionDictionary && objectVersionDictionary[propertyVersionDictionary];
                return propertyVersionDictionary ? Version.max(validateProperty(propertyVersionDictionary[data.ObjectPropertyVersionWildcard], propertyDefn, selector, targetVersion, isExprBound), validateProperty(propertyVersionDictionary[propertyName], propertyDefn, selector, targetVersion, isExprBound)) : Version.ZeroStr;
            }
            function validateProperty(propertyVersionArray, propertyDefn, selector, targetVersion, isExprBound) {
                if (!propertyVersionArray) return Version.ZeroStr;
                for (var i = propertyVersionArray.length - 1; 0 <= i; i--) {
                    var objectVersion = propertyVersionArray[i];
                    if (i && Version.lt(objectVersion.version, propertyVersionArray[i - 1].version), 
                    !Version.lt(targetVersion, objectVersion.version)) break;
                    var matchByContents = objectVersion.property.matchByContents;
                    if ((!matchByContents || matchByContents(propertyDefn, selector)) && (!objectVersion.property.isExprBound || isExprBound())) return objectVersion.version;
                }
                return Version.ZeroStr;
            }
            DataViewObjectVersioning.getThemePropertyId = function(type, objectName, propertyName, version, renamedObjectPropertyVersionDictionary) {
                return getThemePropertyIdFromTypeDictionary(renamedObjectPropertyVersionDictionary[type], objectName, propertyName, version) || getThemePropertyIdFromTypeDictionary(renamedObjectPropertyVersionDictionary[data.ObjectPropertyVersionWildcard], objectName, propertyName, version) || {
                    objectName: objectName,
                    propertyName: propertyName
                };
            }, DataViewObjectVersioning.shouldApplyDefnToTheme = function(addedObjectPropertyVersionDictionary, propertyDefn, type, objectName, propertyName, targetVersion) {
                return getVersionForDefinition(addedObjectPropertyVersionDictionary, propertyDefn, null, type, objectName, propertyName, targetVersion, function() {
                    return !1;
                }) === Version.ZeroStr;
            }, DataViewObjectVersioning.getVersionForDefinition = getVersionForDefinition, DataViewObjectVersioning.getFirstVersionForIdentifier = function(addedObjectPropertyVersionDictionary, propertyVersionArray, objectVersionDictionary) {
                if (objectVersionDictionary = addedObjectPropertyVersionDictionary[objectVersionDictionary]) {
                    objectVersionDictionary = objectVersionDictionary[propertyVersionArray.objectName];
                    if (objectVersionDictionary) {
                        propertyVersionArray = objectVersionDictionary[propertyVersionArray.propertyName];
                        return _.reduce(propertyVersionArray, function(acc, propertyEntry) {
                            return propertyEntry.property.matchByContents || propertyEntry.property.isExprBound ? acc : Version.max(acc, propertyEntry.version);
                        }, Version.ZeroStr);
                    }
                }
                return Version.ZeroStr;
            };
        }(data.DataViewObjectVersioning || (data.DataViewObjectVersioning = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var ArrayExtensions = jsCommon.ArrayExtensions;
        !function(QueryDataViewCategorical) {
            function removeMetadataColumn(collection, columnIndex) {
                columnIndex = collection.indexOf(columnIndex);
                0 <= columnIndex && collection.splice(columnIndex, 1);
            }
            function removeAllData(metadata, measuresPerSeriesCount) {
                var categories = measuresPerSeriesCount.categories;
                if (categories) for (var _i = 0, categories_2 = categories; _i < categories_2.length; _i++) {
                    var category = categories_2[_i];
                    category.values.splice(0), category.identity.splice(0);
                }
                var seriesAndMeasures = measuresPerSeriesCount.values;
                if (seriesAndMeasures) {
                    var measuresToRemoveCount = seriesAndMeasures.grouped();
                    if (!_.isEmpty(measuresToRemoveCount)) {
                        for (var measuresPerSeriesCount = measuresToRemoveCount[0], metadataColumns = metadata.columns, _a = 0, _b = measuresPerSeriesCount.values; _a < _b.length; _a++) !function(measureColumn) {
                            var metadataColumnWithoutGroupName, measureMetadataColumn = measureColumn.source;
                            measureMetadataColumn.groupName && ((metadataColumnWithoutGroupName = _.find(metadataColumns, function(metadataColumn) {
                                return !metadataColumn.groupName && metadataColumn.index === measureMetadataColumn.index && metadataColumn.isMeasure === measureMetadataColumn.isMeasure;
                            })) ? (measureColumn.source = metadataColumnWithoutGroupName, removeMetadataColumn(metadataColumns, measureMetadataColumn)) : delete measureMetadataColumn.groupName);
                        }(_b[_a]);
                        var emptySeries_1 = [ {
                            values: measuresPerSeriesCount.values,
                            objects: measuresPerSeriesCount.objects
                        } ];
                        if (seriesAndMeasures.grouped = function() {
                            return emptySeries_1;
                        }, 2 <= measuresToRemoveCount.length) {
                            measuresPerSeriesCount = measuresPerSeriesCount.values.length;
                            if (0 < measuresPerSeriesCount) {
                                for (var measuresToRemoveCount = measuresPerSeriesCount * (measuresToRemoveCount.length - 1), i = measuresPerSeriesCount, ilen = measuresPerSeriesCount + measuresToRemoveCount; i < ilen; i++) {
                                    var metadataColumnWithGroupName = seriesAndMeasures[i].source;
                                    removeMetadataColumn(metadataColumns, metadataColumnWithGroupName);
                                }
                                seriesAndMeasures.splice(measuresPerSeriesCount, measuresToRemoveCount);
                            }
                        }
                    }
                    for (var _c = 0, seriesAndMeasures_1 = seriesAndMeasures; _c < seriesAndMeasures_1.length; _c++) {
                        var measure = seriesAndMeasures_1[_c];
                        measure.values.splice(0), delete measure.identity;
                    }
                }
                categories && _.every(categories, function(category) {
                    return _.isEmpty(category.values) && _.isEmpty(category.identity);
                }), seriesAndMeasures && _.every(seriesAndMeasures.grouped(), function(series) {
                    return !series.name && !series.identity;
                }), seriesAndMeasures && _.every(seriesAndMeasures, function(valueColumn) {
                    return _.isEmpty(valueColumn.values);
                });
            }
            function spliceByDescendingIndices(values, indicesToRemove) {
                if (ArrayExtensions.isSortedNumeric(indicesToRemove, !0), _.uniq(indicesToRemove).length, 
                indicesToRemove.length, !_.isEmpty(indicesToRemove)) if (0 <= _.last(indicesToRemove) && (_.head(indicesToRemove), 
                values.length), values.length !== indicesToRemove.length) {
                    for (var nextSpliceStart, nextSpliceCount = 0, _i = 0, indicesToRemove_1 = indicesToRemove; _i < indicesToRemove_1.length; _i++) {
                        var nextIndex = indicesToRemove_1[_i];
                        void 0 === nextSpliceStart || nextSpliceStart === nextIndex + 1 ? (nextSpliceStart = nextIndex, 
                        nextSpliceCount++) : (values.splice(nextSpliceStart, nextSpliceCount), nextSpliceStart = nextIndex, 
                        nextSpliceCount = 1);
                    }
                    values.splice(nextSpliceStart, nextSpliceCount);
                } else values.splice(0);
            }
            QueryDataViewCategorical.removeGroupInstances = function(metadata, dataViewCategorical, categoryRemovalPredicate, seriesRemovalPredicate) {
                seriesRemovalPredicate && function(metadata, dataViewCategorical, seriesIndicesToRemove) {
                    var seriesInstances = dataViewCategorical.values && dataViewCategorical.values.grouped();
                    _.isEmpty(seriesInstances) || (seriesIndicesToRemove = function(seriesMetadataColumn, seriesInstances, removalPredicate) {
                        for (var seriesIndicesToRemove = [], i = seriesInstances.length - 1; 0 <= i; i--) removalPredicate(seriesInstances[i], seriesMetadataColumn) && seriesIndicesToRemove.push(i);
                        return seriesIndicesToRemove;
                    }(dataViewCategorical.values && dataViewCategorical.values.source, seriesInstances, seriesIndicesToRemove), 
                    function(metadata, dataViewCategorical, seriesIndicesToRemove) {
                        if (debug.assertValue(dataViewCategorical && dataViewCategorical.values && !_.isEmpty(dataViewCategorical.values.grouped()), "dataViewCategorical must be defined and the grouped() function must return non-empty result"), 
                        ArrayExtensions.isSortedNumeric(seriesIndicesToRemove, true), _.uniq(seriesIndicesToRemove).length, 
                        seriesIndicesToRemove.length, !_.isEmpty(seriesIndicesToRemove)) {
                            var seriesAndMeasures = dataViewCategorical.values, seriesInstances = seriesAndMeasures.grouped();
                            if (seriesInstances.length !== seriesIndicesToRemove.length) {
                                var measurePerSeriesCount = seriesInstances[0].values.length;
                                if (_.every(seriesInstances, function(seriesInstance) {
                                    return seriesInstance.values.length === measurePerSeriesCount;
                                }), 0 < measurePerSeriesCount) for (var metadataColumns = metadata.columns, _i = 0, seriesIndicesToRemove_1 = seriesIndicesToRemove; _i < seriesIndicesToRemove_1.length; _i++) {
                                    var indexOfFirstMeasureInSeries = seriesIndicesToRemove_1[_i] * measurePerSeriesCount;
                                    seriesAndMeasures.length;
                                    for (var i = indexOfFirstMeasureInSeries, ilen = indexOfFirstMeasureInSeries + measurePerSeriesCount; i < ilen; i++) {
                                        var metadataColumnWithGroupName = seriesAndMeasures[i].source;
                                        removeMetadataColumn(metadataColumns, metadataColumnWithGroupName);
                                    }
                                    seriesAndMeasures.splice(indexOfFirstMeasureInSeries, measurePerSeriesCount);
                                }
                                spliceByDescendingIndices(seriesInstances, seriesIndicesToRemove), seriesAndMeasures.grouped = function() {
                                    return seriesInstances;
                                };
                            } else removeAllData(metadata, dataViewCategorical);
                        }
                    }(metadata, dataViewCategorical, seriesIndicesToRemove));
                }(metadata, dataViewCategorical, seriesRemovalPredicate), categoryRemovalPredicate && function(metadata, dataViewCategorical, rowIndicesToRemove) {
                    var categories = dataViewCategorical.categories;
                    _.isEmpty(categories) || (rowIndicesToRemove = function(categories, removalPredicate) {
                        var valueCount = categories[0].values.length;
                        _.every(categories, function(category) {
                            return category.values.length === valueCount;
                        });
                        for (var categoryIndicesToRemove = [], i = valueCount - 1; 0 <= i; i--) removalPredicate(i, categories) && categoryIndicesToRemove.push(i);
                        return categoryIndicesToRemove;
                    }(categories, rowIndicesToRemove), function(metadata, dataViewCategorical, rowIndicesToRemove) {
                        if (debug.assertValue(dataViewCategorical, "dataViewCategorical"), ArrayExtensions.isSortedNumeric(rowIndicesToRemove, true), 
                        _.uniq(rowIndicesToRemove).length, rowIndicesToRemove.length, !_.isEmpty(rowIndicesToRemove)) if (data.DataViewCategoricalUtils.getRowCount(dataViewCategorical) !== rowIndicesToRemove.length) {
                            data.DataViewCategoricalUtils.getRowCount(dataViewCategorical);
                            var measureColumns = dataViewCategorical.categories;
                            if (!_.isEmpty(measureColumns)) for (var _i = 0, categories_1 = measureColumns; _i < categories_1.length; _i++) {
                                var category = categories_1[_i];
                                spliceByDescendingIndices(category.values, rowIndicesToRemove), spliceByDescendingIndices(category.identity, rowIndicesToRemove);
                            }
                            measureColumns = dataViewCategorical.values;
                            if (!_.isEmpty(measureColumns)) for (var _a = 0, measureColumns_1 = measureColumns; _a < measureColumns_1.length; _a++) spliceByDescendingIndices(measureColumns_1[_a].values, rowIndicesToRemove);
                        } else removeAllData(metadata, dataViewCategorical);
                    }(metadata, dataViewCategorical, rowIndicesToRemove));
                }(metadata, dataViewCategorical, categoryRemovalPredicate);
            };
        }(data.QueryDataViewCategorical || (data.QueryDataViewCategorical = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var ClientSideFilter, QueryDataViewCategorical = powerbi.data.QueryDataViewCategorical, StringExtensions = jsCommon.StringExtensions;
        !function(ClientSideFilter) {
            function getFilterSelectIndex(condition) {
                condition = condition.Condition;
                if (condition.Contains) return condition.Contains.SelectIndex;
                JSON.stringify(condition);
            }
            function getFiltersByMetadataColumn(clientSideFilters, metadataColumns) {
                if (_.isEmpty(clientSideFilters) || _.isEmpty(metadataColumns)) return [];
                for (var selectIndices = {}, _i = 0, metadataColumns_1 = metadataColumns; _i < metadataColumns_1.length; _i++) {
                    var metadataColumn = metadataColumns_1[_i];
                    selectIndices[metadataColumn.index] = !0;
                }
                return _.filter(clientSideFilters, function(filterSelectIndex) {
                    filterSelectIndex = getFilterSelectIndex(filterSelectIndex);
                    return !!selectIndices[filterSelectIndex];
                });
            }
            function shouldRemoveValue(condition, normalizedValue) {
                var shouldRemoveValue = !1, condition = condition.Condition;
                return condition.Contains ? (condition.Contains.LiteralValue, normalizeString(condition.Contains.LiteralValue), 
                shouldRemoveValue = !_.isString(normalizedValue) || (normalizedValue = normalizeString(normalizedValue), 
                !StringExtensions.contains(normalizedValue, condition.Contains.LiteralValue))) : JSON.stringify(condition), 
                shouldRemoveValue;
            }
            function normalizeString(value) {
                return value && StringExtensions.normalizeCase(value);
            }
            ClientSideFilter.isMoreRestrictiveFilter = function(restrictiveFilterInfo, baseFilterInfo) {
                if (!data.SQFilter.targetsEqual(restrictiveFilterInfo, baseFilterInfo)) return !1;
                if (restrictiveFilterInfo = restrictiveFilterInfo.condition, baseFilterInfo = baseFilterInfo.condition, 
                restrictiveFilterInfo instanceof data.SQContainsExpr && baseFilterInfo instanceof data.SQContainsExpr) {
                    restrictiveFilterInfo = SQFilterExprHelper.getInfoIfFilteringByStringConstant(restrictiveFilterInfo), 
                    baseFilterInfo = SQFilterExprHelper.getInfoIfFilteringByStringConstant(baseFilterInfo);
                    if (restrictiveFilterInfo && baseFilterInfo && data.SQExpr.equals(restrictiveFilterInfo.otherSide, baseFilterInfo.otherSide)) return StringExtensions.contains(normalizeString(restrictiveFilterInfo.constantValue), normalizeString(baseFilterInfo.constantValue));
                }
                return !1;
            }, ClientSideFilter.tryConvertToClientSideFilters = function(selects, filters) {
                if (!_.some(filters, function(filter) {
                    return !function(filter) {
                        return !filter.target;
                    }(filter);
                })) {
                    for (var conversionVisitor = new SQFilterConditionsToClientSideFilterConversionVisitor(selects), _i = 0, filters_1 = filters; _i < filters_1.length; _i++) filters_1[_i].condition.accept(conversionVisitor);
                    return conversionVisitor.getClientSideFiltersIfAllSupported();
                }
            }, ClientSideFilter.applyClientSideFilters = function(queryDataView, categoryFilterPredicate) {
                if (!_.isEmpty(categoryFilterPredicate) && !_.isEmpty(queryDataView.metadata.columns)) {
                    _.every(categoryFilterPredicate, function(filter) {
                        return _.some(queryDataView.metadata.columns, function(column) {
                            return !column.isMeasure && column.index === getFilterSelectIndex(filter);
                        });
                    });
                    var seriesFilterPredicate, categorical = queryDataView.categorical;
                    return categorical && (seriesFilterPredicate = function(seriesMetadataColumn, clientSideFilters) {
                        if (debug.assertAnyValue(seriesMetadataColumn, "seriesMetadataColumn"), seriesMetadataColumn) {
                            var seriesFilters = getFiltersByMetadataColumn(clientSideFilters, [ seriesMetadataColumn ]);
                            if (!_.isEmpty(seriesFilters)) return function(seriesInstance) {
                                if (!!seriesInstance.identity) for (var seriesValue = seriesInstance.name, _i = 0, seriesFilters_1 = seriesFilters; _i < seriesFilters_1.length; _i++) if (shouldRemoveValue(seriesFilters_1[_i], seriesValue)) return !0;
                                return !1;
                            };
                        }
                    }(categorical.values && categorical.values.source, categoryFilterPredicate), categoryFilterPredicate = function(categories, clientSideFilters) {
                        var categoryFilters = getFiltersByMetadataColumn(clientSideFilters, _.map(categories, function(category) {
                            return category.source;
                        }));
                        if (!_.isEmpty(categoryFilters)) return function(categoryInstanceIndex, categories) {
                            for (var _i = 0, categoryFilters_1 = categoryFilters; _i < categoryFilters_1.length; _i++) {
                                var state_1 = function(categoryFilter) {
                                    if (_.every(categories, function(category) {
                                        return shouldRemoveValue(categoryFilter, category.values[categoryInstanceIndex]);
                                    })) return {
                                        value: !0
                                    };
                                }(categoryFilters_1[_i]);
                                if ("object" == typeof state_1) return state_1.value;
                            }
                            return !1;
                        };
                    }(categorical.categories, categoryFilterPredicate), QueryDataViewCategorical.removeGroupInstances(queryDataView.metadata, categorical, categoryFilterPredicate, seriesFilterPredicate)), 
                    queryDataView;
                }
            }, ClientSideFilter.normalizeString = normalizeString;
        }(ClientSideFilter = data.ClientSideFilter || (data.ClientSideFilter = {}));
        var SQFilterExprHelper, SQFilterConditionsToClientSideFilterConversionVisitor = function(_super) {
            function SQFilterConditionsToClientSideFilterConversionVisitor(selects) {
                var _this = _super.call(this) || this;
                return _this.clientSideFilters = [], _this.selects = selects, _this;
            }
            return __extends(SQFilterConditionsToClientSideFilterConversionVisitor, _super), 
            SQFilterConditionsToClientSideFilterConversionVisitor.prototype.visitContains = function(containsFilter) {
                var isSupportedFilter, selectIndex;
                this.hasUnsupportedFilter() || (isSupportedFilter = !1, (selectIndex = SQFilterExprHelper.getInfoIfFilteringByStringConstant(containsFilter)) && (containsFilter = selectIndex.constantValue, 
                0 <= (selectIndex = data.SQExprUtils.indexOfNamedExpr(this.selects, selectIndex.otherSide)) && containsFilter && (containsFilter = {
                    Condition: {
                        Contains: {
                            SelectIndex: selectIndex,
                            LiteralValue: ClientSideFilter.normalizeString(containsFilter)
                        }
                    }
                }, this.clientSideFilters.push(containsFilter), isSupportedFilter = !0)), isSupportedFilter || this.setUnsupportedFilter());
            }, SQFilterConditionsToClientSideFilterConversionVisitor.prototype.visitAnd = function(expr) {
                this.hasUnsupportedFilter() || (expr.left.accept(this), expr.right.accept(this));
            }, SQFilterConditionsToClientSideFilterConversionVisitor.prototype.visitDefault = function(_expr) {
                this.setUnsupportedFilter();
            }, SQFilterConditionsToClientSideFilterConversionVisitor.prototype.getClientSideFiltersIfAllSupported = function() {
                if (!this.hasUnsupportedFilter()) return this.clientSideFilters;
            }, SQFilterConditionsToClientSideFilterConversionVisitor.prototype.hasUnsupportedFilter = function() {
                return void 0 === this.clientSideFilters;
            }, SQFilterConditionsToClientSideFilterConversionVisitor.prototype.setUnsupportedFilter = function() {
                this.clientSideFilters = void 0;
            }, SQFilterConditionsToClientSideFilterConversionVisitor;
        }(data.DefaultSQExprVisitor);
        !function(SQFilterExprHelper) {
            SQFilterExprHelper.getInfoIfFilteringByStringConstant = function(containsExpr) {
                if (containsExpr) {
                    var stringConstantValue = SQFilterExprHelper.getValueIfStringConstant(containsExpr.left);
                    return stringConstantValue ? {
                        constantValue: stringConstantValue,
                        otherSide: containsExpr.right
                    } : {
                        constantValue: stringConstantValue = SQFilterExprHelper.getValueIfStringConstant(containsExpr.right),
                        otherSide: containsExpr.left
                    };
                }
            }, SQFilterExprHelper.getValueIfStringConstant = function(expr) {
                if (data.SQExpr.isConstant(expr) && expr.type.text) return expr.value;
            };
        }(SQFilterExprHelper = SQFilterExprHelper || {});
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var DataViewAnalysis = powerbi.DataViewAnalysis, SQExprUtils = powerbi.data.SQExprUtils, StringExtensions = jsCommon.StringExtensions, DataBoundObjectQueryExtensionWarning = function() {
            function DataBoundObjectQueryExtensionWarning(warningType, propertyId, valueExpr, selector, objectDiplayName, propertyDisplayName, expectedValueType) {
                this.warningType = warningType, this.propertyId = propertyId, this.valueExpr = valueExpr, 
                this.selector = selector, this.objectDiplayName = objectDiplayName, this.propertyDisplayName = propertyDisplayName, 
                this.expectedValueType = expectedValueType;
            }
            return DataBoundObjectQueryExtensionWarning.prototype.columnNameFromIndex = function(index) {}, 
            Object.defineProperty(DataBoundObjectQueryExtensionWarning.prototype, "code", {
                get: function() {
                    switch (this.warningType) {
                      case 1:
                        return "DataBoundObjectQueryExtensionWarningInvalidType";

                      case 2:
                        return "DataBoundObjectQueryExtensionWarningMissingReference";

                      case 0:
                        return;

                      default:
                        this.warningType;
                    }
                },
                enumerable: !1,
                configurable: !0
            }), DataBoundObjectQueryExtensionWarning.prototype.getDetails = function(resourceProvider, sourceField) {
                if (sourceField) {
                    var result = [], namePatternColon = resourceProvider.get("NamePattern_Colon"), isInvalidType = 1 === this.warningType, hintKey = isInvalidType ? "DataBoundExprWarning_InvalidType_Message" : "DataBoundExprWarning_MissingReference_Message";
                    result.push(StringExtensions.format(resourceProvider.get(isInvalidType ? "DataBoundExprWarning_InvalidType_Title" : "DataBoundExprWarning_MissingReference_Title"), data.getDisplayName(this.propertyDisplayName, resourceProvider))), 
                    result.push(StringExtensions.format(namePatternColon, resourceProvider.get("VisualWarning_PropertyEvaluation_Tooltip_Section"), data.getDisplayName(this.objectDiplayName, resourceProvider)));
                    sourceField = sourceField(this.valueExpr);
                    return result.push(StringExtensions.format(namePatternColon, resourceProvider.get("Field_Source"), sourceField)), 
                    isInvalidType && this.expectedValueType && result.push(StringExtensions.format(namePatternColon, resourceProvider.get("DataBoundExprWarning_ExpectedDataType"), data.DataBoundExprWarning.getPrimitiveValueType(this.expectedValueType, resourceProvider))), 
                    result.push(resourceProvider.get(hintKey)), {
                        message: result.join("\n"),
                        displayableErrorInfo: []
                    };
                }
            }, DataBoundObjectQueryExtensionWarning;
        }();
        data.DataBoundObjectQueryExtensionWarning = DataBoundObjectQueryExtensionWarning, 
        function(DataBoundObjectQueryExtender) {
            function extendInternal(queryDefn, schema, objectsAndDescriptors, queryRefsByRole, projections, roleKindByQueryRef, additionalFilters, liftInlineSubqueries) {
                if (!_.isEmpty(objectsAndDescriptors)) {
                    for (var querySelects = queryDefn.select(), warnings = [], dataBoundExprs = [], ignoreUnreferencedPropertyDataBoundExprs = [], referencedValues = [], _i = 0, objectsAndDescriptors_1 = objectsAndDescriptors; _i < objectsAndDescriptors_1.length; _i++) {
                        var objectAndDescriptorPair = objectsAndDescriptors_1[_i];
                        objectAndDescriptorPair.objects && objectAndDescriptorPair.descriptors && data.DataViewObjectDefinitions.visitPropertyDefinitions(objectAndDescriptorPair.objects, objectAndDescriptorPair.descriptors, findAdditionalProjections);
                    }
                    for (var _a = 0, ignoreUnreferencedPropertyDataBoundExprs_1 = ignoreUnreferencedPropertyDataBoundExprs; _a < ignoreUnreferencedPropertyDataBoundExprs_1.length; _a++) for (var expression = ignoreUnreferencedPropertyDataBoundExprs_1[_a], _b = 0, referencedValues_1 = referencedValues; _b < referencedValues_1.length; _b++) {
                        var reference = referencedValues_1[_b];
                        if (data.Selector.equals(expression.selector, reference)) {
                            data.DataBoundExprExtractor.addUnique(dataBoundExprs, expression);
                            break;
                        }
                    }
                    for (var additionalProjections = [], objectDefinitionRewrites = [], _c = 0, dataBoundExprs_1 = dataBoundExprs; _c < dataBoundExprs_1.length; _c++) {
                        var dataBoundExpr = dataBoundExprs_1[_c], selector = dataBoundExpr.selector, additionalProjection = function(dataBoundExpr, queryDefn, expr, rewriter) {
                            var objectDefinitionRewrite, aggregates = dataBoundExpr.aggregates, selector = dataBoundExpr.selector, context = dataBoundExpr.context, originalExpr = dataBoundExpr.expr, expr = getExpressionToAdd(dataBoundExpr.expr, context, expr);
                            {
                                if (aggregates || selector && !_.isEmpty(selector.data)) return (newSelect = queryDefn.selectNameOf(expr)) ? {
                                    queryName: newSelect,
                                    queryDefn: queryDefn,
                                    objectDefinitionRewrite: void 0
                                } : {
                                    queryName: (queryDefn = queryDefn.addSelect(expr)).selectNameOf(expr),
                                    queryDefn: queryDefn,
                                    objectDefinitionRewrite: void 0
                                };
                                queryDefn = queryDefn.addSelect(expr);
                                var newSelect = _.last(queryDefn.select());
                                return data.SQExpr.equals(newSelect.expr, expr), rewriter && (rewriter = new data.InlineSubqueryRewriter(queryDefn), 
                                queryDefn = rewriter.rewrite(), rewriter.didRewrite && (objectDefinitionRewrite = {
                                    from: originalExpr,
                                    to: data.SQExprBuilder.selectRef(newSelect.name),
                                    selector: dataBoundExpr.selector
                                })), {
                                    queryName: newSelect.name,
                                    queryDefn: queryDefn,
                                    objectDefinitionRewrite: objectDefinitionRewrite
                                };
                            }
                        }(dataBoundExpr, queryDefn, additionalFilters, liftInlineSubqueries);
                        queryDefn = additionalProjection.queryDefn, additionalProjection.objectDefinitionRewrite && objectDefinitionRewrites.push(additionalProjection.objectDefinitionRewrite);
                        additionalProjection = {
                            queryName: additionalProjection.queryName,
                            selector: selector
                        };
                        dataBoundExpr.aggregates && (additionalProjection.aggregates = dataBoundExpr.aggregates), 
                        selector && !_.isEmpty(selector.data) && (additionalProjection.joinPredicate = 0), 
                        additionalProjections.push(additionalProjection);
                    }
                    return _.isEmpty(additionalProjections) && _.isEmpty(warnings) ? void 0 : {
                        queryDefn: queryDefn,
                        warnings: warnings,
                        additionalProjections: additionalProjections,
                        objectDefinitionRewrites: objectDefinitionRewrites
                    };
                }
                function findAdditionalProjections(dataBoundExpressionsAndReferences, propertyName, propertySelector, objectName, objectDescriptor) {
                    var propertyDescriptor = objectDescriptor && objectDescriptor.properties[propertyName], propDefn = dataBoundExpressionsAndReferences[propertyName], propType = propertyDescriptor.type;
                    if (propertyDescriptor.rule) {
                        if (propertyDescriptor.type.fillRule && powerbi.StructuralObjectDefinition.isFillRuleDefinition(propDefn), 
                        !matchesAnyCondition(propertyDescriptor.rule.conditions, projections, roleKindByQueryRef)) return;
                        var propertyDataBoundExprs = function(inputRole, queryDefn, queryRefsByRole) {
                            inputRole = inputRole.inputRole;
                            if (inputRole) {
                                var inputQueryRefs = queryRefsByRole[inputRole];
                                if (!_.isEmpty(inputQueryRefs)) return _.chain(queryDefn.select()).filter(function(select) {
                                    return _.includes(inputQueryRefs, select.name);
                                }).map(function(select) {
                                    return select.expr;
                                }).value();
                            }
                        }(propertyDescriptor.rule, queryDefn, queryRefsByRole);
                        if (_.isEmpty(propertyDataBoundExprs)) return;
                        _.size(propertyDataBoundExprs), propertySelector = {
                            data: _.map(propertyDataBoundExprs, function(expr) {
                                return data.createDataViewScopeIdentity(expr);
                            })
                        }, propertyDataBoundExprs = data.DataViewObjectDefinitions.getDataBoundExprs(propDefn, propertyDescriptor.type, propertySelector, querySelects, propertyDataBoundExprs[0]);
                    } else propType && propType.dataBars ? propertySelector && propertySelector.metadata && querySelects.withName(propertySelector.metadata) && (_.isEmpty(propertySelector.data) && ((propertySelector = _.cloneDeep(propertySelector)).data = [ data.DataViewWildcard.create() ]), 
                    propertyDataBoundExprs = data.DataViewObjectDefinitions.getDataBoundExprs(propDefn, propertyDescriptor.type, propertySelector, querySelects, querySelects.withName(propertySelector.metadata).expr)) : (dataBoundExpressionsAndReferences = data.DataViewObjectDefinitions.getDataBoundExprsAndValueRef(dataBoundExpressionsAndReferences[propertyName], propType, propertySelector, querySelects), 
                    propertyDescriptor.ignoreUnreferenced ? (_.isEmpty(dataBoundExpressionsAndReferences.references), 
                    ignoreUnreferencedPropertyDataBoundExprs.push.apply(ignoreUnreferencedPropertyDataBoundExprs, dataBoundExpressionsAndReferences.expressions)) : (propertyDataBoundExprs = dataBoundExpressionsAndReferences.expressions, 
                    referencedValues.push.apply(referencedValues, dataBoundExpressionsAndReferences.references.map(function(valueRef) {
                        return valueRef.selector;
                    }))));
                    if (!_.isEmpty(propertyDataBoundExprs) && ((!propertySelector || function(selector, querySelects) {
                        var metadataSelector = selector.metadata;
                        if (!metadataSelector) return !0;
                        for (var _i = 0, querySelects_2 = querySelects; _i < querySelects_2.length; _i++) if (querySelects_2[_i].name === metadataSelector) return !0;
                    }(propertySelector, querySelects)) && void 0 !== getScopeRefs(null == propertySelector ? void 0 : propertySelector.data, querySelects, queryRefsByRole))) for (var _i = 0, propertyDataBoundExprs_1 = propertyDataBoundExprs; _i < propertyDataBoundExprs_1.length; _i++) {
                        var dataBoundExpr = propertyDataBoundExprs_1[_i];
                        if (dataBoundExpr.expr) {
                            if (schema) {
                                var warningType = SQExprUtils.buildExprEvaluationContext(queryDefn.from()), warning = dataBoundExpr.expr.getMetadata(schema, warningType);
                                if (null == warning || !powerbi.ValueType.isCompatibleFromAny(propType, warning.type)) {
                                    warningType = warning ? 1 : 2, warning = warning ? powerbi.ValueType.fromDescriptor(propType) : null, 
                                    warning = new DataBoundObjectQueryExtensionWarning(warningType, {
                                        objectName: objectName,
                                        propertyName: propertyName
                                    }, dataBoundExpr.expr, propertySelector, objectDescriptor.displayName, propertyDescriptor.displayName, warning);
                                    warnings.push(warning);
                                    continue;
                                }
                            }
                            data.DataBoundExprExtractor.addUnique(dataBoundExprs, dataBoundExpr);
                        }
                    }
                }
            }
            function getExpressionToAdd(expr, additionalFilterConditions, newQuery) {
                if (!data.SQExpr.isAggregation(expr) || !data.SQExpr.isColumn(expr.arg) || !data.SQExpr.isSubqueryRef(expr.arg.source)) return expr;
                var query = expr.arg.source.query;
                if (!query) return expr;
                var filterContext = additionalFilterConditions && additionalFilterConditions.filterContext;
                if (_.isEmpty(filterContext) && !newQuery) return expr;
                newQuery && (additionalFilterConditions = newQuery.conditions(), _.some(additionalFilterConditions, function(condition) {
                    return 1 === data.FilterKindDetector.runDetector(condition);
                }));
                newQuery = function resolveQueryFilterPrecedence(query, filters) {
                    var hasModelReferences = function(query) {
                        var key, hasModelReferences = !1, fromSources = query.from().sources();
                        for (key in fromSources) {
                            var source = fromSources[key];
                            if (powerbi.data.isSQFromEntitySource(source)) {
                                hasModelReferences = !0;
                                break;
                            }
                        }
                        return hasModelReferences;
                    };
                    if (hasModelReferences(query)) return promoteFiltersToQuery(query, filters);
                    var fromSources = query.from().sources();
                    for (var key in fromSources) {
                        var newQuery = fromSources[key];
                        if (powerbi.data.isSQFromSubquerySource(newQuery)) {
                            newQuery = resolveQueryFilterPrecedence(newQuery.subquery, filters);
                            return fromSources[key] = new powerbi.data.SQFromSubquerySource(newQuery), query.from(new powerbi.data.SQFrom(fromSources));
                        }
                    }
                }(query, _.isEmpty(filterContext) ? [ newQuery ] : resolveFilterPrecedence(_.map(filterContext, function(fc) {
                    return fc.filter;
                }), newQuery, !0, !1));
                return expr.accept(new SubqueryReplacer(newQuery));
            }
            function promoteFiltersToQuery(query, mergedFilters) {
                if (!data.SemanticQuery.willFiltersAffectQuery(query)) return query;
                var queryFilters = data.SemanticFilter.unmerge(data.SemanticFilter.fromSQFromAndSQFilters(query.from(), query.where())), mergedFilters = _.isEmpty(queryFilters) ? mergedFilters : resolveFilterPrecedence(queryFilters, data.SemanticFilter.merge(mergedFilters), !1, !0), mergedFilters = data.SemanticFilter.merge(mergedFilters);
                return query.where(mergedFilters.where(), mergedFilters.from());
            }
            function resolveFilterPrecedence(filters, additionalFilters, promoteMeasureFiltersToSubquery, onlyPromoteAdditional) {
                for (var result = [], _i = 0, orderedFilters_1 = function(groupedFilters, additionalFilters) {
                    var result = [];
                    additionalFilters && result.push({
                        filters: [ additionalFilters ],
                        kind: void 0
                    });
                    groupedFilters = function(filters) {
                        return _.groupBy(filters, function(conditions) {
                            conditions = conditions.conditions();
                            return _.size(conditions), data.FilterKindDetector.runDetector(conditions[0]);
                        });
                    }(groupedFilters);
                    groupedFilters[0] && result.push({
                        filters: groupedFilters[0],
                        kind: 0
                    });
                    groupedFilters[3] && result.push({
                        filters: groupedFilters[3],
                        kind: 3
                    });
                    groupedFilters[2] && result.push({
                        filters: groupedFilters[2],
                        kind: 2
                    });
                    groupedFilters[1] && result.push({
                        filters: groupedFilters[1],
                        kind: 1
                    });
                    return result;
                }(filters, additionalFilters); _i < orderedFilters_1.length; _i++) {
                    var filterGroup = orderedFilters_1[_i], resolvedFilters = filterGroup.filters;
                    3 === filterGroup.kind || 1 === filterGroup.kind ? (1 === filterGroup.kind && promoteMeasureFiltersToSubquery && (resolvedFilters = [ function(measureFilters) {
                        for (var targets, measuresQuery = data.SemanticQuery.create(), _i = 0, measureFilters_1 = measureFilters; _i < measureFilters_1.length; _i++) {
                            var newTarget = measureFilters_1[_i];
                            measuresQuery = measuresQuery.addSemanticFilter(newTarget);
                            newTarget = newTarget.where()[0].target;
                            _.isEmpty(targets) || jsCommon.ArrayExtensions.hasSameValues(newTarget, targets, function(l, r) {
                                return data.SQExpr.equals(l, r);
                            }), targets = targets || newTarget;
                        }
                        for (var _a = 0, targets_1 = targets; _a < targets_1.length; _a++) {
                            var target = targets_1[_a];
                            measuresQuery = measuresQuery.addSelect(target);
                        }
                        return data.SemanticFilter.fromMeasuresQuery(measuresQuery, targets);
                    }(filterGroup.filters) ]), onlyPromoteAdditional ? resolvedFilters = _.map(resolvedFilters, function(s) {
                        return data.SubqueryRewriter.makeSubqueriesLowerPrecedenceThanSpecificFilters(s, [ additionalFilters ]);
                    }) : _.isEmpty(result) || (resolvedFilters = _.map(resolvedFilters, function(s) {
                        return data.SubqueryRewriter.makeSubqueriesLowerPrecedenceThanSpecificFilters(s, result);
                    })), result.push.apply(result, resolvedFilters)) : result.push.apply(result, resolvedFilters);
                }
                return result;
            }
            DataBoundObjectQueryExtender.extend = extendInternal, DataBoundObjectQueryExtender.needsToExtend = function(queryDefn, objectsAndDescriptors) {
                return !!extendInternal(queryDefn, null, objectsAndDescriptors, {}, {}, {}, void 0, void 0);
            }, DataBoundObjectQueryExtender.getExpressionToAdd = getExpressionToAdd;
            var SubqueryReplacer = function(_super) {
                function SubqueryReplacer(query) {
                    var _this = _super.call(this) || this;
                    return _this.query = query, _this;
                }
                return __extends(SubqueryReplacer, _super), SubqueryReplacer.prototype.visitSubqueryRef = function(expr) {
                    return data.SQExprBuilder.subqueryRef(this.query, expr.getAnnotations());
                }, SubqueryReplacer;
            }(data.SQExprRewriter);
            function matchesAnyCondition(conditions, projections, roleKindByQueryRef) {
                if (!conditions) return !0;
                for (var _i = 0, conditions_1 = conditions; _i < conditions_1.length; _i++) {
                    var errors = conditions_1[_i], errors = DataViewAnalysis.checkForConditionErrors(projections, errors, roleKindByQueryRef);
                    if (_.isEmpty(errors)) return !0;
                }
                return !1;
            }
            function getScopeRefs(dataRepetition, querySelects, queryRefsByRole) {
                if (_.isEmpty(dataRepetition)) return null;
                for (var exprs = [], _i = 0, dataRepetition_1 = dataRepetition; _i < dataRepetition_1.length; _i++) {
                    var exprsByRole, dataItem = dataRepetition_1[_i];
                    data.Selector.isRoleWildcard(dataItem) ? (exprsByRole = getExprsFromQueryRefs(queryRefsByRole, dataItem.roles, querySelects), 
                    exprs.push.apply(exprs, exprsByRole || [])) : data.Selector.isWildcard(dataItem) ? (exprsByRole = getExprsFromQueryRefs(queryRefsByRole, Object.keys(queryRefsByRole), querySelects), 
                    exprs.push.apply(exprs, exprsByRole || [])) : data.Selector.isScopeWildcard(dataItem) || data.Selector.isScopeTotal(dataItem) ? exprs.push.apply(exprs, dataItem.exprs || []) : data.Selector.isScopeIdentity(dataItem) && exprs.push(dataItem.expr);
                }
                if (0 !== exprs.length) {
                    for (var scopeRefs = [], _a = 0, querySelects_1 = querySelects; _a < querySelects_1.length; _a++) {
                        var querySelect = querySelects_1[_a], index = SQExprUtils.indexOfExpr(exprs, querySelect.expr);
                        if (!(index < 0) && (exprs.splice(index, 1), scopeRefs.push(querySelect.name), 0 === exprs.length)) break;
                    }
                    if (!(0 < exprs.length || 0 === scopeRefs.length)) return scopeRefs;
                }
            }
            function getExprsFromQueryRefs(queryRefsByRole, roles, selects) {
                for (var flattenedQueryRefs = [], _i = 0, roles_1 = roles; _i < roles_1.length; _i++) {
                    var role = roles_1[_i];
                    flattenedQueryRefs.push.apply(flattenedQueryRefs, queryRefsByRole[role] || []);
                }
                selects = _.filter(selects, function(select) {
                    return _.includes(flattenedQueryRefs, select.name);
                });
                return _.map(selects, function(select) {
                    return select.expr;
                });
            }
            DataBoundObjectQueryExtender.matchesAnyCondition = matchesAnyCondition, DataBoundObjectQueryExtender.getScopeRefs = getScopeRefs;
        }(data.DataBoundObjectQueryExtender || (data.DataBoundObjectQueryExtender = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            var FilterKindDetector = powerbi.data.FilterKindDetector, SQFromEntitySource = powerbi.data.SQFromEntitySource, SQFromPodSource = powerbi.data.SQFromPodSource, SQFromSubquerySource = powerbi.data.SQFromSubquerySource, StringExtensions = jsCommon.StringExtensions, SemanticQuerySerializer = function() {
                function SemanticQuerySerializer() {}
                return SemanticQuerySerializer.serializeQuery = function(query, standalone, serializeAnnotations) {
                    void 0 === standalone && (standalone = !1), void 0 === serializeAnnotations && (serializeAnnotations = !1);
                    var contract = [], queryOrderBy = query.from();
                    this.serializeFrom(queryOrderBy, contract);
                    var queryWhere = this.serializeQueryFilters(query.where(), QueryExpressionBuilder.create, !1), queryOrderBy = query.transforms();
                    if (!_.isEmpty(queryOrderBy)) for (var transforms = [], _i = 0, transformItems_1 = queryOrderBy; _i < transformItems_1.length; _i++) {
                        var outputColumns, transformItem = transformItems_1[_i], transform = _.map(transformItem.input.parameters, function(p) {
                            return QueryExpressionBuilder.createNamed(p, standalone);
                        }), transform = {
                            Name: transformItem.name,
                            Algorithm: transformItem.algorithm,
                            Input: {
                                Parameters: transform
                            },
                            Output: void 0
                        };
                        transformItem.input.table && (outputColumns = this.serializeTransformTableColumns(transformItem.input.table.columns), 
                        transform.Input.Table = {
                            Name: transformItem.input.table.name,
                            Columns: outputColumns
                        }), transformItem.output && transformItem.output.table && (outputColumns = this.serializeTransformTableColumns(transformItem.output.table.columns), 
                        transform.Output = {
                            Table: {
                                Name: transformItem.output.table.name,
                                Columns: outputColumns
                            }
                        }), transforms.push(transform);
                    }
                    for (var queryOrderBy = this.serializeSortDefinitions(query.orderBy(), standalone), querySelect = [], selectItems = query.select(), i = 0, len = selectItems.length; i < len; i++) querySelect.push(QueryExpressionBuilder.createNamed(selectItems[i], standalone, serializeAnnotations));
                    var groupByItems = query.groupBy();
                    if (groupByItems && groupByItems.length) for (var queryGroupBy = [], i = 0, len = groupByItems.length; i < len; i++) queryGroupBy.push(QueryExpressionBuilder.createNamed(groupByItems[i], standalone));
                    contract = {
                        Version: data.SemanticQueryVersions.Version2,
                        From: contract,
                        Select: querySelect
                    };
                    return queryWhere && (contract.Where = queryWhere), transforms && (contract.Transform = transforms), 
                    queryOrderBy && (contract.OrderBy = queryOrderBy), queryGroupBy && (contract.GroupBy = queryGroupBy), 
                    query.top() && (contract.Top = query.top()), contract;
                }, SemanticQuerySerializer.serializeSortDefinitions = function(orderByItems, standalone) {
                    if (orderByItems && orderByItems.length) for (var queryOrderBy = [], i = 0, len = orderByItems.length; i < len; i++) {
                        var clause = orderByItems[i];
                        queryOrderBy.push({
                            Direction: clause.direction,
                            Expression: QueryExpressionBuilder.create(clause.expr, standalone)
                        });
                    }
                    return queryOrderBy;
                }, SemanticQuerySerializer.tryDeserializeQuery = function(contract) {
                    var semanticQuery;
                    try {
                        semanticQuery = this.deserializeQuery(contract);
                    } catch (e) {}
                    if (semanticQuery && !this.isMalformed(semanticQuery)) return semanticQuery;
                }, SemanticQuerySerializer.isMalformed = function(query) {
                    for (var _i = 0, _a = query.select(); _i < _a.length; _i++) if (!_a[_i].expr) return !0;
                    return !1;
                }, SemanticQuerySerializer.serializeQueryFilters = function(filters, queryExpressionBuilderInstance, standalone) {
                    if (!_.isEmpty(filters)) for (var queryFilters = [], _i = 0, filters_2 = filters; _i < filters_2.length; _i++) {
                        var filter = filters_2[_i], queryClause = {
                            Condition: queryExpressionBuilderInstance(filter.condition, standalone)
                        };
                        if (!_.isEmpty(filter.target)) {
                            queryClause.Target = [];
                            for (var _a = 0, _b = filter.target; _a < _b.length; _a++) {
                                var target = _b[_a];
                                queryClause.Target.push(queryExpressionBuilderInstance(target, standalone));
                            }
                        }
                        filter.annotations && (queryClause.Annotations = filter.annotations), queryFilters.push(queryClause);
                    }
                    return queryFilters;
                }, SemanticQuerySerializer.deserializeQuery = function(contract) {
                    var queryVersion = contract.Version || data.SemanticQueryVersions.Version0, upgradeToV1 = queryVersion < data.SemanticQueryVersions.Version1, from = Deserializer.from(contract.From), builder = new data.SemanticQueryBuilder(from), where = contract.Where;
                    if (where) for (var i = 0, len = where.length; i < len; i++) {
                        var whereItem = Deserializer.filter(where[i], from);
                        whereItem && (upgradeToV1 && (whereItem = FilterTargetUpgrader.Upgrade(queryVersion, whereItem)), 
                        builder.addWhere(whereItem));
                    }
                    var transform = contract.Transform, fromWithTransforms = from;
                    if (!_.isEmpty(transform)) {
                        for (var allEntities = {}, _i = 0, keys_1 = from.keys(); _i < keys_1.length; _i++) {
                            var key = keys_1[_i];
                            allEntities[key] = from.source(key);
                        }
                        for (var tableName, i = 0, len = transform.length; i < len; i++) transform[i].Input && transform[i].Input.Table && (allEntities[tableName = transform[i].Input.Table.Name] = new SQFromEntitySource(void 0, tableName)), 
                        transform[i].Output && transform[i].Output.Table && (allEntities[tableName = transform[i].Output.Table.Name] = new SQFromEntitySource(void 0, tableName));
                        for (fromWithTransforms = new data.SQFrom(allEntities), i = 0, len = transform.length; i < len; i++) builder.addTransform(Deserializer.transform(transform[i], fromWithTransforms));
                    }
                    var orderBy = contract.OrderBy;
                    if (orderBy) for (i = 0, len = orderBy.length; i < len; i++) builder.addOrderBy(Deserializer.sort(orderBy[i], from));
                    for (var select = contract.Select, selectNames = {}, i = 0, len = select.length; i < len; i++) builder.addSelect(Deserializer.select(select[i], selectNames, fromWithTransforms));
                    var groupBy = contract.GroupBy;
                    if (groupBy) for (var groupByNames = {}, i = 0, len = groupBy.length; i < len; i++) builder.addGroupBy(Deserializer.groupBy(groupBy[i], groupByNames, from));
                    return contract.Top && builder.setTop(contract.Top), builder.toQuery();
                }, SemanticQuerySerializer.deserializeSortDefinitions = function(orderBy, from) {
                    return _.isEmpty(orderBy) ? [] : _.map(orderBy, function(sort) {
                        return Deserializer.sort(sort, from);
                    });
                }, SemanticQuerySerializer.serializeFilter = function(queryWhere) {
                    var queryFrom = [], from = queryWhere.from();
                    this.serializeFrom(from, queryFrom);
                    queryWhere = this.serializeQueryFilters(queryWhere.where(), QueryExpressionBuilder.create, !1);
                    return {
                        Version: data.SemanticQueryVersions.Version2,
                        From: queryFrom,
                        Where: queryWhere
                    };
                }, SemanticQuerySerializer.serializeFrom = function(from, queryFrom) {
                    for (var fromKeys = from.keys(), sqFromSerializer = new SQFromSourceSerializer(from), i = 0, len = fromKeys.length; i < len; i++) queryFrom.push(from.source(fromKeys[i]).accept(sqFromSerializer, i));
                }, SemanticQuerySerializer.deserializeFrom = function(input) {
                    return Deserializer.from(input);
                }, SemanticQuerySerializer.deserializeFilter = function(contract, errorContext) {
                    var filterVersion = contract.Version || data.SemanticQueryVersions.Version0, upgradeToV1 = filterVersion < data.SemanticQueryVersions.Version1, from = Deserializer.from(contract.From), builder = new data.SemanticQueryBuilder(from), where = contract.Where;
                    if (where) for (var i = 0, len = where.length; i < len; i++) {
                        var whereItem = Deserializer.filter(where[i], from);
                        whereItem ? (upgradeToV1 && (whereItem = FilterTargetUpgrader.Upgrade(filterVersion, whereItem)), 
                        builder.addWhere(whereItem)) : errorContext && (_.isEmpty(errorContext.RemovedIndexes) && (errorContext.RemovedIndexes = []), 
                        errorContext.RemovedIndexes.push(i));
                    }
                    return builder.toFilter();
                }, SemanticQuerySerializer.serializeExpr = function(contract, serializeAnnotations) {
                    return QueryExpressionBuilder.create(contract, !0, serializeAnnotations = void 0 === serializeAnnotations ? !1 : serializeAnnotations);
                }, SemanticQuerySerializer.serializeExprWithRef = function(contract, serializeAnnotations) {
                    return QueryExpressionBuilder.create(contract, !1, serializeAnnotations = void 0 === serializeAnnotations ? !1 : serializeAnnotations);
                }, SemanticQuerySerializer.deserializeExpr = function(input) {
                    return ExprBuilder.createStandalone(input);
                }, SemanticQuerySerializer.deserializeExprWithRef = function(input, from) {
                    return ExprBuilder.create(input, from);
                }, SemanticQuerySerializer.serializeTransformTableColumns = function(columns) {
                    return _.map(columns, function(c) {
                        var column = {
                            Expression: QueryExpressionBuilder.createNamed(c.expression)
                        };
                        return c.role && (column.Role = c.role), column;
                    });
                }, SemanticQuerySerializer;
            }();
            services.SemanticQuerySerializer = SemanticQuerySerializer;
            var ExprBuilder, Deserializer = function() {
                function Deserializer() {}
                return Deserializer.from = function(contract) {
                    var sources = {};
                    if (contract) for (var i = 0, len = contract.length; i < len; i++) {
                        var source = contract[i];
                        switch (source.Type) {
                          case 2:
                            source.Expression.Subquery ? sources[source.Name] = new SQFromSubquerySource(SemanticQuerySerializer.deserializeQuery(source.Expression.Subquery.Query)) : sources[source.Name] = new data.SQFromExprSource(ExprBuilder.createFromSourceExpression(source.Expression));
                            break;

                          case 1:
                            sources[source.Name] = new SQFromPodSource(source.Schema, source.Entity);
                            break;

                          default:
                            sources[source.Name] = new SQFromEntitySource(source.Schema, source.Entity);
                        }
                    }
                    return new data.SQFrom(sources);
                }, Deserializer.filter = function(contract, from) {
                    var condition = from ? ExprBuilder.create(contract.Condition, from) : ExprBuilder.createStandalone(contract.Condition);
                    if (condition) {
                        var sqFilter = {
                            condition: condition
                        };
                        if (contract.Target) {
                            sqFilter.target = [];
                            for (var _i = 0, _a = contract.Target; _i < _a.length; _i++) {
                                var targetExpr = _a[_i], targetExpr = from ? ExprBuilder.create(targetExpr, from) : ExprBuilder.createStandalone(targetExpr);
                                if (!targetExpr) return;
                                sqFilter.target.push(targetExpr);
                            }
                        }
                        return contract.Annotations && (sqFilter.annotations = contract.Annotations), sqFilter;
                    }
                }, Deserializer.sort = function(contract, from) {
                    return {
                        direction: contract.Direction,
                        expr: ExprBuilder.create(contract.Expression, from)
                    };
                }, Deserializer.select = function(contract, selectNames, from) {
                    return Deserializer.toNamedQueryExpression(contract, selectNames, from);
                }, Deserializer.groupBy = function(contract, groupByNames, from) {
                    return Deserializer.toNamedQueryExpression(contract, groupByNames, from);
                }, Deserializer.transform = function(contract, from) {
                    var outputColumns, transform = _.map(contract.Input.Parameters, function(p) {
                        return Deserializer.toNamedQueryExpression(p, {}, from);
                    }), transform = {
                        name: contract.Name,
                        algorithm: contract.Algorithm,
                        input: {
                            parameters: transform
                        },
                        output: {}
                    };
                    return contract.Input.Table && (outputColumns = this.deserializeTransformTableColumns(contract.Input.Table.Columns, from), 
                    transform.input.table = {
                        name: contract.Input.Table.Name,
                        columns: outputColumns
                    }), contract.Output && contract.Output.Table && (outputColumns = this.deserializeTransformTableColumns(contract.Output.Table.Columns, from), 
                    transform.output.table = {
                        name: contract.Output.Table.Name,
                        columns: outputColumns
                    }), transform;
                }, Deserializer.toNamedQueryExpression = function(name, names, expr) {
                    expr = ExprBuilder.create(name, expr), name = name.Name || StringExtensions.findUniqueName(names, data.SQExprUtils.defaultName(expr));
                    return names[name] = !0, {
                        name: name,
                        expr: expr
                    };
                }, Deserializer.deserializeTransformTableColumns = function(columns, from) {
                    var columnNames = {};
                    return _.map(columns, function(c) {
                        return {
                            role: c.Role,
                            expression: Deserializer.toNamedQueryExpression(c.Expression, columnNames, from)
                        };
                    });
                }, Deserializer;
            }(), SQFromSourceSerializer = function() {
                function SQFromSourceSerializer(from) {
                    this.from = from;
                }
                return SQFromSourceSerializer.prototype.visitEntity = function(source, index) {
                    return {
                        Name: this.from.keys()[index],
                        Entity: source.entity,
                        Schema: source.schema,
                        Type: 0
                    };
                }, SQFromSourceSerializer.prototype.visitPod = function(source, index) {
                    return {
                        Name: this.from.keys()[index],
                        Entity: source.pod,
                        Schema: source.schema,
                        Type: 1
                    };
                }, SQFromSourceSerializer.prototype.visitSubquery = function(source, index) {
                    return {
                        Name: this.from.keys()[index],
                        Expression: {
                            Subquery: {
                                Query: SemanticQuerySerializer.serializeQuery(source.subquery)
                            }
                        },
                        Type: 2
                    };
                }, SQFromSourceSerializer.prototype.visitExpr = function(source, index) {
                    return {
                        Name: this.from.keys()[index],
                        Expression: SemanticQuerySerializer.serializeExpr(source.expr),
                        Type: 2
                    };
                }, SQFromSourceSerializer;
            }(), QueryExpressionBuilder = function() {
                function QueryExpressionBuilder(standalone, serializeAnnotations) {
                    this.standalone = standalone, this.serializeAnnotations = serializeAnnotations;
                }
                return QueryExpressionBuilder.getInstance = function(standalond, serializeAnnotations) {
                    var index = [ +(standalond = standalond || !1), +(serializeAnnotations = serializeAnnotations || !1) ].reduce(function(result, x) {
                        return result << 1 | x;
                    });
                    return QueryExpressionBuilder.instances[index] || new QueryExpressionBuilder(standalond, serializeAnnotations);
                }, QueryExpressionBuilder.create = function(expr, standalone, serializeAnnotations) {
                    return expr.accept(QueryExpressionBuilder.getInstance(standalone = void 0 === standalone ? !1 : standalone, serializeAnnotations = void 0 === serializeAnnotations ? !1 : serializeAnnotations));
                }, QueryExpressionBuilder.createNamed = function(namedExpr, standalone, container) {
                    container = QueryExpressionBuilder.getInstance(standalone = void 0 === standalone ? !1 : standalone, container = void 0 === container ? !1 : container), 
                    container = namedExpr.expr.accept(container);
                    return namedExpr.name && (container.Name = namedExpr.name), container;
                }, QueryExpressionBuilder.prototype.visitColumnRef = function(expr) {
                    return this.addAnnotations(expr, {
                        Column: {
                            Expression: expr.source.accept(this),
                            Property: expr.ref
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitMeasureRef = function(expr) {
                    return this.addAnnotations(expr, {
                        Measure: {
                            Expression: expr.source.accept(this),
                            Property: expr.ref
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitNativeMeasure = function(expr) {
                    var nativeMeasure = {
                        Language: expr.language,
                        Expression: expr.expression,
                        DataType: expr.dataType
                    };
                    expr.proposedName && (nativeMeasure.ProposedName = expr.proposedName), expr.format && (nativeMeasure.Format = expr.format);
                    var contentCache = expr.expressionContentCache;
                    return !contentCache || !contentCache.dependencies && null == contentCache.unrecognizedIdentifiers ? {
                        NativeMeasure: nativeMeasure
                    } : (nativeMeasure.ExpressionContentCache = {}, contentCache.dependencies && (nativeMeasure.ExpressionContentCache.Dependencies = this.serializeAll(contentCache.dependencies)), 
                    null != contentCache.unrecognizedIdentifiers && (nativeMeasure.ExpressionContentCache.UnrecognizedIdentifiers = contentCache.unrecognizedIdentifiers), 
                    this.addAnnotations(expr, {
                        NativeMeasure: nativeMeasure
                    }));
                }, QueryExpressionBuilder.prototype.visitNativeColumn = function(expr) {
                    var nativeColumn = {
                        Language: expr.language,
                        Expression: expr.expression,
                        DataType: expr.dataType,
                        Source: expr.source.accept(this)
                    };
                    expr.proposedName && (nativeColumn.ProposedName = expr.proposedName), expr.format && (nativeColumn.Format = expr.format);
                    var contentCache = expr.expressionContentCache;
                    return !contentCache || !contentCache.dependencies && null == contentCache.unrecognizedIdentifiers || (nativeColumn.ExpressionContentCache = {}, 
                    contentCache.dependencies && (nativeColumn.ExpressionContentCache.Dependencies = this.serializeAll(contentCache.dependencies)), 
                    null != contentCache.unrecognizedIdentifiers && (nativeColumn.ExpressionContentCache.UnrecognizedIdentifiers = contentCache.unrecognizedIdentifiers)), 
                    this.addAnnotations(expr, {
                        NativeColumn: nativeColumn
                    });
                }, QueryExpressionBuilder.prototype.visitAggr = function(expr) {
                    return this.addAnnotations(expr, {
                        Aggregation: {
                            Expression: expr.arg.accept(this),
                            Function: expr.func
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitPercentile = function(expr) {
                    var result = this.addAnnotations(expr, {
                        Percentile: {
                            Expression: expr.arg.accept(this),
                            K: expr.k
                        }
                    });
                    return expr.exclusive && (result.Percentile.Exclusive = expr.exclusive), result;
                }, QueryExpressionBuilder.prototype.visitRangePercent = function(expr) {
                    return this.addAnnotations(expr, {
                        RangePercent: {
                            Min: expr.min.accept(this),
                            Max: expr.max.accept(this),
                            Percent: expr.percent
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitHierarchy = function(expr) {
                    return this.addAnnotations(expr, {
                        Hierarchy: {
                            Expression: expr.arg.accept(this),
                            Hierarchy: expr.hierarchy
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitPropertyVariationSource = function(expr) {
                    var source = expr.arg.accept(this), property = expr.property, name = expr.name;
                    return this.addAnnotations(expr, {
                        PropertyVariationSource: {
                            Expression: {
                                SourceRef: source.SourceRef
                            },
                            Name: name,
                            Property: property
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitHierarchyLevel = function(expr) {
                    return this.addAnnotations(expr, {
                        HierarchyLevel: {
                            Expression: expr.arg.accept(this),
                            Level: expr.level
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitSelectRef = function(expr) {
                    return void 0 === expr.attributeKind || expr.attributeKind, this.addAnnotations(expr, {
                        SelectRef: {
                            ExpressionName: expr.expressionName
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitBetween = function(expr) {
                    return this.addAnnotations(expr, {
                        Between: {
                            Expression: expr.arg.accept(this),
                            LowerBound: expr.lower.accept(this),
                            UpperBound: expr.upper.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitIn = function(expr) {
                    var expressions = this.serializeAll(expr.args), values = expr.values;
                    if (values) {
                        for (var valuesSerialized = [], i = 0, len = values.length; i < len; i++) valuesSerialized.push(this.serializeAll(values[i]));
                        return this.addAnnotations(expr, {
                            In: {
                                Expressions: expressions,
                                Values: valuesSerialized
                            }
                        });
                    }
                    return this.addAnnotations(expr, {
                        In: {
                            Expressions: this.serializeAll(expr.args),
                            Table: expr.table.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitEntity = function(expr) {
                    var sourceRef;
                    return sourceRef = this.standalone ? {
                        Schema: expr.schema,
                        Entity: expr.entity
                    } : (expr.variable, {
                        Source: expr.variable
                    }), this.addAnnotations(expr, {
                        SourceRef: sourceRef
                    });
                }, QueryExpressionBuilder.prototype.visitSubqueryRef = function(expr) {
                    return expr.variable && !expr.query ? this.addAnnotations(expr, {
                        SourceRef: {
                            Source: expr.variable
                        }
                    }) : this.standalone ? this.addAnnotations(expr, {
                        Subquery: {
                            Query: SemanticQuerySerializer.serializeQuery(expr.query, !1, this.serializeAnnotations)
                        }
                    }) : void 0;
                }, QueryExpressionBuilder.prototype.visitNamedQueryRef = function(expr) {
                    return this.standalone ? this.addAnnotations(expr, {
                        NamedQueryReference: {
                            Name: expr.queryName
                        }
                    }) : (expr.variable, this.addAnnotations(expr, {
                        SourceRef: {
                            Source: expr.variable
                        }
                    }));
                }, QueryExpressionBuilder.prototype.visitAnd = function(expr) {
                    return this.addAnnotations(expr, {
                        And: {
                            Left: expr.left.accept(this),
                            Right: expr.right.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitOr = function(expr) {
                    return this.addAnnotations(expr, {
                        Or: {
                            Left: expr.left.accept(this),
                            Right: expr.right.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitCompare = function(expr) {
                    return this.addAnnotations(expr, {
                        Comparison: {
                            ComparisonKind: expr.comparison,
                            Left: expr.left.accept(this),
                            Right: expr.right.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitConditional = function(defaultValue) {
                    var _this = this, output = this.addAnnotations(defaultValue, {
                        Conditional: {
                            Cases: _.map(defaultValue.cases, function(c) {
                                return _this.visitCase(c);
                            })
                        }
                    }), defaultValue = defaultValue.defaultValue;
                    return defaultValue && (output.Conditional.DefaultValue = defaultValue.accept(this)), 
                    output;
                }, QueryExpressionBuilder.prototype.visitCase = function(conditionalCase) {
                    return {
                        Condition: conditionalCase.condition.accept(this),
                        Value: conditionalCase.value.accept(this)
                    };
                }, QueryExpressionBuilder.prototype.visitContains = function(expr) {
                    return this.addAnnotations(expr, {
                        Contains: {
                            Left: expr.left.accept(this),
                            Right: expr.right.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitDateAdd = function(expr) {
                    return this.addAnnotations(expr, {
                        DateAdd: {
                            Expression: expr.arg.accept(this),
                            Amount: expr.amount,
                            TimeUnit: expr.unit
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitDateSpan = function(expr) {
                    return this.addAnnotations(expr, {
                        DateSpan: {
                            Expression: expr.arg.accept(this),
                            TimeUnit: expr.unit
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitExists = function(expr) {
                    return this.addAnnotations(expr, {
                        Exists: {
                            Expression: expr.arg.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitNot = function(expr) {
                    return this.addAnnotations(expr, {
                        Not: {
                            Expression: expr.arg.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitNow = function(expr) {
                    return this.addAnnotations(expr, {
                        Now: {}
                    });
                }, QueryExpressionBuilder.prototype.visitDefaultValue = function(expr) {
                    return this.addAnnotations(expr, {
                        DefaultValue: {}
                    });
                }, QueryExpressionBuilder.prototype.visitAnyValue = function(expr) {
                    var anyValue = {};
                    return null != expr.defaultValueOverridesAncestors && (anyValue.DefaultValueOverridesAncestors = expr.defaultValueOverridesAncestors), 
                    this.addAnnotations(expr, {
                        AnyValue: anyValue
                    });
                }, QueryExpressionBuilder.prototype.visitFillRule = function(expr) {
                    var serializedRule = {}, rule = expr.rule;
                    return rule.linearGradient2 && (serializedRule.linearGradient2 = this.visitLinearGradient2(rule.linearGradient2)), 
                    rule.linearGradient3 && (serializedRule.linearGradient3 = this.visitLinearGradient3(rule.linearGradient3)), 
                    this.addAnnotations(expr, {
                        FillRule: {
                            Input: expr.input.accept(this),
                            FillRule: serializedRule
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitLinearGradient2 = function(strategy) {
                    var output = {
                        min: this.visitRuleStop(strategy.min),
                        max: this.visitRuleStop(strategy.max)
                    }, strategy = this.visitNullColoringStrategy(strategy.nullColoringStrategy);
                    return strategy && (output.nullColoringStrategy = strategy), output;
                }, QueryExpressionBuilder.prototype.visitLinearGradient3 = function(strategy) {
                    var output = {
                        min: this.visitRuleStop(strategy.min),
                        mid: this.visitRuleStop(strategy.mid),
                        max: this.visitRuleStop(strategy.max)
                    }, strategy = this.visitNullColoringStrategy(strategy.nullColoringStrategy);
                    return strategy && (output.nullColoringStrategy = strategy), output;
                }, QueryExpressionBuilder.prototype.visitRuleStop = function(stop) {
                    var serialized = {
                        color: stop.color.accept(this)
                    };
                    return stop.value && (serialized.value = stop.value.accept(this)), serialized;
                }, QueryExpressionBuilder.prototype.visitNullColoringStrategy = function(input) {
                    if (input) {
                        input.strategy;
                        var output = {
                            strategy: input.strategy.accept(this)
                        };
                        return input.color && (output.color = input.color.accept(this)), output;
                    }
                }, QueryExpressionBuilder.prototype.visitThemeDataColor = function(expr) {
                    return this.addAnnotations(expr, {
                        ThemeDataColor: {
                            ColorId: expr.colorId,
                            Percent: expr.percent
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitStartsWith = function(expr) {
                    return this.addAnnotations(expr, {
                        StartsWith: {
                            Left: expr.left.accept(this),
                            Right: expr.right.accept(this)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitGroupRef = function(expr) {
                    var _this = this;
                    return this.addAnnotations(expr, {
                        GroupRef: {
                            Expression: expr.source.accept(this),
                            Property: expr.ref,
                            GroupedColumns: _.map(expr.groupedExprs, function(groupedExpr) {
                                return groupedExpr.accept(_this);
                            })
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitConstant = function(expr) {
                    switch (expr.type.primitiveType) {
                      case 5:
                      case 7:
                      case 2:
                      case 4:
                      case 3:
                      case 0:
                      case 1:
                        return this.addAnnotations(expr, {
                            Literal: {
                                Value: expr.valueEncoded
                            }
                        });

                      default:
                        expr.type.primitiveType;
                    }
                }, QueryExpressionBuilder.prototype.visitArithmetic = function(expr) {
                    return this.addAnnotations(expr, {
                        Arithmetic: {
                            Left: expr.left.accept(this),
                            Right: expr.right.accept(this),
                            Operator: expr.operator
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitFloor = function(expr) {
                    var result = this.addAnnotations(expr, {
                        Floor: {
                            Expression: expr.arg.accept(this),
                            Size: expr.size
                        }
                    });
                    return null != expr.timeUnit && (result.Floor.TimeUnit = expr.timeUnit), result;
                }, QueryExpressionBuilder.prototype.visitResourcePackageItem = function(expr) {
                    return this.addAnnotations(expr, {
                        ResourcePackageItem: {
                            PackageName: expr.packageName,
                            PackageType: expr.packageType,
                            ItemName: expr.itemName
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitScopedEval = function(expr) {
                    return this.addAnnotations(expr, {
                        ScopedEval: {
                            Expression: expr.expression.accept(this),
                            Scope: this.serializeAll(expr.scope)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitFilteredEval = function(expr) {
                    return this.addAnnotations(expr, {
                        FilteredEval: {
                            Expression: expr.expression.accept(this),
                            Filters: SemanticQuerySerializer.serializeQueryFilters(expr.filters, QueryExpressionBuilder.create, this.standalone)
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitWithRef = function(expr) {
                    return this.addAnnotations(expr, {
                        WithRef: {
                            ExpressionName: expr.expressionName
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitTransformTableRef = function(expr) {
                    return this.addAnnotations(expr, {
                        TransformTableRef: {
                            Source: expr.source
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitTransformOutputRoleRef = function(expr) {
                    return this.addAnnotations(expr, {
                        TransformOutputRoleRef: {
                            Role: expr.role,
                            Transform: expr.transform
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitRoleRef = function(expr) {
                    return this.addAnnotations(expr, {
                        RoleRef: {
                            Role: expr.role
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitSummaryValueRef = function(expr) {
                    return this.addAnnotations(expr, {
                        SummaryValueRef: {
                            Name: expr.name
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitAllRolesRef = function(expr) {
                    return this.addAnnotations(expr, {
                        AllRolesRef: {}
                    });
                }, QueryExpressionBuilder.prototype.visitDiscretize = function(expr) {
                    return this.addAnnotations(expr, {
                        Discretize: {
                            Expression: expr.source.accept(this),
                            Count: expr.count
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitMember = function(expr) {
                    return this.addAnnotations(expr, {
                        Member: {
                            Expression: expr.source.accept(this),
                            Member: expr.member
                        }
                    });
                }, QueryExpressionBuilder.prototype.visitSparklineData = function(expr) {
                    var serialized = {
                        SparklineData: {
                            Measure: expr.measure.accept(this),
                            Groupings: this.serializeAll(expr.grouping),
                            PointsPerSparkline: expr.pointsPerSparkline
                        }
                    };
                    return expr.scalarKey && (serialized.SparklineData.ScalarKey = expr.scalarKey.accept(this)), 
                    expr.includeMinGroupingInterval && (serialized.SparklineData.IncludeMinGroupingInterval = expr.includeMinGroupingInterval), 
                    serialized;
                }, QueryExpressionBuilder.prototype.serializeAll = function(exprs) {
                    for (var result = [], i = 0, len = exprs.length; i < len; i++) result.push(exprs[i].accept(this));
                    return result;
                }, QueryExpressionBuilder.prototype.addAnnotations = function(annotations, container) {
                    return !this.serializeAnnotations || (annotations = annotations.getAnnotations()) && (container.Annotations = annotations), 
                    container;
                }, QueryExpressionBuilder.instances = [], QueryExpressionBuilder;
            }(), FilterTargetUpgrader = function() {
                function FilterTargetUpgrader() {}
                return FilterTargetUpgrader.Upgrade = function(fromVersion, filter) {
                    if (!filter) return null;
                    if (!filter.condition) return null;
                    var filterKind = FilterKindDetector.runDetector(filter.condition);
                    return fromVersion === data.SemanticQueryVersions.Version0 && 2 !== filterKind ? {
                        condition: filter.condition
                    } : filter;
                }, FilterTargetUpgrader;
            }();
            !function(ExprBuilder) {
                function create(contract, from) {
                    return function(contract, source) {
                        if (contract.Column) {
                            source = create(contract.Column.Expression, source);
                            if (source) return data.SQExprBuilder.columnRef(source, contract.Column.Property, contract.Annotations);
                        }
                    }(contract, from) || function(contract, source) {
                        if (contract.Measure) {
                            source = create(contract.Measure.Expression, source);
                            if (source) return data.SQExprBuilder.measureRef(source, contract.Measure.Property, contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.NativeMeasure) {
                            var contentCache = void 0;
                            return contract.NativeMeasure.ExpressionContentCache && (contentCache = {
                                unrecognizedIdentifiers: contract.NativeMeasure.ExpressionContentCache.UnrecognizedIdentifiers,
                                dependencies: createArray(contract.NativeMeasure.ExpressionContentCache.Dependencies)
                            }), "dax" !== contract.NativeMeasure.Language && contract.NativeMeasure.Language, 
                            data.SQExprBuilder.nativeMeasure(contract.NativeMeasure.Language, contract.NativeMeasure.Expression, contract.NativeMeasure.DataType, contract.NativeMeasure.ProposedName, contentCache, contract.NativeMeasure.Format, contract.Annotations);
                        }
                    }(contract) || function(contract, source) {
                        if (contract.NativeColumn) {
                            var contentCache = void 0;
                            if (contract.NativeColumn.ExpressionContentCache && (contentCache = {
                                unrecognizedIdentifiers: contract.NativeColumn.ExpressionContentCache.UnrecognizedIdentifiers,
                                dependencies: createArray(contract.NativeColumn.ExpressionContentCache.Dependencies)
                            }), "dax" === contract.NativeColumn.Language) {
                                if (contract.NativeColumn.Source) {
                                    source = create(contract.NativeColumn.Source, source);
                                    return data.SQExprBuilder.nativeColumn(contract.NativeColumn.Language, contract.NativeColumn.Expression, contract.NativeColumn.DataType, source, contract.NativeColumn.ProposedName, contentCache, contract.NativeColumn.Format, contract.Annotations);
                                }
                            } else contract.NativeColumn.Language;
                        }
                    }(contract, from) || function(contract, source) {
                        if (contract.SourceRef) {
                            if (!source) {
                                var sourceName = contract.SourceRef;
                                return data.SQExprBuilder.entity(sourceName.Schema, sourceName.Entity, void 0, contract.Annotations);
                            }
                            sourceName = contract.SourceRef.Source, source = source.source(sourceName);
                            if (source) return data.isSQFromEntitySource(source) ? data.SQExprBuilder.entity(source.schema, source.entity, sourceName, contract.Annotations) : data.isSQFromPodSource(source) ? data.SQExprBuilder.entity(source.schema, source.pod, sourceName) : data.isSQFromSubquerySource(source) ? data.SQExprBuilder.subqueryRef(sourceName, contract.Annotations) : (data.isSQFromExprSource(source), 
                            source.expr.as(sourceName));
                        }
                    }(contract, from) || function(contract, source) {
                        if (contract.Aggregation) {
                            source = create(contract.Aggregation.Expression, source);
                            if (source) return data.SQExprBuilder.aggregate(source, contract.Aggregation.Function, contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.SelectRef) return data.SQExprBuilder.selectRef(contract.SelectRef.ExpressionName, void 0, contract.Annotations);
                    }(contract) || function(contract, source) {
                        if (contract.Percentile) {
                            source = create(contract.Percentile.Expression, source);
                            if (source) return data.SQExprBuilder.percentile(source, contract.Percentile.K, contract.Percentile.Exclusive || !1, contract.Annotations);
                        }
                    }(contract, from) || function(contract, max) {
                        if (contract.RangePercent) {
                            var min = create(contract.RangePercent.Min, max), max = create(contract.RangePercent.Max, max);
                            if (min && max) return data.SQExprBuilder.rangePercent(min, max, contract.RangePercent.Percent, contract.Annotations);
                        }
                    }(contract, from) || function(contract, right) {
                        if (contract.Arithmetic) {
                            var left = create(contract.Arithmetic.Left, right), right = create(contract.Arithmetic.Right, right);
                            if (left && right) return data.SQExprBuilder.arithmetic(left, right, contract.Arithmetic.Operator, contract.Annotations);
                        }
                    }(contract, from) || function(contract, expression) {
                        if (contract.Floor) {
                            expression = create(contract.Floor.Expression, expression);
                            if (expression) return data.SQExprBuilder.floor(expression, contract.Floor.Size, contract.Floor.TimeUnit, contract.Annotations);
                        }
                    }(contract, from) || function(contract, expression) {
                        if (contract.Discretize) {
                            expression = create(contract.Discretize.Expression, expression);
                            if (expression) return data.SQExprBuilder.discretize(expression, contract.Discretize.Count, contract.Annotations);
                        }
                    }(contract, from) || function(contract, expression) {
                        if (contract.Member) {
                            expression = create(contract.Member.Expression, expression);
                            if (expression) return data.SQExprBuilder.member(expression, contract.Member.Member, contract.Annotations);
                        }
                    }(contract, from) || function(contract, source) {
                        if (contract.Hierarchy) {
                            source = create(contract.Hierarchy.Expression, source);
                            if (source) return data.SQExprBuilder.hierarchy(source, contract.Hierarchy.Hierarchy, contract.Annotations);
                        }
                    }(contract, from) || function(contract, source) {
                        if (contract.HierarchyLevel) {
                            source = create(contract.HierarchyLevel.Expression, source);
                            if (source) return data.SQExprBuilder.hierarchyLevel(source, contract.HierarchyLevel.Level, contract.Annotations);
                        }
                    }(contract, from) || function(contract, source) {
                        if (contract.PropertyVariationSource) {
                            source = create(contract.PropertyVariationSource.Expression, source);
                            if (source) return data.SQExprBuilder.propertyVariationSource(source, contract.PropertyVariationSource.Name, contract.PropertyVariationSource.Property, contract.Annotations);
                        }
                    }(contract, from) || function(contract, right) {
                        if (contract.And) {
                            var left = create(contract.And.Left, right), right = create(contract.And.Right, right);
                            if (left && right) return data.SQExprBuilder.and(left, right, contract.Annotations);
                        }
                    }(contract, from) || function(contract, upperBound) {
                        if (contract.Between) {
                            var expression = create(contract.Between.Expression, upperBound), lowerBound = create(contract.Between.LowerBound, upperBound), upperBound = create(contract.Between.UpperBound, upperBound);
                            if (expression && lowerBound && upperBound) return data.SQExprBuilder.between(expression, lowerBound, upperBound, contract.Annotations);
                        }
                    }(contract, from) || function(contract, from) {
                        if (contract.In) {
                            if (contract.In.Values) return data.SQExprBuilder.inValues(createArray(contract.In.Expressions, from), _.map(contract.In.Values, function(v) {
                                return createArray(v, from);
                            }));
                            var table = create(contract.In.Table, from);
                            return table ? data.SQExprBuilder.inTable(createArray(contract.In.Expressions, from), table, contract.Annotations) : void 0;
                        }
                    }(contract, from) || function(contract, right) {
                        if (contract.Or) {
                            var left = create(contract.Or.Left, right), right = create(contract.Or.Right, right);
                            if (left && right) return data.SQExprBuilder.or(left, right, contract.Annotations);
                        }
                    }(contract, from) || function(contract, right) {
                        if (contract.Contains) {
                            var left = create(contract.Contains.Left, right), right = create(contract.Contains.Right, right);
                            if (left && right) return data.SQExprBuilder.contains(left, right, contract.Annotations);
                        }
                    }(contract, from) || function(contract, right) {
                        if (contract.Comparison) {
                            var left = create(contract.Comparison.Left, right), right = create(contract.Comparison.Right, right);
                            if (left && right) return data.SQExprBuilder.compare(contract.Comparison.ComparisonKind, left, right, contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.Conditional) {
                            for (var contractCases = contract.Conditional.Cases, casesCount = contractCases.length, cases = new Array(casesCount), i = 0; i < casesCount; i++) {
                                var conditionalCase = function(value) {
                                    if (value) {
                                        var condition = create(value.Condition), value = create(value.Value);
                                        if (condition && value) return {
                                            condition: condition,
                                            value: value
                                        };
                                    }
                                }(contractCases[i]);
                                if (!conditionalCase) {
                                    cases = void 0;
                                    break;
                                }
                                cases[i] = conditionalCase;
                            }
                            if (contract.Conditional.DefaultValue) {
                                var defaultValue = create(contract.Conditional.DefaultValue);
                                if (cases && defaultValue) return data.SQExprBuilder.conditional(cases, defaultValue, contract.Annotations);
                            } else if (cases) return data.SQExprBuilder.conditional(cases, void 0, contract.Annotations);
                        }
                    }(contract) || function(contract, expression) {
                        if (contract.DateAdd) {
                            expression = create(contract.DateAdd.Expression, expression);
                            if (expression) return data.SQExprBuilder.dateAdd(contract.DateAdd.TimeUnit, contract.DateAdd.Amount, expression, contract.Annotations);
                        }
                    }(contract, from) || function(contract, expression) {
                        if (contract.DateSpan) {
                            expression = create(contract.DateSpan.Expression, expression);
                            if (expression) return data.SQExprBuilder.dateSpan(contract.DateSpan.TimeUnit, expression, contract.Annotations);
                        }
                    }(contract, from) || function(contract, arg) {
                        if (contract.Exists) {
                            arg = create(contract.Exists.Expression, arg);
                            if (arg) return data.SQExprBuilder.exists(arg, contract.Annotations);
                        }
                    }(contract, from) || function(contract, arg) {
                        if (contract.Not) {
                            arg = create(contract.Not.Expression, arg);
                            if (arg) return data.SQExprBuilder.not(arg, contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.Now) return data.SQExprBuilder.now(contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.DefaultValue) return data.SQExprBuilder.defaultValue(contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.AnyValue) return data.SQExprBuilder.anyValue(contract.AnyValue.DefaultValueOverridesAncestors, contract.Annotations);
                    }(contract) || function(contract, right) {
                        if (contract.StartsWith) {
                            var left = create(contract.StartsWith.Left, right), right = create(contract.StartsWith.Right, right);
                            if (left && right) return data.SQExprBuilder.startsWith(left, right, contract.Annotations);
                        }
                    }(contract, from) || function(contract, from) {
                        if (contract.FillRule) {
                            var strategy, input = create(contract.FillRule.Input, from), linearGradient3 = contract.FillRule, fillRule = {}, linearGradient2 = linearGradient3.FillRule.linearGradient2, linearGradient3 = linearGradient3.FillRule.linearGradient3;
                            return linearGradient2 ? (fillRule.linearGradient2 = {
                                min: fromFillStop(linearGradient2.min, from),
                                max: fromFillStop(linearGradient2.max, from)
                            }, (strategy = fromNullColoringStrategy(linearGradient2.nullColoringStrategy, from)) && (fillRule.linearGradient2.nullColoringStrategy = strategy)) : linearGradient3 && (fillRule.linearGradient3 = {
                                min: fromFillStop(linearGradient3.min, from),
                                mid: fromFillStop(linearGradient3.mid, from),
                                max: fromFillStop(linearGradient3.max, from)
                            }, (strategy = fromNullColoringStrategy(linearGradient3.nullColoringStrategy, from)) && (fillRule.linearGradient3.nullColoringStrategy = strategy)), 
                            data.SQExprBuilder.fillRule(input, fillRule, contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.ThemeDataColor) return data.SQExprBuilder.themeDataColor(contract.ThemeDataColor.ColorId, contract.ThemeDataColor.Percent, contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.ResourcePackageItem) return data.SQExprBuilder.resourcePackageItem(contract.ResourcePackageItem.PackageName, contract.ResourcePackageItem.PackageType, contract.ResourcePackageItem.ItemName, contract.Annotations);
                    }(contract) || function(contract, from) {
                        if (contract.ScopedEval) {
                            var source = create(contract.ScopedEval.Expression, from);
                            if (source) return data.SQExprBuilder.scopedEval(source, createArray(contract.ScopedEval.Scope, from), contract.Annotations);
                        }
                    }(contract, from) || function(contract, from) {
                        if (contract.FilteredEval) {
                            var expression = create(contract.FilteredEval.Expression, from);
                            return data.SQExprBuilder.filteredEval(expression, _.map(contract.FilteredEval.Filters, function(filter) {
                                return Deserializer.filter(filter, from);
                            }), contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.WithRef) return data.SQExprBuilder.withRef(contract.WithRef.ExpressionName, contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.TransformTableRef) return data.SQExprBuilder.transformTableRef(contract.TransformTableRef.Source, contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.TransformOutputRoleRef) return data.SQExprBuilder.transformOutputRoleRef(contract.TransformOutputRoleRef.Role, contract.TransformOutputRoleRef.Transform, contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.Literal) return data.PrimitiveValueEncoding.parseValueToSQExpr(contract.Literal.Value);
                    }(contract) || function(contract, from) {
                        if (contract.GroupRef) {
                            var source = create(contract.GroupRef.Expression, from), groupedColumns = _.map(contract.GroupRef.GroupedColumns, function(value) {
                                return ExprBuilder.create(value, from);
                            });
                            if (source && !_.isEmpty(groupedColumns)) return data.SQExprBuilder.groupRef(contract.GroupRef.Property, source, groupedColumns, contract.Annotations);
                        }
                    }(contract, from) || function(contract) {
                        if (contract.RoleRef) return data.SQExprBuilder.roleRef(contract.RoleRef.Role, contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.AllRolesRef) return data.SQExprBuilder.allRolesRef(contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.NamedQueryReference) return data.SQExprBuilder.namedQueryRef(contract.NamedQueryReference.Name, void 0, contract.Annotations);
                    }(contract) || function(contract) {
                        if (contract.Subquery) return data.SQExprBuilder.subqueryRef(SemanticQuerySerializer.deserializeQuery(contract.Subquery.Query), contract.Annotations);
                    }(contract) || createConst(contract) || function(contract) {
                        if (contract.SummaryValueRef) return data.SQExprBuilder.summaryValueRef(contract.SummaryValueRef.Name, contract.Annotations);
                    }(contract) || function(contract, from) {
                        var sparklineContract = contract.SparklineData;
                        if (sparklineContract) return data.SQExprBuilder.sparklineData(create(sparklineContract.Measure, from), createArray(sparklineContract.Groupings, from), sparklineContract.ScalarKey ? create(contract.SparklineData.ScalarKey, from) : void 0, sparklineContract.PointsPerSparkline, sparklineContract.IncludeMinGroupingInterval);
                    }(contract, from);
                }
                function createStandalone(contract) {
                    return create(contract, null);
                }
                function createArray(contracts, from) {
                    for (var result = [], i = 0, len = contracts.length; i < len; i++) result.push(create(contracts[i], from));
                    return result;
                }
                function createConst(contract) {
                    return function(contract) {
                        if (contract.Boolean) return data.SQExprBuilder.boolean(contract.Boolean.Value, contract.Annotations);
                    }(contract) || fromDateTime(contract) || function(contract) {
                        if (contract.DateTimeSecond) {
                            var date = fromDateTimeString(contract.DateTimeSecond);
                            return data.SQExprBuilder.dateSpan(5, data.SQExprBuilder.dateTime(date), contract.Annotations);
                        }
                    }(contract) || fromDateTime(contract) || function(contract) {
                        if (contract.Decimal) {
                            var value = contract.Decimal.Value;
                            return data.SQExprBuilder.decimal(value, void 0, contract.Annotations);
                        }
                    }(contract) || function(contract) {
                        if (contract.Integer) {
                            var value = contract.Integer.Value;
                            return data.SQExprBuilder.integer(value, void 0, contract.Annotations);
                        }
                    }(contract) || function(contract) {
                        if (contract.Null) return data.SQExprBuilder.nullConstant();
                    }(contract) || function(contract) {
                        if (contract.Number) return data.PrimitiveValueEncoding.parseValueToSQExpr(contract.Number.Value);
                    }(contract) || function(contract) {
                        if (contract.String) {
                            var value = contract.String.Value;
                            return data.SQExprBuilder.text(value, void 0, contract.Annotations);
                        }
                    }(contract);
                }
                function fromFillStop(contract, from) {
                    if (contract) {
                        var serialized = {
                            color: create(contract.color, from)
                        };
                        return contract.value && (serialized.value = create(contract.value, from)), serialized;
                    }
                }
                function fromNullColoringStrategy(contract, from) {
                    if (contract) {
                        var output = {
                            strategy: create(contract.strategy, from)
                        };
                        return contract.color && (output.color = create(contract.color, from)), output;
                    }
                }
                function fromDateTime(contract) {
                    var date = contract.DateTime || contract.Date;
                    if (date) {
                        date = fromDateTimeString(date);
                        if (date) return data.SQExprBuilder.dateTime(date, void 0, contract.Annotations);
                    }
                }
                function fromDateTimeString(contract) {
                    return jsCommon.DateExtensions.tryDeserializeDate(contract.Value);
                }
                ExprBuilder.create = create, ExprBuilder.createStandalone = createStandalone, ExprBuilder.createConst = createConst, 
                ExprBuilder.createFromSourceExpression = createStandalone;
            }(ExprBuilder = services.ExprBuilder || (services.ExprBuilder = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(transforms) {
            transforms.AnomalyDetectionTransformPluginName = "SampleAndDetectAnomaly";
            var AnomalyDetection = "TimeSeriesColumnRole", Forecast = "ValueColumnRole";
            transforms.AnomalyDetectionColumns = {
                ExpectedValue: "ExpectedValue",
                ExpectedLow: "ExpectedLow",
                ExpectedHigh: "ExpectedHigh",
                RawScore: "RawScore",
                Anomaly: "Anomaly",
                BatchStart: "BatchStart",
                BatchEnd: "BatchEnd"
            }, transforms.AnomalyDetectionOutputRoles = _.mapValues(transforms.AnomalyDetectionColumns, function(value) {
                return "anomalyDetection." + value;
            });
            var _a = _.mapValues(transforms.AnomalyDetectionColumns, function(value) {
                return value + "Role";
            }), AnomalyDetection = {
                name: transforms.AnomalyDetectionTransformPluginName,
                inputRoles: [ {
                    name: AnomalyDetection,
                    visualDataRoleMatching: {
                        cartesianKind: 0
                    }
                }, {
                    name: Forecast,
                    visualDataRoleMatching: {
                        cartesianKind: 1
                    }
                } ],
                outputRoles: [ {
                    name: transforms.AnomalyDetectionOutputRoles.ExpectedValue,
                    algorithmRole: _a.ExpectedValue,
                    columnName: transforms.AnomalyDetectionColumns.ExpectedValue,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                }, {
                    name: transforms.AnomalyDetectionOutputRoles.ExpectedLow,
                    algorithmRole: _a.ExpectedLow,
                    columnName: transforms.AnomalyDetectionColumns.ExpectedLow,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                }, {
                    name: transforms.AnomalyDetectionOutputRoles.ExpectedHigh,
                    algorithmRole: _a.ExpectedHigh,
                    columnName: transforms.AnomalyDetectionColumns.ExpectedHigh,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                }, {
                    name: transforms.AnomalyDetectionOutputRoles.RawScore,
                    algorithmRole: _a.RawScore,
                    columnName: transforms.AnomalyDetectionColumns.RawScore,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                }, {
                    name: transforms.AnomalyDetectionOutputRoles.Anomaly,
                    algorithmRole: _a.Anomaly,
                    columnName: transforms.AnomalyDetectionColumns.Anomaly,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                }, {
                    name: transforms.AnomalyDetectionOutputRoles.BatchStart,
                    algorithmRole: _a.BatchStart,
                    columnName: transforms.AnomalyDetectionColumns.BatchStart,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                }, {
                    name: transforms.AnomalyDetectionOutputRoles.BatchEnd,
                    algorithmRole: _a.BatchEnd,
                    columnName: transforms.AnomalyDetectionColumns.BatchEnd,
                    kind: powerbi.VisualDataRoleKind.Measure,
                    joinPredicateBehavior: 0
                } ]
            }, Forecast = {
                name: "Forecast",
                inputRoles: [ {
                    name: "X",
                    visualDataRoleMatching: {
                        cartesianKind: 0
                    }
                }, {
                    name: "Y",
                    visualDataRoleMatching: {
                        cartesianKind: 1
                    }
                } ],
                outputRoles: [ {
                    name: "forecast.ForecastValue",
                    algorithmRole: "Forecast",
                    columnName: "forecastValue",
                    kind: powerbi.VisualDataRoleKind.Measure
                }, {
                    name: "forecast.ConfidenceHighBound",
                    algorithmRole: "UpperBound",
                    columnName: "confidenceHighBound",
                    kind: powerbi.VisualDataRoleKind.Measure
                }, {
                    name: "forecast.ConfidenceLowBound",
                    algorithmRole: "LowerBound",
                    columnName: "confidenceLowBound",
                    kind: powerbi.VisualDataRoleKind.Measure
                } ]
            }, _a = {
                name: "KMeansClustering",
                inputRoles: [ {
                    name: "Attribute",
                    visualDataRoleMatching: {
                        matchMeasure: !0,
                        skipJoinPredicateNone: !0
                    }
                }, {
                    name: "Item",
                    visualDataRoleMatching: {
                        matchGrouping: !0
                    }
                } ],
                outputRoles: [ {
                    name: "Series",
                    algorithmRole: "ClusterId",
                    columnName: "clusterId",
                    kind: powerbi.VisualDataRoleKind.Grouping
                } ]
            };
            transforms.plugins = ((_a = {
                Forecast: Forecast,
                KMeansClustering: _a
            })[transforms.AnomalyDetectionTransformPluginName] = AnomalyDetection, _a);
        }(data.transforms || (data.transforms = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(transforms) {
            transforms.createTransformPluginService = function() {
                return new TransformPluginService();
            };
            var TransformPluginService = function() {
                function TransformPluginService() {
                    this.plugins = powerbi.data.transforms.plugins;
                }
                return TransformPluginService.prototype.getTransformPlugin = function(name) {
                    if (name) return this.plugins[name];
                }, TransformPluginService;
            }();
        }(data.transforms || (data.transforms = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var SelectToIdentityExpressionsVisitor = powerbi.data.DefaultSQExprVisitorWithArg, SQExprBuilder = powerbi.data.SQExprBuilder, SQHierarchyExpr = powerbi.data.SQHierarchyExpr, SQPropertyVariationSourceExpr = powerbi.data.SQPropertyVariationSourceExpr, SelectToIdentityExpressionsVisitor = (powerbi.data.SQEntityExpr, 
            function(_super) {
                function SelectToIdentityExpressionsVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(SelectToIdentityExpressionsVisitor, _super), SelectToIdentityExpressionsVisitor.prototype.visitColumnRef = function(expr, property) {
                    if (expr.hasGroupOnKeys(property)) {
                        var property = expr.getConceptualProperty(property), entity_1 = expr.getTargetEntity();
                        return _.map(property.column.keys, function(key) {
                            return SQExprBuilder.columnRef(entity_1, key.name);
                        });
                    }
                    return [ expr ];
                }, SelectToIdentityExpressionsVisitor.prototype.visitHierarchyLevel = function(expr, schema) {
                    var sourceEntity = expr.arg.getTargetEntity();
                    if (!sourceEntity) return [ expr ];
                    if (expr.arg instanceof SQHierarchyExpr) {
                        var entityExpr = void 0, schemaName_1 = sourceEntity.schema, columnName = expr.arg;
                        if (columnName.arg instanceof SQPropertyVariationSourceExpr) {
                            var variationEntity = columnName.arg, variationEntity = schema.schema(schemaName_1).findTargetEntityOfVariation(sourceEntity.entity, variationEntity.property, variationEntity.name);
                            if (!variationEntity) return [ expr ];
                            entityExpr = SQExprBuilder.entity(schemaName_1, variationEntity.name);
                        } else entityExpr = sourceEntity, columnName.arg;
                        columnName = schema.schema(schemaName_1).findHierarchyLevel(entityExpr.entity, columnName.hierarchy, expr.level).column.name;
                        return this.visitColumnRef(SQExprBuilder.columnRef(entityExpr, columnName), schema);
                    }
                    return [ expr ];
                }, SelectToIdentityExpressionsVisitor.prototype.visitGroupRef = function(expr, schema) {
                    return this.visitColumnRef(expr, schema);
                }, SelectToIdentityExpressionsVisitor.prototype.visitDefault = function(expr) {
                    return [ expr ];
                }, SelectToIdentityExpressionsVisitor;
            }(SelectToIdentityExpressionsVisitor));
            dsr.SelectToIdentityExpressionsVisitor = SelectToIdentityExpressionsVisitor;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var Impl;
            dsr.mergeMappings = function(mappings, indicesByName) {
                var mappingsLength = mappings.length;
                if (1 === mappingsLength) return {
                    mapping: mappings[0]
                };
                for (var mapping, left, right, splits = [], updateType = mappings[0].updateType, i = 0; i < mappingsLength; i++) {
                    var currentMapping = mappings[i];
                    if (left = currentMapping.updateType, right = updateType, updateType = null === left || 0 === left || null === right || 0 === right ? 0 : left === right ? left : 1 === left || 1 === right ? 1 : 2, 
                    !currentMapping.categorical) return;
                    0 === i && (mapping = {
                        metadata: currentMapping.metadata,
                        categorical: {}
                    }), Impl.mergeCategorical(mapping.categorical, currentMapping.categorical), splits.push(Impl.createSplit(indicesByName, currentMapping.categorical));
                }
                return mapping.updateType = updateType, {
                    mapping: mapping,
                    splits: splits
                };
            }, function(Impl) {
                function areReductionsEquivalent(x, y) {
                    return !x || !y || _.isEqual(x, y);
                }
                function pushArrayRolesToTargetList(_a, select) {
                    select && (_a.select || (_a.select = []), (_a = _a.select).push.apply(_a, select || []));
                }
                Impl.mergeCategorical = function(target, sourceValuesGrouping) {
                    var targetValues, targetValuesGrouping;
                    sourceValuesGrouping.categories && (target.categories ? function(roleForMappingX, roleForMappingY) {
                        if (!roleForMappingX && !roleForMappingY) return;
                        if (roleForMappingX && roleForMappingY) {
                            if (!roleForMappingX.categories && !roleForMappingY.categories) return;
                            if (roleForMappingX.categories && roleForMappingY.categories) {
                                var roleListMappingX = roleForMappingX.categories, roleListMappingY = roleForMappingY.categories;
                                if (!areReductionsEquivalent(roleListMappingX.dataReductionAlgorithm, roleListMappingY.dataReductionAlgorithm)) return;
                                roleForMappingX = roleListMappingX, roleForMappingY = roleListMappingY;
                                if (roleForMappingX.bind || roleForMappingY.bind) return _.isEqual(roleForMappingX.bind, roleForMappingY.bind);
                                roleForMappingX = roleListMappingX, roleForMappingY = roleListMappingY;
                                if (roleForMappingX.for || roleForMappingY.for) return _.isEqual(roleForMappingX.for, roleForMappingY.for);
                                roleListMappingX = roleListMappingX, roleListMappingY = roleListMappingY;
                                return (roleListMappingX.select || roleListMappingY.select) && _.isEqual(roleListMappingX.select, roleListMappingY.select);
                            }
                        }
                    }(target, sourceValuesGrouping) : target.categories = sourceValuesGrouping.categories), 
                    null == sourceValuesGrouping.dataVolume && null == target.dataVolume || (targetValuesGrouping = Math.max(sourceValuesGrouping.dataVolume || 0, target.dataVolume || 0), 
                    sourceValuesGrouping.dataVolume = target.dataVolume = targetValuesGrouping), sourceValuesGrouping.dataReductionAlgorithm && (target.dataReductionAlgorithm ? areReductionsEquivalent(sourceValuesGrouping.dataReductionAlgorithm, target.dataReductionAlgorithm) : target.dataReductionAlgorithm = sourceValuesGrouping.dataReductionAlgorithm), 
                    sourceValuesGrouping.values && (targetValues = (targetValues = target.values) || (target.values = {}), 
                    sourceValuesGrouping = (targetValuesGrouping = sourceValuesGrouping.values).group, 
                    function(targetValues, sourceValues) {
                        (sourceValues.bind || sourceValues.for) && (targetValues.select || (targetValues.select = []), 
                        targetValues.select.push(sourceValues));
                    }(targetValues, targetValuesGrouping), pushArrayRolesToTargetList(targetValues, targetValuesGrouping.select), 
                    sourceValuesGrouping && ((targetValuesGrouping = target.values.group) ? pushArrayRolesToTargetList(targetValuesGrouping, sourceValuesGrouping.select) : target.values.group = {
                        select: sourceValuesGrouping.select.concat([]),
                        by: sourceValuesGrouping.by,
                        dataReductionAlgorithm: sourceValuesGrouping.dataReductionAlgorithm
                    }));
                }, Impl.createSplit = function(indicesByName, mapping) {
                    var result = {
                        selects: {}
                    }, visitor = {
                        visitRole: function(role) {
                            return function(split, indicesByName, role) {
                                var roleItems = role.items;
                                if (!_.isEmpty(role.items)) for (var isAlreadyIncluded = [], _i = 0, roleItems_1 = roleItems; _i < roleItems_1.length; _i++) {
                                    var queryIndex = roleItems_1[_i].queryName, queryIndex = indicesByName[queryIndex];
                                    isAlreadyIncluded[queryIndex] || (split.selects[queryIndex] = !0, isAlreadyIncluded[queryIndex] = !0);
                                }
                            }(result, indicesByName, role);
                        }
                    };
                    return data.CompiledDataViewMapping.visitCategoricalCategories(mapping.categories, visitor), 
                    data.CompiledDataViewMapping.visitGrouped(mapping.values, visitor), data.CompiledDataViewMapping.visitCategoricalValues(mapping.values, visitor), 
                    result;
                };
            }(Impl = Impl || {});
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(QueryCacheOptions) {
            QueryCacheOptions[QueryCacheOptions.None = 0] = "None", QueryCacheOptions[QueryCacheOptions.AllowCache = 1] = "AllowCache", 
            QueryCacheOptions[QueryCacheOptions.AllowQuery = 2] = "AllowQuery", QueryCacheOptions[QueryCacheOptions.CacheResult = 4] = "CacheResult", 
            QueryCacheOptions[QueryCacheOptions.PreventRefresh = 8] = "PreventRefresh";
        }(data.QueryCacheOptions || (data.QueryCacheOptions = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var MinValueAggregator = function() {
                function DataShapeUtility() {}
                return DataShapeUtility.findAndParseCalculation = function(calcs, calc) {
                    calc = this.findCalculation(calcs, calc);
                    if (calc) return data.PrimitiveValueEncoding.parseValue(calc.Value);
                }, DataShapeUtility.findAndParseCalculationToSQExpr = function(calcs, calc) {
                    calc = this.findCalculation(calcs, calc);
                    if (calc) return data.PrimitiveValueEncoding.parseValueToSQExpr(calc.Value);
                }, DataShapeUtility.findCalculation = function(calcs, id) {
                    for (var i = 0, len = calcs.length; i < len; i++) {
                        var calc = calcs[i];
                        if (calc.Id === id) return calc;
                    }
                }, DataShapeUtility.describeDataType = function(type, category) {
                    var primitiveType = 0;
                    switch (type = type || 0) {
                      case 2048:
                        primitiveType = 1;
                        break;

                      case 1:
                        primitiveType = 3;
                        break;

                      case 3:
                        primitiveType = 4;
                        break;

                      case 4096:
                        primitiveType = 5;
                        break;

                      case 20:
                        primitiveType = 6;
                        break;

                      case 4:
                        primitiveType = 7;
                        break;

                      case 8:
                        primitiveType = 9;
                        break;

                      case 67:
                        primitiveType = 4, category = "Years";
                        break;

                      case 35:
                        primitiveType = 4, category = "Months";
                    }
                    return powerbi.ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
                }, DataShapeUtility.getTopLevelSecondaryDynamicMember = function(hierarchy, dataShapeExpressions) {
                    hierarchy = hierarchy.SecondaryHierarchy;
                    return hierarchy ? dataShapeExpressions && dataShapeExpressions.Secondary ? DataShapeUtility.getDynamicMember(hierarchy, dataShapeExpressions.Secondary.Groupings, 0) : DataShapeUtility.getDynamicMemberFallback(hierarchy) : null;
                }, DataShapeUtility.getTopLevelPrimaryDynamicMember = function(dataShape, dataShapeExpressions, useTopLevelCalculations) {
                    var hasTopLevelCalcs, hierarchy = dataShape.PrimaryHierarchy;
                    return hierarchy ? (useTopLevelCalculations && (hasTopLevelCalcs = void 0 !== dataShape.Calculations), 
                    dataShapeExpressions && dataShapeExpressions.Primary ? DataShapeUtility.getDynamicMember(hierarchy, dataShapeExpressions.Primary.Groupings, 0, hasTopLevelCalcs) : DataShapeUtility.getDynamicMemberFallback(hierarchy, hasTopLevelCalcs)) : null;
                }, DataShapeUtility.getDynamicMember = function(dataShapeMembers, axisGroupings, groupDepth, hasTopLevelCalculations) {
                    if (0 === dataShapeMembers.length) return null;
                    if (!axisGroupings || 0 === axisGroupings.length) return DataShapeUtility.getDynamicMemberFallback(dataShapeMembers, hasTopLevelCalculations);
                    var dynamicMemberId = axisGroupings[groupDepth].Member;
                    if (!dynamicMemberId) return DataShapeUtility.getDynamicMemberFallback(dataShapeMembers, hasTopLevelCalculations);
                    for (var _i = 0, dataShapeMembers_1 = dataShapeMembers; _i < dataShapeMembers_1.length; _i++) {
                        var dataShapeMember = dataShapeMembers_1[_i];
                        if (dataShapeMember.Id === dynamicMemberId) return dataShapeMember;
                    }
                    return null;
                }, DataShapeUtility.getDynamicMemberFallback = function(dataShapeMembers, hasTopLevelCalculations) {
                    return 2 === dataShapeMembers.length ? dataShapeMembers[1] : void 0 === hasTopLevelCalculations || !0 === hasTopLevelCalculations ? dataShapeMembers[0] : null;
                }, DataShapeUtility.fillMetadataColumnAggregate = function(calcValue, aggregateMetadata, skipSingle) {
                    void 0 === skipSingle && (skipSingle = !0);
                    var aggregates = aggregateMetadata.source.aggregates;
                    switch (aggregates || (aggregateMetadata.source.aggregates = aggregates = {}), aggregateMetadata.aggregateKind) {
                      case 1:
                        return void (aggregates.subtotal = calcValue);

                      case 2:
                        return void (aggregates.max = calcValue);

                      case 3:
                        return void (aggregates.min = calcValue);

                      case 4:
                        return void (skipSingle || (aggregates.single = calcValue));

                      case 5:
                        return void (aggregates.count = calcValue);

                      case 6:
                        return void (aggregates.average = calcValue);

                      case 8:
                        return void (aggregates.median = calcValue);

                      case 7:
                        var percentileMetadata = aggregateMetadata.aggregate.Percentile, percentiles = (percentiles = aggregates.percentiles) || (aggregates.percentiles = []), percentile = {
                            k: percentileMetadata.K,
                            value: calcValue
                        };
                        return null != percentileMetadata.Exclusive && (percentile.exclusive = percentileMetadata.Exclusive), 
                        void percentiles.push(percentile);
                    }
                }, DataShapeUtility.copyAggregates = function(source, target) {
                    void 0 !== source.subtotal && (target.subtotal = source.subtotal), void 0 !== source.min && (target.min = source.min), 
                    void 0 !== source.max && (target.max = source.max), void 0 !== source.minLocal && (target.minLocal = source.minLocal), 
                    void 0 !== source.maxLocal && (target.maxLocal = source.maxLocal), void 0 !== source.count && (target.count = source.count);
                }, DataShapeUtility.computeAggIdx = function(primaryAggIdx, secondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx) {
                    return primaryAggIdx + (maxSecondaryAggIdx - secondaryAggIdx) * (maxPrimaryAggIdx + 1);
                }, DataShapeUtility;
            }();
            dsr.DataShapeUtility = MinValueAggregator;
            MinValueAggregator = function() {
                function MaxValueAggregator() {}
                return Object.defineProperty(MaxValueAggregator.prototype, "name", {
                    get: function() {
                        return "maxLocal";
                    },
                    enumerable: !1,
                    configurable: !0
                }), MaxValueAggregator.prototype.update = function(value) {
                    var current;
                    "number" != typeof value || isNaN(value) || (current = this.current, this.current = void 0 === current ? value : Math.max(current, value));
                }, MaxValueAggregator.prototype.value = function() {
                    return this.current;
                }, MaxValueAggregator;
            }();
            dsr.MaxValueAggregator = MinValueAggregator;
            MinValueAggregator = function() {
                function MinValueAggregator() {}
                return Object.defineProperty(MinValueAggregator.prototype, "name", {
                    get: function() {
                        return "minLocal";
                    },
                    enumerable: !1,
                    configurable: !0
                }), MinValueAggregator.prototype.update = function(value) {
                    var current;
                    "number" != typeof value || isNaN(value) || (current = this.current, this.current = void 0 === current ? value : Math.min(current || 0, value));
                }, MinValueAggregator.prototype.value = function() {
                    return this.current;
                }, MinValueAggregator;
            }();
            dsr.MinValueAggregator = MinValueAggregator;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var ClientErrorStrings = powerbi.ClientErrorStrings, StringExtensions = jsCommon.StringExtensions;
    powerbi.DMTS_MultipleGatewaysWithAllDatasourcesToBindError = "DMTS_MultipleGatewaysWithAllDatasourcesToBindError", 
    powerbi.DMTS_DatasourceHasNoCredentialError = "DMTS_DatasourceHasNoCredentialError", 
    powerbi.DMTS_OAuthTokenRefreshFailedError = "DMTS_OAuthTokenRefreshFailedError", 
    powerbi.DM_GWPipeline_Client_GatewayUnreachable = "DM_GWPipeline_Client_GatewayUnreachable", 
    powerbi.DM_GWPipeline_Client_OAuthTokenRefreshFailedError = "DM_GWPipeline_Client_OAuthTokenRefreshFailedError", 
    powerbi.DMTS_UserLostPermissionToDatasourceError = "DMTS_UserLostPermissionToDatasourceError", 
    powerbi.DMTS_UserNotFoundInADGraphError = "DMTS_UserNotFoundInADGraphError", powerbi.DM_GWPipeline_Gateway_DataSourceAccessError = "DM_GWPipeline_Gateway_DataSourceAccessError", 
    powerbi.DM_GWPipeline_Gateway_ImpersonationError = "DM_GWPipeline_Gateway_ImpersonationError", 
    powerbi.DM_GWPipeline_Gateway_InvalidMashupConnectionString = "DM_GWPipeline_Gateway_InvalidMashupConnectionString", 
    powerbi.DM_GWPipeline_Gateway_DatabaseLoginError = "DM_GWPipeline_Gateway_DatabaseLoginError", 
    powerbi.DM_GWPipeline_Gateway_SqlTimeoutException = "DM_GWPipeline_Gateway_SqlTimeoutException", 
    powerbi.DM_GWPipeline_Gateway_AdomdTimeoutException = "DM_GWPipeline_Gateway_AdomdTimeoutException", 
    powerbi.DM_GWPipeline_Gateway_InvalidObjectNameException = "DM_GWPipeline_Gateway_InvalidObjectNameException", 
    powerbi.DM_GWPipeline_Gateway_InvalidConnectionCredentials = "DM_GWPipeline_Gateway_InvalidConnectionCredentials", 
    powerbi.DM_GWPipeline_Gateway_ConnectionBrokenException = "DM_GWPipeline_Gateway_ConnectionBrokenException", 
    powerbi.DM_GWPipeline_Gateway_MemoryError = "DM_GWPipeline_Gateway_MemoryError", 
    powerbi.DM_GWPipeline_Gateway_MissingStructureError = "DM_GWPipeline_Gateway_MissingStructureError", 
    powerbi.DM_GWPipeline_Gateway_UnprocessedStructureError = "DM_GWPipeline_Gateway_UnprocessedStructureError", 
    powerbi.DM_GWPipeline_Gateway_ModelLoadError = "DM_GWPipeline_Gateway_ModelLoadError", 
    powerbi.DM_GWPipeline_Gateway_CancellationError = "DM_GWPipeline_Gateway_CancellationError", 
    powerbi.DM_GWPipeline_Gateway_CancellationOrTimeoutError = "DM_GWPipeline_Gateway_CancellationOrTimeoutError", 
    powerbi.DM_GWPipeline_Gateway_QueryExecutionError = "DM_GWPipeline_Gateway_QueryExecutionError", 
    powerbi.DM_GWPipeline_Gateway_RecalculationRequiredError = "DM_GWPipeline_Gateway_RecalculationRequiredError", 
    powerbi.DM_GWPipeline_Gateway_TimeoutError = "DM_GWPipeline_Gateway_TimeoutError", 
    powerbi.DM_GWPipeline_Gateway_AdomdConnectError = "DM_GWPipeline_Gateway_AdomdConnectError", 
    powerbi.DM_GWPipeline_Gateway_MashupDataAccessError = "DM_GWPipeline_Gateway_MashupDataAccessError", 
    powerbi.DM_GWPipeline_Gateway_DatabaseConnectError = "DM_GWPipeline_Gateway_DatabaseConnectError", 
    powerbi.DM_GWPipeline_Gateway_ServerUnreachable = "DM_GWPipeline_Gateway_ServerUnreachable", 
    powerbi.RS_AccessDenied = "rsAccessDenied", powerbi.azureValues = "azure:values", 
    powerbi.KnownDsrClientErrors = {
        ComplexSlicerNotAllowedWithMeasures: {
            localizedContent: "DsrError_ComplexSlicerNotAllowedWithMeasuresValue"
        },
        ComplexHighlightsNotAllowed: {
            localizedContent: "DsrError_ComplexHighlightsNotAllowed_Details",
            localizedMessage: "DsrError_ComplexHighlightsNotAllowed_ShortMessage"
        },
        CouldNotResolveModelReferencesInSemanticQuery: {
            localizedMessage: "DsrError_CouldNotResolveModelRefErrorMessage",
            localizedTitle: "DsrError_CouldNotResolveModelRefErrorKey",
            localizedContent: "DsrError_CouldNotResolveModelRefErrorValNoItems",
            localizedContentWithAffectedItems: "DsrError_CouldNotResolveModelRefErrorValFormat",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690865"
        },
        ExclusivePercentileOutOfRange: {
            localizedMessage: "DsrError_ExclusivePercentileOutOfRangeMessage",
            localizedTitle: "DsrError_ExclusivePercentileOutOfRangeKey",
            localizedContent: "DsrError_ExclusivePercentileOutOfRangeValue"
        },
        InvalidDataShapeNoOutputData: {
            localizedContent: "DsrError_InvalidDataShapeValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690860"
        },
        InvalidUnconstrainedJoin: {
            localizedTitle: "DsrError_InvalidUnconstrainedJoinKey",
            localizedContent: "DsrError_InvalidUnconstrainedJoinValue",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2186131"
        },
        IsRelatedToManyNotSupportedForDetailTable: {
            localizedMessage: "DsrError_IsRelatedToManyNotSupportedForDetailTableMessage",
            localizedTitle: "DsrError_IsRelatedToManyNotSupportedForDetailTableKey",
            localizedContent: "DsrError_IsRelatedToManyNotSupportedForDetailTableValueNoItems",
            localizedContentWithAffectedItems: "DsrError_IsRelatedToManyNotSupportedForDetailTableValueFormat"
        },
        AA_PowerBIScriptPayloadTooLargeError: {
            localizedMessage: "DsrError_ResourcesExceededMessage",
            localizedTitle: "DsrError_ResourcesExceededKey",
            localizedContent: "DsrError_ResourcesExceededValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=746290"
        },
        AA_PowerBIScriptResultTooLargeError: {
            localizedMessage: "DsrError_ResourcesExceededMessage",
            localizedTitle: "DsrError_ResourcesExceededKey",
            localizedContent: "DsrError_ResourcesExceededValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=746291"
        },
        AA_PowerBIScriptReturnedNoImageError: {
            localizedMessage: "DsrError_ScriptReturnedNoImageMessage",
            localizedTitle: "DsrError_ScriptReturnedNoImageKey",
            localizedContent: "DsrError_ScriptReturnedNoImageContent",
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=733479"
        },
        AA_PowerBIScriptRuntimeErrorError: {
            localizedTitle: "DsrError_ScriptRuntimeErrorKey",
            localizedMessage: "DsrError_ScriptRuntimeErrorMessage",
            useODataErrorMessageAsContent: !0,
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=733477"
        },
        AA_PowerBIScriptTimeoutError: {
            localizedMessage: "DsrError_ScriptTimeoutMessage",
            localizedTitle: "DsrError_ScriptTimeoutKey",
            localizedContent: "DsrError_ScriptTimeoutContent",
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=733478"
        },
        AA_PowerBIRequestsQueueOverflowError: {
            localizedTitle: "DsrError_RequestsQueueOverflowKey",
            localizedMessage: "DsrError_RequestsQueueOverflowMessage",
            localizedContent: "DsrError_RequestsQueueOverflowContent",
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=799576"
        },
        AA_PowerBIScriptRuntimeMaxMemoryError: {
            localizedTitle: "DsrError_ScriptRuntimeMaxMemoryKey",
            localizedMessage: "DsrError_ScriptRuntimeMaxMemoryMessage",
            localizedContent: "DsrError_ScriptRuntimeMaxMemoryContent",
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=799578"
        },
        AA_PowerBIScriptRuntimeMaxDiskIOError: {
            localizedTitle: "DsrError_ScriptRuntimeMaxDiskIOKey",
            localizedMessage: "DsrError_ScriptRuntimeMaxDiskIOMessage",
            localizedContent: "DsrError_ScriptRuntimeMaxDiskIOContent",
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=799579"
        },
        AA_PowerBIScriptMissingDependencyError: {
            localizedTitle: "DsrError_ScriptRuntimeMissingDependencyKey",
            localizedMessage: "DsrError_ScriptRuntimeMissingDependencyMessage",
            localizedContent: "DsrError_ScriptRuntimeMissingDependencyContent",
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=799857"
        },
        AA_PowerBIScriptSpecificPackageWithMissingDependencyError: {
            localizedTitle: "DsrError_ScriptRuntimeSpecificPackageWithMissingDependencyKey",
            localizedMessage: "DsrError_ScriptRuntimeSpecificPackageWithMissingDependencyMessage",
            useODataErrorMessageAsContent: !0,
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=799858"
        },
        AA_PowerBIScriptSpecificPackageMissingSpecificDependencyError: {
            localizedTitle: "DsrError_ScriptRuntimeSpecificPackageMissingSpecificDependencyKey",
            localizedMessage: "DsrError_ScriptRuntimeSpecificPackageMissingSpecificDependencyMessage",
            useODataErrorMessageAsContent: !0,
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=799859"
        },
        AA_PowerBIScriptMissingSpecificPackageError: {
            localizedTitle: "DsrError_ScriptRuntimeMissingSpecificPackageKey",
            localizedMessage: "DsrError_ScriptRuntimeMissingSpecificPackageMessage",
            useODataErrorMessageAsContent: !0,
            helpLink: "https://go.microsoft.com/fwlink/?LinkId=800225"
        },
        ModelMeasuresNotSupportedForDetailTable: {
            localizedMessage: "DsrError_ModelMeasuresNotSupportedForDetailTableMessage",
            localizedTitle: "DsrError_ModelMeasuresNotSupportedForDetailTableKey",
            localizedContent: "DsrError_ModelMeasuresNotSupportedForDetailTableValueNoItems",
            localizedContentWithAffectedItems: "DsrError_ModelMeasuresNotSupportedForDetailTableValueFormat"
        },
        ModelUnavailable: {
            localizedContent: "DsrError_ModelUnavailableValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690862"
        },
        NoUniqueKeyForDetailTable: {
            localizedContent: "DsrError_NoUniqueKeyForDetailTableValue"
        },
        OverlappingKeysOnOppositeHierarchies: {
            localizedTitle: "DsrError_OverlappingKeysKey",
            localizedContent: "DsrError_OverlappingKeysValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690863"
        },
        rsQueryMemoryLimitExceeded: {
            localizedMessage: "DsrError_ResourcesExceededMessage",
            localizedTitle: "DsrError_ResourcesExceededKey",
            localizedContent: "DsrError_ResourcesExceededValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690864"
        },
        rsQueryTimeoutExceeded: {
            localizedMessage: "DsrError_ResourcesExceededMessage",
            localizedTitle: "DsrError_ResourcesExceededKey",
            localizedContent: "DsrError_ResourcesExceededValue",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690864"
        },
        rsAccessDenied: {
            localizedMessage: "DsrError_NoPermissionMessage",
            localizedTitle: "DsrError_NoPermissionKey",
            localizedContent: "DsrError_NoAccessForVisual",
            helpLink: "https://go.microsoft.com/fwlink/?LinkID=690862"
        },
        UnsupportedDateTimeLiteral: {
            localizedMessage: "DsrError_UnsupportedDateTimeMessage",
            localizedTitle: "DsrError_UnsupportedDateTimeKey",
            localizedContent: "DsrError_UnsupportedDateTimeValueNoItems",
            localizedContentWithAffectedItems: "DsrError_UnsupportedDateTimeValueFormat"
        },
        InvalidExtensionDax_UnclosedBracketIdentifier: {
            localizedContentWithAffectedItemsAndPosition: "DsrError_InvalidExtensionDax_UnclosedBracketIdentifier"
        },
        InvalidExtensionDax_UnexpectedCloseParenthesis: {
            localizedContentWithAffectedItemsAndPosition: "DsrError_InvalidExtensionDax_UnexpectedCloseParenthesis"
        },
        InvalidFilterComparisonIncompatibleExpressions: {
            localizedContent: "DsrError_InvalidFilterConditionIncompatibleDataTypeOrExpression",
            localizedContentWithAffectedItems: "DsrError_InvalidFilterConditionIncompatibleDataTypeOrExpressionWithAffectedItems"
        },
        InvalidFilterConditionIncompatibleDataType: {
            localizedContent: "DsrError_InvalidFilterConditionIncompatibleDataTypeOrExpression",
            localizedContentWithAffectedItems: "DsrError_InvalidFilterConditionIncompatibleDataTypeOrExpressionWithAffectedItems"
        },
        ExtensionMeasureEmptyExpression: {
            localizedContentWithAffectedItems: "DsrError_ExtensionMeasureEmptyExpression"
        },
        ExtensionMeasureNameNotUniqueModel: {
            localizedContentWithAffectedItems: "DsrError_ExtensionMeasureNameNotUniqueModel"
        },
        ExtensionMeasureNameNotUnique: {
            localizedContentWithAffectedItems: "DsrError_ExtensionMeasureNameNotUnique"
        },
        CouldNotResolveModelReferencesInQueryExtensionSchema: {
            localizedMessage: "DsrError_CouldNotResolveModelRefErrorMessage",
            localizedTitle: "DsrError_CouldNotResolveModelRefErrorKey",
            localizedContentWithAffectedItems: "DsrError_CouldNotResolveModelReferencesInQueryExtensionSchema"
        },
        QueryExtensionMeasureError: {
            localizedContentWithAffectedItemsAndPosition: "DsrError_QueryExtensionMeasureError",
            localizedContentWithAffectedItemsAndPositionAndDetails: "DsrError_QueryExtensionMeasureErrorWithDetails"
        },
        QueryExtensionMeasureUnexpectedEndOfUserInput: {
            localizedContentWithAffectedItems: "DsrError_QueryExtensionMeasureUnexpectedEndOfUserInput"
        },
        UnsupportedDataSourceVariables: {
            localizedMessage: "DsrError_UnsupportedDataSourceVariablesMessage",
            localizedTitle: "DsrError_UnsupportedDataSourceVariablesKey",
            localizedContent: "DsrError_UnsupportedDataSourceVariablesContent"
        },
        DataExtensionMissingResultSet: {
            localizedMessage: "DsrError_DataExtensionMissingResultSetMessage",
            localizedTitle: "DsrError_DataExtensionMissingResultSetKey",
            localizedContent: "DsrError_DataExtensionMissingResultSetContent"
        },
        CannotUseMultiColumnFilteringWithMappedColumns: {
            localizedContent: "DsrError_DQP_CannotUseMultiColumnFilteringWithMappedColumns",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        DifferentMappingsWithinSubqueries: {
            localizedContent: "DsrError_DQP_DifferentMappingsWithinSubqueries",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        FilterIncompatibleWithParameter: {
            localizedContent: "DsrError_DQP_FilterIncompatibleWithParameter",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        FoundMultipleTargetsWithAtLeastOneMapping: {
            localizedContent: "DsrError_DQP_FoundMultipleTargetsWithAtLeastOneMapping",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        FoundParameterMappingOnUnsupportedFilter: {
            localizedContent: "DsrError_DQP_FoundParameterMappingOnUnsupportedFilter",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        InTableConditionNotSupportedWithMappedParameters: {
            localizedContent: "DsrError_DQP_InTableConditionNotSupportedWithMappedParameters",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        InvalidMappedParameterValueExpression: {
            localizedContent: "DsrError_DQP_InvalidMappedParameterValueExpression",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        MappedTargetMustMatchMappedCondition: {
            localizedContent: "DsrError_DQP_MappedTargetMustMatchMappedCondition",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        MixOfAssignedAndUnassignedColumnsWithinORExpression: {
            localizedContent: "DsrError_DQP_MixOfAssignedAndUnassignedColumnsWithinORExpression",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        MultipleParameterAssignmentsWithinORUnsupported: {
            localizedContent: "DsrError_DQP_MultipleParameterAssignmentsWithinORUnsupported",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        MultipleParameterMappingsUnsupported: {
            localizedContent: "DsrError_DQP_MultipleParameterMappingsUnsupported",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        ParameterMappingFilterConflict: {
            localizedContent: "DsrError_DQP_ParameterMappingFilterConflict",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        ParameterMappingsFoundWithinFilteredEvalExpressionFilter: {
            localizedContent: "DsrError_DQP_ParameterMappingsFoundWithinFilteredEvalExpressionFilter",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        ParameterMappingsNotSupportedOnHighlights: {
            localizedContent: "DsrError_DQP_ParameterMappingsNotSupportedOnHighlights",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        },
        SingleValueParameterWithMultipleValues: {
            localizedContent: "DsrError_DQP_SingleValueParameterWithMultipleValues",
            helpLink: "https://go.microsoft.com/fwlink/?linkid=2139315"
        }
    };
    var DsrClientError = function() {
        function DsrClientError(oDataError) {
            this.oDataError = oDataError, this.oDataCode = this.parseCode();
        }
        return Object.defineProperty(DsrClientError, "maxNumberOfCommaValues", {
            get: function() {
                return 9;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(DsrClientError.prototype, "code", {
            get: function() {
                return this.oDataCode;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(DsrClientError.prototype, "oDataErrorMessage", {
            get: function() {
                if (this.oDataError && this.oDataError.message && this.oDataError.message.value) return this.oDataError.message.value;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(DsrClientError.prototype, "source", {
            get: function() {
                switch (this.oDataError.source) {
                  case "PowerBI":
                    return "PowerBI";

                  case "External":
                    return "External";

                  case "Unknown":
                    return;

                  case "User":
                    return DsrClientError.isCodeKnown(this.code) ? "User" : void 0;
                }
                this.oDataError.source;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(DsrClientError.prototype, "ignorable", {
            get: function() {
                return !1;
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(DsrClientError.prototype, "AdditionalErrorMessages", {
            get: function() {
                if (this.oDataError) {
                    var values = this.oDataError[powerbi.azureValues];
                    if (!_.isEmpty(values)) for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                        var value = values_1[_i];
                        if (!_.isEmpty(value.additionalMessages)) return value.additionalMessages;
                    }
                }
            },
            enumerable: !1,
            configurable: !0
        }), Object.defineProperty(DsrClientError.prototype, "powerBiErrorDetails", {
            get: function() {
                if (this.oDataError) {
                    var values = this.oDataError[powerbi.azureValues];
                    if (!_.isEmpty(values)) for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
                        var value = values_2[_i];
                        if (!_.isEmpty(value.powerBiErrorDetails)) return value.powerBiErrorDetails;
                    }
                }
            },
            enumerable: !1,
            configurable: !0
        }), DsrClientError.prototype.getDetails = function(detailsKey) {
            var key = this.oDataError[powerbi.azureValues], azureDetails = null;
            if (key) for (var _i = 0, values_3 = key; _i < values_3.length; _i++) {
                var value = values_3[_i];
                if (value.details) {
                    azureDetails = value.details;
                    break;
                }
            }
            var details = DsrClientError.getErrorDetailsFromStatusCode(this.code, this.oDataErrorMessage, azureDetails, this.AdditionalErrorMessages, detailsKey), key = details.displayableErrorInfo[0].errorInfoKey;
            return !DsrClientError.isCodeKnown(this.code) && azureDetails && (details.displayableErrorInfo = []), 
            azureDetails && (detailsKey = 0 === details.displayableErrorInfo.length ? key : detailsKey.get("DsrError_MoreInfo"), 
            details.displayableErrorInfo.push({
                errorInfoKey: detailsKey,
                errorInfoValue: azureDetails
            })), DsrClientError.isDynamicQueryParameterErrorCode(this.code) && (details.hideDebugInfo = !0), 
            details;
        }, DsrClientError.getErrorDetailsFromStatusCode = function(code, oDataErrorMessage, azureDetails, additionalMessages, resourceProvider) {
            var key = resourceProvider.get("DsrError_Key"), val = resourceProvider.get("DsrError_UnknownErrorValue"), message = resourceProvider.get("DsrError_Message"), details = jsCommon.PowerBIDefaultHelpPage, errorTemplate = powerbi.KnownDsrClientErrors[code];
            errorTemplate && (key = errorTemplate.localizedTitle ? resourceProvider.get(errorTemplate.localizedTitle) : key, 
            val = DsrClientError.getContent(code, azureDetails, additionalMessages, errorTemplate, resourceProvider) || val, 
            message = errorTemplate.localizedMessage ? resourceProvider.get(errorTemplate.localizedMessage) : message, 
            details = errorTemplate.helpLink || details, errorTemplate.useODataErrorMessageAsContent && (val = oDataErrorMessage || message));
            details = {
                message: message,
                displayableErrorInfo: [ {
                    errorInfoKey: key,
                    errorInfoValue: val
                } ],
                helpLink: details,
                debugErrorInfo: []
            };
            return !errorTemplate && code && details.debugErrorInfo.push({
                errorInfoKey: ClientErrorStrings.ErrorCode,
                errorInfoValue: code
            }), errorTemplate && errorTemplate.useODataErrorMessageAsContent || !oDataErrorMessage || details.debugErrorInfo.push({
                errorInfoKey: ClientErrorStrings.ODataErrorMessage,
                errorInfoValue: oDataErrorMessage
            }), details;
        }, DsrClientError.getContent = function(code, azureDetails, affectedItems, errorTemplate, resourceProvider) {
            if (errorTemplate.localizedContentWithAffectedItemsAndPosition || errorTemplate.localizedContentWithAffectedItemsAndPositionAndDetails) {
                var positionMessage = DsrClientError.findAdditionalMessageWithAffectedItemsAndPosition(code, affectedItems);
                if (errorTemplate.localizedContentWithAffectedItemsAndPositionAndDetails && azureDetails && positionMessage) return StringExtensions.format(resourceProvider.get(errorTemplate.localizedContentWithAffectedItemsAndPositionAndDetails), StringExtensions.constructCommaSeparatedList(positionMessage.AffectedItems, resourceProvider, DsrClientError.maxNumberOfCommaValues), powerbi.formattingService.formatValue(positionMessage.Line), powerbi.formattingService.formatValue(positionMessage.Position), azureDetails);
                if (errorTemplate.localizedContentWithAffectedItemsAndPosition && positionMessage) return StringExtensions.format(resourceProvider.get(errorTemplate.localizedContentWithAffectedItemsAndPosition), StringExtensions.constructCommaSeparatedList(positionMessage.AffectedItems, resourceProvider, DsrClientError.maxNumberOfCommaValues), powerbi.formattingService.formatValue(positionMessage.Line), powerbi.formattingService.formatValue(positionMessage.Position));
            }
            if (errorTemplate.localizedContentWithAffectedItems) {
                affectedItems = DsrClientError.getAffectedItemsFromStatusCode(code, affectedItems);
                if (0 < affectedItems.length) return StringExtensions.format(resourceProvider.get(errorTemplate.localizedContentWithAffectedItems), StringExtensions.constructCommaSeparatedList(affectedItems, resourceProvider, DsrClientError.maxNumberOfCommaValues));
            }
            if (errorTemplate.localizedContent) return resourceProvider.get(errorTemplate.localizedContent);
        }, DsrClientError.findAdditionalMessageWithAffectedItemsAndPosition = function(code, additionalMessages) {
            return _.find(additionalMessages, function(m) {
                return m.Code === code && !_.isEmpty(m.AffectedItems) && null != m.Position && null != m.Line;
            });
        }, DsrClientError.getAffectedItemsFromStatusCode = function(code, additionalMessages) {
            for (var _i = 0, additionalMessages_1 = additionalMessages; _i < additionalMessages_1.length; _i++) {
                var message = additionalMessages_1[_i];
                if (message.Code === code) return message.AffectedItems || [];
            }
            return [];
        }, DsrClientError.prototype.parseCode = function() {
            var code = this.oDataError.code, values = this.oDataError[powerbi.azureValues], additionalMessages = [];
            if (values) for (var _i = 0, values_4 = values; _i < values_4.length; _i++) {
                var value = values_4[_i];
                value.additionalMessages && (additionalMessages = value.additionalMessages);
            }
            if (0 < additionalMessages.length) for (var _a = 0, additionalMessages_2 = additionalMessages; _a < additionalMessages_2.length; _a++) {
                var message = additionalMessages_2[_a];
                if (DsrClientError.isCodeKnown(message.Code)) {
                    code = message.Code;
                    break;
                }
            }
            return code;
        }, DsrClientError.isCodeKnown = function(code) {
            return DsrClientError.isGeneralKnownErrorCode(code) || DsrClientError.isDynamicQueryParameterErrorCode(code);
        }, DsrClientError.isGeneralKnownErrorCode = function(code) {
            switch (code) {
              case "ComplexSlicerNotAllowedWithMeasures":
              case "ComplexHighlightsNotAllowed":
              case "ExclusivePercentileOutOfRange":
              case "InvalidDataShapeNoOutputData":
              case "InvalidFilterComparisonIncompatibleExpressions":
              case "InvalidFilterConditionIncompatibleDataType":
              case "InvalidUnconstrainedJoin":
              case "ModelUnavailable":
              case "OverlappingKeysOnOppositeHierarchies":
              case "rsQueryMemoryLimitExceeded":
              case "rsQueryTimeoutExceeded":
              case "CouldNotResolveModelReferencesInSemanticQuery":
              case "QueryExtensionMeasureUnexpectedEndOfUserInput":
              case "rsAccessDenied":
              case "NoUniqueKeyForDetailTable":
              case "IsRelatedToManyNotSupportedForDetailTable":
              case "ModelMeasuresNotSupportedForDetailTable":
              case "UnsupportedDateTimeLiteral":
              case "InvalidExtensionDax_UnclosedBracketIdentifier":
              case "InvalidExtensionDax_UnexpectedCloseParenthesis":
              case "ExtensionMeasureEmptyExpression":
              case "ExtensionMeasureNameNotUniqueModel":
              case "ExtensionMeasureNameNotUnique":
              case "CouldNotResolveModelReferencesInQueryExtensionSchema":
              case "QueryExtensionMeasureError":
              case "UnsupportedDataSourceVariables":
              case "DataExtensionMissingResultSet":
                return !0;

              default:
                return !1;
            }
        }, DsrClientError.isDynamicQueryParameterErrorCode = function(code) {
            switch (code) {
              case "CannotUseMultiColumnFilteringWithMappedColumns":
              case "DifferentMappingsWithinSubqueries":
              case "FilterIncompatibleWithParameter":
              case "FoundMultipleTargetsWithAtLeastOneMapping":
              case "FoundParameterMappingOnUnsupportedFilter":
              case "InTableConditionNotSupportedWithMappedParameters":
              case "InvalidMappedParameterValueExpression":
              case "MappedTargetMustMatchMappedCondition":
              case "MixOfAssignedAndUnassignedColumnsWithinORExpression":
              case "MultipleParameterAssignmentsWithinORUnsupported":
              case "MultipleParameterMappingsUnsupported":
              case "ParameterMappingFilterConflict":
              case "ParameterMappingsFoundWithinFilteredEvalExpressionFilter":
              case "ParameterMappingsNotSupportedOnHighlights":
              case "SingleValueParameterWithMultipleValues":
                return !0;

              default:
                return !1;
            }
        }, DsrClientError;
    }();
    powerbi.DsrClientError = DsrClientError;
}(powerbi = powerbi || {}), function(data_9) {
    (function(bingSocial) {
        var BingSocialClient = function() {
            function BingSocialClient(httpService) {
                this.httpService = httpService;
            }
            return BingSocialClient.prototype.requestData = function(deferred, searchKey, tileRequestData) {
                var promises = [], urlTemplates = tileRequestData.getUrlTemplates(), responseFormatter = tileRequestData.getResponseFormatter();
                searchKey = this.formatSearchKey(searchKey);
                for (var _i = 0, urlTemplates_1 = urlTemplates; _i < urlTemplates_1.length; _i++) {
                    var urlTemplate = urlTemplates_1[_i], promise = $.Deferred();
                    promises.push(promise), urlTemplate = urlTemplate.replace(/{{searchKey}}/g, encodeURIComponent(searchKey)), 
                    this.makeRequest(urlTemplate, promise);
                }
                (1 === promises.length ? promises[0] : $.when.apply($, promises)).pipe(function() {
                    for (var args = [], _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
                    var data = responseFormatter.formatResponse(Array.prototype.slice.call(args));
                    deferred.resolve(data);
                }, deferred.reject);
            }, BingSocialClient.prototype.formatSearchKey = function(str) {
                return str = str.trim().toUpperCase(), str = this.removeEdgeBinaryOperator(str, "AND"), 
                str = this.removeEdgeBinaryOperator(str, "OR");
            }, BingSocialClient.prototype.removeEdgeBinaryOperator = function(str, op) {
                return _.startsWith(str, op + " ") && (str = op.toLowerCase() + str.slice(op.length)), 
                str = _.endsWith(str, " " + op) ? str.slice(0, str.length - op.length) + op.toLowerCase() : str;
            }, BingSocialClient.prototype.makeRequest = function(url, promise) {
                var requestOptions = this.httpService.powerbiRequestOptions();
                requestOptions.responseType = "json", this.httpService.get(url, requestOptions).then(function(data) {
                    data = data.data;
                    if ("string" == typeof data) try {
                        data = JSON.parse(data);
                    } catch (e) {
                        return promise.reject();
                    }
                    promise.resolve(data);
                }, promise.reject);
            }, BingSocialClient;
        }();
        bingSocial.BingSocialClient = BingSocialClient;
    })((data_9 = data_9.data || (data_9.data = {})).bingSocial || (data_9.bingSocial = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var StringExtensions = jsCommon.StringExtensions;
            dsr.LimitMetadata = function() {};
            var DsrLimitsWarning = function() {
                function DsrLimitsWarning(queryBindingDescriptor, exceededLimits, calculations) {
                    exceededLimits && exceededLimits.length, this.computeMetadata(queryBindingDescriptor, calculations, exceededLimits);
                }
                return Object.defineProperty(DsrLimitsWarning.prototype, "code", {
                    get: function() {
                        return "DsrLimitsWarning";
                    },
                    enumerable: !1,
                    configurable: !0
                }), DsrLimitsWarning.prototype.computeMetadata = function(secondaryGroupings, calculations, intersectionExceeded) {
                    var dsLimits, primaryExceeded, secondaryExceeded, primaryGroupings;
                    this.limits = {}, secondaryGroupings.Limits && (primaryGroupings = DsrLimitsWarning.getExceededLimitsDetails(secondaryGroupings, intersectionExceeded), 
                    dsLimits = secondaryGroupings.Limits, primaryExceeded = !!primaryGroupings.Primary, 
                    secondaryExceeded = !!primaryGroupings.Secondary, intersectionExceeded = !!primaryGroupings.Intersection, 
                    secondaryGroupings.ScriptVisualBinding ? this.hasScriptVisualBinding = !0 : (primaryGroupings = secondaryGroupings.Expressions && secondaryGroupings.Expressions.Primary && secondaryGroupings.Expressions.Primary.Groupings ? secondaryGroupings.Expressions.Primary.Groupings : [], 
                    secondaryGroupings = secondaryGroupings.Expressions && secondaryGroupings.Expressions.Secondary && secondaryGroupings.Expressions.Secondary.Groupings ? secondaryGroupings.Expressions.Secondary.Groupings : [], 
                    primaryExceeded && secondaryExceeded ? (this.groupings = primaryGroupings.concat(secondaryGroupings), 
                    this.limits.Primary = DsrLimitsWarning.getLimitMetadata(dsLimits.Primary, calculations), 
                    this.limits.Secondary = DsrLimitsWarning.getLimitMetadata(dsLimits.Secondary, calculations)) : primaryExceeded ? (this.groupings = primaryGroupings, 
                    this.limits.Primary = DsrLimitsWarning.getLimitMetadata(dsLimits.Primary, calculations)) : secondaryExceeded && (this.groupings = secondaryGroupings, 
                    this.limits.Secondary = DsrLimitsWarning.getLimitMetadata(dsLimits.Secondary, calculations)), 
                    intersectionExceeded && (this.limits.Intersection = DsrLimitsWarning.getLimitMetadata(dsLimits.Intersection, calculations))));
                }, DsrLimitsWarning.prototype.getDetails = function(resourceProvider) {
                    var primaryExceeded = !!this.limits.Primary, secondaryExceeded = !!this.limits.Secondary, errorInfoValue = null, limitType = -1;
                    this.hasScriptVisualBinding ? errorInfoValue = resourceProvider.get("DsrLimitWarning_TooMuchDataValMultipleColumns") : primaryExceeded || secondaryExceeded ? errorInfoValue = primaryExceeded && secondaryExceeded ? (limitType = this.limits.Primary.Type, 
                    this.getErrorInfoValue(this.groupings, resourceProvider.get("DsrLimitsWarning_MultipleColumnsWithIssuesFormat"), resourceProvider)) : (limitType = (primaryExceeded ? this.limits.Primary : this.limits.Secondary).Type, 
                    this.getErrorInfoValue(this.groupings, DsrLimitsWarning.getDetailedMessageFormatForOneColumn(limitType, resourceProvider), resourceProvider)) : this.limits.Intersection && (limitType = this.limits.Intersection.Type, 
                    errorInfoValue = DsrLimitsWarning.getDetailedMessageFormatForOneColumn(limitType, resourceProvider));
                    errorInfoValue = errorInfoValue || resourceProvider.get("DsrLimitWarning_TooMuchDataValMultipleColumns");
                    return {
                        message: DsrLimitsWarning.getMessage(limitType, resourceProvider),
                        displayableErrorInfo: [ {
                            errorInfoKey: DsrLimitsWarning.getKey(limitType, resourceProvider),
                            errorInfoValue: errorInfoValue
                        } ],
                        helpLink: DsrLimitsWarning.getHelpLink(limitType)
                    };
                }, DsrLimitsWarning.getExceededLimitsDetails = function(queryBindingDescriptor, exceededLimits) {
                    for (var limits = queryBindingDescriptor.Limits, limitsDetails = {}, _i = 0, exceededLimits_1 = exceededLimits; _i < exceededLimits_1.length; _i++) {
                        var limit = exceededLimits_1[_i];
                        limits.Primary && limit.Id === limits.Primary.Id ? limitsDetails.Primary = limits.Primary : limits.Secondary && limit.Id === limits.Secondary.Id ? limitsDetails.Secondary = limits.Secondary : limits.Intersection && limit.Id === limits.Intersection.Id && (limitsDetails.Intersection = limits.Intersection);
                    }
                    return limitsDetails;
                }, DsrLimitsWarning.prototype.getErrorInfoValue = function(groupings, messageFormatString, finalGroupingName) {
                    if (!groupings || 0 === groupings.length) return null;
                    for (var groupingNames = [], i = 0, iLen = groupings.length; i < iLen; i++) {
                        var groupingName = groupings[i], groupingName = this.getGroupingNameFromGroupingKeys(groupingName);
                        groupingName && groupingNames.push(groupingName);
                    }
                    var nameCount = groupingNames.length;
                    return 0 === nameCount ? null : (finalGroupingName = 1 === nameCount ? groupingNames[0] : groupingNames.join(finalGroupingName.get("ListJoin_Separator")), 
                    StringExtensions.format(messageFormatString, finalGroupingName));
                }, DsrLimitsWarning.prototype.getGroupingNameFromGroupingKeys = function(grouping) {
                    for (var keys = grouping.Keys, i = 0, iLen = keys.length; i < iLen; i++) {
                        var currentKey = keys[i];
                        if (null !== currentKey.Select && void 0 !== currentKey.Select) return this.columnNameFromIndex ? this.columnNameFromIndex(currentKey.Select) : void 0;
                    }
                }, DsrLimitsWarning.getMessage = function(type, resourceProvider) {
                    switch (type) {
                      case 2:
                        return resourceProvider.get("DsrLimitWarning_RepresentativeSampleMessage");

                      case 3:
                      case 4:
                        return resourceProvider.get("DsrLimitWarning_HighDensitySampleMessage");

                      default:
                        return resourceProvider.get("DsrLimitWarning_TooMuchDataMessage");
                    }
                }, DsrLimitsWarning.getKey = function(type, resourceProvider) {
                    switch (type) {
                      case 2:
                        return resourceProvider.get("DsrLimitWarning_RepresentativeSampleKey");

                      case 3:
                      case 4:
                        return resourceProvider.get("DsrLimitWarning_HighDensitySampleKey");

                      default:
                        return resourceProvider.get("DsrLimitWarning_TooMuchDataKey");
                    }
                }, DsrLimitsWarning.getDetailedMessageFormatForOneColumn = function(type, resourceProvider) {
                    switch (type) {
                      case 2:
                        return resourceProvider.get("DsrLimitWarning_RepresentativeSampleVal");

                      case 3:
                        return resourceProvider.get("DsrLimitWarning_HighDensitySampleVal");

                      case 4:
                        return resourceProvider.get("DsrLimitWarning_OverlappingPointsDetails");

                      default:
                        return resourceProvider.get("DsrLimitWarning_TooMuchDataVal");
                    }
                }, DsrLimitsWarning.getHelpLink = function(type) {
                    switch (type) {
                      case 3:
                        return "https://go.microsoft.com/fwlink/?linkid=848757";

                      case 4:
                        return "https://go.microsoft.com/fwlink/?linkid=853820";
                    }
                }, DsrLimitsWarning.getLimitMetadata = function(limitDescriptor, calcs) {
                    return limitDescriptor.Top ? {
                        Type: 0,
                        Count: DsrLimitsWarning.getLimitCount(limitDescriptor.Top, calcs)
                    } : limitDescriptor.Bottom ? {
                        Type: 1,
                        Count: DsrLimitsWarning.getLimitCount(limitDescriptor.Bottom, calcs)
                    } : limitDescriptor.Sample ? {
                        Type: 2,
                        Count: DsrLimitsWarning.getLimitCount(limitDescriptor.Sample, calcs)
                    } : limitDescriptor.BinnedLineSample ? {
                        Type: 3,
                        Count: DsrLimitsWarning.getBinnedLineSampleCount(limitDescriptor.BinnedLineSample)
                    } : limitDescriptor.OverlappingPointsSample ? {
                        Type: 4,
                        Count: DsrLimitsWarning.getLimitCount(limitDescriptor.OverlappingPointsSample, calcs)
                    } : {
                        Type: -1,
                        Count: null
                    };
                }, DsrLimitsWarning.getLimitCount = function(limit, value) {
                    if (limit.Calc && value) {
                        value = dsr.DataShapeUtility.findCalculation(value, limit.Calc);
                        if (value) {
                            value = data.PrimitiveValueEncoding.parseValue(value.Value);
                            if (_.isNumber(value)) return value;
                        }
                    }
                    return limit.Count;
                }, DsrLimitsWarning.getBinnedLineSampleCount = function(limit) {
                    return limit.MaxTargetPointCount;
                }, DsrLimitsWarning;
            }();
            dsr.DsrLimitsWarning = DsrLimitsWarning;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            dsr.getDsrMessageSeverityValue = function(dsrMessageSeverity) {
                if (0 === dsrMessageSeverity) return "Warning";
            }, dsr.KnownDsrMessages = {
                "ForecastErrorType.DataIsTooSmall": {
                    localizedMessage: "DsrMessage_NotEnoughDataMessage",
                    localizedTitle: "DsrMessage_NotEnoughDataTitle",
                    localizedContent: "DsrMessage_NotEnoughDataContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.TooManyMissingValues": {
                    localizedMessage: "DsrMessage_DataIsTooRandomOrMissingValuesMessage",
                    localizedTitle: "DsrMessage_DataIsTooRandomOrMissingValuesTitle",
                    localizedContent: "DsrMessage_DataIsTooRandomOrMissingValuesContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.NoDominantStepDetected": {
                    localizedMessage: "DsrMessage_DataIsTooRandomOrMissingValuesMessage",
                    localizedTitle: "DsrMessage_DataIsTooRandomOrMissingValuesTitle",
                    localizedContent: "DsrMessage_DataIsTooRandomOrMissingValuesContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.InputTimeStampsNotSorted": {
                    localizedMessage: "DsrMessage_UnsortedDataMessage",
                    localizedTitle: "DsrMessage_UnsortedDataTitle",
                    localizedContent: "DsrMessage_UnsortedDataContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.XAxisIsNull": {
                    localizedMessage: "DsrMessage_ForecastXValueNullMessage",
                    localizedTitle: "DsrMessage_ForecastXValueNullTitle",
                    localizedContent: "DsrMessage_ForecastXValueNullContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.InvalidSeasonality": {
                    localizedMessage: "DsrMessage_ForecastInvalidSeasonalityMessage",
                    localizedTitle: "DsrMessage_ForecastInvalidSeasonalityTitle",
                    localizedContent: "DsrMessage_ForecastInvalidSeasonalityContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.InvalidDataType": {
                    localizedMessage: "DsrMessage_ForecastVariantDataTypeMessage",
                    localizedTitle: "DsrMessage_ForecastVariantDataTypeTitle",
                    localizedContent: "DsrMessage_ForecastVariantDataTypeContent",
                    isTransformMessage: !0
                },
                "ForecastErrorType.Unexpected": {
                    localizedMessage: "DsrMessage_ForecastErrorMessage",
                    localizedTitle: "DsrMessage_ForecastErrorTitle",
                    localizedContent: "DsrMessage_ForecastErrorContent",
                    isTransformMessage: !0
                },
                ForecastTransformUnsupported: {
                    localizedMessage: "DsrMessage_ForecastNotSupportedMessage",
                    localizedTitle: "DsrMessage_ForecastNotSupportedTitle",
                    localizedContent: "DsrMessage_ForecastNotSupportedContent",
                    isTransformMessage: !0
                },
                "ClusteringErrorType.LessThanKDataPoints": {
                    localizedMessage: "DsrMessage_ClusterTooManyClustersTitle",
                    localizedTitle: "DsrMessage_ClusterTooManyClustersTitle",
                    localizedContent: "DsrMessage_ClusterTooManyClustersContent",
                    isTransformMessage: !0
                },
                "ClusteringErrorType.TooManyDataPoints": {
                    localizedMessage: "DsrMessage_ClusterExceedsLimitTitle",
                    localizedTitle: "DsrMessage_ClusterExceedsLimitTitle",
                    localizedContent: "DsrMessage_ClusterExceedsLimitContent",
                    isTransformMessage: !0
                },
                "ClusteringErrorType.InvalidDataType": {
                    localizedMessage: "DsrMessage_ClusterVariantDataTypeTitle",
                    localizedTitle: "DsrMessage_ClusterVariantDataTypeTitle",
                    localizedContent: "DsrMessage_ClusterVariantDataTypeContent",
                    isTransformMessage: !0
                }
            };
            var DsrMessage = function() {
                function DsrMessage(dataShapeMessage) {
                    this.dataShapeMessage = dataShapeMessage;
                }
                return Object.defineProperty(DsrMessage.prototype, "code", {
                    get: function() {
                        return this.dataShapeMessage.Code;
                    },
                    enumerable: !1,
                    configurable: !0
                }), DsrMessage.prototype.getDetails = function(resourceProvider) {
                    var messageTemplate = dsr.KnownDsrMessages[this.dataShapeMessage.Code];
                    return {
                        message: resourceProvider.get(messageTemplate.localizedMessage),
                        displayableErrorInfo: [ {
                            errorInfoKey: resourceProvider.get(messageTemplate.localizedTitle),
                            errorInfoValue: resourceProvider.get(messageTemplate.localizedContent)
                        } ]
                    };
                }, DsrMessage.prototype.isTransformMessage = function() {
                    var messageTemplate = dsr.KnownDsrMessages[this.code];
                    return messageTemplate && messageTemplate.isTransformMessage;
                }, DsrMessage;
            }();
            dsr.DsrMessage = DsrMessage;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var dsr_1, JsonExtensions, logTime;
        function isDsrV2(dsr) {
            if (2 === dsr.Version) return !0;
        }
        function readDsr(targets, descriptor, dsr, featureSwitches, requestId, clientSideFilters, perfId, perfStats, telemetryService, totalTimeStart, timestamp, fromCache, executionMetrics, dataShapesParser, performanceActivity) {
            if (!dsr) return null;
            var perfEntryId;
            if (perfStats = perfStats || {}, 4 & targets && (targets |= 8), isDsrV2(dsr)) {
                if (perfEntryId = "dsr2-read", performance && performance.mark && performance.mark(perfEntryId + "-start"), 
                perfStats.mode = "V2", 1 !== _.size(dsr.DS)) return null;
                var result = dsr_1.createDsrParserContext(descriptor), limitsWarning = dsr_1.reader.V2.createDsrParser(dsr, result), result = function(dataViewConverterContext, dsrParser, perfStats, featureSwitches, scopedAggregatesEnabled) {
                    var matrix_1, categorical_1, table_1, tree_1, single_1, metadata = {
                        columns: dataViewConverterContext.createDataViewMetadataColumns()
                    }, dataReaderResult = {
                        dataView: {
                            metadata: metadata
                        }
                    };
                    {
                        var matrixConverterTime;
                        (function(dataShapesParser, dataReaderResult) {
                            dataShapesParser.reset();
                            dataShapesParser = dataShapesParser.dataShapes();
                            dataShapesParser.count(), dataShapesParser.next(), dataShapesParser.complete() || (dataReaderResult.dataView.metadata.segment = {}, 
                            dataReaderResult.restartToken = dataShapesParser.restartTokens());
                        })(dsrParser, dataReaderResult), dataViewConverterContext.includes(2) && (matrixConverterTime = logTime(function() {
                            (matrix_1 = dsr_1.converters.createMatrix(dataViewConverterContext, dsrParser, metadata, scopedAggregatesEnabled, featureSwitches.synchronizedGroupsEnabled, featureSwitches.scopedMeasuresEnabled)) && (dataReaderResult.dataView.matrix = matrix_1, 
                            dsrParser.lockCache());
                        }), matrix_1 && (perfStats.matrix = matrixConverterTime));
                    }
                    dataViewConverterContext.includes(1) && (tableConverterTime = logTime(function() {
                        (categorical_1 = dsr_1.converters.categorical(dataViewConverterContext, dsrParser, metadata, featureSwitches)) && (dataReaderResult.dataView.categorical = categorical_1, 
                        dsrParser.lockCache());
                    }), categorical_1 && (perfStats.categorical = tableConverterTime));
                    {
                        var tableConverterTime;
                        dataViewConverterContext.includes(8) && (tableConverterTime = logTime(function() {
                            (table_1 = dsr_1.converters.createTable(dataViewConverterContext, dsrParser, metadata)) && (dataReaderResult.dataView.table = table_1, 
                            dsrParser.lockCache());
                        }), table_1 && (perfStats.table = tableConverterTime));
                    }
                    dataViewConverterContext.includes(16) && (singleConverterTime = logTime(function() {
                        (tree_1 = dsr_1.converters.createTree(dataViewConverterContext, dsrParser)) && (dataReaderResult.dataView.tree = tree_1, 
                        dsrParser.lockCache());
                    }), tree_1 && (perfStats.tree = singleConverterTime));
                    {
                        var singleConverterTime;
                        dataViewConverterContext.includes(4) && (singleConverterTime = logTime(function() {
                            (single_1 = dsr_1.converters.createSingle(dataViewConverterContext, dsrParser)) && (dataReaderResult.dataView.single = single_1);
                        }), single_1 && (perfStats.single = singleConverterTime));
                    }
                    return dataReaderResult;
                }(new dsr_1.DataViewConverterContext(targets, descriptor, result, dataShapesParser, limitsWarning.dataShapes()), limitsWarning, perfStats, featureSwitches, dataShapesParser);
                limitsWarning.reset();
                dataShapesParser = limitsWarning.dataShapes(), dataShapesParser.next();
                dataShapesParser.limitsExceeded() && (result.warnings || (result.warnings = []), 
                limitsWarning = new dsr_1.DsrLimitsWarning(descriptor, dsr_1.toDsrV1Limit(dataShapesParser), dsr_1.toDsrV1Calc(dataShapesParser)), 
                result.warnings.push(limitsWarning), dsr_1.reader.V1.applyReductionMetadata(result.dataView, limitsWarning.limits)), 
                function(dataShapesParser, transformResult) {
                    var messages = dataShapesParser.messages();
                    if (messages) for (;messages.next(); ) dsr_1.KnownDsrMessages[messages.code()] && messages.severity() === dsr_1.getDsrMessageSeverityValue(0) && (transformResult.warnings || (transformResult.warnings = []), 
                    transformResult.warnings.push(messages.dsrMessage()));
                }(dataShapesParser, result), result.dataView && !_.isEmpty(clientSideFilters) && (data.ClientSideFilter.applyClientSideFilters(result.dataView, clientSideFilters), 
                result.disallowPersisting = !0);
            } else perfEntryId = "dsr1-read", performance && performance.mark && performance.mark(perfEntryId + "-start"), 
            perfStats.mode = "V1Old", result = dsr_1.reader.V1.read(targets, descriptor, dsr, perfStats, requestId, clientSideFilters, perfId);
            return result && (result.timestamp = timestamp, result.fromCache = fromCache, executionMetrics && !result.fromCache && (result.performanceActivities = dsr_1.parseExecutionEvents(executionMetrics.Events, performanceActivity && performanceActivity.getProperty("rootId")))), 
            performance && (performance.mark && performance.mark(perfEntryId + "-end"), performance.measure && performance.measure(perfEntryId, perfEntryId + "-start", perfEntryId + "-end")), 
            perfStats.total = jsCommon.performance.now() - totalTimeStart, telemetryService && telemetryService.logEvent(powerbi.telemetry.DataDsrToDataView, {
                jsonparse: perfStats.jsonParse,
                categorical: perfStats.categorical,
                table: perfStats.table,
                tree: perfStats.tree,
                matrix: perfStats.matrix,
                single: perfStats.single,
                script: perfStats.script,
                total: perfStats.total,
                mode: perfStats.mode,
                targetDataView: targets,
                dsrLength: perfStats.dsrLength,
                id: perfId
            }), result;
        }
        dsr_1 = data.dsr || (data.dsr = {}), JsonExtensions = jsCommon.JsonExtensions, logTime = jsCommon.PerfTimer.logTime, 
        dsr_1.isDsrV2 = isDsrV2, dsr_1.getDsrV2MinorVersion = function(dsr) {
            return dsr.MinorVersion;
        }, dsr_1.read = function(targets, arg, queryContext, telemetryService, perfId, dataReaderResult) {
            if (!arg) return null;
            var parseQueryResultActivity;
            arg.data && (arg = arg.data), dataReaderResult && dataReaderResult.isRunning() && (parseQueryResultActivity = dataReaderResult.createChildActivity({
                name: "Parse Query Result"
            }));
            var perfStats = {}, dataObj = arg, totalTimeStart = jsCommon.performance.now();
            return _.isString(arg) && (perfStats.dsrLength = arg.length, perfStats.jsonParse = logTime(function() {
                dataObj = JSON.parse(arg);
            }), parseQueryResultActivity && parseQueryResultActivity.setProperty("metrics", {
                jsonParse: perfStats.jsonParse
            })), dataReaderResult = readDsr(targets, dataObj.descriptor, dataObj.dsr, queryContext, dataObj.requestId, dataObj.clientSideFilters, perfId, perfStats, telemetryService, totalTimeStart, dataObj.timestamp, dataObj.fromCache, dataObj.metrics, queryContext.scopedAggregates, dataReaderResult), 
            null == queryContext || !queryContext.queryContext || (queryContext = dataObj.queryContext) && (dataReaderResult.queryContext = queryContext), 
            parseQueryResultActivity && parseQueryResultActivity.resolve(), dataReaderResult;
        }, dsr_1.readDsr = readDsr, dsr_1.containsRestartToken = function(dataObj) {
            return !!dataObj && (dataObj = dataObj.data, _.isString(dataObj) && (dataObj = JsonExtensions.tryParseJSON(dataObj)), 
            !_.isEmpty(dataObj) && function(dataShapes) {
                if (dataShapes) if (isDsrV2(dataShapes)) {
                    for (var dataShapesParser = dsr_1.reader.V2.createDsrParser(dataShapes, void 0).dataShapes(); dataShapesParser.next(); ) if (dataShapesParser.hasRestartTokens()) return !0;
                } else for (var dataShapes = dataShapes.DataShapes, _i = 0, dataShapes_1 = dataShapes; _i < dataShapes_1.length; _i++) {
                    var dataShape = dataShapes_1[_i];
                    if (!_.isEmpty(dataShape.RestartTokens)) return !0;
                }
                return !1;
            }(dataObj.dsr));
        };
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var EnumExtensions = jsCommon.EnumExtensions, DataViewConverterContext = function() {
                function DataViewConverterContext(targets, expressions, dsrParserContext, scopedAggregatesEnabled, dataShapeParser) {
                    null != expressions.Select || expressions.ScriptVisualBinding, this.targets = targets, 
                    this.descriptor = expressions, this.selects = expressions.Select, this.selectIndexToColumn = {}, 
                    this.aggregateCalcMetadata = {}, this._calcInfo = {}, this.calcIdToColumnIndices = {}, 
                    this.dataMemberIdToIdentityBuilder = {};
                    expressions = expressions.Expressions;
                    this._primaryAxisGroupings = expressions && expressions.Primary && expressions.Primary.Groupings, 
                    this._secondaryAxisGroupings = expressions && expressions.Secondary && expressions.Secondary.Groupings, 
                    this.measureSelectIndices = [], this.dataMemberIdToMetadata = dsrParserContext.dataMemberIdToMetadata, 
                    this.maxPrimaryDepth = dsrParserContext.maxPrimaryDepth, this.maxSecondaryDepth = dsrParserContext.maxSecondaryDepth, 
                    this.primarySynchronizedGroups = dsrParserContext.primarySynchronizedGroups, this.scopedAggregatesEnabled = scopedAggregatesEnabled, 
                    this.dataShapeParser = dataShapeParser;
                }
                return Object.defineProperty(DataViewConverterContext.prototype, "primaryAxisGroupings", {
                    get: function() {
                        return this._primaryAxisGroupings;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(DataViewConverterContext.prototype, "secondaryAxisGroupings", {
                    get: function() {
                        return this._secondaryAxisGroupings;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(DataViewConverterContext.prototype, "calcInfo", {
                    get: function() {
                        return this._calcInfo;
                    },
                    enumerable: !1,
                    configurable: !0
                }), DataViewConverterContext.prototype.createContextForPrimarySynchronizedGroup = function(synchronizedGroup, context) {
                    var _this = this, context = new DataViewConverterContext(this.targets, this.descriptor, synchronizedGroup.context, this.scopedAggregatesEnabled, context);
                    return context._primaryAxisGroupings = _.map(synchronizedGroup.groupings, function(level) {
                        return _this.primaryAxisGroupings[level].SynchronizedGroup;
                    }), context._secondaryAxisGroupings = void 0, context._calcInfo = this._calcInfo, 
                    context;
                }, DataViewConverterContext.prototype.includes = function(kind) {
                    return EnumExtensions.hasFlag(this.targets, kind);
                }, DataViewConverterContext.prototype.createDataViewMetadataColumns = function() {
                    var selects = this.selects;
                    if (!_.isEmpty(selects)) {
                        var columns = [], selectsLen = selects.length;
                        this.selectIndexToColumnIndex = new Array(selectsLen);
                        for (var calcKey, i = 0, len = selectsLen; i < len; i++) {
                            var select = selects[i];
                            if (select) {
                                select.Kind, dsr.SelectKind.None;
                                var selectValue = this.createColumns(columns, i), column = selectValue.column, columnIdx = selectValue.columnIdx, dynamicFormatColumn = selectValue.dynamicFormatColumn;
                                this.selectIndexToColumn[i] = column, this.selectIndexToColumnIndex[i] = columnIdx, 
                                select.Kind === dsr.SelectKind.Measure && this.measureSelectIndices.push(i);
                                selectValue = select.Aggregates;
                                if (selectValue) for (var _i = 0, aggregates_1 = selectValue; _i < aggregates_1.length; _i++) {
                                    var aggregate = aggregates_1[_i], aggregateKind = this.getAggregateKind(aggregate.Aggregate);
                                    this.createAggregateCalcMetadata(aggregate.Ids, aggregateKind, column, i, aggregate.Aggregate);
                                }
                                selectValue = select.Value;
                                selectValue && (this.calcIdToColumnIndices[selectValue] || (this.calcIdToColumnIndices[selectValue] = []), 
                                this.calcIdToColumnIndices[selectValue].push(columnIdx), null != select.Depth && null != select.SecondaryDepth || (this.aggregateCalcMetadata[selectValue] = {
                                    source: column,
                                    aggregateKind: 4,
                                    selectIdx: i
                                })), select.Kind === dsr.SelectKind.Measure && (select.Subtotal && this.createAggregateCalcMetadata(select.Subtotal, 1, column, i), 
                                select.SubtotalDynamicFormat && this.createAggregateCalcMetadata(_.map(select.SubtotalDynamicFormat, function(subtotal) {
                                    return subtotal && subtotal.Format;
                                }), 1, dynamicFormatColumn, i), select.Count && (_.size(select.Count), this.createAggregateCalcMetadata(select.Count, 5, column, i)), 
                                select.Max && this.createAggregateCalcMetadata(select.Max, 2, column, i), select.Min && this.createAggregateCalcMetadata(select.Min, 3, column, i));
                            }
                        }
                        for (calcKey in this.parseAxisGroupings(this.primaryAxisGroupings), this.parseAxisGroupings(this.secondaryAxisGroupings), 
                        this.calcIdToColumnIndices) 1 < _.size(this.calcIdToColumnIndices[calcKey]) && (this.calcInfo[calcKey].hasDuplicateColumnIndices = !0, 
                        this.calcInfo[calcKey].isGroupKeyButNotSelect);
                        return this.scopedAggregatesEnabled && (this.createScopedAggregateMetadata(), this.fillDataShapeScopeAggregateValues()), 
                        columns;
                    }
                }, DataViewConverterContext.prototype.parseAxisGroupings = function(axisGroupings) {
                    if (axisGroupings) for (var _i = 0, axisGroupings_1 = axisGroupings; _i < axisGroupings_1.length; _i++) {
                        var grouping = axisGroupings_1[_i], syncIndex = grouping.SynchronizedGroup;
                        syncIndex && (this.parseGroupingKeys(syncIndex.Keys, !0), (syncIndex = grouping.SynchronizationIndex) && (this.calcInfo[syncIndex] = {
                            kind: dsr.SelectKind.Measure,
                            calcKind: 10
                        })), this.parseGroupingKeys(grouping.Keys, !1);
                    }
                }, DataViewConverterContext.prototype.parseGroupingKeys = function(keys, forSynchronization) {
                    for (var _b, calcInfo = this.calcInfo, selects = this.selects, _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
                        var key = keys_2[_i], select = selects[key.Select];
                        null != select ? forSynchronization ? (null === (_b = select.Synchronized) || void 0 === _b || _b.Value, 
                        calcInfo[null === (_b = select.Synchronized) || void 0 === _b ? void 0 : _b.Value].forIdentity = !0) : calcInfo[select.Value].forIdentity = !0 : key.Calc && (calcInfo[key.Calc] = {
                            kind: dsr.SelectKind.Group,
                            forIdentity: !0,
                            isGroupKeyButNotSelect: !0
                        });
                    }
                }, DataViewConverterContext.prototype.createAggregateCalcMetadata = function(ids, kind, column, selectIdx, dataShapesBindingAggregateContainer) {
                    for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                        var metadata = ids_1[_i], metadata = this.aggregateCalcMetadata[metadata] = {
                            source: column,
                            aggregateKind: kind,
                            selectIdx: selectIdx
                        };
                        dataShapesBindingAggregateContainer && (metadata.aggregate = dataShapesBindingAggregateContainer);
                    }
                }, DataViewConverterContext.prototype.getAggregateKind = function(aggregateContainer) {
                    return aggregateContainer.Average ? 6 : aggregateContainer.Max ? 2 : aggregateContainer.Min ? 3 : aggregateContainer.Median ? 8 : aggregateContainer.Percentile ? 7 : void 0;
                }, DataViewConverterContext.prototype.createColumns = function(columns, selectIndex) {
                    var columnIndex = columns.length, columnMetadata = this.createMetadataColumn(selectIndex);
                    columns.push(columnMetadata);
                    var highlightDynamicFormatString = this.selects[selectIndex], selectKind = highlightDynamicFormatString.Kind, calcInfo = this.calcInfo;
                    calcInfo[highlightDynamicFormatString.Value] = {
                        kind: selectKind,
                        columnIndex: columnIndex,
                        selectIdx: selectIndex,
                        calcKind: 1
                    };
                    var highlightSubtotal = highlightDynamicFormatString.Synchronized;
                    if (highlightSubtotal && (dsr.SelectKind.Group, highlightSubtotal.Value, highlightSubtotal.GroupKeys, 
                    calcInfo[highlightSubtotal.Value] = {
                        kind: selectKind,
                        columnIndex: columnIndex,
                        selectIdx: selectIndex,
                        calcKind: 1
                    }, calcInfo[highlightDynamicFormatString.Value].isSynchronized = !0), highlightDynamicFormatString.Subtotal) {
                        dsr.SelectKind.Measure;
                        for (var _i = 0, _a = highlightDynamicFormatString.Subtotal; _i < _a.length; _i++) calcInfo[subtotal = _a[_i]] = {
                            columnIndex: columnIndex,
                            kind: selectKind,
                            selectIdx: selectIndex,
                            calcKind: 2
                        };
                    }
                    if (highlightDynamicFormatString.Highlight) {
                        dsr.SelectKind.Measure;
                        highlightSubtotal = highlightDynamicFormatString.Highlight.Value;
                        highlightSubtotal && (calcInfo[highlightSubtotal] = {
                            columnIndex: columnIndex,
                            kind: selectKind,
                            selectIdx: selectIndex,
                            calcKind: 3
                        });
                        highlightSubtotal = highlightDynamicFormatString.Highlight.Subtotal;
                        if (highlightSubtotal) for (var _b = 0, highlightSubtotal_1 = highlightSubtotal; _b < highlightSubtotal_1.length; _b++) calcInfo[subtotal = highlightSubtotal_1[_b]] = {
                            columnIndex: columnIndex,
                            kind: selectKind,
                            selectIdx: selectIndex,
                            calcKind: 9
                        };
                    }
                    if (this.scopedAggregatesEnabled) {
                        if (!_.isEmpty(highlightDynamicFormatString.Aggregates)) for (var _c = 0, _d = highlightDynamicFormatString.Aggregates; _c < _d.length; _c++) if ((aggr = _d[_c]).Aggregate.Scope) for (var _e = 0, _f = aggr.Ids; _e < _f.length; _e++) calcInfo[_f[_e]] = {
                            columnIndex: columnIndex,
                            kind: selectKind,
                            selectIdx: selectIndex,
                            calcKind: 7
                        };
                        var dynamicFormatColumnMetadata = highlightDynamicFormatString.Highlight;
                        if (dynamicFormatColumnMetadata && !_.isEmpty(dynamicFormatColumnMetadata.Aggregates)) for (var aggr, _g = 0, highlightAggr_1 = dynamicFormatColumnMetadata.Aggregates; _g < highlightAggr_1.length; _g++) if ((aggr = highlightAggr_1[_g]).Aggregate.Scope) for (var _h = 0, _j = aggr.Ids; _h < _j.length; _h++) calcInfo[_j[_h]] = {
                            columnIndex: columnIndex,
                            kind: selectKind,
                            selectIdx: selectIndex,
                            calcKind: 8
                        };
                    }
                    dynamicFormatColumnMetadata = this.tryCreateDynamicFormatColumnMetadata(selectIndex, columnMetadata);
                    if (dynamicFormatColumnMetadata) {
                        dsr.SelectKind.Measure;
                        var formatColumnIndex = columnIndex + 1;
                        if (columns.push(dynamicFormatColumnMetadata), calcInfo[highlightDynamicFormatString.DynamicFormat.Format] = {
                            columnIndex: formatColumnIndex,
                            kind: dsr.SelectKind.Measure,
                            selectIdx: selectIndex,
                            calcKind: 4
                        }, highlightDynamicFormatString.SubtotalDynamicFormat) for (var _k = 0, _l = highlightDynamicFormatString.SubtotalDynamicFormat; _k < _l.length; _k++) {
                            var subtotal, format = (subtotal = _l[_k]) && subtotal.Format;
                            format && (calcInfo[format] = {
                                columnIndex: formatColumnIndex,
                                kind: dsr.SelectKind.Measure,
                                selectIdx: selectIndex,
                                calcKind: 5
                            });
                        }
                        highlightDynamicFormatString = highlightDynamicFormatString.Highlight && highlightDynamicFormatString.Highlight.DynamicFormat && highlightDynamicFormatString.Highlight.DynamicFormat.Format;
                        highlightDynamicFormatString && (calcInfo[highlightDynamicFormatString] = {
                            columnIndex: formatColumnIndex,
                            kind: dsr.SelectKind.Measure,
                            selectIdx: selectIndex,
                            calcKind: 6
                        });
                    }
                    return {
                        column: columnMetadata,
                        columnIdx: columnIndex,
                        dynamicFormatColumn: dynamicFormatColumnMetadata
                    };
                }, DataViewConverterContext.prototype.createMetadataColumn = function(selectIndex) {
                    var select = this.selects[selectIndex], column = {
                        displayName: "",
                        index: selectIndex
                    };
                    select.Format && (column.format = select.Format), column.type = dsr.DataShapeUtility.describeDataType(select.Type, select.DataCategory), 
                    select.Kind === dsr.SelectKind.Measure && (column.isMeasure = !0);
                    var groupKeys = select.GroupKeys;
                    if (groupKeys) for (var identityExprs = column.identityExprs = new Array(groupKeys.length), i = 0; i < groupKeys.length; i++) identityExprs[i] = dsr.convertKey(groupKeys[i], selectIndex, this.selects);
                    return column;
                }, DataViewConverterContext.prototype.tryCreateDynamicFormatColumnMetadata = function(column, columnMetadata) {
                    column = this.selects[column];
                    if (column.DynamicFormat && column.DynamicFormat.Format) {
                        column = {
                            displayName: "",
                            isMeasure: !0
                        };
                        return columnMetadata.formatSource = {
                            formatString: column
                        }, column;
                    }
                }, DataViewConverterContext.prototype.createScopedAggregateMetadata = function() {
                    for (var selects = this.selects, selectsLen = selects.length, selectIndexToColumn = this.selectIndexToColumn, i = 0, len = selectsLen; i < len; i++) {
                        var highlights = selects[i];
                        if (highlights) {
                            var aggregates = highlights.Aggregates, column = selectIndexToColumn[i];
                            if (!_.isEmpty(aggregates)) for (var _i = 0, aggregates_2 = aggregates; _i < aggregates_2.length; _i++) {
                                var aggregate = aggregates_2[_i];
                                this.createScopedAggregateCalcMetadata(aggregate, column);
                            }
                            highlights = highlights.Highlight;
                            if (highlights && !_.isEmpty(highlights.Aggregates)) for (var _a = 0, highlightAggr_2 = highlights.Aggregates; _a < highlightAggr_2.length; _a++) {
                                aggregate = highlightAggr_2[_a];
                                this.createScopedAggregateCalcMetadata(aggregate, column);
                            }
                        }
                    }
                }, DataViewConverterContext.prototype.createScopedAggregateCalcMetadata = function(ids, sourceColumn) {
                    var dataShapesBindingAggregateContainer = ids.Aggregate, scope = dataShapesBindingAggregateContainer.Scope;
                    if (scope) {
                        var selectIndexToColumn = this.selectIndexToColumn, primaryDepth = scope.PrimaryDepth;
                        scope.SecondaryDepth;
                        for (var inputScope = new Array(primaryDepth), primaryAxisGroupings = this.primaryAxisGroupings, aggregateScopeIndex = 0, i = 0; i < primaryDepth; i++) for (var _i = 0, groupingKeys_1 = primaryAxisGroupings[i].Keys; _i < groupingKeys_1.length; _i++) {
                            var inputScopeColumn = groupingKeys_1[_i].Select, inputScopeColumn = selectIndexToColumn[inputScopeColumn];
                            inputScope[aggregateScopeIndex++] = inputScopeColumn;
                        }
                        for (var scopeAggregateMetadata = {
                            column: sourceColumn,
                            inputScope: inputScope,
                            respectInstanceFilters: dataShapesBindingAggregateContainer.RespectInstanceFilters
                        }, ids = ids.Ids, calcInfo = this.calcInfo, _a = 0, ids_2 = ids; _a < ids_2.length; _a++) {
                            var aggregateCalcInfo = calcInfo[ids_2[_a]];
                            aggregateCalcInfo.scopedAggregateCalcMetadata = {
                                metadata: scopeAggregateMetadata,
                                aggregateKind: this.getAggregateKind(dataShapesBindingAggregateContainer)
                            };
                        }
                    }
                }, DataViewConverterContext.prototype.fillDataShapeScopeAggregateValues = function() {
                    var dataShapeParser = this.dataShapeParser;
                    if (dataShapeParser) {
                        var calcInfoDictionary = this.calcInfo;
                        dataShapeParser.reset();
                        for (dataShapeParser.next(); dataShapeParser.nextCalc(); ) !function() {
                            var calcInfo = calcInfoDictionary[dataShapeParser.calcId()];
                            if (!calcInfo || !calcInfo.scopedAggregateCalcMetadata) return;
                            var scopeAggregateCalcMetadata = calcInfo.scopedAggregateCalcMetadata, matchedAggr = scopeAggregateCalcMetadata.metadata, column = matchedAggr.column, inputScope = matchedAggr.inputScope, respectInstanceFilters = matchedAggr.respectInstanceFilters, scopeAggregates = {
                                inputScope: inputScope,
                                respectInstanceFilters: respectInstanceFilters,
                                values: {},
                                highlight: {}
                            };
                            column.scopedAggregates ? (matchedAggr = _.find(column.scopedAggregates, function(aggregate) {
                                return DataViewConverterContext.sameScopedAggregatesInputScope(aggregate.inputScope, inputScope) && aggregate.respectInstanceFilters === respectInstanceFilters;
                            })) ? scopeAggregates = matchedAggr : column.scopedAggregates.push(scopeAggregates) : column.scopedAggregates = [ scopeAggregates ];
                            var aggregateValue = void 0;
                            switch (calcInfo.calcKind) {
                              case 7:
                                aggregateValue = scopeAggregates.values;
                                break;

                              case 8:
                                aggregateValue = scopeAggregates.highlight;
                            }
                            var calcValue = dataShapeParser.calcValue();
                            switch (scopeAggregateCalcMetadata.aggregateKind) {
                              case 3:
                                aggregateValue.min = calcValue;
                                break;

                              case 2:
                                aggregateValue.max = calcValue;
                                break;

                              case 6:
                                aggregateValue.avg = calcValue;
                            }
                        }();
                    }
                }, DataViewConverterContext.sameScopedAggregatesInputScope = function(inputScope1, inputScope2) {
                    if (inputScope1 === inputScope2) return !0;
                    if (inputScope1.length !== inputScope2.length) return !1;
                    for (var i = 0; i < inputScope1.length; i++) if (inputScope1[i] !== inputScope2[i]) return !1;
                    return !0;
                }, DataViewConverterContext;
            }();
            dsr.DataViewConverterContext = DataViewConverterContext;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var Prototype = powerbi.Prototype;
        !function(DataViewTelemetry) {
            function wrapProperty(originalDataView, telemetryDataView, propertyName, telemetryService, eventFactory, targetDataView, visualType) {
                var newProperty = {
                    enumerable: !0,
                    configurable: !0,
                    get: function() {
                        return telemetryService.logEvent(eventFactory, {
                            targetDataView: targetDataView,
                            visualType: visualType
                        }), delete telemetryDataView[propertyName], originalDataView[propertyName];
                    },
                    set: function(value) {
                        originalDataView[propertyName] = value;
                    }
                };
                Object.defineProperty(telemetryDataView, propertyName, newProperty);
            }
            DataViewTelemetry.wrapKindProperties = function(originalDataView, telemetryService, perfId) {
                var telemetryDataView = Prototype.inherit(originalDataView);
                return wrapProperty(originalDataView, telemetryDataView, "tree", telemetryService, powerbi.telemetry.DataDataViewKindAccess, 16, perfId), 
                wrapProperty(originalDataView, telemetryDataView, "single", telemetryService, powerbi.telemetry.DataSampledDataViewKindAccess, 4, perfId), 
                telemetryDataView;
            };
        }(data.DataViewTelemetry || (data.DataViewTelemetry = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var ResolvedValueDictionary = function() {
                function ResolvedValueDictionary(values) {
                    this.values = values, this.parsedValues = new Array(values.length), this.parsedValueExprs = new Array(values.length);
                }
                return ResolvedValueDictionary.prototype.getCalcValue = function(index, type) {
                    if (!(index >= this.parsedValues.length)) {
                        var parsedValue = this.parsedValues[index];
                        return void 0 === parsedValue && (parsedValue = data.PrimitiveValueEncoding.parseOptimizedValue(this.values[index], type), 
                        this.parsedValues[index] = parsedValue), parsedValue;
                    }
                }, ResolvedValueDictionary.prototype.getCalcValueExpr = function(calcValue, index, type) {
                    if (!(index >= this.parsedValues.length)) {
                        var parsedValueExpr = this.parsedValueExprs[index];
                        return void 0 === parsedValueExpr && (parsedValueExpr = data.PrimitiveValueEncoding.parseOptimizedValueToSQExpr(calcValue, this.values[index], type), 
                        this.parsedValueExprs[index] = parsedValueExpr), parsedValueExpr;
                    }
                }, ResolvedValueDictionary;
            }(), ValueDictionaryHandler = function() {
                function ValueDictionaryHandler(valueDictionaries) {
                    if (valueDictionaries) for (var key in this.resolvedValueDictionaries = {}, valueDictionaries) this.resolvedValueDictionaries[key] = new ResolvedValueDictionary(valueDictionaries[key]);
                }
                return ValueDictionaryHandler.prototype.getCalcValue = function(dsrValue, dictionary, type) {
                    if (dictionary && "number" == typeof dsrValue) {
                        this.resolvedValueDictionaries;
                        dictionary = this.resolvedValueDictionaries[dictionary];
                        return dictionary.getCalcValue(dsrValue, type);
                    }
                }, ValueDictionaryHandler.prototype.getCalcValueExpr = function(calcValue, dsrValue, dictionary, type) {
                    if (dictionary && "number" == typeof dsrValue) {
                        this.resolvedValueDictionaries;
                        dictionary = this.resolvedValueDictionaries[dictionary];
                        return dictionary.getCalcValueExpr(calcValue, dsrValue, type);
                    }
                }, ValueDictionaryHandler;
            }();
            function buildDataMemberMetadata(dataMemberIdToMetadata, axisGrouping, depth, identityFields, subtotalMemberId, forSynchronization) {
                var idCache = identityFields[depth] = [], identityFields = function(keys, selectBindings) {
                    for (var len = keys.length, fields = new Array(len), i = 0; i < len; i++) fields[i] = convertKey(keys[i], keys[i].Select, selectBindings);
                    return fields;
                }(axisGrouping.Keys, subtotalMemberId), subtotalMemberId = axisGrouping.Member;
                subtotalMemberId && (idCache.push(subtotalMemberId), metadata = dataMemberIdToMetadata[subtotalMemberId] = {
                    identityFields: identityFields,
                    axisGrouping: axisGrouping,
                    kind: 1,
                    depth: depth + 1
                }, forSynchronization ? metadata.forSynchronization = !0 : axisGrouping.SynchronizedGroup && (metadata.isSynchronized = !0), 
                axisGrouping.RestartIdentities && (metadata.restartValuesBuilder = new dsr.RestartValuesBuilder(axisGrouping.RestartIdentities)));
                var metadata, subtotalMemberId = axisGrouping.SubtotalMember;
                subtotalMemberId && (idCache.push(subtotalMemberId), metadata = {
                    identityFields: identityFields,
                    kind: 2,
                    depth: depth
                }, forSynchronization ? metadata.forSynchronization = !0 : axisGrouping.SynchronizedGroup && (metadata.isSynchronized = !0), 
                dataMemberIdToMetadata[subtotalMemberId] = metadata);
            }
            function convertKey(source, selectName, selectBindings) {
                source = source.Source;
                if (source) return data.SQExprBuilder.columnRef(data.SQExprBuilder.entity(dsr.schemaName(source), source.Entity || source.EntitySet), source.Property);
                0 <= selectName && _.size(selectBindings);
                selectName = selectBindings[selectName].Name;
                return selectName ? data.SQExprBuilder.selectRef(selectName) : void 0;
            }
            dsr.ValueDictionaryHandler = ValueDictionaryHandler, dsr.createDsrParserContext = function(descriptor) {
                var selects = descriptor.Select, expressions = descriptor.Expressions, primaryAxis = expressions && expressions.Primary, primaryAxisGroupings = primaryAxis && primaryAxis.Groupings, primaryAxisSynchronization = primaryAxis && primaryAxis.Synchronization, secondaryAxisGroupings = expressions && expressions.Secondary && expressions.Secondary.Groupings, dataMemberIdToMetadata = {}, primaryDataMemberIdCache = primaryAxisGroupings && [], secondaryDataMemberIdCache = secondaryAxisGroupings && [];
                if (primaryAxisGroupings) for (var i = 0, len = primaryAxisGroupings.length; i < len; i++) buildDataMemberMetadata(dataMemberIdToMetadata, primaryAxisGroupings[i], i, primaryDataMemberIdCache, selects);
                if (secondaryAxisGroupings) for (i = 0, len = secondaryAxisGroupings.length; i < len; i++) secondaryDataMemberIdCache[i] = [], 
                buildDataMemberMetadata(dataMemberIdToMetadata, secondaryAxisGroupings[i], i, secondaryDataMemberIdCache, selects);
                var intersectionMeasureCount = 0, intersectionMeasureToSelectIndex = [];
                if (selects && secondaryAxisGroupings) for (i = 0; i < selects.length; i++) {
                    var select = selects[i];
                    select && select.Kind === dsr.SelectKind.Measure && null == select.Depth && null == select.SecondaryDepth && (intersectionMeasureToSelectIndex[intersectionMeasureCount++] = i);
                }
                var dsrParserContext = {
                    intersectionMeasureToSelectIndex: intersectionMeasureToSelectIndex,
                    secondaryLeafDataMemberId: secondaryAxisGroupings && [],
                    dataMemberIdToMetadata: dataMemberIdToMetadata,
                    selects: selects,
                    maxPrimaryDepth: _.size(primaryAxisGroupings),
                    maxSecondaryDepth: _.size(secondaryAxisGroupings),
                    memberInstanceCalcMetadataCache: {},
                    calcIdToCalcMetadata: {},
                    intersectionCalcMetadataCache: {},
                    primaryDataMemberIdCache: primaryDataMemberIdCache,
                    secondaryDataMemberIdCache: secondaryDataMemberIdCache,
                    instancesCalcCache: {},
                    lastIntersectionCalcCache: {},
                    locked: !1
                };
                if (primaryAxisSynchronization) {
                    var synchronizedGroupsCount = primaryAxisSynchronization.length;
                    dsrParserContext.primarySynchronizedGroups = new Array(synchronizedGroupsCount);
                    for (i = 0; i < synchronizedGroupsCount; i++) {
                        var synchronizedGroup = primaryAxisSynchronization[i], leafGroupingIndex = _.last(synchronizedGroup.Groupings);
                        dsrParserContext.primarySynchronizedGroups[i] = {
                            groupings: synchronizedGroup.Groupings,
                            dataShapeId: synchronizedGroup.DataShape,
                            synchronizationIndexCalcId: primaryAxisGroupings[leafGroupingIndex].SynchronizationIndex,
                            context: function(descriptor, synchronizedGroup) {
                                descriptor.Expressions.Primary;
                                for (var primaryAxisGroupings = descriptor.Expressions.Primary.Groupings, selects = descriptor.Select, dataMemberIdToMetadata = {}, primaryDataMemberIdCache = [], groupings = synchronizedGroup.Groupings, i = 0; i < groupings.length; i++) {
                                    var groupingLevel = groupings[i];
                                    buildDataMemberMetadata(dataMemberIdToMetadata, primaryAxisGroupings[groupingLevel].SynchronizedGroup, i, primaryDataMemberIdCache, selects, !0);
                                }
                                return {
                                    dataMemberIdToMetadata: dataMemberIdToMetadata,
                                    selects: selects,
                                    maxPrimaryDepth: _.size(groupings),
                                    primaryDataMemberIdCache: primaryDataMemberIdCache,
                                    memberInstanceCalcMetadataCache: {},
                                    calcIdToCalcMetadata: {},
                                    locked: !1,
                                    intersectionCalcMetadataCache: {},
                                    maxSecondaryDepth: 0,
                                    secondaryDataMemberIdCache: void 0,
                                    instancesCalcCache: {},
                                    lastIntersectionCalcCache: {},
                                    intersectionMeasureToSelectIndex: [],
                                    secondaryLeafDataMemberId: void 0
                                };
                            }(descriptor, synchronizedGroup)
                        };
                    }
                }
                return dsrParserContext;
            }, dsr.convertKey = convertKey;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var IdentityBuilder = function() {
                function IdentityBuilder(context, dataMemberId) {
                    this.context = context, this.calcIdToGroupingKeysIndex = {}, this.initialize(dataMemberId);
                }
                return IdentityBuilder.prototype.initialize = function(dataMemberId) {
                    var _a, context = this.context, selects = context.selects, dataMemberMetaData = context.dataMemberIdToMetadata[dataMemberId];
                    this.identityFields = dataMemberMetaData.identityFields, this.identityFieldsCount = this.identityFields.length;
                    var keys = dataMemberMetaData.axisGrouping.Keys;
                    keys.length, this.identityFieldsCount;
                    for (var i = 0; i < this.identityFieldsCount; i++) {
                        var key = keys[i], calcId = void 0;
                        key.Calc ? calcId = key.Calc : null != key.Select && 0 <= key.Select && (calcId = dataMemberMetaData.forSynchronization ? null === (_a = selects[key.Select].Synchronized) || void 0 === _a ? void 0 : _a.Value : selects[key.Select].Value), 
                        this.calcIdToGroupingKeysIndex[calcId] = i;
                    }
                }, IdentityBuilder.prototype.reset = function() {
                    this.identityParts = new Array(this.identityFieldsCount);
                }, IdentityBuilder.prototype.addExpr = function(identityKey, calcExpr) {
                    var identityIndex = this.calcIdToGroupingKeysIndex[identityKey], identityKey = this.identityFields[identityIndex];
                    identityKey && (this.identityParts[identityIndex] = data.SQExprBuilder.equal(identityKey, calcExpr));
                }, IdentityBuilder.prototype.getIdentity = function() {
                    for (var identityBuffer, identityParts = this.identityParts, identityFieldsCount = this.identityFieldsCount, i = 0; i < identityFieldsCount; i++) identityBuffer = data.SQExprBuilder.and(identityBuffer, identityParts[i]);
                    var identity = data.createDataViewScopeIdentity(identityBuffer);
                    return identity;
                }, IdentityBuilder.prototype.getIdentityFields = function() {
                    return this.identityFields;
                }, IdentityBuilder;
            }();
            dsr.IdentityBuilder = IdentityBuilder;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var Aggregator = function() {
                function Aggregator(context) {
                    this.context = context, this.measureValueAggregatorsBySelectIdx = [];
                }
                return Aggregator.prototype.read = function(dataShapesParser, addLocalAggregators) {
                    void 0 === addLocalAggregators && (addLocalAggregators = !0);
                    for (var context = this.context, selects = context.selects, minAggregateFound = new Array(selects.length), maxAggregateFound = new Array(selects.length); dataShapesParser.nextCalc(); ) {
                        var aggregateCalcMetadata = context.aggregateCalcMetadata[dataShapesParser.calcId()];
                        aggregateCalcMetadata && aggregateCalcMetadata.aggregateKind && (dsr.DataShapeUtility.fillMetadataColumnAggregate(dataShapesParser.calcValue(), aggregateCalcMetadata, !1), 
                        3 === aggregateCalcMetadata.aggregateKind && (minAggregateFound[aggregateCalcMetadata.selectIdx] = !0), 
                        2 === aggregateCalcMetadata.aggregateKind && (maxAggregateFound[aggregateCalcMetadata.selectIdx] = !0));
                    }
                    addLocalAggregators && this.addLocalAggregators(minAggregateFound, maxAggregateFound);
                }, Aggregator.prototype.addLocalAggregators = function(minAggregateFound, maxAggregateFound) {
                    for (var measureValueAggregatorsBySelectIdx = this.measureValueAggregatorsBySelectIdx, measureSelectIndices = this.context.measureSelectIndices, measureSelectsLen = measureSelectIndices.length, hasLocalAggregator = !1, i = 0; i < measureSelectsLen; i++) {
                        var selectIdx = measureSelectIndices[i];
                        minAggregateFound[selectIdx] || (hasLocalAggregator = !0, measureValueAggregatorsBySelectIdx[selectIdx] || (measureValueAggregatorsBySelectIdx[selectIdx] = []), 
                        measureValueAggregatorsBySelectIdx[selectIdx].push(new dsr.MinValueAggregator())), 
                        maxAggregateFound[selectIdx] || (hasLocalAggregator = !0, measureValueAggregatorsBySelectIdx[selectIdx] || (measureValueAggregatorsBySelectIdx[selectIdx] = []), 
                        measureValueAggregatorsBySelectIdx[selectIdx].push(new dsr.MaxValueAggregator()));
                    }
                    this.hasLocalAggregators = hasLocalAggregator;
                }, Aggregator.prototype.update = function(calcValue, valueAggregators) {
                    if (this.hasLocalAggregators) {
                        valueAggregators = this.measureValueAggregatorsBySelectIdx[valueAggregators];
                        if (valueAggregators) for (var _i = 0, valueAggregators_1 = valueAggregators; _i < valueAggregators_1.length; _i++) valueAggregators_1[_i].update(calcValue);
                    }
                }, Aggregator.prototype.copyToColumns = function() {
                    for (var measureSelectIndices = this.context.measureSelectIndices, measureSelectsLen = measureSelectIndices.length, i = 0; i < measureSelectsLen; i++) {
                        var aggregators = measureSelectIndices[i], metadataColumn = this.context.selectIndexToColumn[aggregators], aggregators = this.measureValueAggregatorsBySelectIdx[aggregators];
                        if (aggregators && aggregators) for (var _i = 0, aggregators_1 = aggregators; _i < aggregators_1.length; _i++) {
                            var aggregator = aggregators_1[_i], aggregatedValue = aggregator.value();
                            void 0 !== aggregatedValue && (metadataColumn.aggregates || (metadataColumn.aggregates = {}), 
                            metadataColumn.aggregates[aggregator.name] = aggregatedValue);
                        }
                    }
                }, Aggregator;
            }();
            dsr.Aggregator = Aggregator;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(converters) {
                converters.categorical = function(context, dsrParser, metadata, _featureSwitches) {
                    if (DsrToCategoricalConverter.isCompatible(context)) return new DsrToCategoricalConverter().run(context, dsrParser, metadata);
                };
                var DsrToCategoricalConverter = function() {
                    function DsrToCategoricalConverter() {}
                    return DsrToCategoricalConverter.prototype.run = function(categories, lastMergeIndex, categorical) {
                        this.metadata = categorical, this.context = categories, this.dsrParser = lastMergeIndex, 
                        this.selectIndexToCategoryColumn = {}, this.selectIndexToPrimaryValueColumn = {}, 
                        this.selectIndexToDynamicFormatColumn = {}, this.intersectionValueColumnsMap = [], 
                        this.intersectionDynamicFormatColumnsMap = [], this.primaryMeasureCount = 0, this.intersectionMeasureCount = 0, 
                        this.seriesSelectIndex = -1, this.primaryMeasureSelectIndexMap = [], this.intersectionMeasuresSelectIndexMap = [], 
                        this.selectIndexToValueColumnsMap = [], lastMergeIndex.reset(), this.aggregator = new dsr.Aggregator(categories);
                        var dataShapesParser = this.dsrParser.dataShapes();
                        dataShapesParser.next();
                        var valueColumns, categorical = {};
                        return 0 === categories.maxPrimaryDepth ? (this.readSelectsAndCreateCategoryColumns(void 0, void 0), 
                        valueColumns = categorical.values = data.DataViewTransform.createValueColumns(), 
                        this.readMeasuresWithNoGrouping(dataShapesParser, valueColumns)) : (lastMergeIndex = [], 
                        categorical.categories = categories = [], this.readSelectsAndCreateCategoryColumns(categories, lastMergeIndex), 
                        valueColumns = void 0, (0 < this.intersectionMeasureCount || 0 < this.primaryMeasureCount || 0 <= this.seriesSelectIndex) && (categorical.values = valueColumns = data.DataViewTransform.createValueColumns()), 
                        this.readSecondaryAndCreateValueColumns(valueColumns), this.readData(dataShapesParser, valueColumns, lastMergeIndex, lastMergeIndex = {}), 
                        void 0 !== lastMergeIndex.value && (categorical.lastMergeIndex = lastMergeIndex.value)), 
                        categorical;
                    }, DsrToCategoricalConverter.isCompatible = function(context) {
                        return context.maxPrimaryDepth <= 1 && context.maxSecondaryDepth <= 1 && !(0 === context.maxPrimaryDepth && 0 < context.maxSecondaryDepth) && 0 < _.size(context.selects);
                    }, DsrToCategoricalConverter.prototype.readSelectsAndCreateCategoryColumns = function(categories, identities) {
                        var secondaryHierarchyDataMemberParser = this.context, selectIndexToColumn = secondaryHierarchyDataMemberParser.selectIndexToColumn, selects = secondaryHierarchyDataMemberParser.selects, selectsLength = selects.length, secondaryHierarchyDataMemberParser = this.dsrParser.dataShapes().secondaryHierarchy();
                        this.primaryMeasureSelectIndexMap = new Array(selects.length), this.intersectionMeasuresSelectIndexMap = new Array(selects.length);
                        for (var hasSeries = !!secondaryHierarchyDataMemberParser, i = 0; i < selectsLength; i++) {
                            var category, select = selects[i];
                            select && select.Value && (select.Kind === dsr.SelectKind.Group ? null == select.SecondaryDepth ? null != select.Depth && (category = {
                                source: selectIndexToColumn[i],
                                values: [],
                                identity: identities
                            }, categories.push(category), this.selectIndexToCategoryColumn[i] = category) : this.seriesSelectIndex = i : select.Kind === dsr.SelectKind.Measure && (hasSeries && null == select.Depth ? this.intersectionMeasuresSelectIndexMap[this.intersectionMeasureCount++] = i : this.primaryMeasureSelectIndexMap[this.primaryMeasureCount++] = i));
                        }
                    }, DsrToCategoricalConverter.prototype.readSecondaryAndCreateValueColumns = function(valueColumns) {
                        var secondaryHierarchyDataMemberParser = this.dsrParser.dataShapes().secondaryHierarchy();
                        !secondaryHierarchyDataMemberParser ? this.addPrimaryValueColumns(valueColumns, !0) : (this.addIntersectionValueColumns(valueColumns, secondaryHierarchyDataMemberParser), 
                        0 < this.primaryMeasureCount && this.addPrimaryValueColumns(valueColumns));
                    }, DsrToCategoricalConverter.prototype.addIntersectionValueColumns = function(valueColumns, secondaryHierarchyDataMemberParser) {
                        for (var valueColumnGroups = new Array(), context = this.context; secondaryHierarchyDataMemberParser.next(); ) {
                            var seriesIdentityFields = secondaryHierarchyDataMemberParser.id(), instancesParser = secondaryHierarchyDataMemberParser.instances();
                            if (2 !== context.dataMemberIdToMetadata[seriesIdentityFields].kind) {
                                var identityBuilder = context.dataMemberIdToIdentityBuilder[seriesIdentityFields];
                                identityBuilder || (identityBuilder = new dsr.IdentityBuilder(context, seriesIdentityFields), 
                                context.dataMemberIdToIdentityBuilder[seriesIdentityFields] = identityBuilder);
                                for (var seriesIdentityFields = identityBuilder.getIdentityFields(), secondaryMemberInstancesIndex = -1; instancesParser.next(); ) {
                                    secondaryMemberInstancesIndex++, identityBuilder.reset();
                                    for (var groupName = void 0, calcId = void 0; instancesParser.nextCalc(); ) {
                                        var calcId = instancesParser.calcId(), calcInfo = this.context.calcInfo[calcId];
                                        calcInfo.isGroupKeyButNotSelect || (groupName = instancesParser.calcValue()), calcInfo.forIdentity && identityBuilder.addExpr(calcId, instancesParser.calcValueAsExpr());
                                    }
                                    this.addIntersectionValueColumnsCore(valueColumns, valueColumnGroups, calcId, groupName, secondaryMemberInstancesIndex, identityBuilder.getIdentity()), 
                                    instancesParser.intersections(), instancesParser.members();
                                }
                                0 === valueColumns.length && 0 === valueColumnGroups.length && this.addIntersectionValueColumnsCore(valueColumns, valueColumnGroups, void 0, void 0, 0, void 0), 
                                valueColumns.grouped = function() {
                                    return valueColumnGroups;
                                }, valueColumns.source = this.context.selectIndexToColumn[this.seriesSelectIndex], 
                                valueColumns.identityFields = seriesIdentityFields;
                            } else for (;instancesParser.next(); );
                        }
                    }, DsrToCategoricalConverter.prototype.addIntersectionValueColumnsCore = function(valueColumns, valueColumnGroups, _calcId, calcValue, secondaryMemberInstancesIndex, identity) {
                        for (var _a, _b, _c, context = this.context, selects = context.selects, intersectionMeasureCount = this.intersectionMeasureCount, groupedValueColumns = new Array(intersectionMeasureCount), metadataColumns = this.metadata.columns, this_2 = this, i = 0; i < intersectionMeasureCount; i++) !function(highlightValue) {
                            var dynamicFormatColumnsMap = void 0, measureSelectIndex = this_2.intersectionMeasuresSelectIndexMap[highlightValue];
                            void 0 !== calcValue ? (dynamicFormatColumnsMap = context.createColumns(metadataColumns, measureSelectIndex).column).groupName = calcValue : dynamicFormatColumnsMap = _.find(metadataColumns, function(col) {
                                return col.index === measureSelectIndex;
                            });
                            var dynamicFormatColumn = this_2.createValueColumn(dynamicFormatColumnsMap, identity, measureSelectIndex, !!selects[measureSelectIndex].Highlight, !1);
                            valueColumns.push(dynamicFormatColumn), groupedValueColumns[highlightValue] = dynamicFormatColumn;
                            var highlightDynamicFormat = selects[measureSelectIndex], valueColumnsMap = this_2.intersectionValueColumnsMap[secondaryMemberInstancesIndex];
                            (valueColumnsMap = valueColumnsMap || (this_2.intersectionValueColumnsMap[secondaryMemberInstancesIndex] = {}))[highlightDynamicFormat.Value] = dynamicFormatColumn;
                            highlightValue = highlightDynamicFormat.Highlight && highlightDynamicFormat.Highlight.Value;
                            highlightValue && (valueColumnsMap[highlightValue] = dynamicFormatColumn), dynamicFormatColumnsMap.formatSource && dynamicFormatColumnsMap.formatSource.formatString && (null === (_a = highlightDynamicFormat.DynamicFormat) || void 0 === _a || _a.Format, 
                            dynamicFormatColumn = this_2.createValueColumn(dynamicFormatColumnsMap.formatSource.formatString, void 0, measureSelectIndex, !!selects[measureSelectIndex].Highlight, !0), 
                            (dynamicFormatColumnsMap = (dynamicFormatColumnsMap = this_2.intersectionDynamicFormatColumnsMap[secondaryMemberInstancesIndex]) || (this_2.intersectionDynamicFormatColumnsMap[secondaryMemberInstancesIndex] = {}))[highlightDynamicFormat.DynamicFormat.Format] = dynamicFormatColumn, 
                            valueColumns.push(dynamicFormatColumn), (highlightDynamicFormat = null === (_c = null === (_b = highlightDynamicFormat.Highlight) || void 0 === _b ? void 0 : _b.DynamicFormat) || void 0 === _c ? void 0 : _c.Format) && (dynamicFormatColumnsMap[highlightDynamicFormat] = dynamicFormatColumn));
                        }(i);
                        var valueColumnGroup = {
                            values: groupedValueColumns
                        };
                        void 0 !== calcValue && (valueColumnGroup.name = calcValue), void 0 !== identity && (valueColumnGroup.identity = identity), 
                        valueColumnGroups.push(valueColumnGroup);
                    }, DsrToCategoricalConverter.prototype.addPrimaryValueColumns = function(valueColumns, grouped) {
                        for (var valueColumnGroup_1, columns = new Array(), context = this.context, selects = context.selects, i = 0; i < this.primaryMeasureCount; i++) {
                            var primaryMeasureSelectIndex = this.primaryMeasureSelectIndexMap[i], dynamicFormatColumn = context.selectIndexToColumn[primaryMeasureSelectIndex], column = this.createValueColumn(dynamicFormatColumn, void 0, primaryMeasureSelectIndex, !!selects[primaryMeasureSelectIndex].Highlight, !1);
                            this.selectIndexToPrimaryValueColumn[primaryMeasureSelectIndex] = column, columns.push(column), 
                            valueColumns.push(column), dynamicFormatColumn.formatSource && dynamicFormatColumn.formatSource.formatString && (dynamicFormatColumn = this.createValueColumn(dynamicFormatColumn.formatSource.formatString, void 0, primaryMeasureSelectIndex, !!selects[primaryMeasureSelectIndex].Highlight, !0), 
                            this.selectIndexToDynamicFormatColumn[primaryMeasureSelectIndex] = dynamicFormatColumn, 
                            valueColumns.push(dynamicFormatColumn), columns.push(dynamicFormatColumn));
                        }
                        grouped && valueColumns && (valueColumnGroup_1 = [ {
                            values: columns
                        } ], valueColumns.grouped = function() {
                            return valueColumnGroup_1;
                        });
                    }, DsrToCategoricalConverter.prototype.createValueColumn = function(column, identity, selectIndex, hasHighlights, skipCache) {
                        column = {
                            source: column,
                            values: []
                        };
                        return hasHighlights && (column.highlights = []), identity && (column.identity = identity), 
                        skipCache || (this.selectIndexToValueColumnsMap[selectIndex] || (this.selectIndexToValueColumnsMap[selectIndex] = [])).push(column), 
                        column;
                    }, DsrToCategoricalConverter.prototype.readData = function(dataShapesParser, _valueColumns, identities, lastMergeIndex) {
                        var context = this.context, primaryHierarchyDataMemberParser = dataShapesParser.primaryHierarchy();
                        for (this.aggregator.read(dataShapesParser, 0 === this.intersectionMeasureCount); primaryHierarchyDataMemberParser.next(); ) {
                            var dataMemberId = primaryHierarchyDataMemberParser.id(), isGroupMember = context.dataMemberIdToMetadata[dataMemberId];
                            if (isGroupMember) {
                                var isGroupMember = 1 === isGroupMember.kind, identityBuilder = context.dataMemberIdToIdentityBuilder[dataMemberId];
                                !identityBuilder && isGroupMember && (identityBuilder = new dsr.IdentityBuilder(context, dataMemberId), 
                                context.dataMemberIdToIdentityBuilder[dataMemberId] = identityBuilder);
                                for (var instancesParser = primaryHierarchyDataMemberParser.instances(); instancesParser.next(); ) {
                                    for (identityBuilder && identityBuilder.reset(), 1 === instancesParser.restartFlagKind() && (lastMergeIndex.value = instancesParser.currentIndex()); instancesParser.nextCalc(); ) this.readPrimaryHierarchyCalc(instancesParser, identityBuilder);
                                    identityBuilder && identities.push(identityBuilder.getIdentity()), this.parseIntersections(instancesParser), 
                                    instancesParser.members();
                                }
                                if (isGroupMember) for (var identityFields = identityBuilder.getIdentityFields(), i = 0; i < context.selects.length; i++) {
                                    var categoryColumn = this.selectIndexToCategoryColumn[i];
                                    categoryColumn && (categoryColumn.identityFields = identityFields);
                                }
                            }
                        }
                        this.aggregator.copyToColumns(), this.copyAggregatesToValueColumns();
                    }, DsrToCategoricalConverter.prototype.copyAggregatesToValueColumns = function() {
                        for (var measureSelectIndices = this.context.measureSelectIndices, selectIndexToColumn = this.context.selectIndexToColumn, measureSelectsLen = measureSelectIndices.length, i = 0; i < measureSelectsLen; i++) {
                            var valueColumnsMap = measureSelectIndices[i], aggregates = selectIndexToColumn[valueColumnsMap].aggregates;
                            if (aggregates) {
                                var primaryValueColumn = this.selectIndexToPrimaryValueColumn[valueColumnsMap];
                                primaryValueColumn && dsr.DataShapeUtility.copyAggregates(aggregates, primaryValueColumn);
                                valueColumnsMap = this.selectIndexToValueColumnsMap[valueColumnsMap];
                                if (valueColumnsMap) for (var _i = 0, valueColumnsMap_1 = valueColumnsMap; _i < valueColumnsMap_1.length; _i++) {
                                    var valueColumn = valueColumnsMap_1[_i];
                                    dsr.DataShapeUtility.copyAggregates(aggregates, valueColumn);
                                }
                            }
                        }
                    }, DsrToCategoricalConverter.prototype.readPrimaryHierarchyCalc = function(calcInfoKind, identityBuilder) {
                        var calcInfo, calcId = calcInfoKind.calcId(), value = this.context.aggregateCalcMetadata[calcId];
                        value && 1 === value.aggregateKind ? dsr.DataShapeUtility.fillMetadataColumnAggregate(calcInfoKind.calcValue(), value) : (calcInfo = this.context.calcInfo[calcId]) && (value = calcInfoKind.calcValue(), 
                        calcInfo.kind === dsr.SelectKind.Group ? (calcInfo.isGroupKeyButNotSelect || this.selectIndexToCategoryColumn[calcInfo.selectIdx].values.push(value), 
                        calcInfo.forIdentity && identityBuilder.addExpr(calcId, calcInfoKind.calcValueAsExpr())) : calcInfo.kind === dsr.SelectKind.Measure && (1 === (calcInfoKind = calcInfo.calcKind) ? (this.selectIndexToPrimaryValueColumn[calcInfo.selectIdx].values.push(value), 
                        this.aggregator.update(value, calcInfo.selectIdx)) : 4 === calcInfoKind ? this.selectIndexToDynamicFormatColumn[calcInfo.selectIdx].values.push(value) : 3 === calcInfoKind ? this.selectIndexToPrimaryValueColumn[calcInfo.selectIdx].highlights.push(value) : 6 === calcInfoKind && this.selectIndexToDynamicFormatColumn[calcInfo.selectIdx].highlights.push(value)));
                    }, DsrToCategoricalConverter.prototype.parseIntersections = function(instancesParser) {
                        var intersectionsParser = instancesParser.intersections();
                        if (intersectionsParser) for (var calcInfoDict = this.context.calcInfo, intersectionIndex = 0; intersectionsParser.next(); ) {
                            var valueColumnMap = this.intersectionValueColumnsMap[intersectionIndex], dynamicFormatColumnMap = this.intersectionDynamicFormatColumnsMap[intersectionIndex];
                            if (intersectionsParser.nextCalc() && this.parseIntersectionCalc(intersectionsParser, valueColumnMap, dynamicFormatColumnMap, calcInfoDict)) for (intersectionIndex++; intersectionsParser.nextCalc(); ) this.parseIntersectionCalc(intersectionsParser, valueColumnMap, dynamicFormatColumnMap, calcInfoDict);
                        }
                    }, DsrToCategoricalConverter.prototype.parseIntersectionCalc = function(intersectionsParser, valueColumnMap, dynamicFormatColumnMap, calcInfo) {
                        var calcId = intersectionsParser.calcId(), calcInfo = calcInfo[calcId];
                        if (calcInfo) switch (calcInfo.kind, dsr.SelectKind.Measure, calcInfo.calcKind) {
                          case 1:
                            return valueColumnMap[calcId].values.push(intersectionsParser.calcValue()), !0;

                          case 3:
                            return valueColumnMap[calcId].highlights.push(intersectionsParser.calcValue()), 
                            !0;

                          case 4:
                            return dynamicFormatColumnMap[calcId].values.push(intersectionsParser.calcValue()), 
                            !0;

                          case 6:
                            return dynamicFormatColumnMap[calcId].highlights.push(intersectionsParser.calcValue()), 
                            !0;

                          case 2:
                          case 5:
                            return !1;
                        }
                    }, DsrToCategoricalConverter.prototype.readMeasuresWithNoGrouping = function(primaryHierarchyDataMemberParser, valueColumns) {
                        this.aggregator.read(primaryHierarchyDataMemberParser), this.aggregator.copyToColumns();
                        primaryHierarchyDataMemberParser = primaryHierarchyDataMemberParser.primaryHierarchy();
                        if (primaryHierarchyDataMemberParser.next()) {
                            this.addPrimaryValueColumns(valueColumns, !0);
                            for (var calcInfoDict = this.context.calcInfo, instancesParser = primaryHierarchyDataMemberParser.instances(); instancesParser.next(); ) for (;instancesParser.nextCalc(); ) {
                                var calcInfo = calcInfoDict[instancesParser.calcId()];
                                calcInfo && (calcInfo.selectIdx, 1 === calcInfo.calcKind ? this.selectIndexToPrimaryValueColumn[calcInfo.selectIdx].values.push(instancesParser.calcValue()) : 3 === calcInfo.calcKind ? this.selectIndexToPrimaryValueColumn[calcInfo.selectIdx].highlights.push(instancesParser.calcValue()) : 4 === calcInfo.calcKind ? this.selectIndexToDynamicFormatColumn[calcInfo.selectIdx].values.push(instancesParser.calcValue()) : 6 === calcInfo.calcKind && this.selectIndexToDynamicFormatColumn[calcInfo.selectIdx].highlights.push(instancesParser.calcValue()));
                            }
                        }
                    }, DsrToCategoricalConverter;
                }();
            }(dsr.converters || (dsr.converters = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(converters) {
                converters.createMatrix = function(context, dsrParser, metadata, scopedAggregatesEnabled, synchronizedGroupsEnabled, scopedMeasuresEnabled) {
                    return new DsrToMatrixConverter(context, dsrParser, metadata, scopedAggregatesEnabled, synchronizedGroupsEnabled, scopedMeasuresEnabled).run();
                };
                var DsrToMatrixConverter = function() {
                    function DsrToMatrixConverter(context, dsrParser, metadata, scopedAggregateEnabled, synchronizedGroupsEnabled, scopedMeasuresEnabled) {
                        this.context = context, this.dsrParser = dsrParser, this.metadata = metadata, this.synchronizedGroupsEnabled = synchronizedGroupsEnabled, 
                        this.scopedMeasuresEnabled = scopedMeasuresEnabled, metadata.columns, this.aggregator = new dsr.Aggregator(context), 
                        this.scopedAggregatesEnabled = scopedAggregateEnabled;
                    }
                    return DsrToMatrixConverter.prototype.run = function() {
                        var aggregator = this.aggregator, columnHierarchy = this.dsrParser;
                        columnHierarchy.reset();
                        var rowHierarchy = columnHierarchy.dataShapes();
                        this.calcInfoCache = {};
                        rowHierarchy.next();
                        this.createHierarchiesLevels(), this.readValueSources(rowHierarchy), 0 < this.context.maxPrimaryDepth || _.isEmpty(this.context.measureSelectIndices), 
                        aggregator.read(rowHierarchy, 1 === this.context.maxPrimaryDepth && 0 === this.context.maxSecondaryDepth);
                        var rowHierarchyParser = rowHierarchy.secondaryHierarchy(), columnHierarchy = this.readHierarchy(1, rowHierarchyParser, rowHierarchy), rowHierarchyParser = rowHierarchy.primaryHierarchy(), rowHierarchy = this.readHierarchy(0, rowHierarchyParser, rowHierarchy);
                        return aggregator.copyToColumns(), {
                            rows: rowHierarchy,
                            columns: columnHierarchy,
                            valueSources: this.valueSources
                        };
                    }, DsrToMatrixConverter.prototype.createHierarchiesLevels = function() {
                        var selects = this.context.selects, primaryHierarchyLevelsCount = this.context.maxPrimaryDepth, secondaryHierarchyLevelsCount = this.context.maxSecondaryDepth;
                        this.primaryHierarchyLevels = new Array(primaryHierarchyLevelsCount), this.secondaryHierarchyLevels = new Array(secondaryHierarchyLevelsCount);
                        for (var i = 0; i < primaryHierarchyLevelsCount; i++) this.primaryHierarchyLevels[i] = {
                            sources: []
                        };
                        for (i = 0; i < secondaryHierarchyLevelsCount; i++) this.secondaryHierarchyLevels[i] = {
                            sources: []
                        };
                        for (var columns = this.metadata.columns, columnsCount = columns.length, columnIndexToZoneIndex = this.columnIndexToZoneIndex = new Array(columnsCount), i = 0; i < columnsCount; i++) {
                            var levelColumns, column = columns[i], select = column.index;
                            null != select && (levelColumns = void 0, (select = selects[select]).Kind === dsr.SelectKind.Group && (null != select.Depth ? levelColumns = this.primaryHierarchyLevels[select.Depth].sources : null != select.SecondaryDepth && (levelColumns = this.secondaryHierarchyLevels[select.SecondaryDepth].sources), 
                            columnIndexToZoneIndex[i] = levelColumns.length, levelColumns.push(column)));
                        }
                    }, DsrToMatrixConverter.prototype.readHierarchy = function(hierarchyKind, hierarchyParser, context) {
                        var groupings, intersectionsValueSourcesCount = this.valueSources.length;
                        switch (hierarchyKind) {
                          case 0:
                            if (groupings = this.context.primaryAxisGroupings, this.context.maxPrimaryDepth, 
                            !groupings) return this.createRowHierarchyForNoGroupings(hierarchyParser);
                            break;

                          case 1:
                            if (groupings = this.context.secondaryAxisGroupings, this.context.maxSecondaryDepth, 
                            !groupings) return 0 === intersectionsValueSourcesCount ? {
                                levels: [],
                                root: {
                                    children: []
                                }
                            } : this.createColumnHierarchyForNoGroupings();
                        }
                        _.size(groupings);
                        var primarySynchronizedGroups, hierarchy = {
                            levels: 0 === hierarchyKind ? this.primaryHierarchyLevels : this.secondaryHierarchyLevels,
                            root: {}
                        };
                        1 === hierarchyKind && 1 < intersectionsValueSourcesCount && hierarchy.levels.push(this.createColumnHierarchyMeasuresLevel()), 
                        this.synchronizedGroupsEnabled && (primarySynchronizedGroups = this.context.primarySynchronizedGroups, 
                        0 === hierarchyKind && primarySynchronizedGroups && this.readRowsSynchronizedGroups(primarySynchronizedGroups, hierarchy, context));
                        context = this.context;
                        return this.readNodeChildren(context, context.calcInfo, this.columnIndexToZoneIndex, context.dataMemberIdToIdentityBuilder, context.dataMemberIdToMetadata, hierarchy.root, hierarchyParser, 0, hierarchyKind, intersectionsValueSourcesCount, this.context.maxSecondaryDepth, hierarchy.levels), 
                        _.isEmpty(hierarchy.root.children) || _.isEmpty(hierarchy.synchronizedGroups) || this.ensureRowNodeSynchronization(hierarchy.root, 0), 
                        hierarchy;
                    }, DsrToMatrixConverter.prototype.readRowsSynchronizedGroups = function(primarySynchronizedGroups, rowsHierarchy, mainDataShapeParser) {
                        var synchronizedGroupsCount = primarySynchronizedGroups.length;
                        rowsHierarchy.synchronizedGroups = new Array(synchronizedGroupsCount), this.primarySynchronizedGroupByLevel = new Array(rowsHierarchy.levels.length);
                        for (var nestedDataShapeParsers = mainDataShapeParser.nestedDataShapes(), i = 0; i < synchronizedGroupsCount; i++) {
                            var synchronizedGroup = primarySynchronizedGroups[i], synchronizedGroupLevels = synchronizedGroup.groupings;
                            _.isEmpty(synchronizedGroupLevels);
                            for (var context = nestedDataShapeParsers[synchronizedGroup.dataShapeId], hierarchyParser = (context.next(), 
                            context.primaryHierarchy()), slice = rowsHierarchy.synchronizedGroups[i] = {
                                levels: new Array(),
                                root: {}
                            }, j = 0; j < synchronizedGroupLevels.length; j++) {
                                var rowsHierarchyLevelIndex = synchronizedGroupLevels[j], level = slice.levels[j] = rowsHierarchy.levels[rowsHierarchyLevelIndex];
                                level.valueSources && ((rowsHierarchy.levels[rowsHierarchyLevelIndex] = powerbi.Prototype.inherit(level)).valueSources = level.valueSources, 
                                delete level.valueSources);
                            }
                            this.primarySynchronizedGroupByLevel[synchronizedGroupLevels[0]] = slice;
                            for (var columns = this.metadata.columns, columnIndexToZoneIndex = new Array(columns.length), columnIdx = 0; columnIdx < columns.length; columnIdx++) !function(columnIdx) {
                                for (var column = columns[columnIdx], _i = 0, _a = slice.levels; _i < _a.length; _i++) {
                                    var levelIndex = _a[_i], levelIndex = _.findIndex(levelIndex.sources, function(source) {
                                        return source === column;
                                    });
                                    if (-1 < levelIndex) {
                                        columnIndexToZoneIndex[columnIdx] = levelIndex;
                                        break;
                                    }
                                }
                            }(columnIdx);
                            context = this.context.createContextForPrimarySynchronizedGroup(synchronizedGroup, context);
                            this.readNodeChildren(context, context.calcInfo, columnIndexToZoneIndex, context.dataMemberIdToIdentityBuilder, context.dataMemberIdToMetadata, slice.root, hierarchyParser, 0, 0, 0, context.maxSecondaryDepth, slice.levels, {
                                currentIndex: 0
                            });
                        }
                    }, DsrToMatrixConverter.prototype.readNodeChildren = function(context, calcInfo, columnIndexToZoneIndex, dataMemberIdToIdentityBuilder, dataMemberIdToMetadata, node, dataMemberParser, childrenLevel, hierarchyKind, intersectionsValueSourcesCount, secondaryHierarchyLevelsCount, hierarchyLevels, synchronizedGroupLeafIndex) {
                        if (dataMemberParser && 0 !== dataMemberParser.count()) for (;dataMemberParser.next(); ) {
                            var dataMemberId = dataMemberParser.id(), dataMemberMetadata = dataMemberIdToMetadata[dataMemberId];
                            if (dataMemberMetadata) {
                                var isSubtotal = 2 === dataMemberMetadata.kind, isGrandTotal = isSubtotal && 0 === childrenLevel, identityBuilder = void 0, identityExprs = void 0;
                                isSubtotal || (identityExprs = (identityBuilder = (identityBuilder = dataMemberIdToIdentityBuilder[dataMemberId]) || (dataMemberIdToIdentityBuilder[dataMemberId] = new dsr.IdentityBuilder(context, dataMemberId))).getIdentityFields());
                                var instancesParser = dataMemberParser.instances();
                                if (instancesParser && 0 !== instancesParser.count()) {
                                    identityExprs && (node.childIdentityFields = identityExprs);
                                    var children = children || (node.children = []), dataMemberCalcInfoCache = this.calcInfoCache[dataMemberId];
                                    for (null == dataMemberCalcInfoCache && (dataMemberCalcInfoCache = this.calcInfoCache[dataMemberId] = []); instancesParser.next(); ) {
                                        var child = this.readNode(context, dataMemberMetadata, dataMemberIdToIdentityBuilder, dataMemberIdToMetadata, calcInfo, columnIndexToZoneIndex, instancesParser, childrenLevel, isSubtotal, isGrandTotal, dataMemberCalcInfoCache, hierarchyKind, intersectionsValueSourcesCount, secondaryHierarchyLevelsCount, identityBuilder, dataMemberMetadata.restartValuesBuilder, hierarchyLevels, synchronizedGroupLeafIndex);
                                        children.push(child), synchronizedGroupLeafIndex && synchronizedGroupLeafIndex.currentIndex++;
                                    }
                                }
                            }
                        }
                    }, DsrToMatrixConverter.prototype.readNode = function(context, firstSyncIndex, dataMemberIdToIdentityBuilder, dataMemberIdToMetadata, calcInfo, columnIndexToZoneIndex, instancesParser, nodeLevel, isSubtotal, isGrandTotal, calcInfoCache, hierarchyKind, intersectionsValueSourcesCount, secondaryHierarchyLevelsCount, identityBuilder, childrenMembersParser, hierarchyLevels, synchronizedGroupLeafIndex) {
                        var aggregateCalcMetadata = context.aggregateCalcMetadata, node = {
                            level: nodeLevel
                        };
                        firstSyncIndex.forSynchronization && (node.synchronizationIndex = synchronizedGroupLeafIndex.currentIndex), 
                        1 === instancesParser.restartFlagKind() && (node.isMerge = !0), isSubtotal ? node.isSubtotal = !0 : identityBuilder.reset();
                        for (var levelValues = [], isSynchronized = this.synchronizedGroupsEnabled && firstSyncIndex.isSynchronized, i = 0; instancesParser.nextCalc(); i++) {
                            var syncIndex = instancesParser.calcId(), currentCalcInfo = calcInfoCache[i];
                            if (!currentCalcInfo) {
                                if (!(currentCalcInfo = calcInfo[syncIndex])) continue;
                                calcInfoCache[i] = currentCalcInfo;
                            }
                            if (10 !== currentCalcInfo.calcKind) {
                                var valuesContainer = currentCalcInfo.columnIndex;
                                currentCalcInfo.isGroupKeyButNotSelect;
                                var zoneIndex = columnIndexToZoneIndex[valuesContainer];
                                currentCalcInfo.isGroupKeyButNotSelect;
                                var valuesContainer = currentCalcInfo.kind, calcValue = void 0;
                                if (valuesContainer === dsr.SelectKind.Group) isSynchronized || (calcValue = (nodeValue = instancesParser.calcValueAsExpr()).value, 
                                currentCalcInfo.isGroupKeyButNotSelect || (levelValues[zoneIndex] = {
                                    value: calcValue,
                                    levelSourceIndex: zoneIndex
                                }), identityBuilder.addExpr(syncIndex, nodeValue)); else if (valuesContainer === dsr.SelectKind.Measure) {
                                    if (!this.scopedMeasuresEnabled && 0 < secondaryHierarchyLevelsCount) continue;
                                    currentCalcInfo.selectIdx;
                                    var nodeValue = this.measuresGroupingScopeBySelectIndex[currentCalcInfo.selectIdx];
                                    nodeValue.secondary;
                                    valuesContainer = void 0, nodeValue = (valuesContainer = 0 === secondaryHierarchyLevelsCount && nodeValue.primary === hierarchyLevels.length ? (null == node.values && (valuesContainer = node.values = {}), 
                                    node.values) : (hierarchyLevels[nodeLevel].valueSources[0].length, node.nodeValues || (node.nodeValues = {
                                        0: {}
                                    }), node.nodeValues[0]))[zoneIndex];
                                    nodeValue || (nodeValue = valuesContainer[zoneIndex] = {}, 0 < zoneIndex && (nodeValue.valueSourceIndex = zoneIndex)), 
                                    calcValue = instancesParser.calcValue(), this.readNodeValueCalc(nodeValue, calcValue, currentCalcInfo), 
                                    this.scopedAggregatesEnabled && currentCalcInfo.scopedAggregateCalcMetadata && this.setScopeAggregateValue(node, calcValue, currentCalcInfo, hierarchyLevels[nodeLevel - 1]), 
                                    !isGrandTotal || 2 !== currentCalcInfo.calcKind && 5 !== currentCalcInfo.calcKind || (context.aggregateCalcMetadata[syncIndex], 
                                    dsr.DataShapeUtility.fillMetadataColumnAggregate(calcValue, aggregateCalcMetadata[syncIndex]));
                                }
                                if (!isSynchronized && currentCalcInfo.hasDuplicateColumnIndices) for (var _i = 0, _a = context.calcIdToColumnIndices[syncIndex]; _i < _a.length; _i++) {
                                    var duplicateColumnsZoneIndex = columnIndexToZoneIndex[_a[_i]];
                                    levelValues[duplicateColumnsZoneIndex] || (levelValues[duplicateColumnsZoneIndex] = {
                                        value: calcValue,
                                        levelSourceIndex: duplicateColumnsZoneIndex
                                    });
                                }
                            } else {
                                syncIndex = instancesParser.calcValue();
                                node.synchronizationIndex = syncIndex;
                            }
                        }
                        isSubtotal || isSynchronized || (node.levelValues = levelValues, node.value = levelValues[0].value, 
                        node.identity = identityBuilder.getIdentity(), (intersectionsParser = instancesParser.restartKind()) && (1 === intersectionsParser ? node.restartKind = 1 : 2 === intersectionsParser ? node.restartKind = 2 : 3 === intersectionsParser && (node.restartKind = 3), 
                        node.restartKind && (node.restartValues = childrenMembersParser.getRestartValues(instancesParser))));
                        var intersectionsParser = instancesParser.intersections(), childrenMembersParser = instancesParser.members();
                        return intersectionsParser ? this.readIntersectionsValues(calcInfo, columnIndexToZoneIndex, intersectionsValueSourcesCount, node, intersectionsParser) : childrenMembersParser ? (this.readNodeChildren(context, calcInfo, columnIndexToZoneIndex, dataMemberIdToIdentityBuilder, dataMemberIdToMetadata, node, childrenMembersParser, nodeLevel + 1, hierarchyKind, intersectionsValueSourcesCount, secondaryHierarchyLevelsCount, hierarchyLevels, synchronizedGroupLeafIndex), 
                        !firstSyncIndex.isSynchronized || _.isEmpty(node.children) || void 0 !== (firstSyncIndex = node.children[0].synchronizationIndex) && (node.synchronizationIndex = firstSyncIndex)) : 1 === hierarchyKind && 1 < intersectionsValueSourcesCount && (nodeLevel === secondaryHierarchyLevelsCount - 1 || node.isSubtotal) && this.createColumnHierarchyMeasuresNodes(node), 
                        node;
                    }, DsrToMatrixConverter.prototype.setScopeAggregateValue = function(node, calcValue, calcInfo, parentHiearachyLevel) {
                        var scopedAggrValue, levelAggrMetadata = calcInfo.scopedAggregateCalcMetadata, nodeAggregates = this.findDataViewNodeAggregates(node, levelAggrMetadata.metadata);
                        switch (calcInfo.calcKind) {
                          case 7:
                            scopedAggrValue = nodeAggregates.values;
                            break;

                          case 8:
                            scopedAggrValue = nodeAggregates.highlight;
                        }
                        switch (levelAggrMetadata.aggregateKind) {
                          case 2:
                            scopedAggrValue.max = calcValue;
                            break;

                          case 3:
                            scopedAggrValue.min = calcValue;
                            break;

                          case 6:
                            scopedAggrValue.avg = calcValue;
                        }
                        var dataViewAggrMetadata = levelAggrMetadata.metadata, levelAggrMetadata = parentHiearachyLevel.aggregates;
                        levelAggrMetadata ? _.some(levelAggrMetadata, function(existingAggrMetadata) {
                            return existingAggrMetadata.column === dataViewAggrMetadata.column && dsr.DataViewConverterContext.sameScopedAggregatesInputScope(existingAggrMetadata.inputScope, dataViewAggrMetadata.inputScope) && existingAggrMetadata.respectInstanceFilters === dataViewAggrMetadata.respectInstanceFilters;
                        }) || levelAggrMetadata.push(dataViewAggrMetadata) : parentHiearachyLevel.aggregates = [ dataViewAggrMetadata ];
                    }, DsrToMatrixConverter.prototype.findDataViewNodeAggregates = function(node, aggregateMetadata) {
                        var scopeAggregate, nodeAggregates = node.aggregateValues;
                        return nodeAggregates ? (scopeAggregate = _.find(nodeAggregates, function(existingAggrMetadata) {
                            existingAggrMetadata = existingAggrMetadata.metadata;
                            return existingAggrMetadata.column === aggregateMetadata.column && dsr.DataViewConverterContext.sameScopedAggregatesInputScope(existingAggrMetadata.inputScope, aggregateMetadata.inputScope) && existingAggrMetadata.respectInstanceFilters === aggregateMetadata.respectInstanceFilters;
                        })) || nodeAggregates.push(scopeAggregate = {
                            metadata: aggregateMetadata,
                            values: {},
                            highlight: {}
                        }) : node.aggregateValues = [ scopeAggregate = {
                            metadata: aggregateMetadata,
                            values: {},
                            highlight: {}
                        } ], scopeAggregate;
                    }, DsrToMatrixConverter.prototype.readIntersectionsValues = function(calcInfo, columnIndexToZoneIndex, measuresCount, node, intersectionsParser) {
                        if (0 !== measuresCount) for (var values = node.values = {}, intersectionIndex = 0; intersectionsParser.next(); ) {
                            for (var i = 0; i < measuresCount; i++) {
                                var nodeValue = values[measuresCount * intersectionIndex + i] = {};
                                0 < i && (nodeValue.valueSourceIndex = i);
                            }
                            for (;intersectionsParser.nextCalc(); ) {
                                var currentCalcInfo = calcInfo[intersectionsParser.calcId()];
                                currentCalcInfo && (nodeValue = values[measuresCount * intersectionIndex + columnIndexToZoneIndex[currentCalcInfo.columnIndex]], 
                                this.readNodeValueCalc(nodeValue, intersectionsParser.calcValue(), currentCalcInfo));
                            }
                            intersectionIndex++;
                        }
                    }, DsrToMatrixConverter.prototype.readNodeValueCalc = function(nodeValue, calcValue, calcInfo) {
                        switch (calcInfo.calcKind) {
                          case 1:
                          case 4:
                            nodeValue.value = calcValue, this.aggregator.update(calcValue, calcInfo.selectIdx);
                            break;

                          case 2:
                          case 5:
                            nodeValue.value = calcValue;
                            break;

                          case 3:
                          case 6:
                          case 9:
                            nodeValue.highlight = calcValue;
                            break;

                          case 7:
                          case 8:
                          case 10:
                            break;

                          default:
                            calcInfo.calcKind;
                        }
                    }, DsrToMatrixConverter.prototype.createRowHierarchyForNoGroupings = function(instancesParser) {
                        var node = {
                            level: 0,
                            values: {}
                        }, hierarchy = {
                            levels: [],
                            root: {
                                children: [ node ]
                            }
                        };
                        instancesParser.count(), instancesParser.next();
                        instancesParser = instancesParser.instances();
                        return this.readNodeForNoGroupings(node, instancesParser), hierarchy;
                    }, DsrToMatrixConverter.prototype.readNodeForNoGroupings = function(root, instancesParser) {
                        instancesParser.count();
                        var calcInfo = this.context.calcInfo, columnIndexToZoneIndex = this.columnIndexToZoneIndex;
                        instancesParser.next();
                        for (var values = root.values = {}; instancesParser.nextCalc(); ) {
                            var valueSourceIndex, nodeValue, currentCalcInfo = calcInfo[instancesParser.calcId()];
                            currentCalcInfo && ((nodeValue = values[valueSourceIndex = columnIndexToZoneIndex[currentCalcInfo.columnIndex]]) || (nodeValue = values[valueSourceIndex] = {}, 
                            0 < valueSourceIndex && (nodeValue.valueSourceIndex = valueSourceIndex)), this.readNodeValueCalc(nodeValue, instancesParser.calcValue(), currentCalcInfo));
                        }
                    }, DsrToMatrixConverter.prototype.createColumnHierarchyForNoGroupings = function() {
                        var levels = [], root = {};
                        return 0 < this.valueSources.length && (levels = [ this.createColumnHierarchyMeasuresLevel() ], 
                        this.createColumnHierarchyMeasuresNodes(root)), {
                            levels: levels,
                            root: root
                        };
                    }, DsrToMatrixConverter.prototype.createColumnHierarchyMeasuresLevel = function() {
                        for (var measureCount = this.valueSources.length, measureSources = new Array(measureCount), i = 0; i < measureCount; i++) measureSources[i] = this.valueSources[i];
                        return {
                            sources: measureSources
                        };
                    }, DsrToMatrixConverter.prototype.createColumnHierarchyMeasuresNodes = function(parent) {
                        for (var level = null == parent.level ? 0 : this.context.maxSecondaryDepth, measureCount = this.valueSources.length, nodes = parent.children = new Array(measureCount), isSubtotal = parent.isSubtotal, i = 0; i < measureCount; i++) {
                            var node = nodes[i] = {
                                level: level
                            };
                            0 < i && (node.levelSourceIndex = i), isSubtotal && (node.isSubtotal = !0);
                        }
                    }, DsrToMatrixConverter.prototype.readValueSources = function(dataShapesParser) {
                        var context = this.context, selects = context.selects, measureSelectIndices = context.measureSelectIndices, measureSelectsCount = measureSelectIndices.length, selectIndexToColumn = context.selectIndexToColumn, selectIndexToColumnIndex = context.selectIndexToColumnIndex, columnIndexToZoneIndex = this.columnIndexToZoneIndex;
                        this.valueSources = [], this.measuresGroupingScopeBySelectIndex = {};
                        var topLevelValueCalcsById = {};
                        if (0 < dataShapesParser.calcCount()) {
                            for (;dataShapesParser.nextCalc(); ) topLevelValueCalcsById[dataShapesParser.calcId()] = !0;
                            dataShapesParser.restartCalcs();
                        }
                        for (var i = 0; i < measureSelectsCount; i++) {
                            var dynamicFormatColumn = measureSelectIndices[i], select = selects[dynamicFormatColumn];
                            select.Kind, dsr.SelectKind.Measure, select.Value;
                            var secondaryGroupingsCount, rowLevel, columnIndex = selectIndexToColumnIndex[dynamicFormatColumn], valueSources = this.measuresGroupingScopeBySelectIndex[dynamicFormatColumn] = this.getMeasureGroupingScope(select, topLevelValueCalcsById[select.Value]);
                            valueSources && (rowLevel = valueSources.primary, secondaryGroupingsCount = valueSources.secondary, 
                            valueSources = void 0, valueSources = (rowLevel !== this.context.maxPrimaryDepth || secondaryGroupingsCount !== this.context.maxSecondaryDepth) && this.scopedMeasuresEnabled ? (this.primaryHierarchyLevels.length, 
                            (rowLevel = this.primaryHierarchyLevels[rowLevel - 1]).valueSources || (rowLevel.valueSources = {
                                0: []
                            }), rowLevel.valueSources[0]) : this.valueSources, dynamicFormatColumn = selectIndexToColumn[dynamicFormatColumn], 
                            columnIndexToZoneIndex[columnIndex] = valueSources.length, valueSources.push(dynamicFormatColumn), 
                            select.DynamicFormat && select.DynamicFormat.Format && (dynamicFormatColumn = dynamicFormatColumn.formatSource && dynamicFormatColumn.formatSource.formatString, 
                            columnIndexToZoneIndex[columnIndex + 1] = valueSources.length, valueSources.push(dynamicFormatColumn)));
                        }
                    }, DsrToMatrixConverter.prototype.getMeasureGroupingScope = function(select, hasTopLevelCalcs) {
                        return null == select.Depth && null == select.SecondaryDepth ? hasTopLevelCalcs ? null : {
                            primary: this.context.maxPrimaryDepth,
                            secondary: this.context.maxSecondaryDepth
                        } : {
                            primary: null != select.Depth ? select.Depth + 1 : 0,
                            secondary: null != select.SecondaryDepth ? select.SecondaryDepth + 1 : 0
                        };
                    }, DsrToMatrixConverter.prototype.ensureRowNodeSynchronization = function(children, startingLevel) {
                        if (this.isRowLeaf(children), !this.isRowLeaf(children)) {
                            var childrenSyncGroup = this.primarySynchronizedGroupByLevel[startingLevel];
                            if (childrenSyncGroup) this.synchronizeNodeChildren(children, childrenSyncGroup.root); else for (var children = children.children, childrenLevel = startingLevel + 1, _i = 0, children_1 = children; _i < children_1.length; _i++) {
                                var child = children_1[_i];
                                this.ensureRowNodeSynchronization(child, childrenLevel);
                            }
                        }
                    }, DsrToMatrixConverter.prototype.synchronizeNodeChildren = function(root, masterRoot) {
                        if (!this.isRowLeaf(root)) {
                            var listLevel = root.level + 1, masterList = masterRoot.children;
                            if (_.isEmpty(masterList)) this.ensureRowNodeSynchronization(root, listLevel); else {
                                var masterListCount = masterList.length, list = root.children || [], newChildren = new Array(masterListCount);
                                root.children = newChildren;
                                for (var listIndex = 0, currentNode = listIndex < list.length ? list[listIndex] : void 0, currentSyncIndex = null == currentNode ? void 0 : currentNode.synchronizationIndex, masterListIndex = 0; masterListIndex < masterListCount; masterListIndex++) {
                                    var masterNode = masterList[masterListIndex], masterSyncIndex = masterNode.synchronizationIndex, newNode = this.copyFromMasterNode(masterNode);
                                    newNode.level = listLevel, newChildren[masterListIndex] = newNode, currentNode && currentSyncIndex === masterSyncIndex ? (currentNode.level, 
                                    this.copyFromExistingNode(currentNode, newNode), this.synchronizeNodeChildren(newNode, masterNode), 
                                    currentSyncIndex = null == (currentNode = ++listIndex < list.length ? list[listIndex] : void 0) ? void 0 : currentNode.synchronizationIndex) : (void 0 === currentSyncIndex || masterSyncIndex < currentSyncIndex) && (this.isRowLeaf(newNode) || (newNode.children = [], 
                                    this.synchronizeNodeChildren(newNode, masterNode)));
                                }
                            }
                        }
                    }, DsrToMatrixConverter.prototype.copyFromMasterNode = function(masterNode) {
                        var newNode = {};
                        if (newNode.synchronizationIndex = masterNode.synchronizationIndex, masterNode.identity && (newNode.identity = masterNode.identity), 
                        void 0 !== masterNode.value && (newNode.value = masterNode.value), void 0 !== masterNode.isSubtotal && (newNode.isSubtotal = masterNode.isSubtotal), 
                        masterNode.levelValues) {
                            var levelValueCount = masterNode.levelValues.length;
                            newNode.levelValues = new Array(levelValueCount);
                            for (var i = 0; i < levelValueCount; i++) {
                                var levelValue = masterNode.levelValues[i];
                                newNode.levelValues[i] = {
                                    value: levelValue.value,
                                    levelSourceIndex: levelValue.levelSourceIndex
                                };
                            }
                        }
                        return void 0 !== masterNode.restartKind && (newNode.restartKind = masterNode.restartKind), 
                        void 0 !== masterNode.restartValues && (newNode.restartValues = masterNode.restartValues), 
                        newNode;
                    }, DsrToMatrixConverter.prototype.copyFromExistingNode = function(source, target) {
                        source.aggregateValues && (target.aggregateValues = source.aggregateValues), source.values && (target.values = source.values), 
                        source.nodeValues && (target.nodeValues = source.nodeValues), _.isEmpty(source.children) && _.isEmpty(target.children), 
                        source.children && (target.children = source.children), source.childIdentityFields && !target.childIdentityFields && (target.childIdentityFields = source.childIdentityFields);
                    }, DsrToMatrixConverter.prototype.isRowLeaf = function(node) {
                        return !(node.level !== this.context.maxPrimaryDepth - 1 && !node.isSubtotal) && (_.isEmpty(node.children), 
                        !0);
                    }, DsrToMatrixConverter;
                }();
            }(dsr.converters || (dsr.converters = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(converters) {
                converters.createTable = function(context, dsrParser, metadata) {
                    return new DsrToTableConverter(context, dsrParser, metadata).run();
                };
                var DsrToTableConverter = function() {
                    function DsrToTableConverter(context, dsrParser, metadata) {
                        this.context = context, this.dsrParser = dsrParser, this.metadata = metadata, this.aggregator = new dsr.Aggregator(context);
                    }
                    return DsrToTableConverter.prototype.run = function() {
                        if (this.isCompatible()) {
                            var table = {
                                columns: this.metadata.columns
                            }, aggregator = this.dsrParser;
                            aggregator.reset();
                            var primaryHierarchyDataMemberParser = aggregator.dataShapes(), aggregator = (primaryHierarchyDataMemberParser.next(), 
                            this.aggregator);
                            aggregator.read(primaryHierarchyDataMemberParser);
                            primaryHierarchyDataMemberParser = primaryHierarchyDataMemberParser.primaryHierarchy();
                            return 1 === this.context.maxPrimaryDepth ? this.readRows(table, primaryHierarchyDataMemberParser) : 0 === this.context.maxPrimaryDepth && this.readRowWithoutGrouping(table, primaryHierarchyDataMemberParser), 
                            aggregator.copyToColumns(), table;
                        }
                    }, DsrToTableConverter.prototype.readRows = function(table, primaryHierarchyDataMemberParser) {
                        var lastMergeIndex, context = this.context, rowCellsCount = this.getRowCellsCount(primaryHierarchyDataMemberParser);
                        for (primaryHierarchyDataMemberParser.reset(); primaryHierarchyDataMemberParser.next(); ) {
                            var dataMemberId = primaryHierarchyDataMemberParser.id(), rowsLength = context.dataMemberIdToMetadata[dataMemberId];
                            if (rowsLength) {
                                var dataMemberKind = rowsLength.kind, instancesParser = primaryHierarchyDataMemberParser.instances(), calcIndexToProjectionMetadataMap = [];
                                if (1 === dataMemberKind) {
                                    for (var identityBuilder = (identityBuilder = context.dataMemberIdToIdentityBuilder[dataMemberId]) || (context.dataMemberIdToIdentityBuilder[dataMemberId] = new dsr.IdentityBuilder(context, dataMemberId)), dataMemberAxisGrouping = rowsLength.axisGrouping, rowsLength = instancesParser.count(), rows = new Array(rowsLength), identity = new Array(rowsLength), i = 0; instancesParser.next(); i++) 1 === instancesParser.restartFlagKind() && (lastMergeIndex = i), 
                                    identityBuilder.reset(), rows[i] = this.readRow(instancesParser, dataMemberAxisGrouping, calcIndexToProjectionMetadataMap, rowCellsCount, identityBuilder, !1), 
                                    identity[i] = identityBuilder.getIdentity();
                                    _.isEmpty(identity) || (table.identity = identity), table.identityFields = identityBuilder.getIdentityFields();
                                } else if (2 === dataMemberKind) {
                                    if (0 === rowCellsCount) continue;
                                    for (;instancesParser.next(); ) {
                                        table.totals;
                                        for (var totals = this.readRow(instancesParser, null, calcIndexToProjectionMetadataMap, rowCellsCount, null, !0), totalsLen = totals.length, i = 0; i < totalsLen; i++) void 0 === totals[i] && (totals[i] = null);
                                        table.totals = totals;
                                    }
                                }
                                table.rows = rows, void 0 !== lastMergeIndex && (table.lastMergeIndex = lastMergeIndex);
                            }
                        }
                    }, DsrToTableConverter.prototype.readRow = function(instancesParser, dataMemberAxisGrouping, calcIndexToProjectionMetadataMap, rowLength, identityBuilder, isTotalRow) {
                        var calcIdToGroupingIdentityIndexMap, aggregator = this.aggregator, row = new Array(rowLength), shouldBuildCalcIndexToProjectionMetadataMap = 0 === calcIndexToProjectionMetadataMap.length;
                        shouldBuildCalcIndexToProjectionMetadataMap && dataMemberAxisGrouping && (instancesParser.calcCount(), 
                        calcIdToGroupingIdentityIndexMap = this.createCalcIdToGroupingIdentityIndexMap(dataMemberAxisGrouping), 
                        calcIndexToProjectionMetadataMap.length = instancesParser.calcCount());
                        for (var context = this.context, aggregateCalcMetadata = context.aggregateCalcMetadata, i = 0; instancesParser.nextCalc(); i++) {
                            var axisGroupingIndex, calcInfo, columnIndex, calcId = instancesParser.calcId();
                            shouldBuildCalcIndexToProjectionMetadataMap && (axisGroupingIndex = calcIdToGroupingIdentityIndexMap && calcIdToGroupingIdentityIndexMap[calcId], 
                            columnIndex = (calcInfo = context.calcInfo[calcId]) && calcInfo.columnIndex, projectionMetadata = calcInfo && calcInfo.selectIdx, 
                            !calcInfo || 3 !== calcInfo.calcKind && 6 !== calcInfo.calcKind && 9 !== calcInfo.calcKind || (columnIndex = null), 
                            calcIndexToProjectionMetadataMap[i] = {
                                axisGroupingIndex: axisGroupingIndex,
                                columnIndex: columnIndex,
                                hasDuplicateColumnIndices: calcInfo && calcInfo.hasDuplicateColumnIndices,
                                isGroupKeyOnly: null != axisGroupingIndex && null == columnIndex,
                                selectIndex: projectionMetadata,
                                aggregateMetadata: aggregateCalcMetadata[calcId]
                            });
                            var projectionMetadata = calcIndexToProjectionMetadataMap[i];
                            if (null != projectionMetadata.columnIndex) {
                                var calcValue = instancesParser.calcValue();
                                if (row[projectionMetadata.columnIndex] = calcValue, isTotalRow ? dsr.DataShapeUtility.fillMetadataColumnAggregate(calcValue, projectionMetadata.aggregateMetadata) : aggregator.update(calcValue, projectionMetadata.selectIndex), 
                                projectionMetadata.hasDuplicateColumnIndices) for (var _i = 0, _a = context.calcIdToColumnIndices[calcId]; _i < _a.length; _i++) {
                                    var i_2 = _a[_i];
                                    void 0 === row[i_2] && (row[i_2] = calcValue);
                                }
                            }
                            identityBuilder && identityBuilder.addExpr(calcId, instancesParser.calcValueAsExpr());
                        }
                        return row;
                    }, DsrToTableConverter.prototype.readRowWithoutGrouping = function(table, rows) {
                        if (rows.count(), rows.next()) {
                            var instancesParser = rows.instances(), rows = [];
                            if (instancesParser.count(), instancesParser.next()) {
                                for (var row = []; instancesParser.nextCalc(); ) {
                                    var calcInfo = instancesParser.calcId(), calcInfo = this.context.calcInfo[calcInfo];
                                    calcInfo && 3 !== calcInfo.calcKind && (row[calcInfo.columnIndex] = instancesParser.calcValue());
                                }
                                rows.push(row);
                            }
                            table.rows = rows;
                        }
                    }, DsrToTableConverter.prototype.getRowCellsCount = function(primaryHierarchyDataMemberParser) {
                        for (primaryHierarchyDataMemberParser.reset(); primaryHierarchyDataMemberParser.next(); ) {
                            var dataMemberMetadata = primaryHierarchyDataMemberParser.id(), dataMemberMetadata = this.context.dataMemberIdToMetadata[dataMemberMetadata];
                            if (dataMemberMetadata && 1 === dataMemberMetadata.kind) {
                                var instancesParser = primaryHierarchyDataMemberParser.instances();
                                if (instancesParser.next()) {
                                    for (var rowLength = 0; instancesParser.nextCalc(); ) {
                                        var calcId = instancesParser.calcId(), calcInfo = this.context.calcInfo[calcId];
                                        !calcInfo || 1 !== calcInfo.calcKind && 2 !== calcInfo.calcKind || (calcInfo.hasDuplicateColumnIndices ? rowLength += _.size(this.context.calcIdToColumnIndices[calcId]) : rowLength++);
                                    }
                                    return rowLength;
                                }
                            }
                        }
                        return 0;
                    }, DsrToTableConverter.prototype.createCalcIdToGroupingIdentityIndexMap = function(dataMemberAxisGrouping) {
                        for (var map = {}, groupingKeys = dataMemberAxisGrouping.Keys, selects = this.context.selects, groupingKeysLength = groupingKeys.length, i = 0; i < groupingKeysLength; i++) {
                            var groupingKey = groupingKeys[i];
                            map[groupingKey.Calc || selects[groupingKey.Select].Value] = i;
                        }
                        return map;
                    }, DsrToTableConverter.prototype.isCompatible = function() {
                        var context = this.context;
                        return 0 === context.maxSecondaryDepth && context.maxPrimaryDepth <= 1;
                    }, DsrToTableConverter;
                }();
            }(dsr.converters || (dsr.converters = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(converters) {
                converters.createTree = function(context, dsrParser) {
                    return new DsrToTreeConverter(context, dsrParser).run();
                };
                var DsrToTreeConverter = function() {
                    function DsrToTreeConverter(context, dsrParser) {
                        this.context = context, this.dsrParser = dsrParser, this.calcIndexToCalcMetadataDictionary = {}, 
                        this.aggregator = new dsr.Aggregator(context);
                    }
                    return DsrToTreeConverter.prototype.run = function() {
                        if (this.isCompatible()) {
                            var root = {};
                            return this.parseTree(root), {
                                root: root
                            };
                        }
                    }, DsrToTreeConverter.prototype.parseTree = function(node) {
                        var maxPrimaryDepth = this.dsrParser;
                        maxPrimaryDepth.reset();
                        var dataShapesParser = maxPrimaryDepth.dataShapes(), maxPrimaryDepth = (dataShapesParser.next(), 
                        this.context.maxPrimaryDepth);
                        this.aggregator.read(dataShapesParser, 1 === maxPrimaryDepth), 0 === maxPrimaryDepth ? this.parseDataMembersWithNoGrouping(node, dataShapesParser.primaryHierarchy()) : this.parseDataMembers(node, dataShapesParser.primaryHierarchy(), 0), 
                        this.parseAggregates(node);
                    }, DsrToTreeConverter.prototype.parseDataMembers = function(node, dataMemberParser, depth) {
                        for (;dataMemberParser.next(); ) {
                            var context = this.context, dataMemberId = dataMemberParser.id(), dataMemberMetadata = context.dataMemberIdToMetadata[dataMemberId];
                            if (dataMemberMetadata) {
                                var instancesParser = dataMemberParser.instances(), calcIndexToCalcMetadataMap = this.calcIndexToCalcMetadataDictionary[dataMemberId];
                                switch (calcIndexToCalcMetadataMap || (this.calcIndexToCalcMetadataDictionary[dataMemberId] = calcIndexToCalcMetadataMap = []), 
                                dataMemberMetadata.kind) {
                                  case 1:
                                    var identityBuilder = context.dataMemberIdToIdentityBuilder[dataMemberId];
                                    identityBuilder || (identityBuilder = new dsr.IdentityBuilder(context, dataMemberId), 
                                    context.dataMemberIdToIdentityBuilder[dataMemberId] = identityBuilder);
                                    var identityExprs = identityBuilder.getIdentityFields();
                                    identityExprs && (node.childIdentityFields = identityExprs), this.parseInstances(node, instancesParser, calcIndexToCalcMetadataMap, identityBuilder, !1, depth);
                                    break;

                                  case 2:
                                    this.parseInstances(node, instancesParser, calcIndexToCalcMetadataMap, null, !0, depth);
                                }
                            }
                        }
                    }, DsrToTreeConverter.prototype.parseInstances = function(node, instancesParser, calcIndexToCalcMetadataMap, identityBuilder, isSubtotalMember, depth) {
                        var context = this.context, aggregator = this.aggregator, aggregateCalcMetadata = context.aggregateCalcMetadata, children = node.children;
                        for (isSubtotalMember || !children && 0 < instancesParser.count() && (children = node.children = new Array(instancesParser.count())); instancesParser.next(); ) {
                            var values = void 0, value = void 0, name_1 = void 0;
                            isSubtotalMember || identityBuilder.reset();
                            var shouldBuildCalcIndexToCalcMetadataMap = 0 === calcIndexToCalcMetadataMap.length;
                            shouldBuildCalcIndexToCalcMetadataMap && (calcIndexToCalcMetadataMap.length = instancesParser.calcCount());
                            for (var childNode, dataMemberParser, i = 0; instancesParser.nextCalc(); i++) {
                                var values = (values = isSubtotalMember ? node.values : values) || {}, calcId = instancesParser.calcId();
                                shouldBuildCalcIndexToCalcMetadataMap && (selectIndex = context.calcInfo[calcId], 
                                calcIndexToCalcMetadataMap[i] = selectIndex);
                                var calcValue, calcKind, selectKind, selectIndex, isGroupKeyButNotSelect = calcIndexToCalcMetadataMap[i];
                                isGroupKeyButNotSelect && (calcValue = instancesParser.calcValue(), calcKind = isGroupKeyButNotSelect.calcKind, 
                                selectKind = isGroupKeyButNotSelect.kind, selectIndex = isGroupKeyButNotSelect.selectIdx, 
                                isSubtotalMember ? (dsr.SelectKind.Group, this.addTreeNodeMeasureValues(values, selectIndex, calcKind, calcValue), 
                                0 === depth && dsr.DataShapeUtility.fillMetadataColumnAggregate(calcValue, aggregateCalcMetadata[calcId])) : ((isGroupKeyButNotSelect = isGroupKeyButNotSelect.isGroupKeyButNotSelect) || this.addTreeNodeMeasureValues(values, selectIndex, calcKind, calcValue), 
                                selectKind === dsr.SelectKind.Group ? (isGroupKeyButNotSelect || (name_1 = calcValue), 
                                identityBuilder.addExpr(calcId, instancesParser.calcValueAsExpr())) : selectKind === dsr.SelectKind.Measure && 1 === calcKind && aggregator.update(value = calcValue, selectIndex)));
                            }
                            isSubtotalMember ? (node.values = values, 1 === instancesParser.restartFlagKind() && (node.isMerge = !0)) : (childNode = {
                                values: values,
                                identity: identityBuilder.getIdentity()
                            }, void 0 !== name_1 && (childNode.name = name_1), void 0 !== value && (childNode.value = value), 
                            1 === instancesParser.restartFlagKind() && (childNode.isMerge = !0), (dataMemberParser = instancesParser.members()) && this.parseDataMembers(childNode, dataMemberParser, depth + 1), 
                            children[instancesParser.currentIndex()] = childNode);
                        }
                    }, DsrToTreeConverter.prototype.addTreeNodeMeasureValues = function(values, selectIndex, calcKind, calcValue) {
                        var nodeMeasureValue = values[selectIndex];
                        switch (!nodeMeasureValue && this.isSupportedMeasureType(calcKind) && (nodeMeasureValue = values[selectIndex] = {}), 
                        calcKind) {
                          case 1:
                            nodeMeasureValue.value = calcValue;
                            break;

                          case 2:
                            nodeMeasureValue.subtotal = calcValue;
                            break;

                          case 3:
                            nodeMeasureValue.highlight = calcValue;
                        }
                    }, DsrToTreeConverter.prototype.isSupportedMeasureType = function(calcKind) {
                        return 1 === calcKind || 2 === calcKind || 3 === calcKind;
                    }, DsrToTreeConverter.prototype.parseDataMembersWithNoGrouping = function(node, dataMemberParser) {
                        dataMemberParser.count(), dataMemberParser.next();
                        var nodeValues, instancesParser = dataMemberParser.instances();
                        instancesParser.count(), instancesParser.next();
                        for (var calcInfoDictionary = this.context.calcInfo; instancesParser.nextCalc(); ) {
                            node.values || (node.values = nodeValues = {});
                            var calcKind, calcValue, calcInfo = calcInfoDictionary[instancesParser.calcId()];
                            calcInfo && (calcKind = calcInfo.calcKind, calcValue = instancesParser.calcValue(), 
                            this.addTreeNodeMeasureValues(nodeValues, calcInfo.selectIdx, calcKind, calcValue), 
                            1 === calcKind && (node.value = calcValue));
                        }
                    }, DsrToTreeConverter.prototype.isCompatible = function() {
                        return 0 === _.size(this.context.secondaryAxisGroupings);
                    }, DsrToTreeConverter.prototype.parseAggregates = function(node) {
                        var context = this.context;
                        this.aggregator.copyToColumns();
                        for (var measureSelectIndices = context.measureSelectIndices, measureSelectsLen = measureSelectIndices.length, i = 0; i < measureSelectsLen; i++) {
                            var aggregateNode, selectIdx = measureSelectIndices[i], aggregates = context.selectIndexToColumn[selectIdx].aggregates, values = node.values;
                            aggregates && (aggregateNode = (aggregateNode = (values = values || (node.values = {}))[selectIdx]) || (values[selectIdx] = {}), 
                            dsr.DataShapeUtility.copyAggregates(aggregates, aggregateNode));
                        }
                    }, DsrToTreeConverter;
                }();
            }(dsr.converters || (dsr.converters = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(converters) {
                converters.createSingle = function(context, dsrParser) {
                    if (DsrToSingleConverter.isCompatible(context)) return new DsrToSingleConverter(context, dsrParser).run();
                };
                var DsrToSingleConverter = function() {
                    function DsrToSingleConverter(context, dsrParser) {
                        this.context = context, this.dsrParser = dsrParser, this.aggregator = new dsr.Aggregator(context);
                    }
                    return DsrToSingleConverter.prototype.run = function() {
                        return this.parseSingle();
                    }, DsrToSingleConverter.prototype.parseSingle = function() {
                        var dataShapesParser = this.dsrParser;
                        dataShapesParser.reset();
                        dataShapesParser = dataShapesParser.dataShapes(), dataShapesParser.next();
                        return this.aggregator.read(dataShapesParser, !1), this.aggregator.copyToColumns(), 
                        0 === this.context.maxPrimaryDepth ? this.parseMeasureValue(dataShapesParser.primaryHierarchy()) : this.parseSubtotal(dataShapesParser.primaryHierarchy());
                    }, DsrToSingleConverter.prototype.parseMeasureValue = function(dataMemberParser) {
                        if (dataMemberParser.count(), dataMemberParser.next()) return this.parseInstance(dataMemberParser.instances());
                    }, DsrToSingleConverter.prototype.parseSubtotal = function(dataMemberParser) {
                        for (;dataMemberParser.next(); ) if (2 === this.context.dataMemberIdToMetadata[dataMemberParser.id()].kind) return this.parseInstance(dataMemberParser.instances());
                    }, DsrToSingleConverter.prototype.parseInstance = function(instancesParser) {
                        for (var calcValue, selectIndex, context = this.context, calcInfoDictionary = context.calcInfo; instancesParser.next(); ) for (;instancesParser.nextCalc(); ) {
                            var calcKind, isSubtotal, calcId = instancesParser.calcId(), calcInfo = calcInfoDictionary[calcId];
                            calcInfo && (isSubtotal = 2 === (calcKind = calcInfo.calcKind), 1 !== calcKind && !isSubtotal || (calcValue = instancesParser.calcValue(), 
                            selectIndex = calcInfo.selectIdx, isSubtotal && (context.aggregateCalcMetadata[calcId], 
                            dsr.DataShapeUtility.fillMetadataColumnAggregate(calcValue, context.aggregateCalcMetadata[calcId]))));
                        }
                        if (void 0 !== calcValue) return {
                            column: context.selectIndexToColumn[selectIndex],
                            value: calcValue
                        };
                    }, DsrToSingleConverter.isCompatible = function(context) {
                        return 0 === context.maxSecondaryDepth && 1 === context.measureSelectIndices.length;
                    }, DsrToSingleConverter;
                }();
            }(dsr.converters || (dsr.converters = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var dsr, dsr_2;
        (function(reader) {
            !function(V1) {
                var DsrToMatrixParser, EnumExtensions = jsCommon.EnumExtensions, PerfTimer = jsCommon.PerfTimer;
                function applyReductionMetadata(dataView, limits) {
                    var reductionMetadata;
                    dataView.metadata.dataReduction = {}, dataView.categorical && (reductionMetadata = dataView.metadata.dataReduction.categorical = {}, 
                    limits.Primary && (reductionMetadata.categories = getReductionAlgorithmMetadata(limits.Primary)), 
                    limits.Secondary && (reductionMetadata.values = getReductionAlgorithmMetadata(limits.Secondary)), 
                    limits.Intersection && (reductionMetadata.metadata = getReductionAlgorithmMetadata(limits.Intersection))), 
                    dataView.matrix && (reductionMetadata = dataView.metadata.dataReduction.matrix = {}, 
                    limits.Primary && (reductionMetadata.rows = getReductionAlgorithmMetadata(limits.Primary)));
                }
                function getReductionAlgorithmMetadata(limit) {
                    switch (limit.Type) {
                      case 3:
                        return {
                            binnedLineSample: {}
                        };

                      case 4:
                        return {
                            overlappingPointsSample: {}
                        };

                      default:
                        return {};
                    }
                }
                function ensureTreeNodeValues(node, ordinal) {
                    var values = node.values;
                    return (values = values || (node.values = {}))[ordinal] || (values[ordinal] = {});
                }
                V1.read = function(targets, limitsWarning, clientError, dataView, requestId, clientSideFilters, context) {
                    if (!function(dsr) {
                        return dsr && 1 === _.size(dsr.DataShapes);
                    }(clientError)) return null;
                    var dataShape = clientError.DataShapes[0];
                    if (dataShape["odata.error"]) {
                        clientError = new powerbi.DsrClientError(dataShape["odata.error"]);
                        return requestId && (clientError.requestId = requestId), {
                            error: clientError
                        };
                    }
                    var context = new DsrReaderContext(targets, limitsWarning, context, new DsrAggregateReader(limitsWarning, dataShape)), dsrReaderResult = {
                        dataView: dataView = function(context) {
                            if (null != context.scriptVisualBinding) return new DsrToScriptResultStrategy(context);
                            for (var primaryDepth = 0, secondaryDepth = 0, selects = context.selects, i = 0, len = selects.length; i < len; i++) {
                                var select = selects[i];
                                select && (null != select.Depth && (primaryDepth = Math.max(primaryDepth, select.Depth + 1)), 
                                null != select.SecondaryDepth && (secondaryDepth = Math.max(secondaryDepth, select.SecondaryDepth + 1)));
                            }
                            return new (1 <= secondaryDepth && 1 === primaryDepth ? DsrWithPivotedColumnsStrategy : DsrToTreeStrategy)(context);
                        }(context).read(limitsWarning.Expressions, dataShape, dataView)
                    };
                    if (dataShape.RestartTokens && (dsrReaderResult.restartToken = dataShape.RestartTokens), 
                    dataShape.DataLimitsExceeded && 0 < dataShape.DataLimitsExceeded.length && (dsrReaderResult.warnings || (dsrReaderResult.warnings = []), 
                    limitsWarning = new dsr_2.DsrLimitsWarning(limitsWarning, dataShape.DataLimitsExceeded, dataShape.Calculations), 
                    dsrReaderResult.warnings.push(limitsWarning), applyReductionMetadata(dataView, limitsWarning.limits)), 
                    dataShape.DataShapeMessages && 0 < dataShape.DataShapeMessages.length) for (var _i = 0, _a = dataShape.DataShapeMessages; _i < _a.length; _i++) {
                        var dataShapeMessage = _a[_i];
                        dsr_2.KnownDsrMessages[dataShapeMessage.Code] && dataShapeMessage.Severity === data.dsr.getDsrMessageSeverityValue(0) && (dsrReaderResult.warnings || (dsrReaderResult.warnings = []), 
                        dsrReaderResult.warnings.push(new dsr_2.DsrMessage(dataShapeMessage)));
                    }
                    return dsrReaderResult.dataView && !_.isEmpty(clientSideFilters) && (data.ClientSideFilter.applyClientSideFilters(dsrReaderResult.dataView, clientSideFilters), 
                    dsrReaderResult.disallowPersisting = !0), context.stats, dsrReaderResult;
                }, V1.applyReductionMetadata = applyReductionMetadata, function(DsrToMatrixParser) {
                    function createHierarchyLevel(metadataColumns) {
                        for (var levels = {
                            sources: []
                        }, i = 0, ilen = metadataColumns.length; i < ilen; i++) levels.sources.push(metadataColumns[i]);
                        return levels;
                    }
                    function getAggIdxForNode(node) {
                        return node.isSubtotal ? node.level : node.level + 1;
                    }
                    function getMaxAggIdx(axis) {
                        return axis && axis.Groupings ? axis.Groupings.length : 0;
                    }
                    function addMeasureHeaders(root, count, depth, isSubtotal) {
                        root.children = [];
                        for (var i = 0; i < count; i++) {
                            var child = {
                                level: depth
                            };
                            0 < i && (child.levelSourceIndex = i), root.children.push(child), isSubtotal && (child.isSubtotal = !0);
                        }
                    }
                    function parseTree(context, levelSources, rootMembers, axisGroupings, leafMemberCallback) {
                        var root = {};
                        return function parseRecursive(context, levelSources, node, members, axisGroupings, depth, leafMemberCallback) {
                            if (!members) return;
                            var selects = context.selects;
                            var selectIndexToLevelSourceIndexMapping = createSelectIndexToLevelSourceIndexMapping(levelSources, depth);
                            for (var i = 0, ilen = members.length; i < ilen; i++) for (var member = members[i], memberType = 0, j = 0, jlen = member.Instances.length; j < jlen; j++) {
                                var instance = member.Instances[j];
                                if (0 === memberType && 4 === (memberType = getMemberType(selects, axisGroupings, depth, member, instance))) break;
                                var levelValues, nestedNode = {
                                    level: depth
                                };
                                node.children || (node.children = []), node.children.push(nestedNode), 1 === memberType ? (levelValues = getGroupValues(selects, instance.Calculations, selectIndexToLevelSourceIndexMapping), 
                                _.isEmpty(levelValues) || (nestedNode.levelValues = levelValues, nestedMembers = _.last(levelValues), 
                                nestedNode.value = nestedMembers.value, 0 < nestedMembers.levelSourceIndex && (nestedNode.levelSourceIndex = nestedMembers.levelSourceIndex))) : 3 === memberType && (nestedNode.isSubtotal = !0), 
                                instance.RestartFlag && 1 === instance.RestartFlag && (nestedNode.isMerge = !0), 
                                axisGroupings && 1 === memberType && (node.childIdentityFields = context.readKeys(axisGroupings, depth), 
                                nestedNode.identity = context.readIdentity(axisGroupings, instance, depth));
                                var nestedMembers = instance.Members;
                                nestedMembers && 0 < nestedMembers.length ? parseRecursive(context, levelSources, nestedNode, nestedMembers, axisGroupings, depth + 1, leafMemberCallback) : leafMemberCallback && leafMemberCallback(context, memberType, instance, nestedNode, depth + 1);
                            }
                        }(context, levelSources, root, rootMembers, axisGroupings, 0, leafMemberCallback), 
                        root;
                    }
                    function createSelectIndexToLevelSourceIndexMapping(levelSources, depth) {
                        var selectIndexToLevelSourceIndexMapping = [], sourcesForCurrentDepth = levelSources && levelSources[depth] && levelSources[depth].sources;
                        if (!_.isEmpty(sourcesForCurrentDepth)) for (var i = 0, ilen = sourcesForCurrentDepth.length; i < ilen; i++) {
                            var sourceMetadataColumn = sourcesForCurrentDepth[i];
                            sourceMetadataColumn.index, selectIndexToLevelSourceIndexMapping[sourceMetadataColumn.index] = i;
                        }
                        return selectIndexToLevelSourceIndexMapping;
                    }
                    function getGroupValues(selects, calculations, selectIndexToLevelSourceIndexMapping) {
                        for (var groupValues, i = 0, ilen = selects.length; i < ilen; i++) {
                            var value = selects[i];
                            value && value.Value && value.Kind === dsr_2.SelectKind.Group && (void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, value.Value)) && (groupValues = groupValues || []).push({
                                levelSourceIndex: selectIndexToLevelSourceIndexMapping[i],
                                value: value
                            }));
                        }
                        return groupValues;
                    }
                    function getMemberType(selects, axisGroupings, grouping, member, instance) {
                        if (axisGroupings && axisGroupings.length > grouping && null != member.Id) {
                            grouping = axisGroupings[grouping];
                            if (member.Id === grouping.Member) return 1;
                            if (member.Id === grouping.SubtotalMember) return 3;
                        }
                        var calculations = instance.Calculations;
                        if (calculations) {
                            for (var measureFound = !1, i = 0, ilen = selects.length; i < ilen; i++) {
                                var select = selects[i];
                                if (select && dsr_2.DataShapeUtility.findCalculation(calculations, select.Value)) {
                                    if (select.Kind === dsr_2.SelectKind.Group) return 1;
                                    measureFound || select.Kind !== dsr_2.SelectKind.Measure || (measureFound = !0);
                                }
                            }
                            if (measureFound) return 2;
                        }
                        return 4;
                    }
                    function readAndAddMeasureValues(rowMemberType, measureSelects, calculations, node, valueIndex, secondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx) {
                        if (calculations) for (var measureIndex = {
                            index: 0
                        }, i = 0, ilen = measureSelects.length; i < ilen; i++) {
                            var select = measureSelects[i];
                            select.Kind, dsr_2.SelectKind.Measure;
                            var highlightDynamicFormatId = select.Highlight, formatSourceSubtotals = highlightDynamicFormatId && highlightDynamicFormatId.Value, highlightDynamicFormatId = highlightDynamicFormatId && highlightDynamicFormatId.DynamicFormat && highlightDynamicFormatId.DynamicFormat.Format;
                            readAndAddSingleMeasureValue(rowMemberType, calculations, node, valueIndex, measureIndex, secondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx, 0, select.Value, formatSourceSubtotals, select.Subtotal), 
                            select.DynamicFormat && select.DynamicFormat.Format && (formatSourceSubtotals = _.map(select.SubtotalDynamicFormat, function(subtotalDynamicFormat) {
                                return subtotalDynamicFormat && subtotalDynamicFormat.Format;
                            }), readAndAddSingleMeasureValue(rowMemberType, calculations, node, valueIndex, measureIndex, secondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx, 0, select.DynamicFormat.Format, highlightDynamicFormatId, formatSourceSubtotals));
                        }
                    }
                    function readAndAddSingleMeasureValue(rowMemberType, calculations, node, valueIndex, measureIndex, secondaryAggIdx, maxPrimaryAggIdx, subtotal, select, id, highlightId, formatSubtotals) {
                        var measureValue = ensureTreeNodeValues(node, valueIndex.index), value = null;
                        null != (value = 3 !== rowMemberType ? dsr_2.DataShapeUtility.findAndParseCalculation(calculations, id) : value) || void 0 !== (subtotal = function(calculations, subtotals, primaryAggIdx, secondaryAggIdx, maxPrimaryAggIdx, AggIdx) {
                            if (subtotals) {
                                AggIdx = dsr_2.DataShapeUtility.computeAggIdx(primaryAggIdx, secondaryAggIdx, maxPrimaryAggIdx, AggIdx);
                                if (AggIdx < subtotals.length) return dsr_2.DataShapeUtility.findAndParseCalculation(calculations, subtotals[AggIdx]);
                            }
                            return;
                        }(calculations, formatSubtotals, getAggIdxForNode(node), secondaryAggIdx, maxPrimaryAggIdx, subtotal)) && (value = subtotal), 
                        highlightId && (measureValue.highlight = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, highlightId)), 
                        measureValue.value = value, 0 < measureIndex.index && (measureValue.valueSourceIndex = measureIndex.index), 
                        valueIndex.index++, measureIndex.index++;
                    }
                    DsrToMatrixParser.parse = function(context, dataShapeExprs, dataShape, secondaryRoot) {
                        context.includes(2);
                        var timer = PerfTimer.start("DSR.matrix(" + context.perfId + ")"), primaryLevelSources = [], secondaryLevelSources = [];
                        !function(context, primaryLevelSources, secondaryLevelSources, measures, metadataColumns) {
                            for (var selects = context.selects, selectIndex = 0, len = selects.length; selectIndex < len; selectIndex++) {
                                var metadataColumn, secondaryHierarchyLevel, select = selects[selectIndex];
                                select && (metadataColumn = function(context, metadataColumns, index) {
                                    for (var i = 0, ilen = metadataColumns.length; i < ilen; i++) {
                                        var metadataColumn = metadataColumns[i];
                                        if (metadataColumn && metadataColumn.index === index && void 0 === metadataColumn.groupName) return metadataColumn;
                                    }
                                    return context.createColumns(metadataColumns, index);
                                }(context, metadataColumns, selectIndex), select.Kind === dsr_2.SelectKind.Measure ? measures.push(metadataColumn) : null != select.Depth ? null != (secondaryHierarchyLevel = primaryLevelSources[select.Depth]) ? secondaryHierarchyLevel.sources.push(metadataColumn) : primaryLevelSources[select.Depth] = createHierarchyLevel([ metadataColumn ]) : null != select.SecondaryDepth && (null != (secondaryHierarchyLevel = secondaryLevelSources[select.SecondaryDepth]) ? secondaryHierarchyLevel.sources.push(metadataColumn) : secondaryLevelSources[select.SecondaryDepth] = createHierarchyLevel([ metadataColumn ])), 
                                select.DynamicFormat && select.DynamicFormat.Format && (metadataColumn.formatSource && metadataColumn.formatSource.formatString, 
                                measures.push(metadataColumn.formatSource.formatString)));
                            }
                            var measuresLength = measures.length;
                            (1 < measuresLength || 0 < measuresLength && (0 === primaryLevelSources.length || 0 === secondaryLevelSources.length)) && secondaryLevelSources.push(createHierarchyLevel(measures));
                        }(context, primaryLevelSources, secondaryLevelSources, result = [], secondaryRoot.columns);
                        var intersectionToSecondaryAggIdx = [], secondaryRoot = function(context, levelSources, measureCount, dataShapeExprs, dataShape, intersectionToSecondaryAggIdx) {
                            if (!dataShape.SecondaryHierarchy || 0 === dataShape.SecondaryHierarchy.length) {
                                var root = {};
                                return addMeasureHeaders(root, measureCount, 0, !1), root;
                            }
                            var secondaryAxisGroupings;
                            dataShapeExprs && dataShapeExprs.Secondary && (secondaryAxisGroupings = dataShapeExprs.Secondary.Groupings);
                            return parseTree(context, levelSources, dataShape.SecondaryHierarchy, secondaryAxisGroupings, function(ctx, memberType, instance, node, depth) {
                                var innermostLevelIndex, measureCount_1;
                                depth < levelSources.length && (node.isSubtotal ? (innermostLevelIndex = levelSources.length - 1, 
                                1 < (measureCount_1 = levelSources[innermostLevelIndex].sources.length) && addMeasureHeaders(node, measureCount_1, innermostLevelIndex, !0)) : (levelSources.length, 
                                addMeasureHeaders(node, levelSources[depth].sources.length, depth, !1))), intersectionToSecondaryAggIdx.push(getAggIdxForNode(node)), 
                                context.stats.secondary++;
                            });
                        }(context, secondaryLevelSources, result.length, dataShapeExprs, dataShape, intersectionToSecondaryAggIdx), result = {
                            rows: {
                                root: function(context, levelSources, dataShapeExprs, dataShape, intersectionToSecondaryAggIdx) {
                                    if (dataShape.PrimaryHierarchy && 0 !== dataShape.PrimaryHierarchy.length) {
                                        var primaryAxisGroupings;
                                        dataShapeExprs && dataShapeExprs.Primary && (primaryAxisGroupings = dataShapeExprs.Primary.Groupings);
                                        var maxPrimaryAggIdx = 0, maxSecondaryAggIdx = 0;
                                        dataShapeExprs && (maxPrimaryAggIdx = getMaxAggIdx(dataShapeExprs.Primary), maxSecondaryAggIdx = getMaxAggIdx(dataShapeExprs.Secondary));
                                        var measureSelects = _.filter(context.selects, function(s) {
                                            return s && s.Kind === dsr_2.SelectKind.Measure;
                                        });
                                        return parseTree(context, levelSources, dataShape.PrimaryHierarchy, primaryAxisGroupings, function(ctx, memberType, instance, node, depth) {
                                            !function(rowMemberType, measureSelects, instance, node, intersectionToSecondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx) {
                                                var intersections = instance.Intersections, valueIndex = {
                                                    index: 0
                                                };
                                                if (intersections) for (var secondaryAggIdx, i = 0, ilen = intersections.length; i < ilen; i++) intersections[i].Calculations && (secondaryAggIdx = intersectionToSecondaryAggIdx[i], 
                                                readAndAddMeasureValues(rowMemberType, measureSelects, intersections[i].Calculations, node, valueIndex, secondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx)); else readAndAddMeasureValues(rowMemberType, measureSelects, instance.Calculations, node, valueIndex, 0, maxPrimaryAggIdx, maxSecondaryAggIdx);
                                            }(memberType, measureSelects, instance, node, intersectionToSecondaryAggIdx, maxPrimaryAggIdx, maxSecondaryAggIdx), 
                                            ctx.stats.primary++;
                                        });
                                    }
                                }(context, primaryLevelSources, dataShapeExprs, dataShape, intersectionToSecondaryAggIdx),
                                levels: primaryLevelSources
                            },
                            columns: {
                                root: secondaryRoot,
                                levels: secondaryLevelSources
                            },
                            valueSources: result
                        };
                        return timer(), result;
                    };
                }(DsrToMatrixParser = DsrToMatrixParser || {});
                var DsrToScriptResultStrategy = function() {
                    function DsrToScriptResultStrategy(context) {
                        this._context = context;
                    }
                    return DsrToScriptResultStrategy.prototype.read = function(dataShapeExprs, dataShape, perfStats) {
                        var _this = this, dataView = {
                            metadata: {
                                columns: []
                            }
                        };
                        return perfStats.script = PerfTimer.logTime(function() {
                            var calculations, payloadBase64;
                            dataShape.PrimaryHierarchy && 0 < dataShape.PrimaryHierarchy.length && ((payloadBase64 = dataShape.PrimaryHierarchy[0]) && 0 < payloadBase64.Instances.length && (calculations = payloadBase64.Instances[0].Calculations, 
                            payloadBase64 = _this._context.scriptVisualBinding.PayloadCalculationId || _this._context.scriptVisualBinding.ImageCalculationId, 
                            (payloadBase64 = dsr_2.DataShapeUtility.findCalculation(calculations, payloadBase64)) && (payloadBase64 = payloadBase64.Value, 
                            (payloadBase64 = data.PrimitiveValueEncoding.parseBinary(payloadBase64)) && (dataView.scriptResult = {
                                payloadBase64: payloadBase64
                            }))));
                        }), dataView;
                    }, DsrToScriptResultStrategy;
                }(), DsrToTreeStrategy = function() {
                    function DsrToTreeStrategy(context) {
                        this.context = context;
                    }
                    return DsrToTreeStrategy.prototype.read = function(dataShapeExprs, dataShape, perfStats) {
                        var root_1, treeParseTime, _this = this, context = this.context, metadata = this.readMetadata(dataShape.IsComplete), dataView = {
                            metadata: metadata
                        }, doTree = context.includes(16), doCategorical = context.includes(1), doSingle = context.includes(4), doTable = context.includes(8);
                        return (doTree || doCategorical || doSingle || doTable) && (treeParseTime = PerfTimer.logTime(function() {
                            root_1 = _this.parseTree(metadata.columns, dataShapeExprs, dataShape);
                        }), doTree && (perfStats.tree = treeParseTime + PerfTimer.logTime(function() {
                            var tree = _this.createTree(metadata, root_1);
                            tree && (dataView.tree = tree);
                        })), doCategorical && (perfStats.categorical = treeParseTime + PerfTimer.logTime(function() {
                            var categorical = _this.categorize(metadata, root_1);
                            categorical && (dataView.categorical = categorical);
                        })), doSingle && (perfStats.single = treeParseTime + PerfTimer.logTime(function() {
                            var single = _this.createSingleValue(metadata, root_1);
                            single && (dataView.single = single);
                        })), doTable && (perfStats.table = treeParseTime + PerfTimer.logTime(function() {
                            var table = _this.createTable(metadata, root_1);
                            table && (dataView.table = table);
                        }))), context.includes(2) && (perfStats.matrix = PerfTimer.logTime(function() {
                            var matrix = DsrToMatrixParser.parse(_this.context, dataShapeExprs, dataShape, dataView.metadata);
                            matrix && (dataView.matrix = matrix);
                        })), dataView;
                    }, DsrToTreeStrategy.prototype.readMetadata = function(isComplete) {
                        for (var metadata = {
                            columns: []
                        }, context = this.context, selects = context.selects, i = 0, len = selects.length; i < len; i++) selects[i] ? context.createColumns(metadata.columns, i) : context.actionHistory |= 1;
                        return isComplete || (metadata.segment = {}), metadata;
                    }, DsrToTreeStrategy.prototype.parseTree = function(columns, dataShapeExprs, dataShape) {
                        var timer = PerfTimer.start("DSR.tree(" + this.context.perfId + ")"), root = {}, selects = this.context.selects;
                        this.parseRootAggregates(columns, root);
                        var primaryAxisGroupings, dynamicMember = dsr_2.DataShapeUtility.getTopLevelPrimaryDynamicMember(dataShape, dataShapeExprs, !0);
                        return dynamicMember ? (dynamicMember !== (primaryAxisGroupings = dataShape.PrimaryHierarchy[0]) && this.parseValues(selects, root, DsrToTreeStrategy.getFirstInstanceCalcs(primaryAxisGroupings)), 
                        primaryAxisGroupings = void 0, dataShapeExprs && dataShapeExprs.Primary && (primaryAxisGroupings = dataShapeExprs.Primary.Groupings), 
                        this.parseRecursive(root, dynamicMember, primaryAxisGroupings, 0, columns)) : _.isEmpty(dataShape.PrimaryHierarchy) || this.parseValues(selects, root, DsrToTreeStrategy.getFirstInstanceCalcs(dataShape.PrimaryHierarchy[0])), 
                        timer(), root;
                    }, DsrToTreeStrategy.prototype.parseRecursive = function(node, dynamicMember, primaryAxisGroupings, depth, columns) {
                        var aggregator, context = this.context, dynamicMemberInstances = dynamicMember.Instances, dynamicMemberInstancesLength = dynamicMemberInstances.length;
                        dynamicMemberInstancesLength && (node.children = [], 0 === depth && (aggregator = TreeNodeValueAggregateComputer.create(node, context))), 
                        primaryAxisGroupings && (node.childIdentityFields = context.readKeys(primaryAxisGroupings, depth));
                        for (var i = 0; i < dynamicMemberInstancesLength; i++) {
                            var instance = dynamicMemberInstances[i], nestedNode = {};
                            node.children.push(nestedNode), instance.RestartFlag && 1 === instance.RestartFlag && (nestedNode.isMerge = !0), 
                            this.parseValues(context.selects, nestedNode, instance.Calculations, aggregator), 
                            primaryAxisGroupings && (nestedNode.identity = context.readIdentity(primaryAxisGroupings, instance, depth));
                            var dynamicChild = instance.Members;
                            this.parseAggregates(context.selects, nestedNode, instance.Calculations, dynamicChild, depth + 1), 
                            _.isEmpty(dynamicChild) || (dynamicChild = dsr_2.DataShapeUtility.getDynamicMember(dynamicChild, primaryAxisGroupings, depth + 1)) && this.parseRecursive(nestedNode, dynamicChild, primaryAxisGroupings, depth + 1);
                        }
                        aggregator && aggregator.complete(columns);
                    }, DsrToTreeStrategy.getFirstInstanceCalcs = function(memberInstances) {
                        memberInstances = memberInstances.Instances;
                        return 0 < memberInstances.length ? memberInstances[0].Calculations : null;
                    }, DsrToTreeStrategy.prototype.parseRootAggregates = function(columns, node) {
                        for (var i = 0, len = columns.length; i < len; i++) {
                            var nodeAggregates = columns[i].aggregates;
                            nodeAggregates && dsr_2.DataShapeUtility.copyAggregates(nodeAggregates, ensureTreeNodeValues(node, i));
                        }
                    }, DsrToTreeStrategy.prototype.parseAggregates = function(selects, node, calculations, allMembers, depth) {
                        for (var selectIndex = 0, len = selects.length; selectIndex < len; selectIndex++) {
                            var nodeAggregates, columnIndex = selects[selectIndex];
                            columnIndex && ((nodeAggregates = DsrAggregateReader.parseAggregates(columnIndex, calculations, allMembers, depth)) && (columnIndex = this.context.selectIndexToColumnIndexMap[selectIndex], 
                            dsr_2.DataShapeUtility.copyAggregates(nodeAggregates, ensureTreeNodeValues(node, columnIndex))));
                        }
                    }, DsrToTreeStrategy.prototype.parseValues = function(selects, node, calculations, aggregator) {
                        if (!_.isEmpty(calculations)) for (var selectIndex = 0, columnIndex = 0, len = selects.length; selectIndex < len; selectIndex++) {
                            var highlight, value, select = selects[selectIndex];
                            select && (select.Value && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, select.Value)) && (select.Kind === dsr_2.SelectKind.Group ? node.name = value : (node.value = value, 
                            aggregator && aggregator.add(columnIndex, value)), ensureTreeNodeValues(node, columnIndex).value = value), 
                            !select.Highlight || void 0 !== (highlight = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, select.Highlight.Value)) && (ensureTreeNodeValues(node, columnIndex).highlight = highlight), 
                            columnIndex++, select.DynamicFormat && select.DynamicFormat.Format && (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, select.DynamicFormat.Format), 
                            ensureTreeNodeValues(node, columnIndex).value = value, columnIndex++));
                        }
                    }, DsrToTreeStrategy.prototype.categorize = function(metadata, root) {
                        if (!this.canCategorize()) return null;
                        for (var categoryColumns, timer = PerfTimer.start("DSR.categorical(" + this.context.perfId + ")"), view = {}, j = 0, jlen = metadata.columns.length; j < jlen; j++) {
                            var column, aggregates, metadataColumn = metadata.columns[j];
                            void 0 !== metadataColumn.index && (metadataColumn.isMeasure ? (column = {
                                source: metadataColumn,
                                values: []
                            }, (aggregates = metadataColumn.aggregates) && dsr_2.DataShapeUtility.copyAggregates(aggregates, column), 
                            view.values || (view.values = data.DataViewTransform.createValueColumns()), view.values.push(column)) : (categoryColumns = categoryColumns || []).push({
                                columnIndex: j,
                                metadataColumn: metadataColumn
                            }));
                        }
                        if (categoryColumns) {
                            view.categories = [];
                            for (var categoryIdentity = void 0, categoryIdx = 0, categoryLen = categoryColumns.length; categoryIdx < categoryLen; categoryIdx++) {
                                var categoryColumn = categoryColumns[categoryIdx], nodes = root.children, category = {
                                    source: categoryColumn.metadataColumn,
                                    values: []
                                };
                                if (nodes) for (var nodeIdx = 0, nodeLen = nodes.length; nodeIdx < nodeLen; nodeIdx++) {
                                    var node = nodes[nodeIdx];
                                    category.values.push(node.values[categoryColumn.columnIndex].value), 0 === categoryIdx && (this.writeCategoricalValues(metadata, node, view.values), 
                                    node.identity && (categoryIdentity = categoryIdentity || []).push(node.identity)), 
                                    node.isMerge && (view.lastMergeIndex = nodeIdx);
                                }
                                categoryIdentity && (category.identity = categoryIdentity), root.childIdentityFields && (category.identityFields = root.childIdentityFields), 
                                view.categories.push(category);
                            }
                        } else this.writeCategoricalValues(metadata, root, view.values);
                        return timer(), view;
                    }, DsrToTreeStrategy.prototype.canCategorize = function() {
                        for (var selects = this.context.selects, i = 0, len = selects.length; i < len; i++) {
                            var select = selects[i];
                            if (select && 0 < select.Depth) return !1;
                        }
                        return !0;
                    }, DsrToTreeStrategy.prototype.createTree = function(metadata, children) {
                        var root = this.context;
                        if (!(2 & root.actionHistory || 1 & root.actionHistory)) return {
                            root: children
                        };
                        var root = powerbi.Prototype.inherit(children), columns = metadata.columns, sourceValues = children.values;
                        if (sourceValues) {
                            for (var nodeValues = {}, j = 0; j < columns.length; j++) {
                                var column = columns[j];
                                void 0 !== column.index && void 0 !== sourceValues[j] && (nodeValues[column.index] = sourceValues[j]);
                            }
                            root.values = nodeValues;
                        }
                        children = children.children;
                        return children && (root.children = this.removeFormatSourceFromTreeChildren(columns, children)), 
                        {
                            root: root
                        };
                    }, DsrToTreeStrategy.prototype.removeFormatSourceFromTreeChildren = function(columns, sourceChildren) {
                        for (var sourceChildrenLength = sourceChildren.length, children = _.map(sourceChildren, function(o) {
                            return o;
                        }), childIndex = 0; childIndex < sourceChildrenLength; childIndex++) {
                            var childChildren = powerbi.Prototype.inherit(children[childIndex]);
                            children[childIndex] = childChildren;
                            for (var values = {}, valueIndex = 0; valueIndex < columns.length; valueIndex++) {
                                var column = columns[valueIndex];
                                void 0 !== column.index && void 0 !== children[childIndex].values[valueIndex] && (values[column.index] = children[childIndex].values[valueIndex]);
                            }
                            children[childIndex].values = values;
                            childChildren = children[childIndex].children;
                            childChildren && (children[childIndex].children = this.removeFormatSourceFromTreeChildren(columns, childChildren));
                        }
                        return children;
                    }, DsrToTreeStrategy.prototype.createTable = function(table, root) {
                        for (var maxDepth, depth, selects = this.context.selects, i = 0, len = selects.length; i < len; i++) selects[i] && (0 <= (depth = selects[i].Depth) && (maxDepth = Math.max(depth, maxDepth || 0)));
                        if (0 < maxDepth) return null;
                        var lastMergeIndex, identity, timer = PerfTimer.start("DSR.table(" + this.context.perfId + ")"), rows = [], columnsLength = table.columns.length;
                        if (0 <= maxDepth) {
                            var nodes = root.children;
                            if (nodes) for (var i = 0, ilen = nodes.length; i < ilen; i++) {
                                var node = nodes[i];
                                this.toTableRow(node, columnsLength, rows), node.isMerge && (lastMergeIndex = i), 
                                node.identity && (identity = identity || []).push(node.identity);
                            }
                        } else powerbi.DataViewAnalysis.countGroups(table.columns), this.toTableRow(root, columnsLength, rows);
                        var totals = this.toTotals(root, columnsLength), table = {
                            rows: rows,
                            columns: table.columns
                        };
                        return identity && (table.identity = identity), root.childIdentityFields && (table.identityFields = root.childIdentityFields), 
                        totals && (table.totals = totals), 0 <= lastMergeIndex && (table.lastMergeIndex = lastMergeIndex), 
                        timer(), table;
                    }, DsrToTreeStrategy.prototype.toTableRow = function(node, columnsLength, rows) {
                        for (var row = [], j = 0; j < columnsLength; j++) {
                            var nodeValue = node.values[j];
                            nodeValue && row.push(nodeValue.value);
                        }
                        rows.push(row);
                    }, DsrToTreeStrategy.prototype.toTotals = function(root, columnsLength) {
                        var totals = [], values = root.values, hasAtLeastOneTotal = !1;
                        if (values) for (var columnIndex = 0; columnIndex < columnsLength; columnIndex++) {
                            var subtotal = values[columnIndex], subtotal = subtotal ? subtotal.subtotal : null, hasAtLeastOneTotal = hasAtLeastOneTotal || null != subtotal;
                            totals.push(subtotal);
                        }
                        return hasAtLeastOneTotal ? totals : null;
                    }, DsrToTreeStrategy.prototype.writeCategoricalValues = function(metadata, node, values) {
                        for (var columns = metadata.columns, idx = 0, j = 0, jlen = columns.length; j < jlen; j++) {
                            var nodeValues, measureValues = columns[j];
                            measureValues.isMeasure && (void 0 === measureValues.index || (nodeValues = node.values[j]) && ((measureValues = values[idx++]).values.push(nodeValues.value), 
                            void 0 !== nodeValues.highlight && (measureValues.highlights || (measureValues.highlights = []), 
                            measureValues.highlights.push(nodeValues.highlight))));
                        }
                    }, DsrToTreeStrategy.prototype.createSingleValue = function(metadata, value) {
                        if (value.values) {
                            for (var columns = metadata.columns, measureColumn = null, columnIndex = void 0, j = 0, jlen = columns.length; j < jlen; j++) if (columns[j].isMeasure && null != columns[j].index) {
                                if (measureColumn) return null;
                                measureColumn = columns[j], columnIndex = j;
                            }
                            if (!measureColumn) return null;
                            value = value.values[columnIndex];
                            if (!value) return null;
                            value = 0 === powerbi.DataViewAnalysis.countGroups(metadata.columns) ? value.value : value.subtotal;
                            return void 0 === value ? null : {
                                column: measureColumn,
                                value: value
                            };
                        }
                        return null;
                    }, DsrToTreeStrategy;
                }(), DsrWithPivotedColumnsStrategy = function() {
                    function DsrWithPivotedColumnsStrategy(context) {
                        this._context = context, this._categoriesMetadata = [], this._primaryMeasureSelects = [], 
                        this._measureSelects = [], this._secondarySelects = [], this._seriesColumn = null;
                    }
                    return DsrWithPivotedColumnsStrategy.prototype.read = function(dataShapeExprs, dataShape, perfStats) {
                        var _this = this, context = this._context, dataView = {
                            metadata: this.readMetadata(dataShape.IsComplete)
                        };
                        return context.includes(1) && (perfStats.categorical = PerfTimer.logTime(function() {
                            var categorical = _this.categorize(dataShape, dataView.metadata, dataShapeExprs);
                            categorical && (dataView.categorical = categorical);
                        })), context.includes(2) && (perfStats.matrix = PerfTimer.logTime(function() {
                            var matrix = DsrToMatrixParser.parse(_this._context, dataShapeExprs, dataShape, dataView.metadata);
                            matrix && (dataView.matrix = matrix);
                        })), dataView;
                    }, DsrWithPivotedColumnsStrategy.prototype.readMetadata = function(isComplete) {
                        for (var metadata = {
                            columns: []
                        }, context = this._context, selects = context.selects, i = 0, len = selects.length; i < len; i++) {
                            var columnMetadata, select = selects[i];
                            select && (select.Kind !== dsr_2.SelectKind.Measure ? (select.Kind, dsr_2.SelectKind.Group, 
                            columnMetadata = context.createColumns(metadata.columns, i), 0 <= select.SecondaryDepth ? (this._secondarySelects.push(select), 
                            this._secondaryDepth = Math.max(this._secondaryDepth || 0, select.SecondaryDepth), 
                            this._seriesColumn = columnMetadata) : 0 === select.Depth && this._categoriesMetadata.push({
                                select: select,
                                column: columnMetadata
                            })) : (0 === select.Depth ? this._primaryMeasureSelects : this._measureSelects).push(select));
                        }
                        return isComplete || (metadata.segment = {}), metadata;
                    }, DsrWithPivotedColumnsStrategy.prototype.categorize = function(dataShape, metadata, primaryDynamicTopLevel) {
                        if (0 !== this._secondaryDepth || 0 === this._categoriesMetadata.length) return null;
                        var timer = PerfTimer.start("DSR.categorical(" + this._context.perfId + ", secondary)");
                        primaryDynamicTopLevel && (primaryDynamicTopLevel.Primary && (categoriesResult = primaryDynamicTopLevel.Primary.Groupings), 
                        primaryDynamicTopLevel.Secondary && (result = primaryDynamicTopLevel.Secondary.Groupings));
                        var secondaryDynamicTopLevel = dsr_2.DataShapeUtility.getTopLevelSecondaryDynamicMember(dataShape, primaryDynamicTopLevel), result = this.readColumnsFromSecondary(secondaryDynamicTopLevel, metadata, result, dataShape.Calculations), primaryDynamicTopLevel = dsr_2.DataShapeUtility.getTopLevelPrimaryDynamicMember(dataShape, primaryDynamicTopLevel), categoriesResult = this.readCategoriesAndValues(primaryDynamicTopLevel, metadata, result, categoriesResult), result = {
                            categories: categoriesResult.categories,
                            values: result
                        };
                        return void 0 !== categoriesResult.lastMergeIndex && (result.lastMergeIndex = categoriesResult.lastMergeIndex), 
                        timer(), result;
                    }, DsrWithPivotedColumnsStrategy.prototype.readColumnsFromSecondary = function(secondaryMember, metadata, secondaryAxisGroupings, aggregateCalculations) {
                        var context = this._context;
                        secondaryAxisGroupings && (source = context.readKeys(secondaryAxisGroupings, 0));
                        var values = [], allSelects = context.selects, measureSelectsLen = this._measureSelects.length, grouped = [], instances = secondaryMember.Instances, instanceCount = instances.length;
                        if (instanceCount) for (var i = 0; i < instanceCount; i++) {
                            var instance = instances[i], calcs = instance.Calculations, identity = void 0;
                            secondaryAxisGroupings && (identity = context.readIdentity(secondaryAxisGroupings, instance, 0));
                            for (var j = 0, jlen = this._secondarySelects.length; j < jlen; j++) {
                                for (var secondarySelect = this._secondarySelects[j], groupName = dsr_2.DataShapeUtility.findAndParseCalculation(calcs, secondarySelect.Value), valueColumns = [], k = 0; k < measureSelectsLen; k++) {
                                    var measureSelect = this._measureSelects[k], selectIndex = allSelects.indexOf(measureSelect), columnMetadata = context.createColumns(metadata.columns, selectIndex, !0);
                                    void 0 !== groupName && (columnMetadata.groupName = groupName);
                                    var column = {
                                        source: columnMetadata,
                                        values: []
                                    };
                                    identity && (column.identity = identity), this.addColumnAggregates(aggregateCalculations, measureSelect, column), 
                                    values.push(column), valueColumns.push(column);
                                }
                                grouped.push({
                                    identity: identity,
                                    name: groupName,
                                    values: valueColumns
                                });
                            }
                        } else {
                            for (k = 0; k < measureSelectsLen; k++) {
                                measureSelect = this._measureSelects[k], selectIndex = allSelects.indexOf(measureSelect), 
                                column = {
                                    source: columnMetadata = context.createColumns(metadata.columns, selectIndex),
                                    values: []
                                };
                                this.addColumnAggregates(aggregateCalculations, measureSelect, column), values.push(column);
                            }
                            grouped.push({
                                values: __spreadArray([], values || [])
                            });
                        }
                        for (var k = 0, klen = this._primaryMeasureSelects.length; k < klen; k++) {
                            var primaryMeasureSelect = this._primaryMeasureSelects[k], selectIndex = allSelects.indexOf(primaryMeasureSelect), column = {
                                source: columnMetadata = context.createColumns(metadata.columns, selectIndex),
                                values: []
                            };
                            values.push(column);
                        }
                        source && (values.identityFields = source);
                        var source = this._seriesColumn;
                        return source && (values.source = source), values.grouped = function() {
                            return grouped;
                        }, values;
                    }, DsrWithPivotedColumnsStrategy.prototype.addColumnAggregates = function(calcs, measureSelect, column) {
                        calcs && (measureSelect.Max && (column.max = dsr_2.DataShapeUtility.findAndParseCalculation(calcs, measureSelect.Max[0])), 
                        measureSelect.Min && (column.min = dsr_2.DataShapeUtility.findAndParseCalculation(calcs, measureSelect.Min[0])));
                    }, DsrWithPivotedColumnsStrategy.prototype.readCategoriesAndValues = function(primaryMember, metadata, values, primaryAxisGroupings) {
                        for (var identities, categories = [], categoryMetadata = this._categoriesMetadata, categoriesLength = categoryMetadata.length, context = this._context, i = 0; i < categoriesLength; i++) {
                            var category = {
                                source: categoryMetadata[i].column,
                                values: []
                            };
                            categories.push(category), primaryAxisGroupings && (category.identity = identities = identities || [], 
                            category.identityFields = context.readKeys(primaryAxisGroupings, 0));
                        }
                        for (var lastMergeIndex, instances = primaryMember.Instances, primaryMeasureSelects = this._primaryMeasureSelects, i = 0, len = instances.length; i < len; i++) {
                            var instance = instances[i];
                            1 === instance.RestartFlag && (lastMergeIndex = i);
                            for (var categoryIdx = 0; categoryIdx < categoriesLength; categoryIdx++) (category = categories[categoryIdx]).values.push(dsr_2.DataShapeUtility.findAndParseCalculation(instance.Calculations, categoryMetadata[categoryIdx].select.Value));
                            identities && identities.push(context.readIdentity(primaryAxisGroupings, instance, 0));
                            for (var intersections = instance.Intersections, valueIdx = 0, j = 0, jlen = intersections.length; j < jlen; j++) for (var calculations = intersections[j].Calculations, k = 0, klen = this._measureSelects.length; k < klen; k++) {
                                var value_1, measureSelect = this._measureSelects[k];
                                void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, measureSelect.Value)) && ((valueCol = values[valueIdx++]).values.push(value), 
                                measureSelect.Highlight && (valueCol.highlights || (valueCol.highlights = []), value_1 = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, measureSelect.Highlight.Value), 
                                valueCol.highlights.push(value_1)));
                            }
                            for (j = 0, jlen = primaryMeasureSelects.length; j < jlen; j++) {
                                var valueCol, value_2, measureSelect = primaryMeasureSelects[j], calculations = instance.Calculations, value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, measureSelect.Value);
                                (valueCol = values[valueIdx++]).values.push(value), measureSelect.Highlight && (valueCol.highlights || (valueCol.highlights = []), 
                                value_2 = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, measureSelect.Highlight.Value), 
                                valueCol.highlights.push(value_2));
                            }
                        }
                        return {
                            categories: categories,
                            lastMergeIndex: lastMergeIndex
                        };
                    }, DsrWithPivotedColumnsStrategy;
                }(), DsrReaderContext = function() {
                    function DsrReaderContext(targets, descriptor, perfId, aggregateReader) {
                        null != descriptor.Select || descriptor.ScriptVisualBinding, this.targets = targets, 
                        this.selects = descriptor.Select, this.scriptVisualBinding = descriptor.ScriptVisualBinding, 
                        this.perfId = perfId || "", this.stats = {
                            id: perfId || void 0,
                            primary: 0,
                            secondary: 0
                        }, this.aggregateReader = aggregateReader, this.cacheItems = [], this.selectIndexToColumnIndexMap = {};
                    }
                    return DsrReaderContext.prototype.createColumns = function(columns, selectIndex, dynamicFormatColumnMetadata) {
                        var columnMetadata = columns.length, columnMetadata = this.columnMetadata(selectIndex, columnMetadata, dynamicFormatColumnMetadata);
                        columns.push(columnMetadata);
                        dynamicFormatColumnMetadata = columns.length, dynamicFormatColumnMetadata = this.tryCreatingDynamicFormatColumnMetadata(selectIndex, dynamicFormatColumnMetadata, columnMetadata);
                        return dynamicFormatColumnMetadata && columns.push(dynamicFormatColumnMetadata), 
                        columnMetadata;
                    }, DsrReaderContext.prototype.columnMetadata = function(selectIndex, columnIndex, aggregates) {
                        var groupKeys = this.selects[selectIndex], column = {
                            displayName: "",
                            index: selectIndex
                        };
                        groupKeys.Format && (column.format = groupKeys.Format), column.type = dsr_2.DataShapeUtility.describeDataType(groupKeys.Type, groupKeys.DataCategory), 
                        groupKeys.Kind === dsr_2.SelectKind.Measure && (column.isMeasure = !0), aggregates || (aggregates = this.aggregateReader.compute(groupKeys, columnIndex)) && (column.aggregates = aggregates);
                        groupKeys = groupKeys.GroupKeys;
                        if (groupKeys) for (var identityExprs = column.identityExprs = [], _i = 0, groupKeys_1 = groupKeys; _i < groupKeys_1.length; _i++) {
                            var identityExpr = groupKeys_1[_i], identityExpr = this.convertKey(identityExpr);
                            identityExprs.push(identityExpr);
                        }
                        return this.selectIndexToColumnIndexMap[selectIndex] = columnIndex, column;
                    }, DsrReaderContext.prototype.tryCreatingDynamicFormatColumnMetadata = function(column, aggregates, columnMetadata, suppressAggregates) {
                        var fakeSelect = this.selects[column];
                        if (fakeSelect.DynamicFormat && fakeSelect.DynamicFormat.Format) {
                            column = {
                                displayName: "",
                                isMeasure: !0
                            };
                            columnMetadata.formatSource = {
                                formatString: column
                            };
                            fakeSelect = {
                                Kind: dsr_2.SelectKind.Measure,
                                Subtotal: _.map(fakeSelect.SubtotalDynamicFormat, function(subtotalDynamicFormat) {
                                    return subtotalDynamicFormat && subtotalDynamicFormat.Format;
                                })
                            };
                            return suppressAggregates || (aggregates = this.aggregateReader.compute(fakeSelect, aggregates)) && (column.aggregates = aggregates), 
                            this.actionHistory |= 2, column;
                        }
                    }, DsrReaderContext.prototype.readIdentity = function(axisGroupings, instance, depth) {
                        for (var keyExprs = this.readKeys(axisGroupings, depth), groupingKeys = axisGroupings[depth].Keys, i = 0, len = groupingKeys.length; i < len; i++) var exprToAdd = groupingKeys[i], exprToAdd = exprToAdd.Calc || this.selects[exprToAdd.Select].Value, exprToAdd = dsr_2.DataShapeUtility.findAndParseCalculationToSQExpr(instance.Calculations, exprToAdd), exprToAdd = data.SQExprBuilder.equal(keyExprs[i], exprToAdd), expr = data.SQExprBuilder.and(expr, exprToAdd);
                        return data.createDataViewScopeIdentity(expr);
                    }, DsrReaderContext.prototype.readKeys = function(axisGroupings, depth) {
                        var axisCache = this.getAxisCache(axisGroupings);
                        if (void 0 === (keys = axisCache.exprs[depth])) for (var keys = axisCache.exprs[depth] = [], groupingKeys = axisGroupings[depth].Keys, i = 0, len = groupingKeys.length; i < len; i++) keys.push(this.convertKey(groupingKeys[i]));
                        return keys;
                    }, DsrReaderContext.prototype.includes = function(kind) {
                        return EnumExtensions.hasFlag(this.targets, kind);
                    }, DsrReaderContext.prototype.getAxisCache = function(axisGroupings) {
                        for (var cacheItems = this.cacheItems, i = 0, len = cacheItems.length; i < len; i++) {
                            var item_1 = cacheItems[i];
                            if (item_1.axisGroupings === axisGroupings) return item_1;
                        }
                        var item = {
                            axisGroupings: axisGroupings,
                            exprs: []
                        };
                        return cacheItems.push(item), item;
                    }, DsrReaderContext.prototype.convertKey = function(source) {
                        source = source.Source;
                        return data.SQExprBuilder.columnRef(data.SQExprBuilder.entity(dsr.schemaName(source), source.Entity || source.EntitySet), source.Property);
                    }, DsrReaderContext;
                }(), DsrAggregateReader = function() {
                    function DsrAggregateReader(descriptor, dataShape) {
                        null != descriptor.Select || descriptor.ScriptVisualBinding, this.dataShape = dataShape;
                    }
                    return DsrAggregateReader.prototype.compute = function(select, columnIndex, forceCreate) {
                        var cache = this.cache;
                        if (cache) {
                            var aggregates = cache[columnIndex];
                            if (aggregates) return aggregates;
                        }
                        if (select) {
                            cache || (this.cache = cache = {});
                            aggregates = this.dataShape, aggregates = DsrAggregateReader.parseAggregates(select, aggregates.Calculations, aggregates.PrimaryHierarchy, 0);
                            return cache[columnIndex] = aggregates = forceCreate && !aggregates ? {} : aggregates;
                        }
                    }, DsrAggregateReader.prototype.updateAggregates = function(select, aggregates, name, value) {
                        aggregates = this.compute(select, aggregates, !0);
                        if (aggregates) return aggregates[name] = value, aggregates;
                    }, DsrAggregateReader;
                }();
                !function(DsrAggregateReader) {
                    DsrAggregateReader.parseAggregates = function(select, calculations, columnAggregates, depth) {
                        if (columnAggregates = !_.isEmpty(columnAggregates) && DsrToTreeStrategy.getFirstInstanceCalcs(columnAggregates[0]), 
                        !_.isEmpty(calculations) || !_.isEmpty(columnAggregates)) {
                            if (_.isEmpty(columnAggregates) || select.Subtotal && (id = select.Subtotal[depth]) && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(columnAggregates, id)) && ((result = result || {}).subtotal = value), 
                            !_.isEmpty(calculations)) {
                                select.Max && (id = select.Max[depth]) && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, id)) && ((result = result || {}).max = value), 
                                select.Min && (id = select.Min[depth]) && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, id)) && ((result = result || {}).min = value), 
                                select.Count && (id = select.Count[depth]) && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, id)) && ((result = result || {}).count = value);
                                columnAggregates = select.Aggregates;
                                if (columnAggregates) for (var _i = 0, columnAggregates_1 = columnAggregates; _i < columnAggregates_1.length; _i++) {
                                    var id, value, percentileDescriptor, result, percentileAggregate = columnAggregates_1[_i], aggregate = percentileAggregate.Aggregate;
                                    (id = percentileAggregate.Ids[depth]) && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, id)) && ((percentileDescriptor = aggregate.Percentile) ? (percentileAggregate = {
                                        k: percentileDescriptor.K,
                                        value: value
                                    }, percentileDescriptor.Exclusive && (percentileAggregate.exclusive = percentileDescriptor.Exclusive), 
                                    ((result = result || {}).percentiles || (result.percentiles = [])).push(percentileAggregate)) : aggregate.Average ? (result = result || {}).average = value : aggregate.Median && ((result = result || {}).median = value));
                                }
                                0 === depth && (id = select.Value) && void 0 !== (value = dsr_2.DataShapeUtility.findAndParseCalculation(calculations, id)) && ((result = result || {}).single = value);
                            }
                            return result;
                        }
                    };
                }(DsrAggregateReader = DsrAggregateReader || {});
                var TreeNodeValueAggregateComputer = function() {
                    function TreeNodeValueAggregateComputer(node, aggregateReader, selects, aggregators) {
                        this.node = node, this.aggregateReader = aggregateReader, this.selects = selects, 
                        this.aggregators = aggregators;
                    }
                    return TreeNodeValueAggregateComputer.create = function(node, context) {
                        for (var nodeValues = node.values, selects = context.selects, foundAggregate = !1, aggregators = {}, selectIndex = 0, columnIndex = 0, len = selects.length; selectIndex < len; selectIndex++) {
                            var select = selects[selectIndex];
                            if (select) if (select.Kind === dsr_2.SelectKind.Measure) {
                                var valueAggregators = void 0, nodeMeasureValue = void 0;
                                if (nodeValues && (nodeMeasureValue = nodeValues[columnIndex])) {
                                    if (valueAggregators = [], void 0 === nodeMeasureValue.min && valueAggregators.push(new dsr_2.MinValueAggregator()), 
                                    void 0 === nodeMeasureValue.max && valueAggregators.push(new dsr_2.MaxValueAggregator()), 
                                    0 === valueAggregators.length) {
                                        columnIndex++;
                                        continue;
                                    }
                                } else valueAggregators = [ new dsr_2.MinValueAggregator(), new dsr_2.MaxValueAggregator() ];
                                aggregators[columnIndex] = valueAggregators, foundAggregate = !0, columnIndex++, 
                                select.DynamicFormat && select.DynamicFormat.Format && columnIndex++;
                            } else columnIndex++;
                        }
                        if (foundAggregate) return new TreeNodeValueAggregateComputer(node, context.aggregateReader, context.selects, aggregators);
                    }, TreeNodeValueAggregateComputer.prototype.add = function(index, value) {
                        var aggregators = this.aggregators[index];
                        if (aggregators) for (var i = 0, len = aggregators.length; i < len; i++) aggregators[i].update(value);
                    }, TreeNodeValueAggregateComputer.prototype.complete = function(columns) {
                        for (var allAggregators = this.aggregators, node = this.node, aggregateReader = this.aggregateReader, selectIndex = 0, columnIndex = 0, len = this.selects.length; selectIndex < len; selectIndex++) {
                            var select = this.selects[selectIndex];
                            if (select) {
                                var aggregators = allAggregators[columnIndex];
                                if (aggregators) {
                                    for (var aggregatorIndex = 0, aggregatorsLength = aggregators.length; aggregatorIndex < aggregatorsLength; aggregatorIndex++) {
                                        var aggregatorName = aggregators[aggregatorIndex], aggregatedValue = aggregatorName.value();
                                        void 0 !== aggregatedValue && (aggregatorName = aggregatorName.name, ensureTreeNodeValues(node, columnIndex)[aggregatorName] = aggregatedValue, 
                                        columns[columnIndex].aggregates = aggregateReader.updateAggregates(select, columnIndex, aggregatorName, aggregatedValue));
                                    }
                                    columnIndex++, select && select.DynamicFormat && select.DynamicFormat.Format && columnIndex++;
                                } else columnIndex++;
                            }
                        }
                    }, TreeNodeValueAggregateComputer;
                }();
            }(reader.V1 || (reader.V1 = {}));
        })((dsr_2 = dsr = data.dsr || (data.dsr = {})).reader || (dsr_2.reader = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var dsr_3;
        (function(reader) {
            !function(V2) {
                V2.createDsrParser = function(dsr, dsrParserContext) {
                    return new DsrParser(dsr, dsrParserContext);
                };
                var DsrParser = function() {
                    function DsrParser(dsr, dsrParserContext) {
                        this.dsrParserContext = dsrParserContext, this.parser = new DataShapeParser(dsr.DS, this.dsrParserContext);
                    }
                    return DsrParser.prototype.dataShapes = function() {
                        return this.parser;
                    }, DsrParser.prototype.reset = function() {
                        this.parser.reset();
                    }, DsrParser.prototype.lockCache = function() {
                        this.dsrParserContext.locked || (this.dsrParserContext.locked = !0);
                    }, DsrParser;
                }(), BaseCalculationParser = function() {
                    function BaseCalculationParser(calculationContainerKind) {
                        this.calculationContainerKind = calculationContainerKind, this.nullValuesHandler = new NullValueEncodingHandler(), 
                        this.repeatedValuesHandler = new RepeatedValueEncodingHandler();
                    }
                    return BaseCalculationParser.prototype.initialize = function(calculationContainer, lastContainerCalculations) {
                        this.lastContainerCalculations = lastContainerCalculations, this.repeatedValuesHandler.initialize(calculationContainer && calculationContainer.R, lastContainerCalculations), 
                        this.nullValuesHandler.initialize(calculationContainer && calculationContainer.Ø);
                    }, BaseCalculationParser.prototype.getCurrentCalc = function(position, calcIt, calculationContainer, calcId) {
                        if (!calculationContainer) return this.calculationContainerKind, null;
                        var currentCalc = this.repeatedValuesHandler.tryRead(position);
                        return void 0 !== currentCalc || (void 0 !== (currentCalc = this.nullValuesHandler.tryRead(position)) ? this.lastContainerCalculations[position] = null : calcIt ? calcIt.next() && (currentCalc = calcIt.current(), 
                        this.lastContainerCalculations[position] = currentCalc) : (currentCalc = calculationContainer[calcId], 
                        this.lastContainerCalculations[position] = currentCalc = void 0 === currentCalc ? null : currentCalc)), 
                        currentCalc;
                    }, BaseCalculationParser;
                }(), CalculationContainerParser = function() {
                    function CalculationContainerParser(context, calcContainerKind, calcMetadataCacheKey) {
                        this.context = context, this.calcMetadataCacheKey = calcMetadataCacheKey, this.baseCalculationParser = new BaseCalculationParser(calcContainerKind);
                    }
                    return CalculationContainerParser.prototype.setCalculations = function(calculations) {
                        this.calculationContainer = calculations;
                        var calcMetadataCacheKey, calcMetadata, context = this.context;
                        context && (calcMetadataCacheKey = this.calcMetadataCacheKey, (calcMetadata = calculations.S) && (this.metadata = calcMetadata, 
                        calcMetadataCacheKey && !context.locked && (context.memberInstanceCalcMetadataCache[calcMetadataCacheKey] = calcMetadata), 
                        this.lastContainerCalculations || (this.lastContainerCalculations = new Array(calcMetadata.length))), 
                        context.instancesCalcCache[calcMetadataCacheKey] && (this.lastContainerCalculations = context.instancesCalcCache[calcMetadataCacheKey]), 
                        this.baseCalculationParser.initialize(calculations, this.lastContainerCalculations), 
                        calculations = calculations.C, (calcMetadata = this.getCalcMetadata()) ? this.calcMetadataIt = new reader.Iterator(calcMetadata) : this.calcMetadataIt && this.calcMetadataIt.reset(), 
                        0 < _.size(calculations) ? this.calcIt = new reader.Iterator(calculations) : this.calcIt = void 0);
                    }, CalculationContainerParser.prototype.restartCalcs = function() {
                        this.calcMetadataIt, this.calcIt, this.calcIt && this.calcIt.reset(), this.calcMetadataIt.reset(), 
                        delete this.dsrCalcValue;
                    }, CalculationContainerParser.prototype.nextCalc = function() {
                        var success = !1, calcMetadataIt = this.calcMetadataIt;
                        return calcMetadataIt && ((success = calcMetadataIt.next() || success) && (this.dsrCalcValue = this.baseCalculationParser.getCurrentCalc(calcMetadataIt.index(), this.calcIt, this.calculationContainer, this.calcId())), 
                        calcMetadataIt.done() && (this.context.instancesCalcCache[this.calcMetadataCacheKey] = this.lastContainerCalculations)), 
                        success || !1;
                    }, CalculationContainerParser.prototype.calcId = function() {
                        return this.metadata[this.calcMetadataIt.index()].N;
                    }, CalculationContainerParser.prototype.getCalcMetadata = function() {
                        return this.metadata || (this.metadata = this.context.memberInstanceCalcMetadataCache[this.calcMetadataCacheKey]);
                    }, CalculationContainerParser.prototype.calcValue = function() {
                        var calcMetadata = this.metadata[this.calcMetadataIt.index()], value = this.context.valueDictionaryHandler.getCalcValue(this.dsrCalcValue, calcMetadata.DN, calcMetadata.T);
                        return value = void 0 === value ? data.PrimitiveValueEncoding.parseOptimizedValue(this.dsrCalcValue, calcMetadata.T) : value;
                    }, CalculationContainerParser.prototype.calcValueAsExpr = function() {
                        this.dsrCalcValue;
                        var calcMetadata = this.calcMetadataIt.current(), calcValue = this.calcValue();
                        return this.context.valueDictionaryHandler.getCalcValueExpr(calcValue, this.dsrCalcValue, calcMetadata.DN, calcMetadata.T) || data.PrimitiveValueEncoding.parseOptimizedValueToSQExpr(calcValue, this.dsrCalcValue, calcMetadata.T);
                    }, CalculationContainerParser.prototype.calcCount = function() {
                        return this.calcMetadataIt ? this.calcMetadataIt.count() : this.calcIt ? this.calcIt.count() : 0;
                    }, CalculationContainerParser;
                }(), DataShapeParser = function(_super) {
                    function DataShapeParser(dataShapes, parserContext, rootDataShape) {
                        var _this = _super.call(this, parserContext, 1) || this;
                        return _this.parserContext = parserContext, _this.rootDataShape = rootDataShape, 
                        _this.it = new reader.Iterator(dataShapes), _this;
                    }
                    return __extends(DataShapeParser, _super), DataShapeParser.prototype.reset = function() {
                        this.it.reset();
                    }, DataShapeParser.prototype.index = function() {
                        return this.it.index();
                    }, DataShapeParser.prototype.count = function() {
                        return this.it.count();
                    }, DataShapeParser.prototype.next = function() {
                        this.primaryHierarchyParser = this.secondaryHierarchyParser = this.messageParser = void 0;
                        var _a, success = this.it.next();
                        return success && (_a = this.it.current(), this.setCalculations(_a), this.context && (this.context.valueDictionaryHandler = new dsr_3.ValueDictionaryHandler(_a.ValueDicts || (null === (_a = this.rootDataShape) || void 0 === _a ? void 0 : _a.ValueDicts)))), 
                        success;
                    }, DataShapeParser.prototype.id = function() {
                        return this.it.current().N;
                    }, DataShapeParser.prototype.nestedDataShapes = function() {
                        this.context.primarySynchronizedGroups;
                        var currentDataShape = this.it.current(), nestedDataShapes = currentDataShape.DS;
                        if (!_.isArray(nestedDataShapes) || nestedDataShapes.length < 1) return {};
                        for (var result = {}, this_3 = this, _i = 0, _a = this.context.primarySynchronizedGroups; _i < _a.length; _i++) !function(syncGroup) {
                            var dataShape = _.find(nestedDataShapes, function(dataShape) {
                                return dataShape.N === syncGroup.dataShapeId;
                            });
                            syncGroup.dataShapeId, dataShape && (result[dataShape.N] = new DataShapeParser([ dataShape ], syncGroup.context, this_3.rootDataShape || currentDataShape));
                        }(_a[_i]);
                        return result;
                    }, DataShapeParser.prototype.primaryHierarchy = function() {
                        var primaryHierarchy;
                        return this.parserContext, !this.primaryHierarchyParser && this.parserContext && (primaryHierarchy = this.it.current().PH, 
                        this.primaryHierarchyParser = primaryHierarchy && new DataMemberParser(primaryHierarchy, this.parserContext, 0, 0)), 
                        this.primaryHierarchyParser;
                    }, DataShapeParser.prototype.secondaryHierarchy = function() {
                        var secondaryHierarchy;
                        return this.parserContext, !this.secondaryHierarchyParser && this.parserContext && (secondaryHierarchy = this.it.current().SH, 
                        this.secondaryHierarchyParser = secondaryHierarchy && new DataMemberParser(secondaryHierarchy, this.parserContext, 1, 0)), 
                        this.secondaryHierarchyParser;
                    }, DataShapeParser.prototype.messages = function() {
                        return !this.messageParser && 0 < _.size(this.it.current().Msg) && (this.messageParser = new MessageParser(this.it.current().Msg)), 
                        this.messageParser;
                    }, DataShapeParser.prototype.hasRestartTokens = function() {
                        return 0 < _.size(this.restartTokens());
                    }, DataShapeParser.prototype.restartTokens = function() {
                        var current = this.it.current(), dw = current.DW;
                        return _.isEmpty(dw) ? current.RT : (dw.length, dw[0].RT);
                    }, DataShapeParser.prototype.complete = function() {
                        var current = this.it.current(), dw = current.DW;
                        return _.isEmpty(dw) ? current.IC : (dw.length, dw[0].IC);
                    }, DataShapeParser.prototype.hasAllData = function() {
                        return this.it.current().HAD;
                    }, DataShapeParser.prototype.limitsExceeded = function() {
                        return 0 < _.size(this.it.current().DLEx);
                    }, DataShapeParser.prototype.limits = function() {
                        return this.limitsParser || (this.limitsParser = new LimitsParser(this.it.current().DLEx)), 
                        this.limitsParser;
                    }, DataShapeParser;
                }(CalculationContainerParser), LimitsParser = function() {
                    function LimitsParser(limits) {
                        this.it = new reader.Iterator(limits);
                    }
                    return LimitsParser.prototype.next = function() {
                        return this.it.next();
                    }, LimitsParser.prototype.id = function() {
                        return this.it.current().N;
                    }, LimitsParser.prototype.count = function() {
                        return this.it.count();
                    }, LimitsParser;
                }(), MessageParser = function() {
                    function MessageParser(dataShapeMessage) {
                        this.it = new reader.Iterator(dataShapeMessage);
                    }
                    return MessageParser.prototype.next = function() {
                        return this.it.next();
                    }, MessageParser.prototype.code = function() {
                        return this.it.current().Code;
                    }, MessageParser.prototype.severity = function() {
                        return this.it.current().Severity;
                    }, MessageParser.prototype.dsrMessage = function() {
                        return new dsr_3.DsrMessage(this.it.current());
                    }, MessageParser;
                }(), DataMemberParser = function() {
                    function DataMemberParser(dataMembers, context, hierarchy, depth) {
                        this.context = context, this.hierarchy = hierarchy, this.depth = depth, this.it = new reader.Iterator(dataMembers);
                    }
                    return DataMemberParser.prototype.count = function() {
                        return this.it.count();
                    }, DataMemberParser.prototype.reset = function() {
                        this.it.reset(), this.dataMemberId = void 0;
                    }, DataMemberParser.prototype.next = function() {
                        this.instancesParser && (this.instancesParser = void 0), this.dataMemberId && (this.dataMemberId = void 0);
                        var result = this.it.next();
                        if (result) {
                            var keys = this.dataMemberIdCache();
                            if (0 < _.size(keys)) for (var current = this.it.current(), _i = 0, _a = keys[this.depth]; _i < _a.length; _i++) {
                                var possibleId = _a[_i];
                                current[possibleId] && (this.dataMemberId = possibleId);
                            }
                            void 0 === this.dataMemberId && (keys = Object.keys(this.it.current()), 1 === _.size(keys) && (this.dataMemberId = keys[0]));
                        }
                        return result;
                    }, DataMemberParser.prototype.id = function() {
                        return this.dataMemberId;
                    }, DataMemberParser.prototype.dataMemberIdCache = function() {
                        return 0 === this.hierarchy ? this.context.primaryDataMemberIdCache : this.context.secondaryDataMemberIdCache;
                    }, DataMemberParser.prototype.instances = function() {
                        var instances;
                        return this.instancesParser || (instances = this.it.current()[this.dataMemberId], 
                        this.instancesParser = instances && new DataMemberInstanceParser(instances, this.context, this.id(), this.hierarchy, this.depth)), 
                        this.instancesParser;
                    }, DataMemberParser;
                }(), DataMemberInstanceParser = function(_super) {
                    function DataMemberInstanceParser(instances, _this, parentDataMemberId, hierarchy, depth) {
                        _this = _super.call(this, _this, 2, parentDataMemberId) || this;
                        return _this.parentDataMemberId = parentDataMemberId, _this.hierarchy = hierarchy, 
                        _this.depth = depth, _this.it = new reader.Iterator(instances), _this;
                    }
                    return __extends(DataMemberInstanceParser, _super), DataMemberInstanceParser.prototype.next = function() {
                        var instance, success = this.it.next();
                        return success && (instance = this.it.current(), this.context.locked || instance.M || 1 !== this.hierarchy || this.context.secondaryLeafDataMemberId.push(this.parentDataMemberId), 
                        this.setCalculations(instance), this.dataMemberIt = void 0, this.intersectionParserDirty = !0, 
                        1 !== this.hierarchy || instance.Intersections), success;
                    }, DataMemberInstanceParser.prototype.count = function() {
                        return this.it.count();
                    }, DataMemberInstanceParser.prototype.currentIndex = function() {
                        return this.it.index();
                    }, DataMemberInstanceParser.prototype.intersections = function() {
                        if (this.intersectionParser) return this.intersectionParserDirty && (this.intersectionParserDirty = !1, 
                        this.intersectionParser.reset(this.it.current().X)), this.intersectionParser;
                        this.intersectionParserDirty = !1;
                        var intersections = this.it.current().X;
                        return this.intersectionParser = intersections && new IntersectionsParser(intersections, this.context, this.parentDataMemberId);
                    }, DataMemberInstanceParser.prototype.restartFlagKind = function() {
                        return this.it.current().RF;
                    }, DataMemberInstanceParser.prototype.restartKind = function() {
                        return this.it.current().RK;
                    }, DataMemberInstanceParser.prototype.members = function() {
                        var nestedMembers;
                        return this.dataMemberIt || (nestedMembers = this.it.current().M, this.dataMemberIt = nestedMembers && new DataMemberParser(nestedMembers, this.context, this.hierarchy, this.depth + 1)), 
                        this.dataMemberIt;
                    }, DataMemberInstanceParser;
                }(CalculationContainerParser), IntersectionsParser = function() {
                    function IntersectionsParser(primaryDataMemberMetadata, context, parentDataMemberId) {
                        this.context = context, this.parentDataMemberId = parentDataMemberId, this.it = new reader.Iterator(null), 
                        this.reset(primaryDataMemberMetadata), this.baseCalculationParser = new BaseCalculationParser(3), 
                        this.intersectionMeasureCount = _.size(this.context.intersectionMeasureToSelectIndex), 
                        this.expectedIntersectionCount = _.size(this.context.secondaryLeafDataMemberId);
                        primaryDataMemberMetadata = context.dataMemberIdToMetadata[parentDataMemberId];
                        this.primaryMemberIsGroupMember = 1 === primaryDataMemberMetadata.kind, this.primaryDataMemberDepth = primaryDataMemberMetadata.depth, 
                        context.intersectionCalcMetadataCache, this.calcMetadataCache = context.intersectionCalcMetadataCache[parentDataMemberId], 
                        this.calcMetadataCache || context.locked || (this.calcMetadataCache = context.intersectionCalcMetadataCache[parentDataMemberId] = new Array(this.expectedIntersectionCount));
                    }
                    return IntersectionsParser.prototype.reset = function(intersections) {
                        this.it.reset(intersections), this.logicalIntersectionIndex = -1, this.physicalIntersectionIndex = -1, 
                        this.hasIntersectionElements = 0 < intersections.length;
                    }, IntersectionsParser.prototype.next = function() {
                        if (this.resetCalcIt(), this.logicalIntersectionIndex++, this.logicalIntersectionIndex >= this.expectedIntersectionCount) return !1;
                        if (this.setIntersectionId(), this.it.count() === this.expectedIntersectionCount) {
                            var intersection = this.it.next();
                            return intersection && this.initialize(this.it.current()), intersection;
                        }
                        if (this.hasIntersectionElements) {
                            intersection = void 0;
                            if ((0 === this.logicalIntersectionIndex || this.physicalIntersectionIndex < this.logicalIntersectionIndex) && this.it.next() && ((intersection = this.it.current()).I || 0 === this.logicalIntersectionIndex ? this.physicalIntersectionIndex = intersection.I || 0 : this.physicalIntersectionIndex++), 
                            this.physicalIntersectionIndex === this.logicalIntersectionIndex) return intersection = intersection || this.it.current(), 
                            this.initialize(intersection), !0;
                        }
                        return this.initialize(), !0;
                    }, IntersectionsParser.prototype.setIntersectionId = function() {
                        this.intersectionId = this.parentDataMemberId + this.context.secondaryLeafDataMemberId[this.logicalIntersectionIndex];
                    }, IntersectionsParser.prototype.resetCalcIt = function(calculations) {
                        calculations = calculations && calculations.C;
                        this.currentCalcIndex = -1, this.currentCalc = void 0, this.calcIt = calculations ? new reader.Iterator(calculations) : void 0;
                    }, IntersectionsParser.prototype.initialize = function(container) {
                        if (this.logicalIntersectionIndex, this.resetCalcIt(container), container) {
                            var metadata_3 = container.S;
                            if (metadata_3 && !this.context.locked) {
                                void 0 === this.intersectionCalcCount && (this.intersectionCalcCount = metadata_3.length), 
                                this.calcMetadataCache[this.logicalIntersectionIndex], this.calcMetadataCache[this.logicalIntersectionIndex] = metadata_3;
                                for (var calcMetadataCache = this.context.calcIdToCalcMetadata, _i = 0, metadata_2 = metadata_3; _i < metadata_2.length; _i++) calcMetadataCache[metadata_2[_i].N] = metadata_3;
                            }
                        }
                        this.calculationContainer = container;
                        var metadata = this.context.lastIntersectionCalcCache[this.intersectionId];
                        !metadata && this.intersectionId && (metadata = this.context.lastIntersectionCalcCache[this.intersectionId] = new Array(this.intersectionCalcCount)), 
                        this.baseCalculationParser.initialize(container, metadata);
                        metadata = this.getCalcMetadata();
                        metadata && (this.currentCalcMetadata = metadata, void 0 === this.intersectionCalcCount && (0 < this.intersectionMeasureCount ? this.intersectionCalcCount = this.currentCalcMetadata.length : this.intersectionCalcCount = 0));
                    }, IntersectionsParser.prototype.restartCalcs = function() {
                        this.calcIt && this.calcIt.reset(), this.currentCalcIndex = -1, delete this.currentCalc;
                    }, IntersectionsParser.prototype.nextCalc = function() {
                        var currentCalcIndex = ++this.currentCalcIndex;
                        return currentCalcIndex < this.intersectionCalcCount ? (this.currentCalc = this.baseCalculationParser.getCurrentCalc(currentCalcIndex, this.calcIt, this.calculationContainer, this.calcId()), 
                        !0) : (this.currentCalc = void 0, !1);
                    }, IntersectionsParser.prototype.calcId = function() {
                        return this.currentCalcMetadata[this.currentCalcIndex].N;
                    }, IntersectionsParser.prototype.getCalcMetadata = function() {
                        this.logicalIntersectionIndex;
                        var expectedCalcId, metadata = this.calcMetadataCache[this.logicalIntersectionIndex];
                        return metadata || this.context.locked || (expectedCalcId = this.getExpectedCalcId()) && (metadata = this.calcMetadataCache[this.logicalIntersectionIndex] = this.context.calcIdToCalcMetadata[expectedCalcId]), 
                        metadata;
                    }, IntersectionsParser.prototype.getExpectedCalcId = function() {
                        if (0 !== this.intersectionMeasureCount) {
                            var aggregateIndex = this.context, secondaryDataMember = aggregateIndex.dataMemberIdToMetadata[aggregateIndex.secondaryLeafDataMemberId[this.logicalIntersectionIndex]], secondaryMemberIsGroupMember = 1 === secondaryDataMember.kind, select = this.currentCalcIndex < 0 ? aggregateIndex.intersectionMeasureToSelectIndex[0] : aggregateIndex.intersectionMeasureToSelectIndex[this.currentCalcIndex], select = aggregateIndex.selects[select];
                            if (secondaryMemberIsGroupMember && this.primaryMemberIsGroupMember) return select.Value;
                            if (select.Subtotal) {
                                aggregateIndex = dsr_3.DataShapeUtility.computeAggIdx(this.primaryDataMemberDepth, secondaryDataMember.depth, aggregateIndex.maxPrimaryDepth, aggregateIndex.maxSecondaryDepth);
                                return select.Subtotal.length > aggregateIndex && select.Subtotal[aggregateIndex];
                            }
                        }
                    }, IntersectionsParser.prototype.calcValue = function() {
                        return void 0 !== this.currentCalc && null !== this.currentCalc ? this.parseCalcValue(this.currentCalc) : null;
                    }, IntersectionsParser.prototype.parseCalcValue = function(value) {
                        var calcMetadata = this.calcMetadataCache[this.logicalIntersectionIndex][this.currentCalcIndex], parsedValue = this.context.valueDictionaryHandler.getCalcValue(value, calcMetadata.DN, calcMetadata.T);
                        return parsedValue = void 0 === parsedValue ? data.PrimitiveValueEncoding.parseOptimizedValue(value, calcMetadata.T) : parsedValue;
                    }, IntersectionsParser.prototype.calcValueAsExpr = function() {
                        if (void 0 !== this.currentCalc) return this.parseCalcValueExpr(this.currentCalc, this.calcValue());
                        if (this.it.index() !== this.logicalIntersectionIndex) return data.SQExprBuilder.nullConstant();
                        var calcValue = this.calcValue();
                        return null === calcValue ? data.SQExprBuilder.nullConstant() : this.parseCalcValueExpr(this.it.current()[this.calcId()], calcValue);
                    }, IntersectionsParser.prototype.parseCalcValueExpr = function(value, calcValue) {
                        var calcMetadata = this.calcMetadataCache[this.logicalIntersectionIndex][this.currentCalcIndex], parsedValueExpr = this.context.valueDictionaryHandler.getCalcValueExpr(calcValue, value, calcMetadata.DN, calcMetadata.T);
                        return parsedValueExpr = void 0 === parsedValueExpr ? data.PrimitiveValueEncoding.parseOptimizedValueToSQExpr(calcValue, value, calcMetadata.T) : parsedValueExpr;
                    }, IntersectionsParser.prototype.calcCount = function() {
                        return this.calcIt ? this.calcIt.count() : 0;
                    }, IntersectionsParser;
                }(), BitSequenceHandler = function() {
                    function BitSequenceHandler() {}
                    return BitSequenceHandler.prototype.initialize = function(value) {
                        this.value = value, this.overflowValue = BitSequenceHandler.MaxSignedNumberFor32Bits < value ? getLast33BitsIn64Bits(value) : 0;
                    }, BitSequenceHandler.prototype.hasBitAtPosition = function(position) {
                        if (52 < position) return !1;
                        if (0 < this.value) {
                            var bitPositionMask = 0, value = this.value;
                            return position < 31 ? bitPositionMask = 1 << position : (bitPositionMask = 1 << position - 31, 
                            value = this.overflowValue), 0 < (value & bitPositionMask);
                        }
                    }, BitSequenceHandler.MaxSignedNumberFor32Bits = Math.pow(2, 31) - 1, BitSequenceHandler;
                }();
                V2.BitSequenceHandler = BitSequenceHandler;
                var NullValueEncodingHandler = function() {
                    function NullValueEncodingHandler() {
                        this.bitSequenceHandler = new BitSequenceHandler();
                    }
                    return NullValueEncodingHandler.prototype.initialize = function(value) {
                        this.bitSequenceHandler.initialize(value);
                    }, NullValueEncodingHandler.prototype.tryRead = function(position) {
                        if (this.bitSequenceHandler.hasBitAtPosition(position)) return null;
                    }, NullValueEncodingHandler;
                }(), RepeatedValueEncodingHandler = function() {
                    function RepeatedValueEncodingHandler() {
                        this.bitSequenceHandler = new BitSequenceHandler();
                    }
                    return RepeatedValueEncodingHandler.prototype.initialize = function(value, lastContainerCalculations) {
                        this.bitSequenceHandler.initialize(value), this.lastContainerCalculations = lastContainerCalculations;
                    }, RepeatedValueEncodingHandler.prototype.tryRead = function(position) {
                        if (this.bitSequenceHandler.hasBitAtPosition(position)) return this.lastContainerCalculations[position];
                    }, RepeatedValueEncodingHandler;
                }(), MAX_BITPOSITION_FOR_BITOPERANDS = 31;
                function getLast33BitsIn64Bits(significantBits) {
                    significantBits = significantBits.toString(2), significantBits = significantBits.substr(0, significantBits.length - MAX_BITPOSITION_FOR_BITOPERANDS);
                    return parseInt(significantBits, 2);
                }
                V2.getLast33BitsIn64Bits = getLast33BitsIn64Bits;
            }(reader.V2 || (reader.V2 = {}));
        })((dsr_3 = data.dsr || (data.dsr = {})).reader || (dsr_3.reader = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var JsonComparer = jsCommon.JsonComparer;
            dsr.http2MaxConnections = 20;
            var ExecuteSemanticQueryBatcher = function() {
                function ExecuteSemanticQueryBatcher(preferredMaxBatches, onBatchExecute, timeoutService, telemetryV2Enabled, addVisualIdToQueryDataAsHttpBodyId, immediateQuery) {
                    this.addVisualIdToQueryDataAsHttpBodyId = addVisualIdToQueryDataAsHttpBodyId, this.immediateQuery = immediateQuery, 
                    this.preferredMaxBatchesConfigured = 0 < preferredMaxBatches, this.maxBatches = this.preferredMaxBatchesConfigured ? preferredMaxBatches : 4, 
                    this.queryExecuteCallback = onBatchExecute, this.pending = [], this.timeoutService = timeoutService, 
                    this.telemetryV2Enabled = telemetryV2Enabled, this.useHttp2QueryDataEnabled = jsCommon.BrowserUtils.browserSupportsHttp2();
                }
                return ExecuteSemanticQueryBatcher.prototype.enqueue = function(queuedQuery) {
                    var delay, _this = this;
                    if (!function(pending, index) {
                        var queryOptions = index.options;
                        if (1 === queryOptions.executionType) {
                            queryOptions.queryId;
                            index = _.findIndex(pending, function(x) {
                                return x.options.queryId === queryOptions.queryId;
                            });
                            if (-1 < index) return pending[index].execution.rejected(), !0;
                        }
                        return !1;
                    }(this.pending, queuedQuery)) return this.pending.push(queuedQuery), this.currentBatchDeferred || (this.currentBatchDeferred = queuedQuery.options.telemetryV2Enabled ? new powerbi.PbiDeferred(!0) : $.Deferred(), 
                    delay = this.immediateQuery ? -1 : 0, this.timeoutService.setTimeout(delay, this.telemetryV2Enabled).promise.then(function() {
                        var batches = _this.createBatches();
                        _this.clearPending(), _this.queryExecuteCallback(batches), _this.currentBatchDeferred.resolve(), 
                        _this.currentBatchDeferred = void 0;
                    })), queuedQuery.options.telemetryV2Enabled ? this.currentBatchDeferred.promise : this.currentBatchDeferred.promise();
                }, ExecuteSemanticQueryBatcher.prototype.clearPending = function() {
                    this.pending = [];
                }, ExecuteSemanticQueryBatcher.prototype.setMaxBatches = function(max) {
                    this.maxBatches = max, this.preferredMaxBatchesConfigured = 0 < max;
                }, ExecuteSemanticQueryBatcher.prototype.createBatches = function() {
                    var batches = [], queriesByDataSource = this.sortQueriesByDataSource(), maxBatches = this.maxBatches, useHttp2 = !1;
                    if (!this.preferredMaxBatchesConfigured && this.useHttp2QueryDataEnabled && (_.some(queriesByDataSource, function(q) {
                        return _.some(q.dataSources, function(ds) {
                            return ds.isLimitedParallelQueryModel;
                        });
                    }) || (maxBatches = dsr.http2MaxConnections, useHttp2 = !0)), queriesByDataSource.length >= maxBatches) for (var i = 0, ilen = queriesByDataSource.length; i < ilen; ++i) batches.push(this.createBatchFromDataSourceGroup(queriesByDataSource[i])); else batches = this.splitDataSourcesIntoBatches(queriesByDataSource, maxBatches);
                    return useHttp2 && _.forEach(batches, function(b) {
                        return b.useSynchronous = !0;
                    }), batches;
                }, ExecuteSemanticQueryBatcher.prototype.sortQueriesByDataSource = function() {
                    var queriesById, _this = this;
                    queriesById = this.addVisualIdToQueryDataAsHttpBodyId ? _.groupBy(this.pending, function(_c) {
                        return null === (_c = null === (_c = null === (_c = null == (_c = _c.options) ? void 0 : _c.applicationContext) || void 0 === _c ? void 0 : _c.Sources) || void 0 === _c ? void 0 : _c[0]) || void 0 === _c ? void 0 : _c.VisualId;
                    }) : {
                        "": this.pending
                    };
                    var allGroups = [];
                    return _.forEach(queriesById, function(queries) {
                        var dataSourceGroups = [];
                        _.forEach(queries, function(newDataSourceGroup) {
                            var dataSourceGroup;
                            !function(query) {
                                if (dsr.isRejectableQueuedExecution(query)) return query.execution.rejected();
                                return !1;
                            }(newDataSourceGroup) && ((dataSourceGroup = _this.findDataSourceGroup(newDataSourceGroup.options.dataSources, dataSourceGroups, newDataSourceGroup.options.cacheResponseOnServer)) ? dataSourceGroup.queuedExecutions.push(newDataSourceGroup) : (newDataSourceGroup = {
                                dataSources: newDataSourceGroup.options.dataSources,
                                queuedExecutions: [ newDataSourceGroup ],
                                cacheResponseOnServer: newDataSourceGroup.options.cacheResponseOnServer,
                                cacheOptions: newDataSourceGroup.options.cacheOptions
                            }, dataSourceGroups.push(newDataSourceGroup)));
                        }), allGroups.push.apply(allGroups, dataSourceGroups);
                    }), allGroups;
                }, ExecuteSemanticQueryBatcher.prototype.findDataSourceGroup = function(dataSources, dataSourceGroups, shouldCache) {
                    for (var i = 0, ilen = dataSourceGroups.length; i < ilen; ++i) {
                        var dataSourceGroup = dataSourceGroups[i];
                        if (JsonComparer.equals(dataSources, dataSourceGroup.dataSources) && dataSourceGroup.cacheResponseOnServer === shouldCache) return dataSourceGroup;
                    }
                    return null;
                }, ExecuteSemanticQueryBatcher.prototype.createBatchFromDataSourceGroup = function(dataSourceGroup) {
                    for (var queryOptions = [], cancelQueryOptions = [], promises = [], queuedExecutions = dataSourceGroup.queuedExecutions, enqueueActivities = [], queryActivities = [], i = 0, ilen = queuedExecutions.length; i < ilen; ++i) {
                        var query = queuedExecutions[i], queryOpts = queuedExecutions[i].options, enqueueActivity = queuedExecutions[i].enqueueActivity;
                        dsr.isRejectableQueuedExecution(query) ? (queryOptions.push(queryOpts), promises.push(query.deferred), 
                        enqueueActivity && enqueueActivities.push(enqueueActivity), queuedExecutions[i].queryActivity && queryActivities.push(queuedExecutions[i].queryActivity)) : (queryOpts.executionType, 
                        cancelQueryOptions.push(queryOpts));
                    }
                    return {
                        dataSources: dataSourceGroup.dataSources,
                        queryOptions: queryOptions,
                        cancelQueryOptions: cancelQueryOptions,
                        promises: promises,
                        cacheOptions: dataSourceGroup.cacheOptions,
                        cacheResponseOnServer: dataSourceGroup.cacheResponseOnServer,
                        enqueueActivities: enqueueActivities,
                        queryActivities: queryActivities
                    };
                }, ExecuteSemanticQueryBatcher.prototype.splitDataSourcesIntoBatches = function(dataSourceGroups, maxBatches) {
                    for (var batches = [], i = 0, ilen = dataSourceGroups.length; i < ilen; ++i) batches.push(this.createBatchFromDataSourceGroup(dataSourceGroups[i]));
                    return batches = this.splitBatches(batches, maxBatches);
                }, ExecuteSemanticQueryBatcher.prototype.splitBatches = function(initialBatches, maxBatches) {
                    for (var batches = initialBatches.slice(); batches.length < maxBatches; ) {
                        for (var splitCandidate = void 0, i = 0, ilen = batches.length; i < ilen; ++i) {
                            var batch = batches[i];
                            1 < batch.queryOptions.length && (!splitCandidate || splitCandidate.queryOptions.length < batch.queryOptions.length) && (splitCandidate = batch);
                        }
                        if (!splitCandidate) return batches;
                        batches.push(this.splitBatch(splitCandidate)), splitCandidate = null;
                    }
                    return batches;
                }, ExecuteSemanticQueryBatcher.prototype.splitBatch = function(batch) {
                    var cancelQueryOptions = batch.queryOptions.length, queryOptions = batch.queryOptions.splice(cancelQueryOptions / 2), promises = batch.promises.splice(cancelQueryOptions / 2), enqueueActivities = batch.enqueueActivities.splice(cancelQueryOptions / 2), queryActivities = batch.queryActivities.splice(cancelQueryOptions / 2), cancelQueryCount = batch.cancelQueryOptions.length, cancelQueryOptions = [];
                    return cancelQueryCount && (cancelQueryOptions = batch.cancelQueryOptions.splice(cancelQueryCount / 2)), 
                    {
                        dataSources: batch.dataSources,
                        queryOptions: queryOptions,
                        promises: promises,
                        cacheOptions: batch.cacheOptions,
                        cacheResponseOnServer: batch.cacheResponseOnServer,
                        cancelQueryOptions: cancelQueryOptions,
                        enqueueActivities: enqueueActivities,
                        queryActivities: queryActivities
                    };
                }, ExecuteSemanticQueryBatcher;
            }();
            dsr.ExecuteSemanticQueryBatcher = ExecuteSemanticQueryBatcher, dsr.createBatchFromQueries = function(queries, dataSources, cacheOptions, cacheResponseOnServer, useSynchronous) {
                return {
                    queryOptions: _.map(queries, function(query) {
                        return {
                            command: query,
                            dataSources: dataSources
                        };
                    }),
                    cancelQueryOptions: [],
                    cacheOptions: cacheOptions,
                    dataSources: dataSources,
                    cacheResponseOnServer: cacheResponseOnServer,
                    promises: [],
                    enqueueActivities: [],
                    queryActivities: [],
                    useSynchronous: useSynchronous
                };
            };
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_10;
    (function(dsr) {
        var ClientErrorStrings = powerbi.ClientErrorStrings, DataQueryDataEventName = powerbi.telemetry.DataQueryDataEventName, HttpUtils = jsCommon.HttpUtils;
        dsr.createExecuteSemanticQueryProxyHttpCommunication = function(httpService, telemetryService, localeProvider, promiseFactory, uri, impersonationStateProvisioner, featureSwitches, directToMwcConnectionInfoService, _queryContextProvider) {
            return new ExecuteSemanticQueryProxyHttpCommunication(httpService, telemetryService, localeProvider, promiseFactory, uri, impersonationStateProvisioner, featureSwitches, directToMwcConnectionInfoService);
        }, dsr.executeSemanticQueryRequestVersion1 = "1.0.0";
        var ExecuteSemanticQueryProxyHttpCommunication = function() {
            function ExecuteSemanticQueryProxyHttpCommunication(httpService, telemetryService, localeProvider, promiseFactory, uri, impersonationStateProvider, featureSwitches, directToMwcConnectionInfoService) {
                this.httpService = httpService, this.impersonationStateProvider = impersonationStateProvider, 
                this.promiseFactory = promiseFactory, this.telemetryService = telemetryService, 
                this.localeProvider = localeProvider, this.uri = uri, this.featureSwitches = featureSwitches, 
                this.directToMwcConnectionInfoService = directToMwcConnectionInfoService;
            }
            return ExecuteSemanticQueryProxyHttpCommunication.prototype.execute = function(batch) {
                for (var requestOptions = this.httpService.powerbiRequestOptions(null, "ExecuteSemanticQuery", void 0, !0), executeSemanticQueryRequest = dsr.generateSemanticQueryRequest(batch, this.localeProvider, this.impersonationStateProvider), _i = 0, _f = batch.enqueueActivities; _i < _f.length; _i++) _f[_i].resolve();
                var uri = this.featureSwitches && this.featureSwitches().telemetryV2, addVisualIdToQueryDataAsHttpBodyId = this.featureSwitches && this.featureSwitches().addVisualIdToQueryDataAsHttpBodyId, httpPromiseWrapper = this.promiseFactory.defer(uri), cacheOptions = batch.cacheOptions, useSynchronous = batch.useSynchronous, dbName = batch.dataSources[0].dbName, forceRoutingThroughShared = !1;
                (!dbName || 1 < batch.dataSources.length) && (this.telemetryService.logEvent(powerbi.telemetry.Error, {
                    message: "A direct to MWC request was missing a dbName or more then one source was used in this request. This will cause issues routing with AutoPremium"
                }), forceRoutingThroughShared = !0);
                uri = this.uri;
                (useSynchronous || addVisualIdToQueryDataAsHttpBodyId) && (modelId = {}, useSynchronous && (modelId.synchronous = "true"), 
                !addVisualIdToQueryDataAsHttpBodyId || (retryAuthorizationHeaderOverride = null === (retryUri = null === (retryAuthorizationHeaderOverride = null === (retryUri = null === (retryAuthorizationHeaderOverride = null === (retryUri = batch.queryOptions) || void 0 === retryUri ? void 0 : retryUri[0]) || void 0 === retryAuthorizationHeaderOverride ? void 0 : retryAuthorizationHeaderOverride.applicationContext) || void 0 === retryUri ? void 0 : retryUri.Sources) || void 0 === retryAuthorizationHeaderOverride ? void 0 : retryAuthorizationHeaderOverride[0]) || void 0 === retryUri ? void 0 : retryUri.VisualId) && (modelId.$httpBodyId = retryAuthorizationHeaderOverride), 
                uri = jsCommon.UrlUtils.setQueryParameters(uri, modelId, !0));
                var mwcConnectionInfo, retryUri = uri, retryAuthorizationHeaderOverride = requestOptions.authorizationHeaderOverride, modelId = executeSemanticQueryRequest.modelId;
                return !(this.featureSwitches && this.featureSwitches().directToMwc && this.directToMwcConnectionInfoService) || !(mwcConnectionInfo = this.directToMwcConnectionInfoService.checkModelConnectionInfo(modelId)) || this.impersonationStateProvider && this.impersonationStateProvider.impersonating || forceRoutingThroughShared ? this.sendHttpRequest(uri, executeSemanticQueryRequest, requestOptions, httpPromiseWrapper, cacheOptions, batch.queryActivities, useSynchronous) : this.sendDirectToMwcRequestWithFallbackOnFailure(mwcConnectionInfo, uri, executeSemanticQueryRequest, requestOptions, httpPromiseWrapper, modelId, retryUri, retryAuthorizationHeaderOverride, cacheOptions, dbName, batch.queryActivities, useSynchronous), 
                httpPromiseWrapper.promise;
            }, ExecuteSemanticQueryProxyHttpCommunication.prototype.sendDirectToMwcRequestWithFallbackOnFailure = function(mwcConnectionInfo, uri, executeSemanticQueryRequest, requestOptions, httpPromiseWrapper, modelId, retryUri, retryAuthorizationHeaderOverride, cacheOptions, dbName, queryActivities, useSynchronous) {
                var _this = this;
                uri = mwcConnectionInfo.capacityUri + "query", requestOptions.mwcTokenAuthorizationModelId = modelId, 
                requestOptions.authorizationHeaderOverride = mwcConnectionInfo.mwcToken;
                var postEvent = this.telemetryService.startEvent(powerbi.telemetry.DataQueryData, {
                    endPoint: this.uri,
                    clientAndServerRequestIdMatch: !0,
                    synchronous: useSynchronous,
                    cacheOptions: cacheOptions
                });
                requestOptions.headers["x-ms-root-activity-id"] = requestOptions.headers.RequestId, 
                requestOptions.headers["x-ms-parent-activity-id"] = requestOptions.headers.RequestId, 
                requestOptions.headers["x-ms-workload-resource-moniker"] = dbName;
                for (var queryExecutingActivities = [], _i = 0, queryActivities_1 = queryActivities; _i < queryActivities_1.length; _i++) {
                    var queryExecutingActivity = queryActivities_1[_i].createChildActivity({
                        name: "Query Executing"
                    });
                    queryExecutingActivity && queryExecutingActivities.push(queryExecutingActivity);
                }
                this.httpService.post(uri, executeSemanticQueryRequest, requestOptions).then(function(result) {
                    _this.attachHttpMetadataToTelemetry(postEvent.event, result, uri), _this.attachCacheMetadataToTelemetryDirectToMwc(postEvent.event, result);
                    for (var _i = 0, queryExecutingActivities_1 = queryExecutingActivities; _i < queryExecutingActivities_1.length; _i++) {
                        var activity = queryExecutingActivities_1[_i];
                        activity.setProperty("requestId", result.requestId), activity.resolve();
                    }
                    postEvent.resolve(), httpPromiseWrapper.resolve(_this.attachHttpMetadataToResult(result));
                }, function(result) {
                    _this.attachHttpMetadataToTelemetry(postEvent.event, result, uri), _this.attachCacheMetadataToTelemetryDirectToMwc(postEvent.event, result);
                    for (var _i = 0, queryExecutingActivities_2 = queryExecutingActivities; _i < queryExecutingActivities_2.length; _i++) {
                        var activity = queryExecutingActivities_2[_i];
                        activity.setProperty("requestId", result.requestId), activity.reject();
                    }
                    postEvent.reject(powerbi.errorDetailsHelper.getTelemetryErrorDetails(result.error, result.status)), 
                    _this.directToMwcConnectionInfoService.removeModelConnectionInfo(modelId), requestOptions.authorizationHeaderOverride = retryAuthorizationHeaderOverride, 
                    requestOptions.mwcTokenAuthorizationModelId = null, _this.sendHttpRequest(retryUri, executeSemanticQueryRequest, requestOptions, httpPromiseWrapper, cacheOptions, queryActivities, useSynchronous);
                });
            }, ExecuteSemanticQueryProxyHttpCommunication.prototype.sendHttpRequest = function(uri, executeSemanticQueryRequest, requestOptions, httpPromiseWrapper, cacheOptions, queryActivities, useSynchronous) {
                for (var _this = this, postEvent = this.telemetryService.startEvent(powerbi.telemetry.DataQueryData, {
                    endPoint: this.uri,
                    clientAndServerRequestIdMatch: !0,
                    synchronous: useSynchronous,
                    cacheOptions: cacheOptions
                }), queryExecutingActivities = [], _i = 0, queryActivities_2 = queryActivities; _i < queryActivities_2.length; _i++) {
                    var queryExecutingActivity = queryActivities_2[_i].createChildActivity({
                        name: "Query Executing"
                    });
                    queryExecutingActivity && queryExecutingActivities.push(queryExecutingActivity);
                }
                this.httpService.post(uri, executeSemanticQueryRequest, requestOptions).then(function(result) {
                    _this.attachHttpMetadataToTelemetry(postEvent.event, result, uri);
                    for (var _i = 0, queryExecutingActivities_3 = queryExecutingActivities; _i < queryExecutingActivities_3.length; _i++) {
                        var activity = queryExecutingActivities_3[_i];
                        activity.setProperty("requestId", result.requestId), activity.resolve();
                    }
                    postEvent.resolve(), httpPromiseWrapper.resolve(_this.attachHttpMetadataToResult(result));
                }, function(result) {
                    _this.attachHttpMetadataToTelemetry(postEvent.event, result, uri);
                    for (var _i = 0, queryExecutingActivities_4 = queryExecutingActivities; _i < queryExecutingActivities_4.length; _i++) {
                        var activity = queryExecutingActivities_4[_i];
                        activity.setProperty("requestId", result.requestId), activity.reject();
                    }
                    postEvent.reject(powerbi.errorDetailsHelper.getTelemetryErrorDetails(result.error, result.status)), 
                    httpPromiseWrapper.reject(_this.attachHttpMetadataToResult(result));
                });
            }, ExecuteSemanticQueryProxyHttpCommunication.prototype.attachHttpMetadataToTelemetry = function(event, result, uri) {
                event.info.endPoint = uri, event.info.clientAndServerRequestIdMatch = HttpUtils.clientAndServerRequestIdMatch(result), 
                event.info.responseRequestId = HttpUtils.getResponseRequestId(result), event.info.requestId = result.requestId;
            }, ExecuteSemanticQueryProxyHttpCommunication.prototype.attachCacheMetadataToTelemetryDirectToMwc = function(event, result) {
                result.data.results && (event.info.fromCache = _.reduce(result.data.results, function(sum, current) {
                    return current.fromCache ? ++sum : sum;
                }, 0), event.info.resultCount = result.data.results.length);
            }, ExecuteSemanticQueryProxyHttpCommunication.prototype.attachHttpMetadataToResult = function(httpResult) {
                if (httpResult && httpResult.data) {
                    var queryResult = httpResult.data;
                    return queryResult.requestId = httpResult.responseRequestId || httpResult.requestId, 
                    queryResult.httpStatusCode = httpResult.status, queryResult;
                }
                return {
                    jobIds: null,
                    results: null,
                    requestId: httpResult.responseRequestId || httpResult.requestId,
                    httpStatusCode: httpResult.status
                };
            }, __decorate([ powerbi.MonitorWith(DataQueryDataEventName) ], ExecuteSemanticQueryProxyHttpCommunication.prototype, "execute", null), 
            ExecuteSemanticQueryProxyHttpCommunication;
        }(), ExecuteSemanticQueryProxy = function() {
            function ExecuteSemanticQueryProxy(host, communication, timeoutService, telemetryService, delayedQueryResultResolver, preferredMaxConnections, featureSwitches, queryContextProvider) {
                var _this = this;
                this.communication = communication, this.telemetryService = telemetryService, this.featureSwitches = featureSwitches, 
                this.queryContextProvider = queryContextProvider, this.promiseFactory = host.promiseFactory(), 
                this.delayedQueryResultResolver = delayedQueryResultResolver || new DefaultDelayedQueryResultResolver(), 
                this.batcher = new dsr.ExecuteSemanticQueryBatcher(null == preferredMaxConnections ? 0 : preferredMaxConnections, function(batches) {
                    for (var i = 0, ilen = batches.length; i < ilen; ++i) _this.executeBatch(batches[i]);
                }, timeoutService, featureSwitches && featureSwitches.telemetryV2, featureSwitches && featureSwitches.addVisualIdToQueryDataAsHttpBodyId, featureSwitches && featureSwitches.immediateQuery), 
                this.queryCache = dsr.createQueryCache(this.promiseFactory, this.telemetryService, function(_a, deferredPromise) {
                    var queuedExecution = {
                        options: _a,
                        deferred: deferredPromise.deferred,
                        execution: deferredPromise.promise,
                        enqueueActivity: _a.performanceActivity && _a.performanceActivity.isRunning() && _a.performanceActivity.createChildActivity({
                            name: "Query Pending"
                        }),
                        queryActivity: _a.performanceActivity
                    };
                    null !== (_a = _this.featureSwitches) && void 0 !== _a && _a.queryContext ? _this.setQueryContext(queuedExecution).then(function() {
                        return _this.enqueueExecution(queuedExecution);
                    }) : _this.enqueueExecution(queuedExecution);
                }, function(options, cancellationSource) {
                    _this.telemetryService.logEvent(powerbi.telemetry.DataQueryCancellation, {
                        source: cancellationSource
                    }), _this.enqueueExecution({
                        options: options,
                        enqueueActivity: options.performanceActivity && options.performanceActivity.isRunning() && options.performanceActivity.createChildActivity({
                            name: "Query Pending"
                        }),
                        queryActivity: options.performanceActivity
                    });
                }, featureSwitches);
            }
            return ExecuteSemanticQueryProxy.prototype.setQueryContext = function(queuedExecution) {
                var _a;
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var applicationContextSource, context;
                    return __generator(this, function(_b) {
                        switch (_b.label) {
                          case 0:
                            if (null === (_a = this.featureSwitches) || void 0 === _a || !_a.queryContext) return [ 2 ];
                            if (!this.queryContextProvider || !queuedExecution.options.applicationContext) return [ 2 ];
                            _.size(queuedExecution.options.applicationContext.Sources), applicationContextSource = queuedExecution.options.applicationContext.Sources[0], 
                            _b.label = 1;

                          case 1:
                            return _b.trys.push([ 1, 3, , 4 ]), [ 4, this.queryContextProvider.generateQueryContext() ];

                          case 2:
                            return (context = _b.sent()) ? (applicationContextSource.CustomProperties = __assign(__assign({}, applicationContextSource.CustomProperties), context), 
                            [ 3, 4 ]) : [ 2 ];

                          case 3:
                            return _b.sent(), [ 2 ];

                          case 4:
                            return [ 2 ];
                        }
                    });
                });
            }, ExecuteSemanticQueryProxy.prototype.enqueueExecution = function(queuedExecution) {
                this.isCommunicationStopped ? (this.pausedQueries = this.pausedQueries || [], this.pausedQueries.push(queuedExecution)) : this.batcher.enqueue(queuedExecution);
            }, ExecuteSemanticQueryProxy.prototype.execute = function(options) {
                if (!_.isEmpty(options.dataSources)) return this.queryCache.ensure(options);
                var deferred = this.promiseFactory.defer(options.telemetryV2Enabled), execution = powerbi.createRejectablePromise2(deferred);
                return deferred.resolve(options.command), execution;
            }, ExecuteSemanticQueryProxy.prototype.stopCommunication = function() {
                this.isCommunicationStopped = !0;
            }, ExecuteSemanticQueryProxy.prototype.resumeCommunication = function() {
                this.isCommunicationStopped = !1;
                var pausedQueries = this.pausedQueries;
                if (pausedQueries) {
                    for (var i = 0, length_1 = pausedQueries.length; i < length_1; i++) {
                        var queuedExecution = pausedQueries[i];
                        !function(query) {
                            if (isRejectableQueuedExecution(query)) return query.execution.pending();
                            return !1;
                        }(queuedExecution) || this.batcher.enqueue(queuedExecution);
                    }
                    this.pausedQueries = void 0;
                }
            }, ExecuteSemanticQueryProxy.prototype.cache = function() {
                return this.queryCache;
            }, ExecuteSemanticQueryProxy.prototype.setLocalCacheResult = function(options, dataAsObject) {
                this.queryCache.put(options.dataSources, options.command, dataAsObject);
            }, ExecuteSemanticQueryProxy.prototype.setPreferredMaxConnections = function(max) {
                this.batcher.setMaxBatches(max);
            }, ExecuteSemanticQueryProxy.prototype.executeBatch = function(batch) {
                var _this = this;
                batch.queryOptions.length, batch.promises.length;
                var promises = batch.promises;
                this.communication.execute(batch).then(function(result) {
                    return _this.onSuccess(result, promises);
                }, function(result) {
                    return _this.onError(result, promises);
                });
            }, ExecuteSemanticQueryProxy.prototype.onSuccess = function(result, executions) {
                this.rejectExecutionsForMissingJobs(result, executions);
                for (var jobIds = result.jobIds, jobIdToExecution = {}, i = 0, ilen = executions.length; i < ilen; ++i) jobIdToExecution[jobIds[i]] = executions[i];
                for (var results = result.results, i = 0, ilen = results.length; i < ilen; ++i) {
                    var queryResultWithJobId = results[i], queryResult = queryResultWithJobId.result, execution = jobIdToExecution[jobId = queryResultWithJobId.jobId];
                    delete jobIdToExecution[jobId];
                    var errorFactory, data_11 = queryResult.data, error = queryResult.error;
                    data_11 ? (errorFactory = {
                        descriptor: data_11.descriptor,
                        dsr: data_11.dsr,
                        metrics: data_11.metrics,
                        requestId: result.requestId,
                        timestamp: data_11.timestamp,
                        fromCache: data_11.fromCache
                    }, execution.resolve(errorFactory)) : error ? ((errorFactory = new powerbi.ServiceErrorToClientError(error)).requestId = result.requestId, 
                    execution.reject(errorFactory)) : queryResult.asyncResult && this.delayedQueryResultResolver.resolveDelayedQuery(queryResultWithJobId.jobId, result.requestId, execution);
                }
                if (!_.isEmpty(Object.keys(jobIdToExecution))) {
                    var jobId, error = new dsr.ExecuteSemanticQueryProxyError(result.requestId, "MissingJobResult");
                    for (jobId in jobIdToExecution) jobIdToExecution[jobId].reject(error);
                }
            }, ExecuteSemanticQueryProxy.prototype.rejectExecutionsForMissingJobs = function(result, executions) {
                var jobIdsCount = result.jobIds.length, executionsCount = executions.length;
                if (jobIdsCount < executionsCount) for (var error = new dsr.ExecuteSemanticQueryProxyError(result.requestId, "MissingJobId"), i = jobIdsCount; i < executionsCount; i++) executions[i].reject(error);
            }, ExecuteSemanticQueryProxy.prototype.onError = function(result, executions) {
                var clientError, errorSource, message, errorCode, culprit;
                (clientError = result && result.requestError ? new powerbi.ServiceErrorToClientError(result.requestError) : clientError) ? clientError.requestId = result.requestId : (errorSource = errorCode = message = void 0, 
                (culprit = result.error) && (message = culprit.message, errorCode = culprit.code, 
                null != (culprit = culprit["pbi.error"] && culprit["pbi.error"].exceptionCulprit) && (errorSource = powerbi.errorDetailsHelper.getErrorSource(culprit))), 
                clientError = result && null != result.httpStatusCode && result.requestId ? new powerbi.HttpClientError(result.httpStatusCode, result.requestId, errorCode, message, errorSource) : new ExecuteSemanticQueryUnknownError(result.requestId));
                for (var i = 0, len = executions.length; i < len; i++) executions[i].reject(clientError);
            }, ExecuteSemanticQueryProxy;
        }();
        dsr.ExecuteSemanticQueryProxy = ExecuteSemanticQueryProxy;
        var DefaultDelayedQueryResultResolver = function() {
            function DefaultDelayedQueryResultResolver() {}
            return DefaultDelayedQueryResultResolver.prototype.resolveDelayedQuery = function(jobId, requestId, deferred) {
                deferred.reject(new DelayedQueryTimeoutError(jobId));
            }, DefaultDelayedQueryResultResolver;
        }(), ExecuteSemanticQueryUnknownError = function(_super) {
            function ExecuteSemanticQueryUnknownError(requestId) {
                var _this = this;
                return (_this = _super.call(this, "ExecuteSemanticQueryUnknownError") || this).httpRequestId = requestId, 
                _this;
            }
            return __extends(ExecuteSemanticQueryUnknownError, _super), Object.defineProperty(ExecuteSemanticQueryUnknownError.prototype, "requestId", {
                get: function() {
                    return this.httpRequestId;
                },
                enumerable: !1,
                configurable: !0
            }), ExecuteSemanticQueryUnknownError.prototype.getDetails = function(details) {
                details = _super.prototype.getDetails.call(this, details);
                return details.debugErrorInfo = details.debugErrorInfo || [], details.debugErrorInfo.push({
                    errorInfoKey: ClientErrorStrings.HttpRequestId,
                    errorInfoValue: this.httpRequestId
                }), details;
            }, ExecuteSemanticQueryUnknownError;
        }(powerbi.UnknownClientError), DelayedQueryTimeoutError = function(_super) {
            function DelayedQueryTimeoutError(jobId) {
                var _this = this;
                return (_this = _super.call(this, "DelayedQueryTimeoutError") || this).jobId = jobId, 
                _this;
            }
            return __extends(DelayedQueryTimeoutError, _super), DelayedQueryTimeoutError.prototype.getDetails = function(details) {
                details = _super.prototype.getDetails.call(this, details);
                return details.debugErrorInfo = details.debugErrorInfo || [], details.debugErrorInfo.push({
                    errorInfoKey: ClientErrorStrings.JobId,
                    errorInfoValue: this.jobId
                }), details;
            }, DelayedQueryTimeoutError;
        }(powerbi.UnknownClientError);
        function isRejectableQueuedExecution(query) {
            return null != query && void 0 !== query.deferred && void 0 !== query.execution;
        }
        dsr.single = function(dataSources) {
            return dataSources.length, _.head(dataSources);
        }, dsr.isRejectableQueuedExecution = isRejectableQueuedExecution;
    })((data_10 = powerbi.data || (powerbi.data = {})).dsr || (data_10.dsr = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var ExecuteSemanticQueryProxyError = function() {
                function ExecuteSemanticQueryProxyError(requestId, errorCode) {
                    this.requestId = requestId, this.errorCode = errorCode;
                }
                return Object.defineProperty(ExecuteSemanticQueryProxyError.prototype, "code", {
                    get: function() {
                        return this.errorCode;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(ExecuteSemanticQueryProxyError.prototype, "ignorable", {
                    get: function() {
                        return !1;
                    },
                    enumerable: !1,
                    configurable: !0
                }), ExecuteSemanticQueryProxyError.prototype.getDetails = function(resourceProvider) {
                    return {
                        message: resourceProvider.get("ServiceError_CannotLoadVisual"),
                        displayableErrorInfo: [ {
                            errorInfoKey: resourceProvider.get("ServiceError_ExecuteSemanticQueryErrorKey"),
                            errorInfoValue: resourceProvider.get("ServiceError_ExecuteSemanticQueryErrorValue")
                        }, {
                            errorInfoKey: resourceProvider.get("AdditionalErrorInfo_ErrorText"),
                            errorInfoValue: this.code
                        } ],
                        debugErrorInfo: [ {
                            errorInfoKey: powerbi.ClientErrorStrings.ClientErrorCode,
                            errorInfoValue: this.code
                        } ]
                    };
                }, ExecuteSemanticQueryProxyError;
            }();
            dsr.ExecuteSemanticQueryProxyError = ExecuteSemanticQueryProxyError;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var DateExtensions = jsCommon.DateExtensions;
            dsr.parseExecutionEvents = function(executionEvents, rootId) {
                for (var result = [], activityParentMap = {}, _i = 0, executionEvents_1 = executionEvents; _i < executionEvents_1.length; _i++) {
                    var event_1 = executionEvents_1[_i], activity = {
                        id: event_1.Id,
                        name: event_1.Name,
                        component: event_1.Component,
                        pageHidden: void 0,
                        start: DateExtensions.parseIsoDate(event_1.Start).valueOf(),
                        end: event_1.End ? DateExtensions.parseIsoDate(event_1.End).valueOf() : void 0,
                        metrics: event_1.Metrics,
                        status: 1,
                        rootId: rootId,
                        parentId: event_1.ParentId
                    };
                    event_1.ParentId ? (activityParentMap[event_1.ParentId] || (activityParentMap[event_1.ParentId] = []), 
                    activityParentMap[event_1.ParentId].push(activity)) : result.push(activity);
                }
                return function setChildrenFromMap(activities, parentMap) {
                    for (var _i = 0, activities_1 = activities; _i < activities_1.length; _i++) {
                        var activity = activities_1[_i];
                        parentMap[activity.id] && (activity.children = parentMap[activity.id], setChildrenFromMap(activity.children, parentMap));
                    }
                }(result, activityParentMap), result;
            };
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var SQExprBuilder = powerbi.data.SQExprBuilder;
            !function(AggregatesQueryRewriter) {
                function addSelect(item, newExpr) {
                    item.query = item.query.addSelect(newExpr);
                    var newSelect = item.query.select(), selectIndex = data.SQExprUtils.indexOfNamedExpr(newSelect, newExpr), newSelect = newSelect[selectIndex];
                    return (item.additionalProjections || (item.additionalProjections = [])).push({
                        queryName: newSelect.name,
                        selector: null
                    }), {
                        index: selectIndex,
                        expr: newExpr,
                        queryName: newSelect.name
                    };
                }
                AggregatesQueryRewriter.run = function(item) {
                    var queryRewrites = item.mappings;
                    if (1 !== queryRewrites.length) return item;
                    var aggregatedColumns = function(mapping) {
                        var queryNames, roles;
                        if (data.CompiledDataViewMapping.visitMapping(mapping, {
                            visitRole: function(role) {
                                if (role.aggregates && !_.isEmpty(role.items)) {
                                    queryNames || (queryNames = {}, roles = []);
                                    for (var _i = 0, _a = role.items; _i < _a.length; _i++) {
                                        var item = _a[_i];
                                        queryNames[item.queryName] = role.aggregates;
                                    }
                                    roles.push(role);
                                }
                            }
                        }), queryNames) return {
                            queryNames: queryNames,
                            roles: roles
                        };
                    }(queryRewrites[0]);
                    return aggregatedColumns && (queryRewrites = (queryRewrites = item.queryRewrites) || (item.queryRewrites = []), 
                    function(item, aggregatedQueryNames, queryRewrites) {
                        var aggregatedColumn, originalSelect = item.query.select();
                        for (aggregatedColumn in aggregatedQueryNames) {
                            var selectExpr = originalSelect.withName(aggregatedColumn).expr, desiredAggregates = aggregatedQueryNames[aggregatedColumn], addedAggregates = {};
                            desiredAggregates.min && (addedAggregates.min = addSelect(item, SQExprBuilder.aggregate(selectExpr, 3))), 
                            desiredAggregates.max && (addedAggregates.max = addSelect(item, SQExprBuilder.aggregate(selectExpr, 4))), 
                            queryRewrites.push({
                                aggregatesAdded: {
                                    originalQueryRef: aggregatedColumn,
                                    aggregates: addedAggregates
                                }
                            });
                        }
                    }(item, aggregatedColumns.queryNames, queryRewrites), function(aggregatedColumns) {
                        for (var aggregatedQueryNames = aggregatedColumns.queryNames, _i = 0, _a = aggregatedColumns.roles; _i < _a.length; _i++) {
                            var role = _a[_i];
                            role.items, _.remove(role.items, function(roleItem) {
                                return aggregatedQueryNames[roleItem.queryName];
                            });
                        }
                    }(aggregatedColumns)), item;
                };
            }(dsr.AggregatesQueryRewriter || (dsr.AggregatesQueryRewriter = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var JsonComparer = jsCommon.JsonComparer;
            function registerUsages(categoricalProjectionUsages, roleName, newEntry, isValueGroupScope) {
                var queryName = newEntry.queryName, usages = (usages = categoricalProjectionUsages[queryName]) || (categoricalProjectionUsages[queryName] = {
                    categoryAndValueGroup: [],
                    categoryOnly: []
                }), newEntry = {
                    roleName: roleName,
                    roleItem: newEntry
                };
                (isValueGroupScope ? usages.categoryAndValueGroup : usages.categoryOnly).push(newEntry);
            }
            function includeMapping(roles, role) {
                for (var roleToAdd = {
                    for: {
                        in: role
                    }
                }, _i = 0, roles_2 = roles; _i < roles_2.length; _i++) {
                    var existingRoleMapping = roles_2[_i];
                    if (JsonComparer.equals(existingRoleMapping, roleToAdd)) return;
                }
                roles.push(roleToAdd);
            }
            !function(MultiMappedQueryRewriter) {
                MultiMappedQueryRewriter.run = function(item) {
                    var mappingsLength = item.mappings.length;
                    return 1 === mappingsLength ? item : 1 < mappingsLength ? function(query, mappings, additionalProjections) {
                        for (var categories = [], values = [], valueGrouped = {
                            by: null,
                            select: []
                        }, mergedMapping = {
                            categories: {
                                select: categories
                            },
                            values: {
                                group: valueGrouped,
                                select: values
                            }
                        }, categoricalProjectionUsages = {}, _i = 0, mappings_1 = mappings; _i < mappings_1.length; _i++) {
                            var currentCategorical = mappings_1[_i];
                            if (!currentCategorical.categorical) return;
                            currentCategorical = currentCategorical.categorical;
                            !function(mapping, categoricalProjectionUsages, categories, values, valueGrouped) {
                                var hasGrouped, mappingValues = mapping.values;
                                mappingValues && (data.CompiledDataViewMapping.visitCategoricalCategories(mapping.categories, {
                                    visitRole: function(role) {
                                        includeMapping(categories, role);
                                    }
                                }), data.CompiledDataViewMapping.visitGrouped(mappingValues, {
                                    visitRole: function(role) {
                                        if ((valueGrouped.by = role).items) for (var _i = 0, _a = role.items; _i < _a.length; _i++) {
                                            var item = _a[_i];
                                            registerUsages(categoricalProjectionUsages, role.role, item, !0), hasGrouped = !0;
                                        }
                                    }
                                }), data.CompiledDataViewMapping.visitCategoricalValues(mappingValues, {
                                    visitRole: function(role, context) {
                                        if (includeMapping("CategoricalValueGroup" === context ? valueGrouped.select : values, role), 
                                        role.items) for (var _i = 0, _a = role.items; _i < _a.length; _i++) {
                                            var item = _a[_i];
                                            registerUsages(categoricalProjectionUsages, role.role, item, hasGrouped);
                                        }
                                    }
                                }));
                            }(currentCategorical, categoricalProjectionUsages, categories, values, valueGrouped), 
                            null == mergedMapping.dataVolume || null == currentCategorical.dataVolume || (currentCategorical.dataVolume, 
                            mergedMapping.dataVolume), null != currentCategorical.dataVolume && null == mergedMapping.dataVolume && (mergedMapping.dataVolume = currentCategorical.dataVolume);
                        }
                        var queryRef, queryRewriteRecords = [];
                        for (queryRef in categoricalProjectionUsages) {
                            var usages = categoricalProjectionUsages[queryRef];
                            if (!_.isEmpty(usages.categoryAndValueGroup) && !_.isEmpty(usages.categoryOnly)) for (var _a = 0, _b = usages.categoryAndValueGroup; _a < _b.length; _a++) {
                                var result = _b[_a], item = result.roleItem, result = dsr.QueryRewriterUtils.duplicateSelect(query, item.queryName, result.roleName);
                                item.queryName = result.newQueryName, query = result.newQuery, queryRewriteRecords.push.apply(queryRewriteRecords, result.rewriteRecords);
                            }
                        }
                        return {
                            query: query,
                            mappings: [ {
                                metadata: mappings[0].metadata,
                                categorical: mergedMapping
                            } ],
                            queryRewrites: _.isEmpty(queryRewriteRecords) ? void 0 : queryRewriteRecords,
                            additionalProjections: additionalProjections
                        };
                    }(item.query, item.mappings, item.additionalProjections) : void 0;
                };
            }(dsr.MultiMappedQueryRewriter || (dsr.MultiMappedQueryRewriter = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            dsr.DefaultSchemaName = void 0, dsr.schemaName = function(property) {
                return property.Schema || dsr.DefaultSchemaName;
            }, function(SelectKind) {
                SelectKind[SelectKind.None = 0] = "None", SelectKind[SelectKind.Group = 1] = "Group", 
                SelectKind[SelectKind.Measure = 2] = "Measure";
            }(dsr.SelectKind || (dsr.SelectKind = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            function traverseQueryBindingDescriptorWithArg(expressions, visitor, arg) {
                if (expressions) {
                    visitor.visitDescriptor(expressions, arg);
                    var selects = expressions.Select;
                    if (selects && selects.length) for (var i = 0, length_2 = selects.length; i < length_2; i++) visitor.visitSelect(selects[i], arg);
                    expressions = expressions.Expressions;
                    expressions && function(secondary, visitor, arg) {
                        visitor.visitExpressions(secondary, arg), secondary.Primary, traverseDataShapeExpressionsAxis(secondary.Primary, visitor, arg);
                        secondary = secondary.Secondary;
                        secondary && traverseDataShapeExpressionsAxis(secondary, visitor, arg);
                    }(expressions, visitor, arg);
                }
            }
            function traverseDataShapeExpressionsAxis(axis, visitor, arg) {
                visitor.visitDataShapeExpressionsAxis(axis, arg);
                for (var groupings = axis.Groupings, i = 0, length_3 = groupings.length; i < length_3; i++) !function(grouping, visitor, arg) {
                    visitor.visitDataShapeExpressionsAxisGrouping(grouping, arg);
                    var keys = grouping.Keys;
                    for (var i = 0, length_4 = keys.length; i < length_4; i++) !function(groupingKey, visitor, arg) {
                        visitor.visitDataShapeExpressionsAxisGroupingKey(groupingKey, arg), groupingKey.Source, 
                        visitor.visitConceptualPropertyReference(groupingKey.Source, arg);
                    }(keys[i], visitor, arg);
                }(groupings[i], visitor, arg);
            }
            dsr.traverseQueryBindingDescriptor = function(descriptor, visitor) {
                traverseQueryBindingDescriptorWithArg(descriptor, visitor, void 0);
            }, dsr.traverseQueryBindingDescriptorWithArg = traverseQueryBindingDescriptorWithArg;
            var DefaultQueryBindingDescriptorVisitor = function() {
                function DefaultQueryBindingDescriptorVisitorWithArg() {}
                return DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitDescriptor = function(_descriptor, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitSelect = function(_select, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitExpressions = function(_expressions, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitDataShapeExpressionsAxis = function(_axis, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitDataShapeExpressionsAxisGrouping = function(_grouping, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitDataShapeExpressionsAxisGroupingKey = function(_groupingKey, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg.prototype.visitConceptualPropertyReference = function(_propertyRef, _arg) {}, 
                DefaultQueryBindingDescriptorVisitorWithArg;
            }(), DefaultQueryBindingDescriptorVisitor = function(_super) {
                function DefaultQueryBindingDescriptorVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(DefaultQueryBindingDescriptorVisitor, _super), DefaultQueryBindingDescriptorVisitor;
            }(dsr.DefaultQueryBindingDescriptorVisitorWithArg = DefaultQueryBindingDescriptorVisitor);
            dsr.DefaultQueryBindingDescriptorVisitor = DefaultQueryBindingDescriptorVisitor;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var ArrayExtensions = jsCommon.ArrayExtensions, QueryDescription = function() {
                function QueryDescription(metadata, binding) {
                    metadata.Select, binding.ScriptVisualBinding || (binding.Select, metadata.Select.length, 
                    binding.Select.length), this._metadata = metadata, this._binding = binding;
                }
                return QueryDescription.prototype.getSelectRestatements = function() {
                    return this.getRestatements();
                }, QueryDescription.prototype.getGroupRestatements = function() {
                    return this.getRestatements(dsr.SelectKind.Group);
                }, QueryDescription.prototype.getMeasureRestatements = function() {
                    return this.getRestatements(dsr.SelectKind.Measure);
                }, QueryDescription.prototype.getFilterRestatements = function() {
                    var filters = this._metadata.Filters;
                    if (_.isEmpty(filters)) return null;
                    for (var restatements = [], i = 0, len = filters.length; i < len; i++) {
                        var filter = filters[i];
                        restatements.push(filter ? filter.Restatement : "");
                    }
                    return ArrayExtensions.emptyToNull(restatements);
                }, QueryDescription.prototype.getRestatements = function(kind) {
                    var metadata = this._metadata, binding = this._binding, restatements = [];
                    if (!binding.ScriptVisualBinding) for (var i = 0, len = metadata.Select.length; i < len; i++) {
                        var selectBinding = binding.Select[i], selectMetadata = metadata.Select[i];
                        selectBinding && (void 0 !== kind && selectBinding.Kind !== kind || restatements.push(selectMetadata.Restatement || ""));
                    }
                    return ArrayExtensions.emptyToNull(restatements);
                }, QueryDescription;
            }();
            dsr.QueryDescription = QueryDescription;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var ArrayExtensions = jsCommon.ArrayExtensions, DataServices = powerbi.data.services, FilterKindDetector = powerbi.data.FilterKindDetector, SelectToIdentityExpressionsVisitor = powerbi.data.dsr.SelectToIdentityExpressionsVisitor, SQExpr = powerbi.data.SQExpr;
            dsr.createQueryGenerator = function(featureSwitches) {
                return new QueryGenerator(data.services.SemanticQuerySerializer, featureSwitches);
            };
            var Impl, QueryGenerator = function() {
                function QueryGenerator(serializer, featureSwitches) {
                    this.serializer = serializer, this.featureSwitches = featureSwitches;
                }
                return QueryGenerator.prototype.execute = function(options) {
                    var result = this.executeForQueryOnlyImpl(options);
                    if (!result || !result.dataShapeBinding && result.mergedQueries && result.mergedQueries.mapping && 2 === result.mergedQueries.mapping.updateType) return {
                        command: void 0
                    };
                    var mergedQueries = result.mergedQueries, dataShapeBinding = result.dataShapeBinding, query = result.query;
                    this.adjustIntersectionDataReduction(dataShapeBinding, mergedQueries.mapping, query, options.highVolumeOverride), 
                    _.isEmpty(query.groupBy()) || this.applyDataReductionForGroupByQuery(dataShapeBinding, query);
                    var shouldDeferQuery = result.mergedQueries && result.mergedQueries.mapping && 1 === result.mergedQueries.mapping.updateType && _.isEmpty(options.additionalProjections);
                    return {
                        command: this.createDataQuery(query, result.queryExtensionSchema, options.dataSourceVariables, dataShapeBinding, result.compiledDataViewMappings, options.dataWindow, options.executionMetricsKinds, options.anchorTime),
                        splits: mergedQueries.splits,
                        queryRewrites: result.queryRewrites,
                        deferred: shouldDeferQuery
                    };
                }, QueryGenerator.prototype.executeForQueryOnly = function(result) {
                    result = this.executeForQueryOnlyImpl(result);
                    return result && result.query;
                }, QueryGenerator.prototype.produceIdentities = function(selectExpr, schema) {
                    var visitor = new SelectToIdentityExpressionsVisitor();
                    return selectExpr.accept(visitor, schema);
                }, QueryGenerator.prototype.executeForQueryOnlyImpl = function(extensionResult) {
                    var dataVolumeOverride, mergedQueries = this.getQueryableMappings(extensionResult.mappings), indicesByName = this.prepareQuery(extensionResult.query, mergedQueries, extensionResult.additionalProjections), query = indicesByName.query, mappings = indicesByName.mappings, queryRewrites = indicesByName.queryRewrites, dataShapeBinding = indicesByName.additionalProjections, indicesByName = Impl.getIndicesByName(query), mergedQueries = dsr.mergeMappings(mergedQueries, indicesByName);
                    data.applyDataReductionDefaults(extensionResult.mappings), extensionResult.highVolumeOverride && (dataVolumeOverride = 6), 
                    mergedQueries.mapping.categorical && Impl.updateMappingsWithScalarKeys(mergedQueries.mapping, indicesByName);
                    var extensions, dataShapeBinding = dsr.generateDataShapeBinding(this.serializer, indicesByName, mergedQueries.mapping, query.select(), dataShapeBinding, extensionResult.highlightFilter, extensionResult.restartToken, query.groupBy(), dataVolumeOverride, extensionResult.expansionStates, extensionResult.keepProjectionOrder, extensionResult.noDefaultProjections, extensionResult.windowExpansion, this.featureSwitches);
                    return data.DataViewPivotCategoricalToPrimaryGroups.pivotBinding(dataShapeBinding, mappings, mergedQueries.mapping, query.select(), 3, dataVolumeOverride), 
                    this.queryHasMeasureFilter(query) && dataShapeBinding && (this.processTargetsForMeasureFilters(query, mappings, dataShapeBinding), 
                    query = this.adjustQueryMeasureFilters(query, dataShapeBinding)), extensionResult.queryExtensionLookup && (query = (extensionResult = extensionResult.queryExtensionLookup(query, queryRewrites)).query, 
                    extensions = extensionResult.extensions, queryRewrites = extensionResult.queryRewrites), 
                    {
                        query: query,
                        queryExtensionSchema: extensions,
                        mergedQueries: mergedQueries,
                        dataShapeBinding: dataShapeBinding,
                        compiledDataViewMappings: mappings,
                        queryRewrites: queryRewrites
                    };
                }, QueryGenerator.prototype.hasAmbiguousEqualitySemantics = function(value) {
                    return SQExpr.equals(value, data.SQExprBuilder.boolean(!1)) || SQExpr.equals(value, data.SQExprBuilder.integer(0));
                }, QueryGenerator.prototype.getQueryableMappings = function(compiledMappings) {
                    return _.filter(compiledMappings, function(mapping) {
                        return !mapping.usage || !mapping.usage.regression;
                    });
                }, QueryGenerator.prototype.prepareQuery = function(query, mappings, rewrittenQuery) {
                    for (var _i = 0, _a = getClientExprRewriters(mappings, query.select()); _i < _a.length; _i++) {
                        var rewriter = _a[_i];
                        query = query.rewrite(rewriter);
                    }
                    rewrittenQuery = this.rewriteQuery(query, mappings, rewrittenQuery);
                    return rewrittenQuery.query = function(query) {
                        for (var updatedSelect, selects = query.select(), i = selects.length - 1; 0 <= i; i--) SQExpr.isConstant(selects[i].expr) && (selects.splice(i, 1), 
                        updatedSelect = !0);
                        if (updatedSelect) return query.select(selects);
                        return query;
                    }(rewrittenQuery.query), rewrittenQuery;
                }, QueryGenerator.prototype.rewriteQuery = function(query, mappings, rewritten) {
                    rewritten = {
                        query: query,
                        mappings: mappings,
                        additionalProjections: rewritten
                    }, rewritten = dsr.MultiMappedQueryRewriter.run(rewritten);
                    return rewritten = dsr.AggregatesQueryRewriter.run(rewritten), rewritten = this.featureSwitches && this.featureSwitches.scopedMeasuresEnabled ? dsr.ScopedValuesQueryRewriter.run(rewritten, !0) : rewritten;
                }, QueryGenerator.prototype.adjustIntersectionDataReduction = function(binding, defaultSecondary, query, highVolumeOverride) {
                    var categoricalMapping, defaultPrimary;
                    !defaultSecondary.categorical || (categoricalMapping = defaultSecondary.categorical).dataReductionAlgorithm && (binding.DataReduction && binding.DataReduction.Intersection ? (binding.Secondary && binding.Primary, 
                    binding.Primary && !binding.Secondary && (binding.DataReduction.Primary, binding.DataReduction.Primary = binding.DataReduction.Intersection, 
                    binding.DataReduction.Intersection = void 0)) : (defaultPrimary = binding.Primary && (!binding.DataReduction || !binding.DataReduction.Primary), 
                    defaultSecondary = binding.Secondary && (!binding.DataReduction || !binding.DataReduction.Secondary), 
                    (defaultPrimary || defaultSecondary) && (binding.DataReduction || (binding.DataReduction = {
                        DataVolume: categoricalMapping.dataVolume || (highVolumeOverride ? 6 : 3)
                    }), defaultPrimary && (binding.DataReduction.Primary = data.DataShapeBindingDataReduction.createFrom(categoricalMapping.dataReductionAlgorithm, query.select())), 
                    defaultSecondary && (binding.DataReduction.Secondary = data.DataShapeBindingDataReduction.createFrom(categoricalMapping.dataReductionAlgorithm, query.select())))));
                }, QueryGenerator.prototype.applyDataReductionForGroupByQuery = function(binding, query) {
                    binding.DataReduction = {}, binding.DataReduction.Primary = data.DataShapeBindingDataReduction.createFrom({
                        top: {
                            count: 1e3
                        }
                    }, query.select());
                }, QueryGenerator.prototype.generateScriptVisualCommand = function(compiledScriptResultMapping, viewport) {
                    var scriptVisualCommand = powerbi.ScriptResultUtil.extractScriptResult(compiledScriptResultMapping);
                    if (!(scriptVisualCommand = scriptVisualCommand || powerbi.ScriptResultUtil.extractScriptResultDefaultFromDataViewMappings(compiledScriptResultMapping))) return null;
                    scriptVisualCommand = {
                        Version: 0,
                        Script: scriptVisualCommand.source,
                        RenderingEngine: scriptVisualCommand.provider,
                        ScriptOutputType: scriptVisualCommand.outputType
                    };
                    viewport && viewport.height && viewport.width && (scriptVisualCommand.ViewportWidthPx = viewport.width, 
                    scriptVisualCommand.ViewportHeightPx = viewport.height);
                    compiledScriptResultMapping = powerbi.ScriptResultUtil.findScriptResultMapping(compiledScriptResultMapping);
                    return compiledScriptResultMapping && compiledScriptResultMapping.script.scriptInput && (scriptVisualCommand.ScriptInput = compiledScriptResultMapping.script.scriptInput), 
                    {
                        ScriptVisualCommand: scriptVisualCommand
                    };
                }, QueryGenerator.prototype.queryHasMeasureFilter = function(query) {
                    for (var _i = 0, _a = query.where(); _i < _a.length; _i++) {
                        var filter = _a[_i];
                        if (1 === FilterKindDetector.runDetector(filter.condition)) return !0;
                    }
                    return !1;
                }, QueryGenerator.prototype.removeExprFromTargetExprs = function(filters, expr) {
                    for (var _i = 0, filters_3 = filters; _i < filters_3.length; _i++) {
                        var targets = filters_3[_i].target;
                        if (null != targets) for (var i = 0, len = targets.length; i < len; i++) SQExpr.equals(targets[i], expr) && targets.splice(i, 1);
                    }
                }, QueryGenerator.prototype.processTargetsForMeasureFilters = function(query, mappings, binding) {
                    for (var _this = this, projectedSelectIndices = this.getProjectedSelectIndexMap(binding), _i = 0, mappings_2 = mappings; _i < mappings_2.length; _i++) {
                        var mapping = mappings_2[_i];
                        data.CompiledDataViewMapping.visitMapping(mapping, {
                            visitRole: function(role) {
                                var activeItems = role.activeItems, roleItems = role.items;
                                if (activeItems && !_.isEmpty(activeItems) && !_.isEmpty(roleItems)) for (var index = _.findIndex(roleItems, function(item) {
                                    return _.includes(activeItems, item.queryName);
                                }), i = 0; i < index; i++) {
                                    var expr = roleItems[i].queryName, selects = query.select(), expr = ArrayExtensions.indexWithName(selects, expr);
                                    projectedSelectIndices[expr] || (expr = selects[expr].expr, _this.removeExprFromTargetExprs(query.where(), expr));
                                }
                            }
                        });
                    }
                }, QueryGenerator.prototype.adjustQueryMeasureFilters = function(query, subqueryFilter) {
                    var result = query.where(), filtersToConvert = [], filtersToKeep = [];
                    if (_.isEmpty(subqueryFilter.Primary.Groupings) || _.isEmpty(subqueryFilter.Primary.Groupings[0].Projections) || !_.isEmpty(subqueryFilter.Secondary)) return query;
                    for (var selects = query.select(), _i = 0, projections_1 = subqueryFilter.Primary.Groupings[0].Projections; _i < projections_1.length; _i++) {
                        var select = selects[projections_1[_i]];
                        if (!data.SQExprUtils.isMeasure(select.expr)) return query;
                    }
                    for (var _a = 0, filters_4 = result; _a < filters_4.length; _a++) {
                        var filter = filters_4[_a];
                        _.isEmpty(filter.target) ? filtersToKeep.push(filter) : filtersToConvert.push(filter);
                    }
                    if (_.isEmpty(filtersToConvert)) return query;
                    result = data.SemanticQuery.createWith({
                        from: query.from(),
                        select: query.select(),
                        orderBy: query.orderBy(),
                        top: query.top(),
                        transforms: query.transforms(),
                        groupBy: query.groupBy(),
                        where: filtersToKeep
                    }), subqueryFilter = data.SemanticFilter.fromMeasureFilters(query, filtersToConvert, subqueryFilter);
                    return result = result.addSemanticFilter(subqueryFilter);
                }, QueryGenerator.prototype.getProjectedSelectIndexMap = function(binding) {
                    return binding ? _.chain([ binding.Primary, binding.Secondary ]).filter(function(bindingAxis) {
                        return bindingAxis && !_.isEmpty(bindingAxis.Groupings);
                    }).map(function(bindingAxis) {
                        return bindingAxis.Groupings;
                    }).flatten().filter(function(grouping) {
                        return !_.isEmpty(grouping.Projections);
                    }).map(function(grouping) {
                        return grouping.Projections;
                    }).flatten(!1).reduce(function(projectedSelectIndices, projectedSelectIndex) {
                        return projectedSelectIndices[projectedSelectIndex] = !0, projectedSelectIndices;
                    }, {}).value() : {};
                }, QueryGenerator.prototype.createDataQuery = function(query, extensionSchema, dataSourceVariables, dataShapeBinding, mappings, scriptVisualQueryCommand, metricsKinds, dataQuery) {
                    dataQuery = {
                        Query: this.serializer.serializeQuery(query),
                        Binding: dataShapeBinding,
                        AnchorTime: dataQuery
                    };
                    extensionSchema && (dataQuery.Extension = extensionSchema), dataSourceVariables && (dataQuery.DataSourceVariables = dataSourceVariables), 
                    metricsKinds && (dataQuery.ExecutionMetricsKind = metricsKinds);
                    dataQuery = {
                        Commands: [ {
                            SemanticQueryDataShapeCommand: dataQuery
                        } ]
                    }, scriptVisualQueryCommand = this.generateScriptVisualCommand(mappings, scriptVisualQueryCommand);
                    return scriptVisualQueryCommand && dataQuery.Commands.push(scriptVisualQueryCommand), 
                    dataQuery;
                }, QueryGenerator;
            }();
            function getClientExprRewriters(mappings, selects) {
                return [ new RemoveWithRefSQExprVisitor(), new SQRoleRefRewriter(mappings, selects), new SQGroupRefToColumnRefRewriter() ];
            }
            dsr.generateDataShapeBinding = function(serializer, indicesByName, mapping, querySelects, additionalProjections, highlightFilter, restartToken, queryGroupBy, dataVolumeOverride, expansionStates, keepProjectionOrder, noDefaultProjections, windowExpansion, featureSwitches) {
                var serializedHighlightFilter, rewrittenHighlightFilter = highlightFilter;
                if (highlightFilter) for (var _i = 0, _a = getClientExprRewriters([ mapping ], querySelects); _i < _a.length; _i++) var rewriter = _a[_i], rewrittenHighlightFilter = rewrittenHighlightFilter.rewrite(rewriter);
                return highlightFilter && (serializedHighlightFilter = [ serializer.serializeFilter(rewrittenHighlightFilter) ]), 
                Impl.generateBaseDataShapeBinding(indicesByName, mapping, querySelects, additionalProjections, serializedHighlightFilter, restartToken, queryGroupBy, dataVolumeOverride, expansionStates, serializer, keepProjectionOrder, noDefaultProjections, windowExpansion, featureSwitches);
            }, function(Impl) {
                Impl.generateBaseDataShapeBinding = function generateBaseDataShapeBinding(indicesByName, mapping, querySelects, additionalProjections, builder, restartToken, queryGroupBy, dataVolumeOverride, expansionStates, serializer, keepProjectionOrder, noDefaultProjections, windowExpansion, featureSwitches) {
                    builder = new DataShapeBindingBuilder(indicesByName, querySelects, keepProjectionOrder, featureSwitches).withRestartToken(restartToken).withHighlightFilter(builder).withAdditionalProjections(additionalProjections);
                    if (mapping.table ? builder = builder.withGroupBy(queryGroupBy) : _.isEmpty(queryGroupBy), 
                    2 !== mapping.updateType) if (mapping.categorical) !function(builder, mapping, noDefaultProjections) {
                        data.CompiledDataViewMapping.visitCategoricalCategories(mapping.categories, {
                            visitRole: function(role) {
                                builder.withPrimaryGrouping(role.items, role.activeItems, role.showAll, role.subtotalType, !0, noDefaultProjections);
                            },
                            visitReduction: function(reductionAlgorithm) {
                                builder.withPrimaryDataReduction(reductionAlgorithm);
                            }
                        }), data.CompiledDataViewMapping.visitGrouped(mapping.values, {
                            visitRole: function(role) {
                                builder.withSecondaryGrouping(role.items, role.activeItems, role.showAll, role.subtotalType, noDefaultProjections);
                            },
                            visitReduction: function(reductionAlgorithm) {
                                builder.withSecondaryDataReduction(reductionAlgorithm);
                            }
                        }), data.CompiledDataViewMapping.visitCategoricalValues(mapping.values, {
                            visitRole: function(role, context) {
                                builder.withCurrentInnermostPrimaryGrouping(role.items, role.showAll, role.subtotalType, "CategoricalValueGroup" !== context);
                            }
                        }), builder.withIntersectionDataReduction(mapping.dataReductionAlgorithm).withDataVolume(mapping.dataVolume).withIncludeEmptyGroups(mapping.includeEmptyGroups);
                    }(builder, mapping.categorical, noDefaultProjections); else if (mapping.table) !function(builder, mapping) {
                        data.CompiledDataViewMapping.visitTable(mapping, {
                            visitRole: function(role) {
                                builder.withPrimaryGrouping(role.items, role.activeItems, role.showAll, role.subtotalType, !0, !1);
                            },
                            visitReduction: function(reductionAlgorithm) {
                                builder.withPrimaryDataReduction(reductionAlgorithm);
                            }
                        }), builder.withDataVolume(mapping.dataVolume);
                    }(builder, mapping.table); else if (mapping.matrix) !function(builder, mapping, expansion, noDefaultProjections, windowExpansion) {
                        var matrixRowVisit = new MatrixWithCompositeMappingsVisitor(builder, noDefaultProjections);
                        data.CompiledDataViewMapping.visitMatrixRows(mapping.rows, matrixRowVisit), expansion && expansion.length, 
                        (expansion = function(items, lastActiveLevelIndex, roles, expansionState, noDefaultProjections) {
                            if (!(_.isEmpty(expansionState) || _.isEmpty(lastActiveLevelIndex) && noDefaultProjections || (expansionState = _.find(expansionState, function(expState) {
                                return _.isEqual(expState.roles, roles);
                            }), _.isEmpty(expansionState.levels)))) return items = _.uniqBy(items, function(item) {
                                return item.queryName;
                            }), lastActiveLevelIndex = _.uniq(lastActiveLevelIndex), lastActiveLevelIndex = (_.isEmpty(lastActiveLevelIndex) ? items : lastActiveLevelIndex).length - 1, 
                            DataServices.DataShapeBindingExpansionStateSerializer.serializeExpansionState(expansionState, lastActiveLevelIndex);
                        }(matrixRowVisit.primaryRoleItems, matrixRowVisit.primaryActiveRoleItems, matrixRowVisit.primaryRoles, expansion, noDefaultProjections)) && builder.withPrimaryExpansion(expansion), 
                        windowExpansion && builder.withPrimaryWindowExpansion(windowExpansion), data.CompiledDataViewMapping.visitMatrixColumns(mapping.columns, {
                            visitRole: function(role) {
                                builder.withSecondaryGroupingNested(role.items, role.activeItems, role.showAll, role.subtotalType, noDefaultProjections);
                            },
                            visitReduction: function(reductionAlgorithm) {
                                builder.withSecondaryDataReduction(reductionAlgorithm);
                            }
                        }), data.CompiledDataViewMapping.visitMatrixValues(mapping.values, {
                            visitRole: function(role) {
                                builder.withCurrentInnermostGrouping(role.items, role.showAll, role.subtotalType);
                            }
                        }), builder.withDataVolume(mapping.dataVolume), builder.withIncludeEmptyGroups(mapping.includeEmptyGroups);
                    }(builder, mapping.matrix, expansionStates, noDefaultProjections, windowExpansion); else if (mapping.tree) !function(builder, mapping, noDefaultProjections) {
                        data.CompiledDataViewMapping.visitTreeNodes(mapping.nodes, {
                            visitRole: function(role) {
                                builder.withPrimaryGroupingNested(role.items, role.activeItems, role.showAll, role.subtotalType, noDefaultProjections);
                            },
                            visitReduction: function(reductionAlgorithm) {
                                builder.withPrimaryDataReduction(reductionAlgorithm);
                            }
                        }), data.CompiledDataViewMapping.visitTreeValues(mapping.values, {
                            visitRole: function(role) {
                                builder.withCurrentInnermostPrimaryGrouping(role.items, role.showAll, role.subtotalType);
                            }
                        }), builder.withDataVolume(mapping.dataVolume);
                    }(builder, mapping.tree, noDefaultProjections); else if (mapping.scriptResult) return generateBaseDataShapeBinding(indicesByName, mapping.scriptResult.dataInput, querySelects, additionalProjections);
                    return dataVolumeOverride && builder.withDataVolume(dataVolumeOverride), builder.withTopLevelAggregates(mapping.scopedAggregates), 
                    builder.toBinding(mapping);
                };
                var MatrixWithCompositeMappingsVisitor = function() {
                    function MatrixWithCompositeMappingsVisitor(builder, noDefaultProjections) {
                        this.inComposite = !1, this.startedCompositeNest = !1, this.builder = builder, this.noDefaultProjections = noDefaultProjections;
                    }
                    return MatrixWithCompositeMappingsVisitor.prototype.visitRole = function(role, context) {
                        var _b;
                        "MatrixRowsScopedValue" === context ? this.builder.withCurrentInnermostPrimaryGrouping(role.items, role.showAll, role.subtotalType, !0) : this.inComposite ? (_b = this.startedCompositeNest, 
                        this.startedCompositeNest = !0, this.builder.withPrimaryGrouping(role.items, role.activeItems, role.showAll, role.subtotalType, _b, this.noDefaultProjections)) : this.builder.withPrimaryGroupingNested(role.items, role.activeItems, role.showAll, role.subtotalType, this.noDefaultProjections), 
                        this.primaryRoleItems || (this.primaryRoleItems = []), this.primaryRoles || (this.primaryRoles = []), 
                        this.primaryRoles.push(role.role), (_b = this.primaryRoleItems).push.apply(_b, role.items || []), 
                        _.isEmpty(role.activeItems) || (this.primaryActiveRoleItems || (this.primaryActiveRoleItems = []), 
                        (_b = this.primaryActiveRoleItems).push.apply(_b, role.activeItems || []));
                    }, MatrixWithCompositeMappingsVisitor.prototype.visitReduction = function(reductionAlgorithm) {
                        this.builder.withPrimaryDataReduction(reductionAlgorithm);
                    }, MatrixWithCompositeMappingsVisitor.prototype.enterComposite = function(mapping) {
                        this.inComposite = !0, this.startedCompositeNest = !1, this.compositeGroupingIndexStart = this.builder.primaryGroupingCount;
                    }, MatrixWithCompositeMappingsVisitor.prototype.exitComposite = function(mapping) {
                        var start, range;
                        this.inComposite = !1, this.startedCompositeNest = !1, !mapping.dataReductionAlgorithm && !mapping.synchronized || (start = this.compositeGroupingIndexStart) < (range = this.builder.primaryGroupingCount) && (range = _.range(start, range), 
                        mapping.synchronized && this.builder.withPrimarySynchronization({
                            Groupings: range
                        }), mapping.dataReductionAlgorithm && this.builder.withScopedDataReduction(mapping.dataReductionAlgorithm, {
                            Primary: range
                        }));
                    }, MatrixWithCompositeMappingsVisitor;
                }();
                function isReferencedAxis(projectionIdx, axis) {
                    if (axis) for (var _i = 0, _a = axis.Groupings; _i < _a.length; _i++) {
                        var grouping = _a[_i];
                        if (_.includes(grouping.Projections, projectionIdx)) return !0;
                    }
                }
                Impl.getIndicesByName = function(query) {
                    for (var result = {}, select = query.select(), groupBy = query.groupBy(), i = 0, len = select.length; i < len; i++) result[select[i].name] = i;
                    for (i = 0, len = groupBy.length; i < len; i++) result[groupBy[i].name] = i;
                    return result;
                }, Impl.updateMappingsWithScalarKeys = function(mapping, indicesByName) {
                    var scalarKeyFinder = new (function() {
                        function ScalarKeyFinder(indicesByName) {
                            this.indicesByName = indicesByName;
                        }
                        return ScalarKeyFinder.prototype.visitRole = function(role, _context) {
                            if (!_.isEmpty(role.items)) {
                                for (var scalarKeyQueryName, _i = 0, _a = role.items; _i < _a.length; _i++) {
                                    var roleItem = _a[_i];
                                    roleItem.scalarKeyInfo && null != roleItem.scalarKeyInfo.scalarKeyQueryName && (scalarKeyQueryName = roleItem.scalarKeyInfo.scalarKeyQueryName);
                                }
                                scalarKeyQueryName && (this.primaryScalarKey, this.primaryScalarKey = this.indicesByName[scalarKeyQueryName]);
                            }
                        }, ScalarKeyFinder;
                    }())(indicesByName);
                    data.CompiledDataViewMapping.visitMapping(mapping, scalarKeyFinder), null != scalarKeyFinder.primaryScalarKey && data.CompiledDataViewMapping.visitMapping(mapping, {
                        visitRole: function() {},
                        visitReduction: function(reductionAlgorithm) {
                            reductionAlgorithm.binnedLineSample && (reductionAlgorithm.binnedLineSample.primaryScalarKey = scalarKeyFinder.primaryScalarKey);
                        }
                    });
                };
                var DataShapeBindingBuilder = function() {
                    function DataShapeBindingBuilder(indicesByName, querySelects, keepProjectionOrder, featureSwitches) {
                        this.indicesByName = indicesByName, this.querySelects = querySelects, this.reduction = {
                            DataVolume: 3
                        }, this.joinPredicateBehaviors = [], this.insertProjection = keepProjectionOrder ? ArrayExtensions.insertUnique : ArrayExtensions.insertSorted, 
                        this.featureSwitches = featureSwitches || {};
                    }
                    return Object.defineProperty(DataShapeBindingBuilder.prototype, "primaryGroupingCount", {
                        get: function() {
                            return this.primary && this.primary.Groupings && this.primary.Groupings.length || 0;
                        },
                        enumerable: !1,
                        configurable: !0
                    }), DataShapeBindingBuilder.prototype.withRestartToken = function(restartToken) {
                        return this.restartToken = restartToken, this;
                    }, DataShapeBindingBuilder.prototype.withPrimaryWindowExpansion = function(windowExpansion) {
                        return this.reduction.Primary && this.reduction.Primary.TopNPerLevel && (this.reduction.Primary.TopNPerLevel.WindowExpansion = function(windowExpansion) {
                            return DataServices.DataShapeBindingWindowExpansionStateSerializer.serializeWindowExpansionState(windowExpansion);
                        }(windowExpansion)), this;
                    }, DataShapeBindingBuilder.prototype.withDataVolume = function(dataVolume) {
                        return null == dataVolume || (this.reduction.DataVolume = dataVolume), this;
                    }, DataShapeBindingBuilder.prototype.withIncludeEmptyGroups = function(value) {
                        return this.includeEmptyGroups = value, this;
                    }, DataShapeBindingBuilder.prototype.withHighlightFilter = function(value) {
                        return this.highlightFilter = value, this;
                    }, DataShapeBindingBuilder.prototype.withGroupBy = function(queryGroupBy) {
                        return _.isEmpty(queryGroupBy) || (this.groupByNames = _.map(queryGroupBy, function(i) {
                            return i.name;
                        })), this;
                    }, DataShapeBindingBuilder.prototype.withPrimaryGrouping = function(aggregates, activeProjections, showAll, roleSubtotalType, appendToLastExistingLevel, noDefaultProjections) {
                        if (this.secondary, aggregates = this.filterItems(aggregates, activeProjections, noDefaultProjections), 
                        _.isEmpty(aggregates)) return this;
                        var grouping;
                        this.primary ? appendToLastExistingLevel ? grouping = _.last(this.primary.Groupings) : this.primary.Groupings.push(grouping = {
                            Projections: []
                        }) : this.primary = {
                            Groupings: [ grouping = {
                                Projections: []
                            } ]
                        }, this.updateGrouping(grouping, aggregates, showAll, roleSubtotalType);
                        aggregates = this.getAggregatesForRoleItems(aggregates);
                        return this.applyTopLevelAggregates(aggregates), this;
                    }, DataShapeBindingBuilder.prototype.withPrimaryExpansion = function(expansion) {
                        return this.ensurePrimaryAxis(), this.primary.Expansion = expansion, this;
                    }, DataShapeBindingBuilder.prototype.withPrimarySynchronization = function(synchronization) {
                        return this.ensurePrimaryAxis(), this.primary.Synchronization || (this.primary.Synchronization = []), 
                        this.primary.Synchronization.push(synchronization), this;
                    }, DataShapeBindingBuilder.prototype.ensurePrimaryAxis = function() {
                        this.primary || (this.primary = {
                            Groupings: []
                        });
                    }, DataShapeBindingBuilder.prototype.ensureSecondaryAxis = function() {
                        this.secondary || (this.secondary = {
                            Groupings: []
                        });
                    }, DataShapeBindingBuilder.prototype.withPrimaryGroupingNested = function(items, activeProjections, showAll, roleSubtotalType, groupings) {
                        return this.secondary, items = this.filterItems(items, activeProjections, groupings), 
                        _.isEmpty(items) ? this : (this.primary || (this.primary = {
                            Groupings: []
                        }), groupings = this.primary.Groupings, this.withNested(groupings, items, showAll, roleSubtotalType));
                    }, DataShapeBindingBuilder.prototype.withSecondaryGrouping = function(aggregates, activeProjections, showAll, roleSubtotalType, innermostPrimary) {
                        if (aggregates = this.filterItems(aggregates, activeProjections, innermostPrimary), 
                        _.isEmpty(aggregates)) return this;
                        var grouping;
                        this.primary ? (innermostPrimary = _.last(this.primary.Groupings), this.containsAll(innermostPrimary, aggregates) ? grouping = innermostPrimary : (this.secondary || (this.secondary = {
                            Groupings: []
                        }), this.secondary.Groupings.push(grouping = {
                            Projections: []
                        }))) : (this.primary = {
                            Groupings: [ grouping = {
                                Projections: []
                            } ]
                        }, this.pivotedSecondaryToPrimary = !0), this.updateGrouping(grouping, aggregates, showAll, roleSubtotalType);
                        aggregates = this.getAggregatesForRoleItems(aggregates);
                        return this.applyTopLevelAggregates(aggregates), this;
                    }, DataShapeBindingBuilder.prototype.withSecondaryExpansion = function(expansion) {
                        return this.ensureSecondaryAxis(), this.secondary.Expansion = expansion, this;
                    }, DataShapeBindingBuilder.prototype.withSecondaryGroupingNested = function(items, activeProjections, showAll, roleSubtotalType, noDefaultProjections) {
                        return items = this.filterItems(items, activeProjections, noDefaultProjections), 
                        _.isEmpty(items) ? this : (this.primary ? (this.secondary || (this.secondary = {
                            Groupings: []
                        }), groupings = this.secondary.Groupings) : (this.primary = {
                            Groupings: groupings = []
                        }, this.pivotedSecondaryToPrimary = !0), this.withNested(groupings, items, showAll, roleSubtotalType));
                        var groupings;
                    }, DataShapeBindingBuilder.prototype.withCurrentInnermostGrouping = function(items, showAll, roleSubtotalType) {
                        return items = this.filterItems(items, null, !1), _.isEmpty(items) || (this.secondary && (grouping = _.last(this.secondary.Groupings)), 
                        this.addValuesToGrouping(items, showAll, roleSubtotalType, grouping)), this;
                        var grouping;
                    }, DataShapeBindingBuilder.prototype.withCurrentInnermostPrimaryGrouping = function(items, showAll, roleSubtotalType, isGroupedByPrimaryOnly) {
                        if (items = this.filterItems(items, null, !1), _.isEmpty(items)) return this;
                        if (this.addValuesToGrouping(items, showAll, roleSubtotalType), isGroupedByPrimaryOnly) {
                            this.primaryOnlyProjections = this.primaryOnlyProjections || [];
                            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                                var item = items_1[_i];
                                this.primaryOnlyProjections.push(this.indicesByName[item.queryName]);
                            }
                        }
                        return this;
                    }, DataShapeBindingBuilder.prototype.addValuesToGrouping = function(aggregates, showAll, roleSubtotalType, grouping) {
                        grouping = grouping || this.ensureInnermostPrimaryGrouping(), this.updateGrouping(grouping, aggregates, showAll, roleSubtotalType);
                        aggregates = this.getAggregatesForRoleItems(aggregates);
                        this.applyTopLevelAggregates(aggregates);
                    }, DataShapeBindingBuilder.prototype.ensureInnermostPrimaryGrouping = function() {
                        var grouping;
                        return this.primary ? grouping = _.last(this.primary.Groupings) : this.primary = {
                            Groupings: [ grouping = {
                                Projections: []
                            } ]
                        }, grouping;
                    }, DataShapeBindingBuilder.prototype.withPrimaryDataReduction = function(reductionAlgorithm) {
                        return reductionAlgorithm && this.primary && (this.reduction.Primary = data.DataShapeBindingDataReduction.createFrom(reductionAlgorithm, this.querySelects)), 
                        this;
                    }, DataShapeBindingBuilder.prototype.withScopedDataReduction = function(reductionAlgorithm, scope) {
                        return reductionAlgorithm && (this.reduction.Scoped || (this.reduction.Scoped = []), 
                        this.reduction.Scoped.push({
                            Scope: scope,
                            Algorithm: data.DataShapeBindingDataReduction.createFrom(reductionAlgorithm, this.querySelects)
                        })), this;
                    }, DataShapeBindingBuilder.prototype.withSecondaryDataReduction = function(reductionAlgorithm) {
                        if (this.pivotedSecondaryToPrimary) return this.withPrimaryDataReduction(reductionAlgorithm);
                        if (!reductionAlgorithm || !this.secondary) return this;
                        if (!this.reduction.Scoped || _.isEmpty(this.secondary.Groupings)) return this.reduction.Secondary = data.DataShapeBindingDataReduction.createFrom(reductionAlgorithm, this.querySelects), 
                        this;
                        var range = this.secondary.Groupings.length, range = _.range(0, range);
                        return this.withScopedDataReduction(reductionAlgorithm, {
                            Secondary: range
                        }), this;
                    }, DataShapeBindingBuilder.prototype.withIntersectionDataReduction = function(reductionAlgorithm) {
                        return reductionAlgorithm && (this.reduction.Primary || this.reduction.Secondary || reductionAlgorithm.binnedLineSample && (this.reduction.Intersection = data.DataShapeBindingDataReduction.createFrom(reductionAlgorithm, this.querySelects))), 
                        this;
                    }, DataShapeBindingBuilder.prototype.withTopLevelAggregates = function(dataShapeBindingAggregates) {
                        var _this = this;
                        if (!this.featureSwitches.scopedAggregates) return this;
                        if (_.isEmpty(dataShapeBindingAggregates)) return this;
                        dataShapeBindingAggregates = this.convertDataViewMappingAggregate(dataShapeBindingAggregates, function(scope) {
                            return _this.toAggregateScope(scope, _this.primary.Groupings, 0);
                        }), dataShapeBindingAggregates = this.getDataShapeBindingAggregates(dataShapeBindingAggregates);
                        return this.applyTopLevelAggregates(dataShapeBindingAggregates), this;
                    }, DataShapeBindingBuilder.prototype.toAggregateScope = function(scopeAsQueryNames, primaryGroupings, currentDepth) {
                        for (var depth = 0, querySelects = this.querySelects, _i = 0, primaryGroupings_1 = primaryGroupings; _i < primaryGroupings_1.length; _i++) {
                            var grouping = primaryGroupings_1[_i];
                            if (!_.isEmpty(grouping.ShowItemsWithNoData)) return;
                            for (var _a = 0, projections_2 = grouping.Projections; _a < projections_2.length; _a++) {
                                var state_2 = function(select) {
                                    select = querySelects[select];
                                    if (data.SQExprUtils.isMeasure(select.expr)) return "continue";
                                    var projectionQueryName = select.name;
                                    return scopeAsQueryNames.some(function(queryName) {
                                        return queryName === projectionQueryName;
                                    }) ? void 0 : currentDepth < depth ? {
                                        value: {
                                            PrimaryDepth: depth
                                        }
                                    } : {
                                        value: void 0
                                    };
                                }(projections_2[_a]);
                                if ("object" == typeof state_2) return state_2.value;
                            }
                            depth++;
                        }
                        return currentDepth < depth ? {
                            PrimaryDepth: depth
                        } : void 0;
                    }, DataShapeBindingBuilder.prototype.updateScopeAggregatesForGroupings = function(groupings, items) {
                        var _this = this, featureSwitches = this.featureSwitches;
                        if (featureSwitches.scopedAggregates && items && groupings) for (var depth = 0, _i = 0, items_2 = items; _i < items_2.length; _i++) {
                            var dataShapeBindingAggregates = items_2[_i], dataShapeBindingAggregates = dataShapeBindingAggregates.aggregates && dataShapeBindingAggregates.aggregates.filter(data.CompiledDataViewMapping.isCompiledDataViewMappingScopedAggregate);
                            _.isEmpty(dataShapeBindingAggregates) || (dataShapeBindingAggregates = this.convertDataViewMappingAggregate(dataShapeBindingAggregates, function(scope) {
                                return _this.toAggregateScope(scope, groupings, depth + 1);
                            }), dataShapeBindingAggregates = this.getDataShapeBindingAggregates(dataShapeBindingAggregates), 
                            _.isEmpty(dataShapeBindingAggregates) || (groupings[depth].Aggregates = dataShapeBindingAggregates), 
                            depth++);
                        }
                    }, DataShapeBindingBuilder.prototype.getDataShapeBindingAggregates = function() {
                        for (var dataShapeAggregates = [], _i = 0; _i < arguments.length; _i++) dataShapeAggregates[_i] = arguments[_i];
                        for (var consolidatedBindings = {}, _a = 0, dataShapeAggregates_1 = dataShapeAggregates; _a < dataShapeAggregates_1.length; _a++) {
                            var dataShapeAggregate = dataShapeAggregates_1[_a];
                            _.forEach(dataShapeAggregate, function(aggregates, selectIndex) {
                                for (var aggregatesForSelect = consolidatedBindings[selectIndex] = consolidatedBindings[selectIndex] || [], _i = 0, aggregates_3 = aggregates; _i < aggregates_3.length; _i++) !function(aggregate) {
                                    aggregatesForSelect.some(function(aggregateForSelect) {
                                        return _.isEqual(aggregateForSelect, aggregate);
                                    }) || aggregatesForSelect.push(aggregate);
                                }(aggregates_3[_i]);
                            });
                        }
                        return _.map(consolidatedBindings, function(aggregates, selectIndex) {
                            return {
                                Select: +selectIndex,
                                Aggregations: aggregates
                            };
                        });
                    }, DataShapeBindingBuilder.prototype.updateGrouping = function(grouping, items, showAll, groupByNames) {
                        this.addProjections(grouping.Projections, items);
                        var indicesByName = this.indicesByName;
                        if (showAll) {
                            grouping.ShowItemsWithNoData || (grouping.ShowItemsWithNoData = []);
                            for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
                                var item = items_3[_i];
                                this.insertProjection(grouping.ShowItemsWithNoData, indicesByName[item.queryName]);
                            }
                        }
                        for (var subtotalType = items[0].subtotalType, i = 1, len = items.length; i < len; i++) if (items[i].subtotalType !== subtotalType) {
                            subtotalType = void 0;
                            break;
                        }
                        groupByNames = function(subtotalType) {
                            switch (subtotalType) {
                              case 1:
                                return 1;

                              case 2:
                                return 2;

                              case 0:
                                return;
                            }
                        }(null != subtotalType ? subtotalType : groupByNames);
                        null != groupByNames && (grouping.Subtotal = groupByNames);
                        groupByNames = this.groupByNames;
                        groupByNames && (grouping.GroupBy = _.map(groupByNames, function(i) {
                            return indicesByName[i];
                        }));
                    }, DataShapeBindingBuilder.prototype.withNested = function(groupings, aggregates, showAll, roleSubtotalType) {
                        for (var _i = 0, items_4 = aggregates; _i < items_4.length; _i++) {
                            var item = items_4[_i], grouping = {
                                Projections: []
                            };
                            this.updateGrouping(grouping, [ item ], showAll, roleSubtotalType), groupings.push(grouping);
                        }
                        this.updateScopeAggregatesForGroupings(groupings, aggregates);
                        aggregates = this.getAggregatesForRoleItems(aggregates);
                        return this.applyTopLevelAggregates(aggregates), this;
                    }, DataShapeBindingBuilder.prototype.filterItems = function(items, activeProjections, noDefaultProjections) {
                        if (!_.isEmpty(items)) {
                            items = _.uniqBy(items, function(item) {
                                return item.queryName;
                            });
                            var itemsFiltered, indicesByName = this.indicesByName;
                            activeProjections && (itemsFiltered = []);
                            for (var i = 0, len = items.length; i < len; i++) {
                                var item = items[i], indexToSkip = null, isInactiveItemProjection = activeProjections && !_.isEmpty(activeProjections) && !_.includes(activeProjections, item.queryName);
                                null == indicesByName[item.queryName] ? indexToSkip = i - 1 : (isInactiveItemProjection || this.isReferenced(item)) && (indexToSkip = i), 
                                null == indexToSkip ? itemsFiltered && itemsFiltered.push(item) : itemsFiltered = itemsFiltered || (indexToSkip < 0 ? [] : ArrayExtensions.range(items, 0, indexToSkip));
                            }
                            return itemsFiltered || (noDefaultProjections ? [] : items);
                        }
                    }, DataShapeBindingBuilder.prototype.isReferenced = function(projectionIdx) {
                        projectionIdx = this.indicesByName[projectionIdx.queryName];
                        return isReferencedAxis(projectionIdx, this.primary) || isReferencedAxis(projectionIdx, this.secondary) || _.includes(this.projections, projectionIdx);
                    }, DataShapeBindingBuilder.prototype.containsAll = function(grouping, items) {
                        for (var projections = grouping.Projections, indicesByName = this.indicesByName, _i = 0, items_5 = items; _i < items_5.length; _i++) {
                            var item = items_5[_i];
                            if (!_.includes(projections, indicesByName[item.queryName])) return !1;
                        }
                        return !0;
                    }, DataShapeBindingBuilder.prototype.addProjections = function(projections, items) {
                        for (var indicesByName = this.indicesByName, _i = 0, items_6 = items; _i < items_6.length; _i++) {
                            var item = items_6[_i], projectionIdx = indicesByName[item.queryName];
                            this.insertProjection(projections, projectionIdx), this.addJoinPredicateBehavior(projectionIdx, item.joinPredicate);
                        }
                    }, DataShapeBindingBuilder.prototype.addJoinPredicateBehavior = function(projectionIndex, behavior) {
                        this.joinPredicateBehaviors[projectionIndex] ? void 0 === behavior && (this.joinPredicateBehaviors[projectionIndex].behavior = behavior) : this.joinPredicateBehaviors[projectionIndex] = {
                            behavior: behavior
                        };
                    }, DataShapeBindingBuilder.prototype.withAdditionalProjections = function(additionalProjections) {
                        return _.isEmpty(additionalProjections) || (this.additionalProjections = additionalProjections), 
                        this;
                    }, DataShapeBindingBuilder.prototype.applyAdditional = function(mapping) {
                        var _this = this, querySelects = this.querySelects, additionalProjections = this.additionalProjections, activeQueryRefsByRole = CompiledDataViewMappingsByRole.findActive(mapping);
                        if (!_.isEmpty(additionalProjections)) for (var primary = this.primary, secondary = this.secondary, projections = this.projections, _i = 0, additionalProjections_1 = additionalProjections; _i < additionalProjections_1.length; _i++) {
                            var scopeRefIndices, additionalProjection = additionalProjections_1[_i], addedProjectionToGroup = data.DataBoundObjectQueryExtender.getScopeRefs(null === (scopeRefIndices = additionalProjection.selector) || void 0 === scopeRefIndices ? void 0 : scopeRefIndices.data, querySelects, activeQueryRefsByRole), additionalProjectionIdx = this.indicesByName[additionalProjection.queryName], hasSecondary = this.convertProjectionAggregates(additionalProjectionIdx, additionalProjection.aggregates);
                            hasSecondary && this.applyTopLevelAggregates([ hasSecondary ]), null !== addedProjectionToGroup ? (scopeRefIndices = _.map(addedProjectionToGroup, function(scopeRef) {
                                return _this.indicesByName[scopeRef];
                            }), hasSecondary = secondary && !_.isEmpty(secondary.Groupings), (addedProjectionToGroup = primary && this.addAdditional(additionalProjectionIdx, scopeRefIndices, primary)) && hasSecondary && this.addSuppressedProjection(_.last(secondary.Groupings), additionalProjectionIdx), 
                            (addedProjectionToGroup = addedProjectionToGroup || hasSecondary && this.addAdditional(additionalProjectionIdx, scopeRefIndices, secondary)) && this.addJoinPredicateBehavior(additionalProjectionIdx, additionalProjection.joinPredicate)) : additionalProjection.aggregates || (projections || (this.projections = projections = []), 
                            this.insertProjection(projections, additionalProjectionIdx), this.addJoinPredicateBehavior(additionalProjectionIdx, additionalProjection.joinPredicate));
                        }
                    }, DataShapeBindingBuilder.prototype.addAdditional = function(projectionIdx, remainingScopeRefs, axis) {
                        axis.Groupings;
                        for (var grouping, groupings = axis.Groupings, added = !1, groupingIndex = 0; groupingIndex < groupings.length; groupingIndex++) if (grouping = groupings[groupingIndex], 
                        added) this.addSuppressedProjection(grouping, projectionIdx); else if (_.remove(remainingScopeRefs, function(index) {
                            return _.includes(grouping.Projections, index);
                        }), 0 === remainingScopeRefs.length) {
                            if (!this.isProjectingOnNonLeafGrouping(groupingIndex, axis)) return this.insertProjection(_.last(groupings).Projections, projectionIdx), 
                            !0;
                            this.insertProjection(grouping.Projections, projectionIdx), added = !0;
                        }
                        return added;
                    }, DataShapeBindingBuilder.prototype.isProjectingOnNonLeafGrouping = function(projectionTargetGroupingIndex, axis) {
                        axis.Groupings, 0 <= projectionTargetGroupingIndex && axis.Groupings.length;
                        var groupingsCount = axis.Groupings.length;
                        return projectionTargetGroupingIndex !== groupingsCount - 1 && !(2 !== groupingsCount || !axis.Synchronization);
                    }, DataShapeBindingBuilder.prototype.addSuppressedProjection = function(grouping, projectionIndex) {
                        grouping.SuppressedProjections || (grouping.SuppressedProjections = []), this.insertProjection(grouping.SuppressedProjections, projectionIndex);
                    }, DataShapeBindingBuilder.prototype.applyTopLevelAggregates = function(aggregates) {
                        var _a;
                        _.isEmpty(aggregates) || (this.aggregates || (this.aggregates = []), (_a = this.aggregates).push.apply(_a, aggregates));
                    }, DataShapeBindingBuilder.prototype.getAggregatesForRoleItems = function(items) {
                        for (var dataShapeAggregates = [], _i = 0, items_7 = items; _i < items_7.length; _i++) {
                            var item = items_7[_i];
                            item.aggregates && dataShapeAggregates.push(this.convertDataViewMappingAggregate(item.aggregates, item.queryName));
                        }
                        if (!_.isEmpty(dataShapeAggregates)) return this.getDataShapeBindingAggregates.apply(this, dataShapeAggregates);
                    }, DataShapeBindingBuilder.prototype.convertDataViewMappingAggregate = function(aggregates, arg1) {
                        var defaultItemProjectionIndex, getAggregateScope;
                        _.isFunction(arg1) ? getAggregateScope = arg1 : defaultItemProjectionIndex = this.indicesByName[arg1];
                        for (var aggregateContainersBySelectIndex = {}, _i = 0, aggregates_4 = aggregates; _i < aggregates_4.length; _i++) {
                            var aggregate = aggregates_4[_i], respectInstanceFilters = void 0, scope = void 0;
                            if (data.CompiledDataViewMapping.isCompiledDataViewMappingScopedAggregate(aggregate)) {
                                if (!getAggregateScope) continue;
                                if (respectInstanceFilters = aggregate.queryName ? this.indicesByName[aggregate.queryName] : defaultItemProjectionIndex, 
                                !(scope = aggregate.scope && getAggregateScope(aggregate.scope))) continue;
                            } else respectInstanceFilters = defaultItemProjectionIndex;
                            var aggregateContainers = aggregateContainersBySelectIndex[respectInstanceFilters] = aggregateContainersBySelectIndex[respectInstanceFilters] || [], respectInstanceFilters = !!scope || void 0;
                            aggregate.min || aggregate.max || aggregate.average, aggregate.min && aggregateContainers.push({
                                Scope: scope,
                                RespectInstanceFilters: respectInstanceFilters,
                                Min: {}
                            }), aggregate.max && aggregateContainers.push({
                                Scope: scope,
                                RespectInstanceFilters: respectInstanceFilters,
                                Max: {}
                            }), aggregate.average && aggregateContainers.push({
                                Scope: scope,
                                RespectInstanceFilters: respectInstanceFilters,
                                Average: {}
                            });
                        }
                        return _.isEmpty(aggregateContainersBySelectIndex) ? void 0 : aggregateContainersBySelectIndex;
                    }, DataShapeBindingBuilder.prototype.convertProjectionAggregates = function(projectionAggregates, aggregates) {
                        if (aggregates) {
                            var aggregateContainers = [], projectionAggregates = {
                                Select: projectionAggregates,
                                Aggregations: aggregateContainers
                            };
                            if (aggregates.min && aggregateContainers.push({
                                Min: {}
                            }), aggregates.max && aggregateContainers.push({
                                Max: {}
                            }), aggregates.average && aggregateContainers.push({
                                Average: {}
                            }), aggregates.median && aggregateContainers.push({
                                Median: {}
                            }), aggregates.percentiles) for (var _i = 0, _a = aggregates.percentiles; _i < _a.length; _i++) {
                                var percentile = _a[_i];
                                aggregateContainers.push(function(percentile) {
                                    var result = {
                                        K: percentile.k
                                    };
                                    return percentile.exclusive && (result.Exclusive = percentile.exclusive), {
                                        Percentile: result
                                    };
                                }(percentile));
                            }
                            return _.isEmpty(projectionAggregates.Aggregations), projectionAggregates;
                        }
                    }, DataShapeBindingBuilder.prototype.suppressProjectionsIfNeeded = function() {
                        if (!_.isEmpty(this.primaryOnlyProjections) && this.secondary) for (var innermostSecondary = _.last(this.secondary.Groupings), _i = 0, _a = this.primaryOnlyProjections; _i < _a.length; _i++) {
                            var index = _a[_i];
                            this.addSuppressedProjection(innermostSecondary, index);
                        }
                    }, DataShapeBindingBuilder.prototype.toBinding = function(aggregates) {
                        this.applyAdditional(aggregates), this.suppressProjectionsIfNeeded();
                        var binding = this.primary, aggregates = this.projections;
                        if (!binding) {
                            if (!aggregates) return;
                            binding = {
                                Groupings: [ {
                                    Projections: aggregates
                                } ]
                            }, aggregates = null;
                        }
                        var restartToken = this.restartToken;
                        if (restartToken) if (this.reduction.Primary && this.reduction.Primary.Window && (this.reduction.Primary.Window.RestartTokens = restartToken, 
                        0), this.reduction.Scoped) for (var _i = 0, _a = this.reduction.Scoped; _i < _a.length; _i++) {
                            var scoped = _a[_i];
                            scoped.Algorithm.Window && (scoped.Algorithm.Window.RestartTokens = restartToken, 
                            scoped.Algorithm.Window.RestartMatchingBehavior = 1, 0);
                        }
                        binding = {
                            Primary: binding
                        };
                        this.secondary && (binding.Secondary = this.secondary), aggregates && (binding.Projections = aggregates), 
                        (this.reduction.Primary || this.reduction.Secondary || this.reduction.Intersection || this.reduction.Scoped) && (binding.DataReduction = this.reduction), 
                        this.includeEmptyGroups && (binding.IncludeEmptyGroups = this.includeEmptyGroups);
                        aggregates = this.aggregates;
                        aggregates && (binding.Aggregates = aggregates);
                        for (var suppressedJoinPredicates = [], i = 0; i < this.joinPredicateBehaviors.length; i++) this.joinPredicateBehaviors[i] && 0 === this.joinPredicateBehaviors[i].behavior && suppressedJoinPredicates.push(i);
                        return _.isEmpty(suppressedJoinPredicates) || (binding.SuppressedJoinPredicates = suppressedJoinPredicates), 
                        binding.Version = 1, this.highlightFilter && (binding.Highlights = this.highlightFilter), 
                        binding;
                    }, DataShapeBindingBuilder;
                }();
            }(Impl = Impl || {});
            var RemoveWithRefSQExprVisitor = function(_super) {
                function RemoveWithRefSQExprVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(RemoveWithRefSQExprVisitor, _super), RemoveWithRefSQExprVisitor.prototype.visitScopedEval = function(expr) {
                    return _.isEmpty(expr.scope) ? expr : data.SQExprBuilder.scopedEval(expr.expression, _.filter(expr.scope, function(expr) {
                        return !SQExpr.isWithRef(expr);
                    }));
                }, RemoveWithRefSQExprVisitor;
            }(data.SQExprRewriter), SQGroupRefToColumnRefRewriter = function(_super) {
                function SQGroupRefToColumnRefRewriter() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(SQGroupRefToColumnRefRewriter, _super), SQGroupRefToColumnRefRewriter.prototype.visitGroupRef = function(expr) {
                    return new data.SQColumnRefExpr(expr.source, expr.ref);
                }, SQGroupRefToColumnRefRewriter;
            }(data.SQExprRewriter), SQRoleRefRewriter = function(_super) {
                function SQRoleRefRewriter(mappings, selects) {
                    var _this = _super.call(this) || this;
                    return _this.mappings = mappings, _this.selects = selects, _this;
                }
                return __extends(SQRoleRefRewriter, _super), SQRoleRefRewriter.prototype.visitScopedEval = function(expr) {
                    for (var exprs = [], hasRoleRefs = !1, _i = 0, _a = expr.scope; _i < _a.length; _i++) {
                        var expression = _a[_i];
                        if (SQExpr.isRoleRef(expression)) for (var hasRoleRefs = !0, _b = 0, _c = this.mappings; _b < _c.length; _b++) {
                            var queryRefs = _c[_b], queryRefs = CompiledDataViewMappingsByRole.findActive(queryRefs)[expression.role];
                            if (queryRefs) for (var this_4 = this, _d = 0, queryRefs_1 = queryRefs; _d < queryRefs_1.length; _d++) !function(queryRef) {
                                var select = _.find(this_4.selects, function(select) {
                                    return select.name === queryRef;
                                });
                                select && exprs.push(select.expr);
                            }(queryRefs_1[_d]);
                        } else exprs.push(expression);
                    }
                    return hasRoleRefs ? data.SQExprBuilder.scopedEval(expr.expression, _.uniqBy(exprs, function(expr) {
                        return data.services.SemanticQuerySerializer.serializeExpr(expr);
                    })) : expr;
                }, SQRoleRefRewriter;
            }(data.SQExprRewriter), CompiledDataViewMappingsByRole = function() {
                function CompiledDataViewMappingsByRole() {
                    this.queryReferencesByRole = {};
                }
                return CompiledDataViewMappingsByRole.findActive = function(mapping) {
                    var compiledDataViewMappingVisitor = new CompiledDataViewMappingsByRole();
                    return data.CompiledDataViewMapping.visitMapping(mapping, compiledDataViewMappingVisitor), 
                    compiledDataViewMappingVisitor.queryReferencesByRole;
                }, CompiledDataViewMappingsByRole.prototype.visitRole = function(compiledDataViewRole) {
                    var roleItems = compiledDataViewRole.items;
                    _.isEmpty(compiledDataViewRole.activeItems) || (roleItems = _.filter(roleItems, function(r) {
                        return _.includes(compiledDataViewRole.activeItems, r.queryName);
                    })), this.queryReferencesByRole[compiledDataViewRole.role] = _.map(roleItems, function(roleItem) {
                        return roleItem.queryName;
                    });
                }, CompiledDataViewMappingsByRole;
            }();
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_12;
    (function(dsr_4) {
        var Utility = jsCommon.Utility;
        dsr_4.createQueryCache = function(promiseFactory, telemetryService, createQuery, createCancelQuery, featureSwitches) {
            return new QueryCache(promiseFactory, telemetryService, createQuery, createCancelQuery, featureSwitches);
        };
        var generateGuid = Utility.generateGuid;
        dsr_4.setGenerateGuid = function(fn) {
            generateGuid = fn;
        };
        var CacheItemContext, DsrClientSideFilterGenerator, QueryCache = function() {
            function QueryCache(promiseFactory, telemetryService, createQuery, createCancelQuery, featureSwitches) {
                this.featureSwitches = featureSwitches, this.createQuery = createQuery, this.createCancelQuery = createCancelQuery, 
                this.promiseFactory = promiseFactory, this.cacheByModel = {}, this.telemetryService = telemetryService;
            }
            return QueryCache.prototype.ensure = function(options) {
                var _this = this;
                options.command;
                var _a = options.command;
                _a && _a.Commands && _a.Commands.length;
                var command = _a.Commands[0].SemanticQueryDataShapeCommand, cache = this.ensureCache(options.dataSources), cacheKey = CacheItemContext.generateCacheKeyDataQuery(_a);
                if (cache.hasCacheEntry(cacheKey)) {
                    if (QueryCache.allowResultFromClientCacheOrDefault(options)) return this.telemetryService.logEvent(powerbi.telemetry.DataClientCacheHit, {
                        cacheHit: !0,
                        isCacheFull: cache.isFull(),
                        entryCount: cache.getEntryCount()
                    }), cache.bindCacheEntry(cacheKey, void 0, options.telemetryV2Enabled);
                    cache.clearEntry(cacheKey);
                }
                this.telemetryService.logEvent(powerbi.telemetry.DataClientCacheHit, {
                    cacheHit: !1,
                    isCacheFull: cache.isFull(),
                    entryCount: cache.getEntryCount()
                });
                var entryContext = CacheItemContext.createCacheItemContext(_a, this.featureSwitches, cacheKey), _a = this.findEquivalentCache(options, cache, entryContext);
                if (_a) return _a;
                var queuedOptions = __assign({}, options);
                queuedOptions.queryId = entryContext.queryId, queuedOptions.executionType = 0, null !== (_a = this.featureSwitches) && void 0 !== _a && _a.queryContext && (promise = function(resultWithQueryContext) {
                    var queryContext = _this.findQueryContext(queuedOptions);
                    if (!queryContext) return resultWithQueryContext;
                    resultWithQueryContext = __assign({}, resultWithQueryContext);
                    return resultWithQueryContext.queryContext = queryContext, resultWithQueryContext;
                });
                var promise = cache.createCacheEntry(cacheKey, entryContext, promise, QueryCache.rewriteCachedResult, options.telemetryV2Enabled);
                promise.promise.catch(function(reason) {
                    powerbi.isHttpClientError(reason) || _this.featureSwitches && _this.featureSwitches.queryCancellation && _this.createCancelQuery({
                        dataSources: queuedOptions.dataSources,
                        command: queuedOptions.command,
                        allowResultFromClientCache: queuedOptions.allowResultFromClientCache,
                        allowClientSideFilters: queuedOptions.allowClientSideFilters,
                        cacheResponseOnServer: queuedOptions.cacheResponseOnServer,
                        ignoreViewportForCache: queuedOptions.ignoreViewportForCache,
                        cacheOptions: queuedOptions.cacheOptions,
                        queryId: queuedOptions.queryId,
                        executionType: 1
                    }, reason && reason.queryCancellationSource);
                }), this.createQuery(queuedOptions, promise);
                promise = cache.bindCacheEntry(cacheKey, void 0, options.telemetryV2Enabled);
                return !1 === options.cacheResponseOnClient && cache.clearEntry(cacheKey), command.Binding && command.Binding.DataReduction && (containsRestartToken(command.Binding.DataReduction.Primary) || containsRestartToken(command.Binding.DataReduction.Secondary)) || promise.then(function(result) {
                    result && result.dsr && function(dsr, readDsrV2) {
                        {
                            if (dsr_4.isDsrV2(dsr)) {
                                if (!readDsrV2) return !1;
                                for (var dataShapesParser = dsr_4.reader.V2.createDsrParser(dsr, void 0).dataShapes(), dsrMinorVersion = dsr_4.getDsrV2MinorVersion(dsr); dataShapesParser.next(); ) if (dsrMinorVersion && 1 <= dsrMinorVersion) {
                                    if (!0 !== dataShapesParser.hasAllData()) return !1;
                                } else if (!dataShapesParser.complete() || dataShapesParser.limitsExceeded() || dataShapesParser.hasRestartTokens()) return !1;
                                return !0;
                            }
                            return _.every(dsr.DataShapes, function(dataShape) {
                                return dataShape && dataShape.IsComplete && _.isEmpty(dataShape.DataLimitsExceeded) && !dataShape.RestartTokens;
                            });
                        }
                    }(result.dsr, _this.featureSwitches && _this.featureSwitches.dsrV2) && (entryContext.hasAllData = !0);
                }, function() {}), promise;
            }, QueryCache.prototype.findQueryContext = function(applicationContext) {
                applicationContext = applicationContext.applicationContext;
                if (applicationContext) return _.size(applicationContext.Sources), applicationContext.Sources[0].CustomProperties;
            }, QueryCache.prototype.clear = function(cache) {
                cache = this.getCache(cache);
                cache && cache.clearAllEntries();
            }, QueryCache.prototype.rewrite = function(cacheRewriter, rewriter) {
                var _this = this, cache = this.getCache(cacheRewriter);
                cache && (cacheRewriter = {}, rewriter.rewriteCacheKey && rewriter.rewriteDataQueryCacheKey && (cacheRewriter.rewriteKey = function(dataQuery) {
                    var command, rewrittenContext, rewrittenCommand = JSON.parse(dataQuery), context = cache.getEntryContext(dataQuery);
                    return context.compositeDataQuery ? (command = rewriter.rewriteDataQueryCacheKey(dataQuery = rewrittenCommand)) && command !== dataQuery && (rewrittenContext = CacheItemContext.createCacheItemContextForCompositeDataQuery(command, _this.featureSwitches), 
                    _.assign(context, rewrittenContext)) : (rewrittenCommand = rewriter.rewriteCacheKey(command = rewrittenCommand)) && rewrittenCommand !== command && (rewrittenContext = CacheItemContext.createCacheItemContextForNonCompositeDataQuery(rewrittenCommand, _this.featureSwitches), 
                    _.assign(context, rewrittenContext)), context.key;
                }), rewriter.rewriteCacheResult && (cacheRewriter.rewriteResult = function(rewrittenResult) {
                    var data = rewrittenResult, rewrittenResult = rewriter.rewriteCacheResult({
                        descriptor: data.descriptor,
                        dsr: data.dsr
                    });
                    return rewrittenResult ? {
                        descriptor: rewrittenResult.descriptor,
                        dsr: rewrittenResult.dsr
                    } : {
                        descriptor: data.descriptor,
                        dsr: data.dsr
                    };
                }), cache.rewriteAllEntries(cacheRewriter));
            }, QueryCache.prototype.put = function(entryContext, cacheKey, dataAsObject) {
                var cache = this.ensureCache(entryContext), entryContext = cacheKey, cacheKey = CacheItemContext.generateCacheKeyDataQuery(entryContext);
                cache.hasCacheEntry(cacheKey) ? cache.putCacheResult(cacheKey, dataAsObject, QueryCache.rewriteCachedResult) : (entryContext = CacheItemContext.createCacheItemContext(entryContext, this.featureSwitches, cacheKey), 
                cache.createCacheEntry(cacheKey, entryContext, void 0, QueryCache.rewriteCachedResult).deferred.resolve(dataAsObject));
            }, QueryCache.allowResultFromClientCacheOrDefault = function(options) {
                return !1 !== options.allowResultFromClientCache;
            }, QueryCache.prototype.findEquivalentCache = function(options, cache, entryContext) {
                if (QueryCache.allowResultFromClientCacheOrDefault(options)) if (entryContext.compositeDataQuery) {
                    if (options.ignoreViewportForCache) for (var _b = 0, _c = cache.keys(); _b < _c.length; _b++) {
                        existingKey = _c[_b];
                        if ((existingItemContext = cache.getEntryContext(existingKey)) && existingItemContext.keyWithoutViewport && existingItemContext.keyWithoutViewport === entryContext.keyWithoutViewport) return cache.bindCacheEntry(existingItemContext.key, void 0, options.telemetryV2Enabled);
                    }
                } else {
                    var binding = options.command;
                    binding && _.isEmpty(binding.Commands);
                    for (var binding = binding.Commands[0].SemanticQueryDataShapeCommand.Binding, isTopNPerLevelReduction = !!(binding && binding.DataReduction && binding.DataReduction.Primary && binding.DataReduction.Primary.TopNPerLevel), reusedCacheWithClientSideFilters = !1, _i = 0, _a = cache.keys(); _i < _a.length; _i++) {
                        var existingItemContext, existingKey = _a[_i];
                        if (existingItemContext = cache.getEntryContext(existingKey)) {
                            if (!isTopNPerLevelReduction && existingItemContext.hasAllData && existingItemContext.keyWithoutReduction === entryContext.keyWithoutReduction) return cache.bindCacheEntry(existingItemContext.key, void 0, options.telemetryV2Enabled);
                            if (DsrClientSideFilterGenerator.tryReuseCacheWithClientSideFilters(cache, existingItemContext, options, entryContext, options.telemetryV2Enabled)) {
                                reusedCacheWithClientSideFilters = !0;
                                break;
                            }
                        }
                    }
                    reusedCacheWithClientSideFilters && jsCommon.Trace.information("Reused cache with client side filters");
                }
            }, QueryCache.prototype.getCache = function(dataSource) {
                return this.cacheByModel[this.generateModelKey(dataSource)];
            }, QueryCache.prototype.ensureCache = function(_b) {
                var modelKey = this.generateModelKey(_b), cacheByModel = this.cacheByModel, cache = cacheByModel[modelKey];
                return cache = void 0 === cache ? null !== (_b = this.featureSwitches) && void 0 !== _b && _b.useLegacyQueryCache ? cacheByModel[modelKey] = new powerbi.LegacyRejectablePromiseCache(this.promiseFactory) : null !== (_b = this.featureSwitches) && void 0 !== _b && _b.lruCacheEvictionPolicy ? cacheByModel[modelKey] = new powerbi.RejectablePromiseCache(this.promiseFactory, 1) : cacheByModel[modelKey] = new powerbi.RejectablePromiseCache(this.promiseFactory, 0) : cache;
            }, QueryCache.prototype.generateModelKey = function(dataSources) {
                if (!_.isEmpty(dataSources)) return JSON.stringify(_.map(dataSources, function(dsrDataSource) {
                    return {
                        dbName: dsrDataSource.dbName,
                        vsName: dsrDataSource.vsName,
                        schemaName: dsrDataSource.schemaName
                    };
                }));
            }, QueryCache.rewriteCachedResult = function(dataWithoutMetrics) {
                if (!dataWithoutMetrics) return dataWithoutMetrics;
                dataWithoutMetrics = __assign({}, dataWithoutMetrics);
                return delete dataWithoutMetrics.metrics, dataWithoutMetrics.fromClientCache = !0, 
                dataWithoutMetrics;
            }, QueryCache;
        }();
        function containsRestartToken(algorithm) {
            return algorithm && algorithm.Window && null != algorithm.Window.RestartTokens;
        }
        function isDataReductionWindowOrUndefined(algorithm) {
            return !algorithm || algorithm.Window;
        }
        function safeDeserializeQuery(queryDefinition) {
            if (queryDefinition && queryDefinition.From && queryDefinition.Select) return data_12.services.SemanticQuerySerializer.deserializeQuery(queryDefinition);
        }
        !function(CacheItemContext) {
            function createCacheItemContextForCompositeDataQuery(dataQuery, featureSwitches, cacheKey) {
                return isCompositeDataQuery(dataQuery), cacheKey && generateCacheKeyForCompositeDataQuery(dataQuery), 
                {
                    key: cacheKey || generateCacheKeyForCompositeDataQuery(dataQuery),
                    keyWithoutReduction: function(clonedDataQuery) {
                        if (clonedDataQuery && isCompositeDataQuery(clonedDataQuery), clonedDataQuery) {
                            clonedDataQuery = _.cloneDeep(clonedDataQuery);
                            return clearCommandDataReduction(clonedDataQuery.Commands[0].SemanticQueryDataShapeCommand), 
                            JSON.stringify(clonedDataQuery);
                        }
                    }(dataQuery),
                    keyWithoutViewport: function(clonedDataQuery) {
                        if (clonedDataQuery && isCompositeDataQuery(clonedDataQuery), clonedDataQuery) {
                            clonedDataQuery.Commands, clonedDataQuery.Commands.length, clonedDataQuery.Commands[1].ScriptVisualCommand;
                            clonedDataQuery = _.cloneDeep(clonedDataQuery);
                            return function(command) {
                                command && (command.ViewportHeightPx = void 0, command.ViewportWidthPx = void 0);
                            }(clonedDataQuery.Commands[1].ScriptVisualCommand), JSON.stringify(clonedDataQuery);
                        }
                    }(dataQuery),
                    keyWithoutFilter: void 0,
                    queryFilters: void 0,
                    compositeDataQuery: !0,
                    queryId: generateQueryId(featureSwitches)
                };
            }
            function createCacheItemContextForNonCompositeDataQuery(dataShapeCommand, featureSwitches, cacheKey) {
                cacheKey && generateCacheKey(dataShapeCommand);
                var isSuitableForClientSideFiltering = DsrClientSideFilterGenerator.isDataShapeCommandSuitableForClientSideFiltering(dataShapeCommand);
                return {
                    key: cacheKey || generateCacheKey(dataShapeCommand),
                    keyWithoutReduction: function(clonedCommand) {
                        if (clonedCommand) {
                            clonedCommand = _.cloneDeep(clonedCommand);
                            return clearCommandDataReduction(clonedCommand), JSON.stringify(clonedCommand);
                        }
                    }(dataShapeCommand),
                    keyWithoutViewport: void 0,
                    keyWithoutFilter: isSuitableForClientSideFiltering ? function(clonedCommand) {
                        if (clonedCommand) {
                            clonedCommand = _.cloneDeep(clonedCommand);
                            return function(command) {
                                command && command.Query && command.Query.Where && (command.Query.Where = void 0);
                            }(clonedCommand), JSON.stringify(clonedCommand);
                        }
                    }(dataShapeCommand) : void 0,
                    queryFilters: isSuitableForClientSideFiltering ? function(where) {
                        where = where && where.Query;
                        if (where && !_.isEmpty(where.Where)) {
                            where = safeDeserializeQuery(where), where = where && where.where();
                            if (!_.isEmpty(where)) return where;
                        }
                    }(dataShapeCommand) : void 0,
                    compositeDataQuery: !1,
                    queryId: generateQueryId(featureSwitches)
                };
            }
            function isCompositeDataQuery(dataQuery) {
                return dataQuery && dataQuery.Commands && dataQuery.Commands.length, 1 < dataQuery.Commands.length;
            }
            function generateCacheKey(command) {
                if (command) return JSON.stringify(command);
            }
            function generateQueryId(featureSwitches) {
                return featureSwitches && featureSwitches.queryCancellation ? generateGuid() : "";
            }
            function clearCommandDataReduction(command) {
                command && command.Binding && "object" == typeof command.Binding && (command.Binding.DataReduction = void 0, 
                command.Binding.Limits = void 0);
            }
            function generateCacheKeyForCompositeDataQuery(dataQuery) {
                if (dataQuery && isCompositeDataQuery(dataQuery), dataQuery) return JSON.stringify(dataQuery);
            }
            CacheItemContext.createCacheItemContext = function(dataQuery, featureSwitches, cacheKey) {
                return dataQuery && dataQuery.Commands && dataQuery.Commands.length, isCompositeDataQuery(dataQuery) ? createCacheItemContextForCompositeDataQuery(dataQuery, featureSwitches, cacheKey) : (dataQuery.Commands.length, 
                createCacheItemContextForNonCompositeDataQuery(dataQuery.Commands[0].SemanticQueryDataShapeCommand, featureSwitches, cacheKey));
            }, CacheItemContext.generateCacheKeyDataQuery = function(dataQuery) {
                return dataQuery && dataQuery.Commands && dataQuery.Commands.length, isCompositeDataQuery(dataQuery) ? generateCacheKeyForCompositeDataQuery(dataQuery) : generateCacheKey(dataQuery.Commands[0].SemanticQueryDataShapeCommand);
            }, CacheItemContext.createCacheItemContextForCompositeDataQuery = createCacheItemContextForCompositeDataQuery, 
            CacheItemContext.createCacheItemContextForNonCompositeDataQuery = createCacheItemContextForNonCompositeDataQuery;
        }(CacheItemContext = CacheItemContext || {}), function(DsrClientSideFilterGenerator) {
            function tryComputeClientSideFilters(newFiltersMissingFromOldQuery, newItemContext) {
                if (!newItemContext.compositeDataQuery && !!newItemContext.keyWithoutFilter) {
                    var filters = !newFiltersMissingFromOldQuery.compositeDataQuery && newFiltersMissingFromOldQuery.keyWithoutFilter && newFiltersMissingFromOldQuery.hasAllData;
                    if (filters && newFiltersMissingFromOldQuery.keyWithoutFilter === newItemContext.keyWithoutFilter) {
                        var counterparts, filters = getDifferentFilters(newFiltersMissingFromOldQuery.queryFilters, newItemContext.queryFilters);
                        if (filters = filters, counterparts = newItemContext.queryFilters, _.every(filters, function(filter) {
                            return _.some(counterparts, function(counterpart) {
                                return data_12.ClientSideFilter.isMoreRestrictiveFilter(counterpart, filter);
                            });
                        })) {
                            newFiltersMissingFromOldQuery = getDifferentFilters(newItemContext.queryFilters, newFiltersMissingFromOldQuery.queryFilters);
                            if (!_.isEmpty(newFiltersMissingFromOldQuery)) return function(dataShapeCommand, filtersToConvert) {
                                dataShapeCommand && dataShapeCommand.compositeDataQuery;
                                var dataShapeCommand = JSON.parse(dataShapeCommand.key), semanticQuery = safeDeserializeQuery(dataShapeCommand && dataShapeCommand.Query);
                                if (semanticQuery) return _.every(filtersToConvert, function(filterToConvert) {
                                    return data_12.SQFilter.contains(semanticQuery.where(), filterToConvert);
                                }), data_12.ClientSideFilter.tryConvertToClientSideFilters(semanticQuery.select(), filtersToConvert);
                            }(newItemContext, newFiltersMissingFromOldQuery);
                        }
                    }
                }
            }
            function getDifferentFilters(filters, comparants) {
                return _.isEmpty(comparants) ? filters : _.filter(filters, function(filter) {
                    return !data_12.SQFilter.contains(comparants, filter);
                });
            }
            DsrClientSideFilterGenerator.isDataShapeCommandSuitableForClientSideFiltering = function(dataReductionPrimary) {
                if (!dataReductionPrimary) return !1;
                var dataReductionPrimary = (dataReductionSecondary = dataReductionPrimary.Binding && dataReductionPrimary.Binding.DataReduction) && dataReductionSecondary.Primary, dataReductionSecondary = dataReductionSecondary && dataReductionSecondary.Secondary;
                return !(!isDataReductionWindowOrUndefined(dataReductionPrimary) || !isDataReductionWindowOrUndefined(dataReductionSecondary)) && (!containsRestartToken(dataReductionPrimary) && !containsRestartToken(dataReductionSecondary));
            }, DsrClientSideFilterGenerator.tryReuseCacheWithClientSideFilters = function(cache, oldItemContext, newQueryOptions, newItemContext, telemetryV2Enabled) {
                if (void 0 === telemetryV2Enabled && (telemetryV2Enabled = !1), QueryCache.allowResultFromClientCacheOrDefault(newQueryOptions), 
                newQueryOptions.allowClientSideFilters) {
                    var clientSideFilters = tryComputeClientSideFilters(oldItemContext, newItemContext);
                    return _.isEmpty(clientSideFilters) ? void 0 : cache.bindCacheEntry(oldItemContext.key, function(data) {
                        return function(dataWithClientSideFilters, clientSideFilters) {
                            dataWithClientSideFilters = __assign({}, dataWithClientSideFilters);
                            return dataWithClientSideFilters.clientSideFilters = clientSideFilters, dataWithClientSideFilters;
                        }(data, clientSideFilters);
                    }, telemetryV2Enabled);
                }
            }, DsrClientSideFilterGenerator.tryComputeClientSideFilters = tryComputeClientSideFilters;
        }(DsrClientSideFilterGenerator = DsrClientSideFilterGenerator || {});
    })((data_12 = powerbi.data || (powerbi.data = {})).dsr || (data_12.dsr = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var DateExtensions = jsCommon.DateExtensions;
        !function(PrimitiveValueEncoding) {
            var DoubleQuoteRegex = /''/g, DateTimeZeroMillisecondsRegex = /\.000'$/;
            function parseTypeEncodedValue(dsrValue, toSQExpr) {
                var dsrValueType = typeof dsrValue;
                if ("string" == dsrValueType) {
                    if (_.endsWith(dsrValue, "L")) {
                        var doubleValue = parseInt(dsrValue, 10);
                        return toSQExpr ? data.SQExprBuilder.integer(doubleValue, dsrValue) : doubleValue;
                    }
                    if (_.endsWith(dsrValue, "D")) {
                        doubleValue = parseFloatExtended(dsrValue);
                        return toSQExpr ? data.SQExprBuilder.double(doubleValue, dsrValue) : doubleValue;
                    }
                    if (_.endsWith(dsrValue, "M")) {
                        var dsrValueOptimized = parseFloatExtended(dsrValue);
                        return toSQExpr ? data.SQExprBuilder.decimal(dsrValueOptimized, dsrValue) : dsrValueOptimized;
                    }
                    if (_.endsWith(dsrValue, "'")) {
                        if ("'" === dsrValue.charAt(0)) {
                            var dateValue = dsrValue.substring(1, dsrValue.length - 1).replace(DoubleQuoteRegex, "'");
                            return toSQExpr ? data.SQExprBuilder.text(dateValue, dsrValue) : dateValue;
                        }
                        if (0 === dsrValue.indexOf("datetime'")) {
                            dsrValueOptimized = dsrValue.replace(DateTimeZeroMillisecondsRegex, "'"), dateValue = dsrValue.substring(9, dsrValueOptimized.length - 1), 
                            dateValue = DateExtensions.parseIsoDate(dateValue);
                            return toSQExpr ? data.SQExprBuilder.dateTime(dateValue, dsrValueOptimized) : dateValue;
                        }
                    }
                    if ("null" === dsrValue) return toSQExpr ? data.SQExprBuilder.nullConstant() : null;
                    if ("true" === dsrValue) return !toSQExpr || data.SQExprBuilder.boolean(!0);
                    if ("false" === dsrValue) return !!toSQExpr && data.SQExprBuilder.boolean(!1);
                }
                return "boolean" == dsrValueType ? toSQExpr ? data.SQExprBuilder.boolean(dsrValue) : dsrValue : null === dsrValue ? toSQExpr ? data.SQExprBuilder.nullConstant() : null : dsrValue;
            }
            function parseFloatExtended(value) {
                var rawResult = parseFloat(value);
                return isNaN(rawResult) ? parseFloat(value.replace("INF", "Infinity")) : rawResult;
            }
            PrimitiveValueEncoding.parseValue = function(dsrValue) {
                return parseTypeEncodedValue(dsrValue);
            }, PrimitiveValueEncoding.parseValueToSQExpr = function(dsrValue) {
                return parseTypeEncodedValue(dsrValue, !0);
            }, PrimitiveValueEncoding.parseBinary = function(value) {
                return value && _.startsWith(value, "base64'") ? value.substring("base64'".length, value.length - 1) : null;
            }, PrimitiveValueEncoding.parseOptimizedValue = function(dsrValue, type) {
                if (null === dsrValue) return null;
                switch (type) {
                  case 4:
                    return "number" == typeof dsrValue ? dsrValue : parseInt(dsrValue, 10);

                  case 2:
                  case 3:
                    return "number" == typeof dsrValue ? dsrValue : parseFloatExtended(dsrValue);

                  case 7:
                  case 6:
                    if ("number" != typeof dsrValue) return DateExtensions.parseIsoDate(dsrValue);
                    var date = new Date(dsrValue), result = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()), result = new Date(date.getTime() + 6e4 * result.getTimezoneOffset());
                    return result.epochTimeStamp = dsrValue, result;

                  case 1:
                    return dsrValue;

                  case 5:
                    return "number" == typeof dsrValue ? 1 === dsrValue : dsrValue;

                  case 13:
                    return parseTypeEncodedValue(dsrValue);
                }
            }, PrimitiveValueEncoding.parseOptimizedValueToSQExpr = function(value, dsrValue, type) {
                if (null === value) return data.SQExprBuilder.nullConstant();
                switch (type) {
                  case 4:
                    return "number" == typeof dsrValue ? data.SQExprBuilder.integer(+value) : data.SQExprBuilder.fromRawValue(260, +value, dsrValue.toString());

                  case 2:
                    return "number" == typeof dsrValue ? data.SQExprBuilder.decimal(+value) : data.SQExprBuilder.fromRawValue(258, +value, dsrValue.toString());

                  case 3:
                    return "number" == typeof dsrValue ? data.SQExprBuilder.double(+value) : data.SQExprBuilder.fromRawValue(259, +value, dsrValue.toString());

                  case 7:
                  case 6:
                    return "number" == typeof dsrValue ? new data.SQConstantExpr(powerbi.ValueType.fromExtendedType(519), value) : data.SQExprBuilder.fromRawValue(519, value, dsrValue.toString());

                  case 1:
                    return data.SQExprBuilder.text(value.toString());

                  case 5:
                    return data.SQExprBuilder.boolean(!!value);

                  case 13:
                    return parseTypeEncodedValue(dsrValue, !0);
                }
            }, PrimitiveValueEncoding.parseTypeEncodedValue = parseTypeEncodedValue;
        }(data.PrimitiveValueEncoding || (data.PrimitiveValueEncoding = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        function createMoveMeasureRewriter(measureMove) {
            return new MoveMeasureRewriter(measureMove);
        }
        function createEntityRenameRewriter(entityRename) {
            return new EntityRenameRewriter(entityRename);
        }
        function createPropertyRenameRewriter(propertyRename) {
            return new PropertyRenameRewriter(propertyRename);
        }
        function createHierarchyLevelRenameRewriter(hierarchyLevelRename) {
            return new HierarchyLevelRenameRewriter(hierarchyLevelRename);
        }
        data.createSchemaChangeRewriters = function(changes) {
            for (var rewriters = [], i = 0, length_5 = changes.length; i < length_5; i++) {
                var change = changes[i];
                change.measureMove && rewriters.push(createMoveMeasureRewriter(change.measureMove)), 
                change.entityRename && rewriters.push(createEntityRenameRewriter(change.entityRename)), 
                change.propertyRename && rewriters.push(createPropertyRenameRewriter(change.propertyRename)), 
                change.hierarchyLevelRename && rewriters.push(createHierarchyLevelRenameRewriter(change.hierarchyLevelRename));
            }
            return rewriters;
        }, data.createMoveMeasureRewriter = createMoveMeasureRewriter, data.createEntityRenameRewriter = createEntityRenameRewriter, 
        data.createPropertyRenameRewriter = createPropertyRenameRewriter, data.createHierarchyLevelRenameRewriter = createHierarchyLevelRenameRewriter, 
        data.createSetSchemaMeasureRewriter = function(setSchemaMeasure) {
            return new SetSchemaMeasureRewriter(setSchemaMeasure);
        };
        var EntityRenameRewriter = function(_super) {
            function EntityRenameRewriter(change) {
                var _this = this;
                return (_this = _super.call(this) || this).change = change, _this;
            }
            return __extends(EntityRenameRewriter, _super), EntityRenameRewriter.prototype.visitColumnRef = function(expr) {
                if (data.SQExpr.isEntity(expr.source) || data.SQExpr.isSubqueryRef(expr.source)) {
                    var rewrittenSource = expr.source.accept(this);
                    return rewrittenSource !== expr.source ? new data.SQColumnRefExpr(rewrittenSource, expr.ref) : expr;
                }
                return expr;
            }, EntityRenameRewriter.prototype.visitEntity = function(expr) {
                var change = this.change;
                return expr.schema === change.schema && expr.entity === change.before ? new data.SQEntityExpr(expr.schema, change.after, expr.variable) : expr;
            }, EntityRenameRewriter.prototype.visitSubqueryRef = function(expr) {
                if (expr.query) {
                    var rewrittenSemanticQuery = expr.query.rewrite(this);
                    return rewrittenSemanticQuery !== expr.query ? new data.SQSubqueryRefExpr(rewrittenSemanticQuery) : expr;
                }
                return expr;
            }, EntityRenameRewriter;
        }(data.SQExprRewriter), MoveMeasureRewriter = function(_super) {
            function MoveMeasureRewriter(change) {
                var _this = this;
                return (_this = _super.call(this) || this).change = change, _this;
            }
            return __extends(MoveMeasureRewriter, _super), MoveMeasureRewriter.prototype.visitMeasureRef = function(expr) {
                var change = this.change, newSource = data.FieldExprPattern.toFieldExprEntityItemPattern(data.SQExprConverter.asFieldPattern(expr));
                if (newSource.schema !== change.schema || newSource.entity !== change.source || expr.ref !== change.property) return expr;
                newSource = new data.SQEntityExpr(newSource.schema, change.destination);
                return new data.SQMeasureRefExpr(newSource, change.property);
            }, MoveMeasureRewriter.prototype.visitSubqueryRef = function(expr) {
                if (expr.query) {
                    var rewrittenSemanticQuery = expr.query.rewrite(this);
                    return rewrittenSemanticQuery !== expr.query ? new data.SQSubqueryRefExpr(rewrittenSemanticQuery) : expr;
                }
                return expr;
            }, MoveMeasureRewriter;
        }(data.SQExprRewriter), PropertyRenameRewriter = function(_super) {
            function PropertyRenameRewriter(change) {
                var _this = this;
                return (_this = _super.call(this) || this).change = change, _this;
            }
            return __extends(PropertyRenameRewriter, _super), PropertyRenameRewriter.prototype.visitColumnRef = function(expr) {
                if (data.SQExpr.isSubqueryRef(expr.source)) {
                    var change = expr.source.accept(this);
                    return change !== expr.source ? new data.SQColumnRefExpr(change, expr.ref) : expr;
                }
                if (data.SQExpr.isTransformTableRef(expr.source)) return expr;
                change = this.change;
                return this.matches(change, expr) ? new data.SQColumnRefExpr(expr.source, change.after) : expr;
            }, PropertyRenameRewriter.prototype.visitMeasureRef = function(expr) {
                var change = this.change;
                return this.matches(change, expr) ? new data.SQMeasureRefExpr(expr.source, change.after) : expr;
            }, PropertyRenameRewriter.prototype.visitGroupRef = function(expr) {
                var _this = this, rewrittenExpr = expr, rewrittenGroupedExprs = this.change;
                this.matches(rewrittenGroupedExprs, expr) && (rewrittenExpr = new data.SQGroupRefExpr(rewrittenGroupedExprs.after, expr.source, expr.groupedExprs));
                rewrittenGroupedExprs = _.map(expr.groupedExprs, function(value) {
                    return value.accept(_this);
                });
                return rewrittenExpr = !data.SQExprUtils.sequenceEqual(rewrittenGroupedExprs, expr.groupedExprs) ? new data.SQGroupRefExpr(rewrittenExpr.ref, rewrittenExpr.source, rewrittenGroupedExprs) : rewrittenExpr;
            }, PropertyRenameRewriter.prototype.visitHierarchy = function(expr) {
                expr.arg;
                var change = expr.arg.accept(this);
                if (change !== expr.arg) return new data.SQHierarchyExpr(change, expr.hierarchy);
                change = this.change;
                return this.hierarchyMatches(change, expr) ? new data.SQHierarchyExpr(expr.arg, change.after) : expr;
            }, PropertyRenameRewriter.prototype.visitPropertyVariationSource = function(expr) {
                var change = this.change;
                return this.variationMatches(change, expr) ? new data.SQPropertyVariationSourceExpr(expr.arg, expr.name, change.after) : expr;
            }, PropertyRenameRewriter.prototype.visitSubqueryRef = function(expr) {
                if (expr.query) {
                    var rewrittenSemanticQuery = expr.query.rewrite(this);
                    return rewrittenSemanticQuery !== expr.query ? new data.SQSubqueryRefExpr(rewrittenSemanticQuery) : expr;
                }
                return expr;
            }, PropertyRenameRewriter.prototype.variationMatches = function(change, expr) {
                var entityExpr = expr.arg;
                return data.SQEntityExpr, entityExpr.schema === change.schema && entityExpr.entity === change.entity && expr.property === change.before;
            }, PropertyRenameRewriter.prototype.hierarchyMatches = function(change, expr) {
                var entityExpr = expr.arg;
                if (data.SQExpr.isEntity(entityExpr)) return "Hierarchy" === change.objectType && entityExpr.schema === change.schema && entityExpr.entity === change.entity && expr.hierarchy === change.before;
            }, PropertyRenameRewriter.prototype.matches = function(change, expr) {
                var fieldPattern = data.FieldExprPattern.toFieldExprEntityItemPattern(data.SQExprConverter.asFieldPattern(expr));
                return fieldPattern.schema === change.schema && fieldPattern.entity === change.entity && expr.ref === change.before;
            }, PropertyRenameRewriter;
        }(data.SQExprRewriter), HierarchyLevelRenameRewriter = function(_super) {
            function HierarchyLevelRenameRewriter(change) {
                var _this = this;
                return (_this = _super.call(this) || this).change = change, _this;
            }
            return __extends(HierarchyLevelRenameRewriter, _super), HierarchyLevelRenameRewriter.prototype.visitHierarchyLevel = function(expr) {
                expr.arg;
                var change = this.change;
                return this.matches(change, expr) ? new data.SQHierarchyLevelExpr(expr.arg, change.after) : expr;
            }, HierarchyLevelRenameRewriter.prototype.matches = function(change, expr) {
                var hierarchyExpr = data.SQExprConverter.asFieldPattern(expr);
                if (!hierarchyExpr.columnHierarchyLevelVariation) {
                    var fieldEntityPattern = data.FieldExprPattern.toFieldExprEntityItemPattern(hierarchyExpr), hierarchyExpr = expr.arg;
                    return fieldEntityPattern.schema === change.schema && fieldEntityPattern.entity === change.entity && hierarchyExpr.hierarchy === change.hierarchy && expr.level === change.before;
                }
            }, HierarchyLevelRenameRewriter;
        }(data.SQExprRewriter), SetSchemaMeasureRewriter = function(_super) {
            function SetSchemaMeasureRewriter(change) {
                var _this = this;
                return (_this = _super.call(this) || this).change = change, _this;
            }
            return __extends(SetSchemaMeasureRewriter, _super), SetSchemaMeasureRewriter.prototype.visitMeasureRef = function(newSource) {
                var change = this.change, fieldPattern = data.FieldExprPattern.toFieldExprEntityItemPattern(data.SQExprConverter.asFieldPattern(newSource));
                if (fieldPattern.schema === change.schema || fieldPattern.entity !== change.entity || newSource.ref !== change.name) return newSource;
                newSource = new data.SQEntityExpr(change.schema, change.entity);
                return new data.SQMeasureRefExpr(newSource, change.name);
            }, SetSchemaMeasureRewriter;
        }(data.SQExprRewriter);
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var SemanticQueryBuilder = function() {
            function SemanticQueryBuilder(from) {
                this.clauses = {
                    from: from,
                    select: []
                };
            }
            return SemanticQueryBuilder.prototype.addWhere = function(filter) {
                var clauses = this.clauses;
                clauses.where || (clauses.where = []), clauses.where.push(filter);
            }, SemanticQueryBuilder.prototype.addWheres = function(filters) {
                var clauses = this.clauses;
                clauses.where || (clauses.where = []);
                for (var _i = 0, filters_5 = filters; _i < filters_5.length; _i++) {
                    var filter = filters_5[_i];
                    clauses.where.push(filter);
                }
            }, SemanticQueryBuilder.prototype.addOrderBy = function(sort) {
                var clauses = this.clauses;
                clauses.orderBy || (clauses.orderBy = []), clauses.orderBy.push(sort);
            }, SemanticQueryBuilder.prototype.addSelect = function(select) {
                this.clauses.select.push(select);
            }, SemanticQueryBuilder.prototype.addGroupBy = function(groupBy) {
                var clauses = this.clauses;
                clauses.groupBy || (clauses.groupBy = []), clauses.groupBy.push(groupBy);
            }, SemanticQueryBuilder.prototype.addTransform = function(transformItem) {
                var clauses = this.clauses;
                clauses.transforms || (clauses.transforms = []), clauses.transforms.push(transformItem);
            }, SemanticQueryBuilder.prototype.setTop = function(top) {
                this.clauses.top = top;
            }, SemanticQueryBuilder.prototype.toQuery = function() {
                return data.SemanticQuery.createWith(this.clauses, !0);
            }, SemanticQueryBuilder.prototype.toFilter = function() {
                var clauses = this.clauses;
                if (clauses.orderBy || clauses.select.length, clauses.from && clauses.where) return new data.SemanticFilter(clauses.from, clauses.where);
            }, SemanticQueryBuilder;
        }();
        data.SemanticQueryBuilder = SemanticQueryBuilder;
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(SemanticQueryVersions) {
            SemanticQueryVersions[SemanticQueryVersions.Version0 = 0] = "Version0", SemanticQueryVersions[SemanticQueryVersions.Version1 = 1] = "Version1", 
            SemanticQueryVersions[SemanticQueryVersions.Version2 = 2] = "Version2";
        }(data.SemanticQueryVersions || (data.SemanticQueryVersions = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(SemanticGroupingSerializer) {
                function serialize(defaultPartitionPrefix) {
                    for (var groupingDefinition = {
                        Version: 0,
                        Sources: [],
                        GroupedColumns: []
                    }, from = new data.SQFrom(), _i = 0, _a = defaultPartitionPrefix.groupedColumns; _i < _a.length; _i++) {
                        var groupedColumn = _a[_i], rewrittenExpr = data.SQExprRewriterWithSourceRenames.rewrite(groupedColumn, void 0, from);
                        groupingDefinition.GroupedColumns.push(services.SemanticQuerySerializer.serializeExprWithRef(rewrittenExpr));
                    }
                    if (defaultPartitionPrefix.groupItems) {
                        groupingDefinition.GroupItems = [];
                        for (var _b = 0, _c = defaultPartitionPrefix.groupItems; _b < _c.length; _b++) {
                            var group = _c[_b], groupItem = {
                                DisplayName: group.name
                            };
                            group.expression && (rewrittenExpr = data.SQExprRewriterWithSourceRenames.rewrite(group.expression, void 0, from), 
                            groupItem.Expression = services.SemanticQuerySerializer.serializeExprWithRef(rewrittenExpr)), 
                            group.blankDefaultPlaceholder && (groupItem.BlankDefaultPlaceholder = !0), groupingDefinition.GroupItems.push(groupItem);
                        }
                    }
                    defaultPartitionPrefix.binItem && (groupingDefinition.BinItem = {
                        Expression: services.SemanticQuerySerializer.serializeExprWithRef(data.SQExprRewriterWithSourceRenames.rewrite(defaultPartitionPrefix.binItem, void 0, from))
                    }), services.SemanticQuerySerializer.serializeFrom(from, groupingDefinition.Sources);
                    var inputPartitionTableResult = defaultPartitionPrefix.partitionTable;
                    return inputPartitionTableResult && (groupingDefinition.PartitionTable = {
                        Definition: {
                            TableDefinition: services.SemanticQuerySerializer.serializeQuery(inputPartitionTableResult.mappingTable),
                            ItemIdColumns: inputPartitionTableResult.itemIdColumns,
                            PartitionIdColumn: inputPartitionTableResult.partitionIdColumn
                        }
                    }, (inputPartitionTableResult = inputPartitionTableResult.partitions) && (groupingDefinition.PartitionTable.Definition.Partitions = serializePartitions(inputPartitionTableResult)), 
                    (inputPartitionTableResult = defaultPartitionPrefix.partitionTableResult) && (groupingDefinition.PartitionTable.Result = {
                        TableName: inputPartitionTableResult.tableName,
                        PartitionIdColumn: inputPartitionTableResult.partitionIdColumn
                    }), (defaultPartitionPrefix = defaultPartitionPrefix.partitionTable.defaultPartitionPrefix) && (groupingDefinition.PartitionTable.Definition.DefaultPartitionPrefix = defaultPartitionPrefix)), 
                    groupingDefinition;
                }
                function deserialize(partitionTableResult) {
                    if (0 === partitionTableResult.Version) {
                        for (var partitions, defaultPartitionPrefix, definition = {
                            groupedColumns: []
                        }, from = services.SemanticQuerySerializer.deserializeFrom(partitionTableResult.Sources), _i = 0, _a = partitionTableResult.GroupedColumns; _i < _a.length; _i++) {
                            var groupedColumn = _a[_i];
                            definition.groupedColumns.push(services.SemanticQuerySerializer.deserializeExprWithRef(groupedColumn, from));
                        }
                        if (partitionTableResult.GroupItems) {
                            definition.groupItems = [];
                            for (var _b = 0, _c = partitionTableResult.GroupItems; _b < _c.length; _b++) {
                                var groupItem = _c[_b], group = {
                                    name: groupItem.DisplayName
                                };
                                groupItem.Expression && (group.expression = services.SemanticQuerySerializer.deserializeExprWithRef(groupItem.Expression, from)), 
                                groupItem.BlankDefaultPlaceholder && (group.blankDefaultPlaceholder = !0), definition.groupItems.push(group);
                            }
                        }
                        return partitionTableResult.BinItem && (definition.binItem = services.SemanticQuerySerializer.deserializeExprWithRef(partitionTableResult.BinItem.Expression, from)), 
                        partitionTableResult.PartitionTable && (partitions = (defaultPartitionPrefix = partitionTableResult.PartitionTable.Definition).TableDefinition, 
                        definition.partitionTable = {
                            mappingTable: services.SemanticQuerySerializer.deserializeQuery(partitions),
                            itemIdColumns: defaultPartitionPrefix.ItemIdColumns,
                            partitionIdColumn: defaultPartitionPrefix.PartitionIdColumn
                        }, (partitions = defaultPartitionPrefix.Partitions) && (definition.partitionTable.partitions = _.map(partitions, function(partition) {
                            return {
                                displayName: partition.DisplayName,
                                partitionIds: _.map(partition.PartitionIds, services.SemanticQuerySerializer.deserializeExpr)
                            };
                        })), (partitionTableResult = partitionTableResult.PartitionTable.Result) && (definition.partitionTableResult = {
                            tableName: partitionTableResult.TableName,
                            partitionIdColumn: partitionTableResult.PartitionIdColumn
                        }), (defaultPartitionPrefix = defaultPartitionPrefix.DefaultPartitionPrefix) && (definition.partitionTable.defaultPartitionPrefix = defaultPartitionPrefix)), 
                        definition;
                    }
                }
                function serializePartitions(input) {
                    return _.map(input, function(partition) {
                        return {
                            DisplayName: partition.displayName,
                            PartitionIds: _.map(partition.partitionIds, function(expr) {
                                return services.SemanticQuerySerializer.serializeExpr(expr);
                            })
                        };
                    });
                }
                SemanticGroupingSerializer.serialize = serialize, SemanticGroupingSerializer.deserialize = deserialize, 
                SemanticGroupingSerializer.serializePartitions = serializePartitions, SemanticGroupingSerializer.normalizeFromRefs = function(normalizedBinItem, target) {
                    for (var normalizedDefinition = function(definition) {
                        return deserialize(serialize(definition));
                    }(normalizedBinItem), sourceFrom = new data.SQFrom(), normalizedGroupedColumns = normalizedDefinition.groupedColumns, i = 0; i < normalizedGroupedColumns.length; i++) normalizedGroupedColumns[i] = data.SQExprRewriterWithSourceRenames.rewrite(normalizedGroupedColumns[i], sourceFrom, target);
                    for (var _i = 0, normalizedGroupItems_1 = normalizedDefinition.groupItems; _i < normalizedGroupItems_1.length; _i++) {
                        var normalizedGroupItem = normalizedGroupItems_1[_i];
                        normalizedGroupItem.expression && (normalizedGroupItem.expression = data.SQExprRewriterWithSourceRenames.rewrite(normalizedGroupItem.expression, sourceFrom, target));
                    }
                    return (normalizedBinItem = normalizedDefinition.binItem) && (normalizedDefinition.binItem = data.SQExprRewriterWithSourceRenames.rewrite(normalizedBinItem, sourceFrom, target)), 
                    normalizedDefinition;
                };
            }(services.SemanticGroupingSerializer || (services.SemanticGroupingSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var ClientErrorStrings = powerbi.ClientErrorStrings, InvalidDataResponseClientError = function() {
            function FailedRealTimeUpdateClientError() {}
            return Object.defineProperty(FailedRealTimeUpdateClientError.prototype, "code", {
                get: function() {
                    return "FailedRealTimeUpdate";
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(FailedRealTimeUpdateClientError.prototype, "ignorable", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), FailedRealTimeUpdateClientError.prototype.getDetails = function(resourceProvider) {
                return {
                    message: resourceProvider.get("Realtime_UpdateFailedValue"),
                    displayableErrorInfo: [ {
                        errorInfoKey: resourceProvider.get("Realtime_UpdateFailedKey"),
                        errorInfoValue: resourceProvider.get("Realtime_UpdateFailedValue")
                    } ],
                    debugErrorInfo: [ {
                        errorInfoKey: ClientErrorStrings.ClientErrorCode,
                        errorInfoValue: this.code
                    } ]
                };
            }, FailedRealTimeUpdateClientError;
        }();
        data.FailedRealTimeUpdateClientError = InvalidDataResponseClientError;
        InvalidDataResponseClientError = function() {
            function EmptyDataClientError() {}
            return Object.defineProperty(EmptyDataClientError.prototype, "code", {
                get: function() {
                    return "EmptyData";
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(EmptyDataClientError.prototype, "ignorable", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), EmptyDataClientError.prototype.getDetails = function(resourceProvider) {
                return {
                    message: resourceProvider.get("ServiceError_CannotLoadVisual"),
                    displayableErrorInfo: [ {
                        errorInfoKey: resourceProvider.get("ServiceError_ExecuteSemanticQueryErrorKey"),
                        errorInfoValue: resourceProvider.get("InvalidDataFormat_DataFormatIsInvalid")
                    } ],
                    debugErrorInfo: [ {
                        errorInfoKey: ClientErrorStrings.ClientErrorCode,
                        errorInfoValue: this.code
                    } ]
                };
            }, EmptyDataClientError;
        }();
        data.EmptyDataClientError = InvalidDataResponseClientError;
        InvalidDataResponseClientError = function() {
            function InvalidDataResponseClientError() {}
            return Object.defineProperty(InvalidDataResponseClientError.prototype, "code", {
                get: function() {
                    return "InvalidDataResponse";
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(InvalidDataResponseClientError.prototype, "ignorable", {
                get: function() {
                    return !1;
                },
                enumerable: !1,
                configurable: !0
            }), InvalidDataResponseClientError.prototype.getDetails = function(resourceProvider) {
                return {
                    message: resourceProvider.get("ServiceError_CannotLoadVisual"),
                    displayableErrorInfo: [ {
                        errorInfoKey: resourceProvider.get("ServiceError_ExecuteSemanticQueryErrorKey"),
                        errorInfoValue: resourceProvider.get("InvalidDataResponse_ServerError")
                    } ],
                    debugErrorInfo: [ {
                        errorInfoKey: ClientErrorStrings.ClientErrorCode,
                        errorInfoValue: this.code
                    } ]
                };
            }, InvalidDataResponseClientError;
        }();
        data.InvalidDataResponseClientError = InvalidDataResponseClientError;
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data_13) {
        var JsonComparer = jsCommon.JsonComparer;
        function areEquivalentOptions(newOptions, previousOptions) {
            return !(!newOptions.query || !previousOptions.query) && (newOptions.type === previousOptions.type && newOptions.kinds === previousOptions.kinds && newOptions.perfId === previousOptions.perfId && newOptions.query.allowResultFromClientCache === previousOptions.query.allowResultFromClientCache && newOptions.query.allowClientSideFilters === previousOptions.query.allowClientSideFilters && newOptions.query.cacheResponseOnServer === previousOptions.query.cacheResponseOnServer && newOptions.query.ignoreViewportForCache === previousOptions.query.ignoreViewportForCache && JsonComparer.equals(newOptions.query.cacheOptions, previousOptions.query.cacheOptions) && JsonComparer.equals(newOptions.query.command, previousOptions.query.command) && JsonComparer.equals(newOptions.query.dataSources, previousOptions.query.dataSources));
        }
        data_13.areEquivalentOptions = areEquivalentOptions, data_13.createDataProxy = function(promiseFactory, dataReaders, telemetryService) {
            return new DataProxy(promiseFactory, dataReaders, telemetryService);
        }, data_13.createSingleExecutableDataProxy = function(dataProxy, promiseFactory, timeoutService, featureSwitchService) {
            return new SingleExecutionDataProxy(dataProxy, promiseFactory, timeoutService, featureSwitchService);
        }, data_13.setCreateSingleExecutableDataProxy = function(f) {
            data_13.createSingleExecutableDataProxy = f;
        };
        var DataProxy = function() {
            function DataProxy(promiseFactory, dataReaderFactory, telemetryService) {
                this.promiseFactory = promiseFactory, this.dataReaderProvider = dataReaderFactory, 
                this.dataReaders = {}, this.telemetryService = telemetryService;
            }
            return DataProxy.prototype.execute = function(options) {
                return this.getReader(options.type).execute(options.query, options.kinds, options.perfId);
            }, DataProxy.prototype.getReader = function(type) {
                var reader = this.dataReaders[type];
                if (reader) return reader;
                reader = this.dataReaderProvider.reader(type);
                return this.dataReaders[type] = new DataReaderWrapper(type, reader, this.promiseFactory, this.telemetryService);
            }, DataProxy.prototype.stopCommunication = function(readerType) {
                this.getReader(readerType).stopCommunication();
            }, DataProxy.prototype.resumeCommunication = function(readerType) {
                this.getReader(readerType).resumeCommunication();
            }, DataProxy.prototype.clearCache = function(readerType, dataSources) {
                this.getReader(readerType).clearCache(dataSources);
            }, DataProxy.prototype.rewriteCacheEntries = function(readerType, dataSources, rewriter) {
                this.getReader(readerType).rewriteCacheEntries(dataSources, rewriter);
            }, DataProxy.prototype.setLocalCacheResult = function(options, dataAsObject) {
                return this.getReader(options.type).setLocalCacheResult(options.query, dataAsObject);
            }, DataProxy;
        }(), SingleExecutionDataProxy = function() {
            function SingleExecutionDataProxy(proxy, promiseFactory, timeoutService, featureSwitchService) {
                this.proxy = proxy, this.promiseFactory = promiseFactory, this.timeoutService = timeoutService, 
                this.featureSwitchService = featureSwitchService;
            }
            return SingleExecutionDataProxy.prototype.execute = function(delay) {
                var _this = this, deferred = this.lastExecute;
                if (deferred && deferred.promise.pending()) {
                    if (areEquivalentOptions(delay, deferred.query)) {
                        var promise = powerbi.createRejectablePromise2(deferred.deferred);
                        return promise.matchesLastExecuteQuery = !0, promise;
                    }
                    this.lastExecute.ended = !0, this.lastExecute.promise.reject(new powerbi.QueryCancellationClientError("NewQuery"));
                }
                var telemetryV2Enabled = delay && delay.query && delay.query.telemetryV2Enabled, deferred = this.promiseFactory.defer(telemetryV2Enabled), promise = powerbi.createRejectablePromise2(deferred), currentExecution = this.lastExecute = {
                    query: delay,
                    deferred: deferred,
                    promise: promise,
                    ended: !1
                };
                return this.queuedExecution || (this.queuedExecution = !0, delay = this.featureSwitchService.featureSwitches.immediateQuery && (this.featureSwitchService.featureSwitches.immediateQueryOnWarmLoad || !0 === delay.isColdLoad) ? -1 : 0, 
                this.timeoutService.setTimeout(delay, telemetryV2Enabled).promise.then(function() {
                    _this.queuedExecution = !1;
                    var proxyPromise, execution = _this.lastExecute;
                    execution && !execution.ended && ((proxyPromise = _this.proxy.execute(execution.query)).then(function(result) {
                        execution.ended ? execution.deferred.reject() : execution.deferred.resolve(result);
                    }, function(reason) {
                        return execution.deferred.reject(reason);
                    }), execution.promise.catch(function(reason) {
                        return proxyPromise.reject(reason);
                    }));
                }).catch(function() {})), promise.finally(function() {
                    currentExecution.ended = !0, currentExecution === _this.lastExecute && (_this.lastExecute = void 0);
                }).catch(function() {}), promise;
            }, SingleExecutionDataProxy.prototype.cancelQuery = function(cancellationSource) {
                var previousExecution = this.lastExecute;
                previousExecution && previousExecution.promise.pending() && (previousExecution.ended = !0, 
                previousExecution.promise.reject(new powerbi.QueryCancellationClientError(cancellationSource)));
            }, SingleExecutionDataProxy;
        }(), DataReaderWrapper = function() {
            function DataReaderWrapper(pluginName, reader, promiseFactory, telemetryService) {
                this.name = pluginName, this.reader = reader, this.promiseFactory = promiseFactory, 
                this.telemetryService = telemetryService;
            }
            return DataReaderWrapper.prototype.execute = function(options, kinds, perfId) {
                var _this = this, dataViewDeferred = this.promiseFactory.defer(options.telemetryV2Enabled), promise = this.reader;
                if (promise.execute) {
                    var providerExecution_1 = promise.execute(options, perfId);
                    providerExecution_1.then(function(data) {
                        if (data) {
                            var transformed = _this.transform(data, kinds, perfId, options.performanceActivity), transformedError = transformed.error;
                            if (transformed.performanceActivities && transformedError && (transformedError.performanceActivities = transformed.performanceActivities), 
                            transformedError) return dataViewDeferred.reject(transformedError), void _this.telemetryService.logEvent(powerbi.telemetry.DataExecuteQuery, {
                                requestId: data.requestId,
                                isError: !0,
                                errorSource: "PowerBI",
                                errorCode: transformedError.code
                            });
                            dataViewDeferred.resolve({
                                dataReaderResult: transformed,
                                dataViewSource: {
                                    data: data
                                }
                            });
                        } else dataViewDeferred.reject(new data_13.EmptyDataClientError()), _this.telemetryService.logEvent(powerbi.telemetry.DataExecuteQuery, {
                            isError: !0,
                            errorSource: "PowerBI",
                            errorCode: "DataProxy_EmptyData"
                        });
                    }, function(error) {
                        dataViewDeferred.reject(error), error && error.ignorable || _this.telemetryService.logEvent(powerbi.telemetry.DataExecuteQuery, {
                            requestId: null == error ? void 0 : error.requestId,
                            isError: !0,
                            errorSource: "PowerBI",
                            errorCode: error ? error.code : "DataProxy_ProviderError"
                        });
                    }).catch(function(error) {
                        dataViewDeferred.reject(error);
                    });
                    promise = powerbi.createRejectablePromise2(dataViewDeferred);
                    return promise.catch(function(error) {
                        error = error || new data_13.InvalidDataResponseClientError(), providerExecution_1.reject(error);
                    }), promise;
                }
                return options.command ? dataViewDeferred.resolve({
                    dataReaderResult: this.transform(options.command, kinds, perfId)
                }) : dataViewDeferred.reject(), powerbi.createRejectablePromise2(dataViewDeferred);
            }, DataReaderWrapper.prototype.stopCommunication = function() {
                var reader = this.reader;
                reader.stopCommunication && reader.stopCommunication();
            }, DataReaderWrapper.prototype.resumeCommunication = function() {
                var reader = this.reader;
                reader.resumeCommunication && reader.resumeCommunication();
            }, DataReaderWrapper.prototype.clearCache = function(dataSources) {
                var cache = this.reader.cache;
                cache && cache.clear(dataSources);
            }, DataReaderWrapper.prototype.rewriteCacheEntries = function(dataSources, rewriter) {
                var cache = this.reader.cache;
                cache && cache.rewrite(dataSources, rewriter);
            }, DataReaderWrapper.prototype.setLocalCacheResult = function(options, dataAsObject) {
                var reader = this.reader;
                reader.setLocalCacheResult && reader.setLocalCacheResult(options, dataAsObject);
            }, DataReaderWrapper.prototype.transform = function(data, kinds, perfId, defaultDataView) {
                var reader = this.reader;
                if (reader.transform) return reader.transform(data, kinds || 31, perfId, defaultDataView);
                defaultDataView = {
                    metadata: {
                        columns: []
                    }
                };
                return defaultDataView[this.name] = data, {
                    dataView: defaultDataView
                };
            }, DataReaderWrapper;
        }();
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var EnumExtensions = jsCommon.EnumExtensions, FederatedConceptualSchema = powerbi.data.FederatedConceptualSchema;
        data.createConceptualSchemaProxy = function(promiseFactory, dataReaderProvider, featureSwitchService, telemetryService, validator) {
            return new ConceptualSchemaProxy(promiseFactory, dataReaderProvider, featureSwitchService, telemetryService, validator);
        };
        var ConceptualSchemaProxy = function() {
            function ConceptualSchemaProxy(promiseFactory, dataReaderProvider, featureSwitchService, telemetryService, validator) {
                this.stopCommunicationHandlers = [], this.resumeCommunicationHandlers = [], this.promiseFactory = promiseFactory, 
                this.dataReaderProvider = dataReaderProvider, this.featureSwitchService = featureSwitchService, 
                this.telemetryService = telemetryService, this.validator = validator, this.individualConceptualSchemaCache = {}, 
                this.mergedConceptualSchemaCache = {};
            }
            return ConceptualSchemaProxy.prototype.get = function(dataSources, getConceptualSchemaActivity) {
                var _this = this, telemetryV2Enabled = this.featureSwitchService && this.featureSwitchService.featureSwitches && this.featureSwitchService.featureSwitches.telemetryV2;
                if (!dataSources) return this.promiseFactory.reject({
                    clientError: {
                        code: data.DataSourcesUndefined
                    }
                }, telemetryV2Enabled);
                var mergedSchemaKey = this.generateSchemaKey(dataSources), cachedMergedSchema = this.mergedConceptualSchemaCache[mergedSchemaKey];
                if (this.isSchemaPaused(cachedMergedSchema)) return this.promiseFactory.reject(this.getPauseReason(cachedMergedSchema), telemetryV2Enabled);
                if (cachedMergedSchema && cachedMergedSchema.promise) return getConceptualSchemaActivity && getConceptualSchemaActivity.setProperty("isConceptualSchemaCached", !0), 
                cachedMergedSchema.promise;
                var mergedDeferred = this.promiseFactory.defer(telemetryV2Enabled), mergedSchema = {
                    deferred: mergedDeferred,
                    promise: mergedDeferred.promise
                };
                (this.mergedConceptualSchemaCache[mergedSchemaKey] = mergedSchema).promise.then(function() {
                    return delete mergedSchema.deferred;
                }, function() {
                    return delete _this.mergedConceptualSchemaCache[mergedSchemaKey];
                });
                var type, schemaPromises = [], dataSourcesByType = groupDataSourcesByType(dataSources), this_5 = this;
                for (type in dataSourcesByType) !function(type) {
                    var dataSourcesForType = dataSourcesByType[type], key = this_5.generateSchemaKey(dataSourcesForType), promise = this_5.individualConceptualSchemaCache[key];
                    if (this_5.isSchemaPaused(promise)) return schemaPromises.push(this_5.promiseFactory.reject(this_5.getPauseReason(promise), telemetryV2Enabled));
                    if (promise) return schemaPromises.push(promise.promise);
                    var deferred = this_5.promiseFactory.defer(telemetryV2Enabled), promise = deferred.promise;
                    schemaPromises.push(promise), this_5.individualConceptualSchemaCache[key] = {
                        deferred: deferred,
                        promise: promise
                    }, promise.finally(function() {
                        _this.individualConceptualSchemaCache[key] && delete _this.individualConceptualSchemaCache[key].deferred;
                    });
                    var schemaReader = this_5.dataReaderProvider.schemaReader(type);
                    if (!schemaReader) return deferred.reject({
                        clientError: {
                            code: data.SchemaReaderUndefined
                        }
                    });
                    schemaReader.execute({
                        dataSources: dataSourcesForType
                    }).then(function(result) {
                        return _this.onSuccess(schemaReader, result, key, deferred);
                    }, function(result) {
                        return _this.onError(schemaReader, result, key, deferred);
                    });
                }(type);
                return this.promiseFactory.all(schemaPromises, telemetryV2Enabled).then(function(federatedSchema) {
                    federatedSchema = FederatedConceptualSchema.merge(federatedSchema);
                    _this.validator && _this.validator.validate(federatedSchema), mergedSchema.result = federatedSchema, 
                    mergedDeferred.resolve(federatedSchema);
                }).catch(function(error) {
                    mergedDeferred.reject(error);
                }), mergedSchema.promise;
            }, ConceptualSchemaProxy.prototype.getWithWireContract = function(dataSources) {
                var _this = this;
                return dataSources && 1 < _.uniqBy(dataSources, function(d) {
                    return data.DataReaderUtils.readerType(d);
                }).length ? this.promiseFactory.reject() : this.get(dataSources).then(function(contract) {
                    var schemaEntry = _this.individualConceptualSchemaCache[_this.generateSchemaKey(dataSources)];
                    if (schemaEntry) return {
                        data: schemaEntry.data,
                        contract: contract
                    };
                });
            }, ConceptualSchemaProxy.prototype.getLatestCapabilities = function(dataSources, conceptualSchemaName) {
                var type, dataSourcesByType = groupDataSourcesByType(dataSources);
                for (type in dataSourcesByType) {
                    var conceptualSchema = dataSourcesByType[type], conceptualSchema = this.generateSchemaKey(conceptualSchema), conceptualSchema = this.individualConceptualSchemaCache[conceptualSchema];
                    if (conceptualSchema && conceptualSchema.result) {
                        conceptualSchema = conceptualSchema.result.schema(conceptualSchemaName);
                        if (conceptualSchema) return conceptualSchema.capabilities;
                    }
                }
            }, ConceptualSchemaProxy.prototype.clearCache = function(reason, dataSources) {
                var _this = this;
                if (!dataSources) return this.rejectPendingDeferred(reason), this.individualConceptualSchemaCache = {}, 
                void (this.mergedConceptualSchemaCache = {});
                var type, dataSourcesByType = groupDataSourcesByType(dataSources);
                for (type in dataSourcesByType) {
                    var datasetIds = dataSourcesByType[type], schemaKey = this.generateSchemaKey(datasetIds), datasetIds = JSON.stringify(_.map(datasetIds, function(datasource) {
                        return datasource.id;
                    }));
                    this.telemetryService.logEvent(powerbi.telemetry.DataClearConceptualSchemaCache, {
                        datasetIds: datasetIds,
                        requestId: reason && reason.requestId,
                        reason: reason && reason.clientError.code
                    }), this.forSchemasContainingKey(this.individualConceptualSchemaCache, schemaKey, function(mergeKey) {
                        _this.rejectPendingDeferred(reason, mergeKey), delete _this.individualConceptualSchemaCache[mergeKey];
                    }), this.forSchemasContainingKey(this.mergedConceptualSchemaCache, schemaKey, function(mergeKey) {
                        delete _this.mergedConceptualSchemaCache[mergeKey];
                    });
                }
            }, ConceptualSchemaProxy.prototype.stopCommunication = function(clientError, dataSources) {
                var reason = {
                    clientError: clientError
                };
                if (dataSources) {
                    var type, dataSourcesByType = groupDataSourcesByType(dataSources);
                    for (type in dataSourcesByType) {
                        var cachedSchema = dataSourcesByType[type], schemaKey = this.generateSchemaKey(cachedSchema);
                        (cachedSchema = this.individualConceptualSchemaCache[schemaKey]) || (this.individualConceptualSchemaCache[schemaKey] = cachedSchema = {}), 
                        cachedSchema.pauseReason = reason, this.rejectPendingDeferred(reason, schemaKey);
                    }
                } else this.pauseAllSchemasReason = reason, this.rejectPendingDeferred(reason);
                for (var _i = 0, _a = this.stopCommunicationHandlers; _i < _a.length; _i++) (0, 
                _a[_i])();
            }, ConceptualSchemaProxy.prototype.resumeCommunication = function(schemaKeys) {
                for (var _this = this, schemaKeys = schemaKeys ? _.map(groupDataSourcesByType(schemaKeys), function(d) {
                    return _this.generateSchemaKey(d);
                }) : (this.pauseAllSchemasReason = void 0, Object.keys(this.individualConceptualSchemaCache)), _i = 0, schemaKeys_1 = schemaKeys; _i < schemaKeys_1.length; _i++) {
                    var schemaKey = schemaKeys_1[_i], cachedSchema = this.individualConceptualSchemaCache[schemaKey];
                    this.isSchemaPaused(cachedSchema) && (delete this.individualConceptualSchemaCache[schemaKey], 
                    this.forSchemasContainingKey(this.mergedConceptualSchemaCache, schemaKey, function(mergeKey) {
                        return delete _this.mergedConceptualSchemaCache[mergeKey];
                    }));
                }
                for (var _a = 0, _b = this.resumeCommunicationHandlers; _a < _b.length; _a++) (0, 
                _b[_a])();
            }, ConceptualSchemaProxy.prototype.registerStopCommunicationHandlers = function(handler) {
                var _this = this;
                return this.stopCommunicationHandlers.push(handler), function() {
                    return _.pull(_this.stopCommunicationHandlers, handler);
                };
            }, ConceptualSchemaProxy.prototype.registerResumeCommunicationHandlers = function(handler) {
                var _this = this;
                return this.resumeCommunicationHandlers.push(handler), function() {
                    return _.pull(_this.resumeCommunicationHandlers, handler);
                };
            }, ConceptualSchemaProxy.prototype.isEmpty = function(dataSources) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var federatedConceptualSchema, _this = this;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return [ 4, this.get(dataSources) ];

                          case 1:
                            return federatedConceptualSchema = _a.sent(), [ 2, _.every(federatedConceptualSchema.schemas, function(schema) {
                                return _.isEmpty(schema.entities) || _this.isSystemEntity(schema.entities);
                            }) ];
                        }
                    });
                });
            }, ConceptualSchemaProxy.prototype.isSystemEntity = function(entities) {
                return _.every(entities, function(entity) {
                    return EnumExtensions.hasFlag(entity.visibility, 4) || EnumExtensions.hasFlag(entity.visibility, 2);
                });
            }, ConceptualSchemaProxy.prototype.isSchemaPaused = function(cache) {
                return !!this.pauseAllSchemasReason || cache && !cache.promise;
            }, ConceptualSchemaProxy.prototype.getPauseReason = function(cache) {
                return cache && cache.pauseReason ? cache.pauseReason : this.pauseAllSchemasReason;
            }, ConceptualSchemaProxy.prototype.rejectPendingDeferred = function(reason, schemaKey) {
                var keys, cachedSchema, key;
                for (key in schemaKey ? (keys = {})[schemaKey] = null : keys = this.individualConceptualSchemaCache, 
                keys) (cachedSchema = this.individualConceptualSchemaCache[key]) && (cachedSchema.deferred && cachedSchema.deferred.reject(reason), 
                delete cachedSchema.promise, delete cachedSchema.deferred, this.forSchemasContainingKey(this.mergedConceptualSchemaCache, key, function(_mergeKey, entry) {
                    entry.deferred && entry.deferred.reject(reason), delete entry.promise, delete entry.deferred;
                }));
            }, ConceptualSchemaProxy.prototype.onSuccess = function(cacheEntry, response, additionalCacheKey, deferred) {
                var transformed = cacheEntry.transform(response);
                transformed.error ? this.onErrorCore(transformed, additionalCacheKey, deferred) : ((cacheEntry = this.individualConceptualSchemaCache[additionalCacheKey]) && (cacheEntry.result = transformed.schema, 
                cacheEntry.data = response.data), (additionalCacheKey = this.tryGetAdditionalIndividualCacheKey(additionalCacheKey, transformed)) && (this.individualConceptualSchemaCache[additionalCacheKey] = cacheEntry), 
                deferred.resolve(transformed.schema));
            }, ConceptualSchemaProxy.prototype.onError = function(schemaReader, transformed, key, deferred) {
                transformed = schemaReader.transform(transformed);
                this.onErrorCore(transformed, key, deferred);
            }, ConceptualSchemaProxy.prototype.onErrorCore = function(transformed, key, deferred) {
                var _this = this;
                delete this.individualConceptualSchemaCache[key], transformed.error && transformed.error.serviceError && (transformed.error.clientError = new powerbi.ServiceErrorToClientError(transformed.error.serviceError), 
                transformed.error.clientError.requestId = transformed.error.requestId), deferred.reject(transformed.error), 
                this.forSchemasContainingKey(this.mergedConceptualSchemaCache, key, function(matchingKey) {
                    delete _this.mergedConceptualSchemaCache[matchingKey];
                });
            }, ConceptualSchemaProxy.prototype.tryGetAdditionalIndividualCacheKey = function(schemaDataSource, schema) {
                schema = schema.schema.schemas;
                if (schema) {
                    schema.length;
                    schema = schema[0];
                    if (schema.cubeName) {
                        schemaDataSource = JSON.parse(schemaDataSource);
                        schemaDataSource.length;
                        schemaDataSource = schemaDataSource[0];
                        if (schema.name, schemaDataSource.name, !schemaDataSource.perspectiveId) return schemaDataSource.perspectiveId = schema.cubeName, 
                        this.generateSchemaKey([ schemaDataSource ]);
                    }
                }
            }, ConceptualSchemaProxy.prototype.forSchemasContainingKey = function(cache, compositeKey, action) {
                for (var _i = 0, keys_3 = JSON.parse(compositeKey); _i < keys_3.length; _i++) {
                    var mergeKey, key = keys_3[_i];
                    for (mergeKey in cache) for (var _a = 0, mergeSubKeys_1 = JSON.parse(mergeKey); _a < mergeSubKeys_1.length; _a++) {
                        var mergeSubKey = mergeSubKeys_1[_a];
                        key.id === mergeSubKey.id && key.name === mergeSubKey.name && key.type === mergeSubKey.type && action(mergeKey, cache[mergeKey]);
                    }
                }
            }, ConceptualSchemaProxy.prototype.generateSchemaKey = function(dataSources) {
                return JSON.stringify(_.chain(dataSources).map(function(d) {
                    return {
                        id: d.id,
                        name: d.name,
                        type: data.DataReaderUtils.readerType(d),
                        perspectiveId: d.perspectiveId
                    };
                }).orderBy([ "type", "name", "id", "perspectiveId" ]).value());
            }, ConceptualSchemaProxy;
        }();
        function groupDataSourcesByType(dataSources) {
            return _.groupBy(dataSources, function(dataSource) {
                return data.DataReaderUtils.readerType(dataSource);
            });
        }
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data_14) {
        var EnumExtensions = jsCommon.EnumExtensions, DataViewQueryEngine = function() {
            function DataViewQueryEngine() {}
            return DataViewQueryEngine.getDataPointsDescription = function(dataView, selectorsByColumn) {
                if (dataView && !_.isEmpty(selectorsByColumn)) {
                    for (var dataViewKind = this.getDataViewKind(dataView), dataPointDescriptions = [], _i = 0, selectorsByColumn_1 = selectorsByColumn; _i < selectorsByColumn_1.length; _i++) {
                        var legacySelector = selectorsByColumn_1[_i], details = this.query([ dataView ], legacySelector, dataViewKind, [], !0), legacySelector = data_14.Selector.convertSelectorsByColumnToSelector(legacySelector);
                        dataPointDescriptions.push({
                            selector: legacySelector,
                            values: details
                        });
                    }
                    return dataPointDescriptions;
                }
            }, DataViewQueryEngine.getDataViewKind = function(dataView) {
                var dataViewKind = 0;
                if (dataView.matrix) dataViewKind = 2; else if (dataView.table) dataViewKind = 8; else {
                    if (!dataView.categorical) return;
                    dataViewKind = 1;
                }
                return dataViewKind;
            }, DataViewQueryEngine.query = function(dataViews, selector, dataViewKinds, requestedValues, ignoreQueryName) {
                if (_.isEmpty(dataViews) || !selector) return [];
                var data = data_14.Selector.getScopeIdentities(selector);
                if (_.some(data, function(dataIdentity) {
                    return !data_14.Selector.isScopeIdentity(dataIdentity);
                })) return [];
                var valuesToReturn = requestedValues && !ignoreQueryName ? requestedValues : selector.metadata, valueDetails = [];
                if (EnumExtensions.hasFlag(dataViewKinds, 8)) for (var _i = 0, dataViews_1 = dataViews; _i < dataViews_1.length; _i++) {
                    var dataView = dataViews_1[_i], visitor = new TableDataViewQueryVisitor(selector, valuesToReturn, ignoreQueryName);
                    DataViewScan.visitTable(dataView.table, visitor), valueDetails.push.apply(valueDetails, visitor.valueDetails || []);
                } else if (EnumExtensions.hasFlag(dataViewKinds, 1)) for (var _a = 0, dataViews_2 = dataViews; _a < dataViews_2.length; _a++) {
                    dataView = dataViews_2[_a], visitor = new CategoricalDataViewQueryVisitor(selector, valuesToReturn, ignoreQueryName);
                    DataViewScan.visitCategorical(dataView, visitor), valueDetails.push.apply(valueDetails, visitor.valueDetails || []);
                } else if (EnumExtensions.hasFlag(dataViewKinds, 2)) for (var _b = 0, dataViews_3 = dataViews; _b < dataViews_3.length; _b++) {
                    dataView = dataViews_3[_b], visitor = new MatrixDataViewQueryVisitor(selector);
                    DataViewScan.visitMatrix(dataView.matrix, visitor), valueDetails.push.apply(valueDetails, visitor.valueDetails || []);
                }
                return valueDetails;
            }, DataViewQueryEngine;
        }();
        data_14.DataViewQueryEngine = DataViewQueryEngine;
        var DataViewScan, CategoricalDataViewQueryVisitor = function() {
            function CategoricalDataViewQueryVisitor(selector, requestedValues, ignoreQueryName) {
                this.ignoreQueryName = ignoreQueryName, this.requestedValues = requestedValues, 
                this.identities = data_14.Selector.getScopeIdentities(selector), this.valueDetails = [];
            }
            return CategoricalDataViewQueryVisitor.prototype.visitCategoryColumns = function(columns, metadata) {
                if (!_.isEmpty(columns)) for (var this_6 = this, _i = 0, columns_1 = columns; _i < columns_1.length; _i++) !function(column) {
                    if (this_6.ignoreQueryName || _.includes(this_6.requestedValues, column.source.queryName)) for (var i = 0; i < column.identity.length; i++) {
                        var identity = column.identity[i];
                        if (_.includes(this_6.identities, identity)) {
                            var metadataColumn = _.find(metadata.columns, function(metadataColumn) {
                                return metadataColumn.index === column.source.index;
                            });
                            this_6.valueDetails.push({
                                identity: identity,
                                value: column.values[i],
                                expr: metadataColumn.expr,
                                formattedValue: powerbi.visuals.valueFormatter.format(column.values[i], column.source.format)
                            });
                            break;
                        }
                    }
                }(columns_1[_i]);
            }, CategoricalDataViewQueryVisitor.prototype.visitValueColumnGroups = function(columnGroups, columnMetadata) {
                if (!_.isEmpty(columnGroups) && columnMetadata && (this.ignoreQueryName || _.includes(this.requestedValues, columnMetadata.queryName))) for (var _i = 0, columnGroups_1 = columnGroups; _i < columnGroups_1.length; _i++) {
                    var columnGroup = columnGroups_1[_i];
                    if (_.includes(this.identities, columnGroup.identity)) return void this.valueDetails.push({
                        value: columnGroup.name,
                        formattedValue: powerbi.visuals.valueFormatter.format(columnGroup.name, columnMetadata.format),
                        expr: columnMetadata.expr,
                        identity: columnGroup.identity
                    });
                }
            }, CategoricalDataViewQueryVisitor.prototype.visitValueColumn = function(valueColumn) {
                return !!_.isEmpty(this.requestedValues) || _.includes(this.requestedValues, valueColumn.source.queryName);
            }, CategoricalDataViewQueryVisitor.prototype.visitValue = function(value, selector, columnMetadata, _categories, _index) {
                DataViewScan.isIdentityFilteredOut(this.identities, selector.data) || this.valueDetails.push({
                    expr: columnMetadata.expr,
                    value: value,
                    formattedValue: powerbi.visuals.valueFormatter.format(value, columnMetadata.format),
                    identity: _.head(selector.data)
                });
            }, CategoricalDataViewQueryVisitor;
        }(), MatrixDataViewQueryVisitor = function() {
            function MatrixDataViewQueryVisitor(selector) {
                this.valueDetails = [], this.identitiesToSearch = data_14.Selector.getScopeIdentities(selector);
            }
            return MatrixDataViewQueryVisitor.prototype.visitHierarchy = function(hierarchy) {
                for (var node = hierarchy.root; node && node.children && 0 < this.identitiesToSearch.length; ) node = this.searchNode(node, hierarchy.levels);
            }, MatrixDataViewQueryVisitor.prototype.searchNode = function(hierarchyNode, levels) {
                for (var _i = 0, _a = this.identitiesToSearch; _i < _a.length; _i++) for (var identity = _a[_i], _b = 0, _c = hierarchyNode.children; _b < _c.length; _b++) {
                    var column = _c[_b];
                    if (column.identity === identity) {
                        var levelValues = column.levelValues, level = levels[column.level || 0];
                        if (!_.isEmpty(levelValues)) for (var _d = 0, levelValues_1 = levelValues; _d < levelValues_1.length; _d++) {
                            var levelValue = levelValues_1[_d], columnMetadata = level.sources[levelValue.levelSourceIndex || 0];
                            this.valueDetails.push({
                                expr: columnMetadata.expr,
                                identity: identity,
                                value: levelValue.value,
                                formattedValue: powerbi.visuals.valueFormatter.format(levelValue.value, columnMetadata.format)
                            });
                        }
                        return _.remove(this.identitiesToSearch, identity), column;
                    }
                }
            }, MatrixDataViewQueryVisitor;
        }(), TableDataViewQueryVisitor = function() {
            function TableDataViewQueryVisitor(selector, requestedValues, ignoreQueryName) {
                this.ignoreQueryName = ignoreQueryName, this.requestedValues = requestedValues, 
                this.identities = data_14.Selector.getScopeIdentities(selector), this.valueDetails = [], 
                this.requestedColumnsIndices = [];
            }
            return TableDataViewQueryVisitor.prototype.visitColumn = function(valueColumn, columnIndex) {
                (this.ignoreQueryName || valueColumn.isMeasure && (_.isEmpty(this.requestedValues) || _.includes(this.requestedValues, valueColumn.queryName))) && this.requestedColumnsIndices.push(columnIndex);
            }, TableDataViewQueryVisitor.prototype.visitRow = function(table, rowIndex) {
                table.rows[rowIndex];
                if (!table.identity || !DataViewScan.isIdentityFilteredOut(this.identities, [ table.identity[rowIndex] ])) for (var _i = 0, _a = this.requestedColumnsIndices; _i < _a.length; _i++) {
                    var columnMetadata = _a[_i], value = table.rows[rowIndex][columnMetadata], columnMetadata = table.columns[columnMetadata];
                    this.valueDetails.push({
                        expr: columnMetadata.expr,
                        value: value,
                        formattedValue: powerbi.visuals.valueFormatter.format(value, columnMetadata.format),
                        identity: table.identity && table.identity[rowIndex]
                    });
                }
            }, TableDataViewQueryVisitor;
        }();
        !function(DataViewScan) {
            DataViewScan.isIdentityFilteredOut = function(identitiesToInclude, identitiesToCheck) {
                if (identitiesToInclude) for (var _i = 0, identitiesToInclude_1 = identitiesToInclude; _i < identitiesToInclude_1.length; _i++) {
                    var state_3 = function(identitieToInclude) {
                        if (!_.some(identitiesToCheck, function(dataIdentity) {
                            return powerbi.DataViewScopeIdentity.equals(identitieToInclude, dataIdentity);
                        })) return {
                            value: !0
                        };
                    }(identitiesToInclude_1[_i]);
                    if ("object" == typeof state_3) return state_3.value;
                }
                return !1;
            }, DataViewScan.visitCategorical = function(valueGroups, visitor) {
                var categorical = valueGroups.categorical;
                if (categorical && !_.isEmpty(categorical.values)) {
                    var categoryColumns = data_14.DataViewConcatenateCategoricalColumns.getUntransformedCategories(categorical);
                    visitor.visitCategoryColumns(categoryColumns, valueGroups.metadata);
                    var valueGroups = _.head(categorical.categories), categoryIdentities = valueGroups && _.clone(valueGroups.identity), valueGroups = categorical.values.grouped();
                    visitor.visitValueColumnGroups(valueGroups, categorical.values.source);
                    for (var _i = 0, valueGroups_1 = valueGroups; _i < valueGroups_1.length; _i++) for (var valueGroup = valueGroups_1[_i], valueGroupIdentity = valueGroup.identity, _a = 0, _b = valueGroup.values; _a < _b.length; _a++) {
                        var valueColumn = _b[_a];
                        if (visitor.visitValueColumn(valueColumn)) for (var keys = Object.keys(valueColumn.values), i = 0; i < keys.length; i++) {
                            var selector = keys[i], value = valueColumn.values[selector], selector = valueColumn.source, selector = {
                                data: categoryIdentities ? [ categoryIdentities[i] ] : [],
                                metadata: selector.queryName
                            };
                            valueGroupIdentity && selector.data.push(valueGroupIdentity), visitor.visitValue(value, selector, valueColumn.source, categorical.categories, i);
                        }
                    }
                }
            }, DataViewScan.visitTable = function(dataView, visitor) {
                if (dataView && !_.isEmpty(dataView.rows)) {
                    for (var dataViewColumns = dataView.columns, columnIndex = 0; columnIndex < dataViewColumns.length; columnIndex++) visitor.visitColumn(dataViewColumns[columnIndex], columnIndex);
                    for (var rowIndex = 0; rowIndex < dataView.rows.length; rowIndex++) visitor.visitRow(dataView, rowIndex);
                }
            }, DataViewScan.visitMatrix = function(dataViewMatrix, visitor) {
                dataViewMatrix.rows && visitor.visitHierarchy(dataViewMatrix.rows), dataViewMatrix.columns && visitor.visitHierarchy(dataViewMatrix.columns);
            };
        }(DataViewScan = data_14.DataViewScan || (data_14.DataViewScan = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        data.createDefaultFederatedSchemaValidator = function() {
            return {
                validate: _.noop
            };
        };
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(DataViewScopeIdentitySerializer) {
                DataViewScopeIdentitySerializer.serializeScopeIdentity = function(scopeId) {
                    return {
                        scopeId: services.SemanticQuerySerializer.serializeExpr(scopeId.expr)
                    };
                }, DataViewScopeIdentitySerializer.deserializeScopeIdentity = function(sqExpr) {
                    if (sqExpr.scopeId) {
                        sqExpr = services.SemanticQuerySerializer.deserializeExpr(sqExpr.scopeId);
                        if (sqExpr) return data.createDataViewScopeIdentity(sqExpr);
                    }
                };
            }(services.DataViewScopeIdentitySerializer || (services.DataViewScopeIdentitySerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(DisplayNameSerializer) {
                DisplayNameSerializer.serializeFilterLabelIdPairs = function(pairs) {
                    if (pairs && !(pairs.length < 1)) {
                        for (var result = [], _i = 0, pairs_1 = pairs; _i < pairs_1.length; _i++) {
                            var wiredExpr, current = pairs_1[_i];
                            current.identity && current.identity.expr && ((wiredExpr = services.DataViewScopeIdentitySerializer.serializeScopeIdentity(current.identity)) && result.push({
                                id: wiredExpr,
                                displayName: current.displayName
                            }));
                        }
                        return result;
                    }
                }, DisplayNameSerializer.deserializeFilterLabelIdPairs = function(pairs) {
                    if (pairs && !(pairs.length < 1)) {
                        for (var result = [], _i = 0, pairs_2 = pairs; _i < pairs_2.length; _i++) {
                            var sqExpr, pair = pairs_2[_i];
                            !pair.id || (sqExpr = services.DataViewScopeIdentitySerializer.deserializeScopeIdentity(pair.id)) && result.push({
                                identity: sqExpr,
                                displayName: pair.displayName
                            });
                        }
                        return result;
                    }
                }, DisplayNameSerializer.serializeIdentityValueMap = function(valueMaps) {
                    if (valueMaps && !(valueMaps.length < 1)) {
                        for (var result = [], _i = 0, valueMaps_1 = valueMaps; _i < valueMaps_1.length; _i++) {
                            var wiredExprs, item = valueMaps_1[_i];
                            _.isEmpty(item.identities) || (wiredExprs = _.map(item.identities, function(identity) {
                                return services.DataViewScopeIdentitySerializer.serializeScopeIdentity(identity);
                            })) && result.push({
                                identities: wiredExprs,
                                valueMap: item.valueMap
                            });
                        }
                        return result;
                    }
                }, DisplayNameSerializer.deserializeIdentityValueMap = function(valueMaps) {
                    if (valueMaps && !(valueMaps.length < 1)) {
                        for (var result = [], _i = 0, valueMaps_2 = valueMaps; _i < valueMaps_2.length; _i++) {
                            var sqExprs, item = valueMaps_2[_i];
                            _.isEmpty(item.identities) || (sqExprs = _.map(item.identities, function(identity) {
                                return services.DataViewScopeIdentitySerializer.deserializeScopeIdentity(identity);
                            })) && result.push({
                                identities: sqExprs,
                                valueMap: item.valueMap
                            });
                        }
                        return result;
                    }
                };
            }(services.DisplayNameSerializer || (services.DisplayNameSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(FilterExpressionMetadataSerializer) {
                function serializeOldFilterExpressionMetadata(input) {
                    if (!_.isEmpty(input.expressions)) {
                        var result = {
                            expressions: _.map(input.expressions, function(expr) {
                                return services.SemanticQuerySerializer.serializeExpr(expr);
                            })
                        };
                        return _.isEmpty(input.cachedValueItems) || (result.cachedValueItems = services.DisplayNameSerializer.serializeIdentityValueMap(input.cachedValueItems)), 
                        input.jsonFilter && (result.jsonFilter = input.jsonFilter), result;
                    }
                }
                function deserializeOldFilterExpressionMetadata(input) {
                    if (!_.isEmpty(input.expressions)) {
                        var result = {
                            expressions: _.map(input.expressions, function(expr) {
                                return services.SemanticQuerySerializer.deserializeExpr(expr);
                            })
                        };
                        return _.isEmpty(input.cachedValueItems) || (result.cachedValueItems = services.DisplayNameSerializer.deserializeIdentityValueMap(input.cachedValueItems)), 
                        input.jsonFilter && (result.jsonFilter = input.jsonFilter), result;
                    }
                }
                function isDecomposedFilterExpressionMetadata(metadata) {
                    return !!metadata.decomposedIdentities;
                }
                FilterExpressionMetadataSerializer.isFilterExpressionMetadataOverLimit = function(input) {
                    return input.cachedValueItems && input.cachedValueItems.length > services.DataViewObjectSerializer.IdentityLimit;
                }, FilterExpressionMetadataSerializer.isDecomposedFilterExpressionMetadataOverLimit = function(input) {
                    return input.decomposedIdentities && input.decomposedIdentities.values[0].length > services.DataViewObjectSerializer.IdentityLimit;
                }, FilterExpressionMetadataSerializer.serializeFilterExpressionMetadata = function(input, decomposedFilterExpressionMetadata) {
                    if (!_.isEmpty(input.expressions)) return decomposedFilterExpressionMetadata ? (decomposedFilterExpressionMetadata = data.DecomposedIdentities.decomposeFilterExpressionMetadata(input), 
                    services.DataViewObjectSerializer.serializeDecomposedFilterExpressionMetadata(decomposedFilterExpressionMetadata)) : serializeOldFilterExpressionMetadata(input);
                }, FilterExpressionMetadataSerializer.deserializeFilterExpressionMetadata = function(input) {
                    if (!_.isEmpty(input.expressions)) {
                        if (input.decomposedIdentities) {
                            var filterExpressionMetadata = services.DataViewObjectSerializer.deserializeDecomposedFilterExpressionMetadata(input);
                            return data.DecomposedIdentities.convertDecomposedFilterExpressionMetadata(filterExpressionMetadata);
                        }
                        return deserializeOldFilterExpressionMetadata(input);
                    }
                }, FilterExpressionMetadataSerializer.serializeOldFilterExpressionMetadata = serializeOldFilterExpressionMetadata, 
                FilterExpressionMetadataSerializer.deserializeOldFilterExpressionMetadata = deserializeOldFilterExpressionMetadata, 
                FilterExpressionMetadataSerializer.isDecomposedFilterExpressionMetadata = isDecomposedFilterExpressionMetadata, 
                FilterExpressionMetadataSerializer.isFilterExpressionMetadata = function(metadata) {
                    return !!metadata.cachedValueItems;
                };
            }(services.FilterExpressionMetadataSerializer || (services.FilterExpressionMetadataSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(DataShapeBindingExpansionStateSerializer) {
                function serializeLevelExpansionState(level, from) {
                    return {
                        Expressions: _.map(level.identityKeys, function(rewrittenExpr) {
                            rewrittenExpr = data.SQExprRewriterWithSourceRenames.rewrite(rewrittenExpr, from, from);
                            return services.SemanticQuerySerializer.serializeExprWithRef(rewrittenExpr);
                        }),
                        Default: level.isCollapsed ? 0 : 1
                    };
                }
                DataShapeBindingExpansionStateSerializer.serializeExpansionState = function(expansionState, queryFrom) {
                    if (!_.isEmpty(expansionState.levels) && 0 !== queryFrom) {
                        expansionState.root;
                        var state = function serializeNodeExpansionState(node, currentLevelIndex, lastActiveLevelIndex, levels) {
                            var isRoot = -1 === currentLevelIndex;
                            var lastLevelWithExpansion = currentLevelIndex + 1 === lastActiveLevelIndex;
                            var expansionInstance = !isRoot && !!levels[currentLevelIndex].isCollapsed;
                            if (!node.isToggled && (expansionInstance || lastLevelWithExpansion || _.isEmpty(node.children))) return;
                            var expansionInstance = !isRoot && !expansionInstance && node.isToggled;
                            expansionInstance = !lastLevelWithExpansion && !_.isEmpty(node.children) && !expansionInstance;
                            var children;
                            var depth = 0;
                            if (expansionInstance) {
                                children = [];
                                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                                    var state = _a[_i];
                                    state.identityValues;
                                    state = serializeNodeExpansionState(state, currentLevelIndex + 1, lastActiveLevelIndex, levels);
                                    state && (depth = Math.max(depth, state.depth + 1), children.push(state.instance));
                                }
                            }
                            if (!node.isToggled && _.isEmpty(children)) return;
                            expansionInstance = {};
                            _.isEmpty(node.identityValues) || (expansionInstance.Values = _.map(node.identityValues, function(expr) {
                                return services.SemanticQuerySerializer.serializeExpr(expr);
                            }));
                            _.isEmpty(children) || (expansionInstance.Children = children);
                            return {
                                depth: depth,
                                instance: expansionInstance
                            };
                        }(expansionState.root, -1, queryFrom, expansionState.levels);
                        if (state) {
                            for (var levels = new Array(state.depth), from = new data.SQFrom(null), i = 0; i < state.depth; i++) levels[i] = serializeLevelExpansionState(expansionState.levels[i], from);
                            queryFrom = [];
                            return services.SemanticQuerySerializer.serializeFrom(from, queryFrom), {
                                From: queryFrom,
                                Levels: levels,
                                Instances: state.instance
                            };
                        }
                    }
                }, DataShapeBindingExpansionStateSerializer.serializeLevelExpansionState = serializeLevelExpansionState;
            }(services.DataShapeBindingExpansionStateSerializer || (services.DataShapeBindingExpansionStateSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            var ExpansionState = powerbi.data.ExpansionState;
            !function(ExpansionStateSerializer) {
                ExpansionStateSerializer.serializeExpansionStates = function(expansionStates) {
                    return _.filter(_.map(expansionStates, function(expansionState) {
                        if (debug.assertValue(expansionState, "expansionState"), _.isEmpty(expansionState.roles), 
                        powerbi.data.ExpansionState.hasNodes(expansionState) || powerbi.data.ExpansionState.hasPinnedLevels(expansionState)) {
                            var serializedExpansionState = {
                                roles: expansionState.roles
                            };
                            return _.isEmpty(expansionState.levels) || (expansionState.root, serializedExpansionState.levels = _.map(expansionState.levels, function(level) {
                                if (debug.assertAnyValue(level, "level"), level) {
                                    level.queryRefs;
                                    var outputLevel = {
                                        queryRefs: _.clone(level.queryRefs)
                                    };
                                    return level.isCollapsed && (outputLevel.isCollapsed = !0), level.identityKeys && (outputLevel.identityKeys = _.map(level.identityKeys, function(expr) {
                                        return services.SemanticQuerySerializer.serializeExpr(expr);
                                    })), level.isPinned && (outputLevel.isPinned = level.isPinned), level.isLocked && (outputLevel.isLocked = level.isLocked), 
                                    level.AIInformation && (outputLevel.AIInformation = _.cloneDeep(level.AIInformation)), 
                                    outputLevel;
                                }
                            }), serializedExpansionState.root = function serializeNodeExpansionState(node) {
                                var serializedNode = {
                                    identityValues: node.identityValues ? _.map(node.identityValues, function(expr) {
                                        return services.SemanticQuerySerializer.serializeExpr(expr);
                                    }) : null
                                };
                                node.isToggled && (serializedNode.isToggled = !0);
                                if (!_.isEmpty(node.children)) {
                                    serializedNode.children = [];
                                    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
                                        var serializedChild = _a[_i];
                                        _.isEmpty(serializedChild.identityValues);
                                        serializedChild = serializeNodeExpansionState(serializedChild);
                                        serializedNode.children.push(serializedChild);
                                    }
                                }
                                return serializedNode;
                            }(expansionState.root)), serializedExpansionState;
                        }
                    }), function(state) {
                        return state;
                    });
                }, ExpansionStateSerializer.deserializeExpansionStates = function(serializedExpansionStates, supportsMerge, canCollapseRoot) {
                    if (serializedExpansionStates) {
                        for (var expansionStates = [], _i = 0, serializedExpansionStates_1 = serializedExpansionStates; _i < serializedExpansionStates_1.length; _i++) {
                            var hierarchy, serializedHierarchy = serializedExpansionStates_1[_i];
                            serializedHierarchy && (_.isEmpty(serializedHierarchy.roles), hierarchy = new ExpansionState(serializedHierarchy.roles, supportsMerge, canCollapseRoot), 
                            _.isEmpty(serializedHierarchy.levels) || (serializedHierarchy.root, hierarchy.levels = _.map(serializedHierarchy.levels, function(serializedLevel) {
                                var level = {
                                    queryRefs: _.clone(serializedLevel.queryRefs),
                                    isCollapsed: !!serializedLevel.isCollapsed,
                                    toggledNodes: [],
                                    isPinned: serializedLevel.isPinned,
                                    isLocked: serializedLevel.isLocked,
                                    AIInformation: _.cloneDeep(serializedLevel.AIInformation)
                                };
                                serializedLevel.identityKeys && (level.identityKeys = _.map(serializedLevel.identityKeys, function(expr) {
                                    return services.SemanticQuerySerializer.deserializeExpr(expr);
                                }));
                                return level;
                            }), hierarchy.root = function deserializeNodeExpansionState(serializedNode, levelIdx, parentNode, levels, canCollapseRoot) {
                                var node = {
                                    identityValues: serializedNode.identityValues ? _.map(serializedNode.identityValues, function(expr) {
                                        return services.SemanticQuerySerializer.deserializeExpr(expr);
                                    }) : null,
                                    parent: parentNode,
                                    children: []
                                };
                                serializedNode.isToggled && (node.isToggled = !0, 0 <= levelIdx && levels[levelIdx].toggledNodes.push(node));
                                {
                                    var childrenLevelIndex_1;
                                    _.isEmpty(serializedNode.children) || (childrenLevelIndex_1 = levelIdx + 1, node.children = _.map(serializedNode.children, function(serializedChild) {
                                        return deserializeNodeExpansionState(serializedChild, childrenLevelIndex_1, node, levels, canCollapseRoot);
                                    }));
                                }
                                return node;
                            }(serializedHierarchy.root, -1, null, hierarchy.levels, canCollapseRoot)), expansionStates.push(hierarchy));
                        }
                        return expansionStates;
                    }
                };
            }(services.ExpansionStateSerializer || (services.ExpansionStateSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(wireContracts) {
                !function(DataViewObjectDefinitions) {
                    DataViewObjectDefinitions.getObjectDefinitionProperties = function(objects, objectName) {
                        var objectDefns = objects && objects[objectName];
                        if (objectDefns) {
                            for (var defn, i = 0, len = objectDefns.length; i < len; i++) {
                                var currentDefn = objectDefns[i];
                                if (null == currentDefn.selector) {
                                    defn = currentDefn;
                                    break;
                                }
                            }
                            if (defn) return defn.properties;
                        }
                    };
                }(wireContracts.DataViewObjectDefinitions || (wireContracts.DataViewObjectDefinitions = {}));
            }(services.wireContracts || (services.wireContracts = {})), function(DataViewObjectSerializer) {
                var boolType = powerbi.ValueType.fromDescriptor({
                    bool: !0
                }), numericType = powerbi.ValueType.fromDescriptor({
                    numeric: !0
                }), textType = powerbi.ValueType.fromDescriptor({
                    text: !0
                }), fillColorType = {
                    fill: {
                        solid: {
                            color: !0
                        }
                    }
                };
                function isObjectPropertyWithContext(property) {
                    return property && "ExprContext" === property.propertyDefinitionKind;
                }
                function isDecomposedSelectors(selectors) {
                    return !_.isArray(selectors) && !!selectors.decomposedIdentities;
                }
                function deserializeSelector(input) {
                    if (null === input) return null;
                    if (input) {
                        var result = {};
                        return input.data && (result.data = _.chain(input.data).map(deserializeDataRepetitionSelector).filter(function(s) {
                            return null != s;
                        }).value()), input.metadata && (result.metadata = input.metadata), input.id && (result.id = input.id), 
                        void 0 !== input.highlightMatching && (result.highlightMatching = input.highlightMatching), 
                        result;
                    }
                }
                function deserializeSelectorsByColumn(input) {
                    if (input) {
                        var result = {};
                        if (input.dataMap) for (var key in result.dataMap = {}, input.dataMap) result.dataMap[key] = _.chain(input.dataMap[key]).map(deserializeDataRepetitionSelector).filter(function(s) {
                            return null != s;
                        }).value();
                        return input.metadata && (result.metadata = input.metadata), input.id && (result.id = input.id), 
                        result;
                    }
                }
                function deserializeDecomposedIdentities(input) {
                    for (var values = [], _i = 0, _a = input.values; _i < _a.length; _i++) {
                        for (var selectorLevelArr = [], _b = 0, selectorLevelArray_1 = _a[_i]; _b < selectorLevelArray_1.length; _b++) {
                            var identityLevelObj = selectorLevelArray_1[_b], identityLevelObj = _.mapValues(identityLevelObj, function(expressions) {
                                return _.map(expressions, function(expression) {
                                    return services.SemanticQuerySerializer.deserializeExpr(expression);
                                });
                            });
                            selectorLevelArr.push(identityLevelObj);
                        }
                        values.push(selectorLevelArr);
                    }
                    return {
                        values: values,
                        columns: _.map(input.columns, deserializeDecomposedTree)
                    };
                }
                function copyDecomposedSelectors(input, result, copyIdentities) {
                    input.decomposedIdentities && (result.decomposedIdentities = copyIdentities(input.decomposedIdentities)), 
                    input.queryNames && (result.queryNames = input.queryNames), input.queryNameMap && (result.queryNameMap = input.queryNameMap), 
                    input.metadata && (result.metadata = input.metadata), input.id && (result.id = input.id);
                }
                function deserializeDecomposedSelectors(input) {
                    if (input) {
                        var result = {};
                        return copyDecomposedSelectors(input, result, deserializeDecomposedIdentities), 
                        result;
                    }
                }
                function deserializeDecomposedTree(expr) {
                    var result = {};
                    if (expr.left && expr.right) return result.left = deserializeDecomposedTree(expr.left), 
                    result.right = deserializeDecomposedTree(expr.right), result;
                    if (expr.value) {
                        expr = services.SemanticQuerySerializer.deserializeExpr(expr.value);
                        return (data.SQExpr.isEntity(expr) || data.SQExpr.isMeasure(expr) || data.SQExpr.isColumn(expr) || data.SQExpr.isAggregation(expr)) && (result.value = expr), 
                        result;
                    }
                }
                function deserializeDataRepetitionSelector(input) {
                    return input.scopeId ? services.DataViewScopeIdentitySerializer.deserializeScopeIdentity(input) : input.wildcard ? data.DataViewScopeWildcard.fromExprs(_.map(input.wildcard, services.SemanticQuerySerializer.deserializeExpr)) : input.roles ? data.DataViewRoleWildcard.fromRoles(input.roles) : input.total ? data.DataViewScopeTotal.fromExprs(_.map(input.total, services.SemanticQuerySerializer.deserializeExpr)) : input.dataViewWildcard ? data.DataViewWildcard.create(input.dataViewWildcard.matchingOption) : void 0;
                }
                function deserializeObjectProperty(input, type, forceDeserialize) {
                    if (type) {
                        type = parseType(type.type);
                        return isObjectPropertyWithContext(input) ? {
                            propertyDefinitionKind: "ExprWithContext",
                            value: deserializePropertyValueType(input.value, type.value),
                            context: deserializePropertyContext(input.context)
                        } : type.value ? deserializePropertyValueType(input, type.value) : deserializePropertyStructuralType(input, type.structural);
                    }
                    if (forceDeserialize && input) return isObjectPropertyWithContext(input) ? {
                        propertyDefinitionKind: "ExprWithContext",
                        value: services.SemanticQuerySerializer.deserializeExpr(input.value.expr),
                        context: deserializePropertyContext(input.context)
                    } : input.expr ? services.SemanticQuerySerializer.deserializeExpr(input.expr) : input.solid ? deserializePropertyStructuralType(input, fillColorType) : input.filter ? services.SemanticQuerySerializer.deserializeFilter(input.filter) : void 0;
                }
                function deserializePropertyValueType(input, type) {
                    if (void 0 !== type.primitiveType && input.expr) return services.SemanticQuerySerializer.deserializeExpr(input.expr);
                }
                function deserializePropertyStructuralType(input, type) {
                    if (type.fill && type.fill.solid && type.fill.solid.color && input) return input.solid && input.solid.color ? {
                        solid: {
                            color: deserializePropertyValueType(input.solid.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                        }
                    } : void 0;
                    if (type.fillRule) {
                        var complexInput = getParsedFillRule(input, deserializePropertyValueType);
                        if (complexInput) return complexInput;
                    }
                    complexInput = input;
                    return type.filter && complexInput && complexInput.filter ? services.SemanticQuerySerializer.deserializeFilter(complexInput.filter) : type.image && complexInput && complexInput.image ? function(input) {
                        var result = {
                            name: deserializePropertyValueType(input.name, textType),
                            url: deserializePropertyValueType(input.url, powerbi.ValueType.fromDescriptor(powerbi.ImageDefinition.urlType))
                        };
                        input.scaling && (result.scaling = deserializePropertyValueType(input.scaling, textType));
                        return result;
                    }(complexInput.image) : type.geoJson && complexInput && complexInput.geoJson ? function(input) {
                        return {
                            type: deserializePropertyValueType(input.type, textType),
                            name: deserializePropertyValueType(input.name, textType),
                            content: deserializePropertyValueType(input.content, textType)
                        };
                    }(complexInput.geoJson) : type.paragraphs && input ? function(input) {
                        return _.map(input, function(paragraphInput) {
                            var paragraphDefn = {
                                textRuns: _.map(paragraphInput.textRuns, function(textRunConditionalInput) {
                                    return powerbi.ParagraphsDefinition.isTextRunDefinitionGeneric(textRunConditionalInput) ? deserializeTextRun(textRunConditionalInput) : powerbi.ParagraphsDefinition.isConditionalDefinitionGeneric(textRunConditionalInput) ? (textRunConditionalInput = textRunConditionalInput, 
                                    {
                                        cases: _.map(textRunConditionalInput.cases, function(conditionalCase) {
                                            return {
                                                pattern: deserializePropertyValueType(conditionalCase.pattern, textType),
                                                textRuns: _.map(conditionalCase.textRuns, deserializeTextRun)
                                            };
                                        }),
                                        defaultCase: {
                                            textRuns: _.map(textRunConditionalInput.defaultCase.textRuns, deserializeTextRun)
                                        },
                                        expression: function(valueRef) {
                                            var result;
                                            (result = deserializePropertyValueType(valueRef, textType)) || (valueRef = valueRef, 
                                            powerbi.isValueRef(valueRef) && (result = valueRef));
                                            return result;
                                        }(textRunConditionalInput.expression)
                                    }) : void 0;
                                })
                            };
                            return paragraphInput.horizontalTextAlignment && (paragraphDefn.horizontalTextAlignment = paragraphInput.horizontalTextAlignment), 
                            paragraphInput.listType && (paragraphDefn.listType = paragraphInput.listType), paragraphDefn;
                        });
                    }(input) : type.queryTransform && input ? function(input) {
                        return {
                            algorithm: input.algorithm,
                            parameters: _.map(input.parameters, function(parameter) {
                                return {
                                    name: parameter.Name,
                                    expr: services.SemanticQuerySerializer.deserializeExpr(parameter)
                                };
                            })
                        };
                    }(input) : type.dataBars && input ? function(input) {
                        return {
                            minValue: input.minValue ? deserializePropertyValueType(input.minValue, numericType) : void 0,
                            maxValue: input.maxValue ? deserializePropertyValueType(input.maxValue, numericType) : void 0,
                            positiveColor: deserializePropertyStructuralType(input.positiveColor, fillColorType),
                            negativeColor: deserializePropertyStructuralType(input.negativeColor, fillColorType),
                            axisColor: deserializePropertyStructuralType(input.axisColor, fillColorType),
                            reverseDirection: deserializePropertyValueType(input.reverseDirection, boolType),
                            hideText: deserializePropertyValueType(input.hideText, boolType)
                        };
                    }(input) : type.icon && input && "Icon" === input.kind ? function(input) {
                        var output = {
                            kind: "Icon"
                        };
                        input.layout && (output.layout = deserializePropertyValueType(input.layout, textType));
                        input.verticalAlignment && (output.verticalAlignment = deserializePropertyValueType(input.verticalAlignment, boolType));
                        input.value && (output.value = deserializePropertyValueType(input.value, textType));
                        return output;
                    }(input) : type.exprList && input && "ExprList" === input.kind ? function(input) {
                        var output = {
                            exprs: [],
                            kind: "ExprList"
                        };
                        return output.exprs = _.map(input.exprs, function(queryExpressionContainer) {
                            return services.SemanticQuerySerializer.deserializeExpr(queryExpressionContainer.expr);
                        }), output;
                    }(input) : type.errorRange && input && "ErrorRange" === input.kind ? function(explicit) {
                        var output = {
                            kind: "ErrorRange"
                        }, explicit = explicit.explicit;
                        explicit && (output.explicit = {
                            isRelative: services.SemanticQuerySerializer.deserializeExpr(explicit.isRelative.expr)
                        }, explicit.lowerBound && (output.explicit.lowerBound = services.SemanticQuerySerializer.deserializeExpr(explicit.lowerBound.expr)), 
                        explicit.upperBound && (output.explicit.upperBound = services.SemanticQuerySerializer.deserializeExpr(explicit.upperBound.expr)));
                        return output;
                    }(input) : void 0;
                }
                function deserializePropertyContext(input) {
                    var result = {};
                    return _.isEmpty(input.filterContext) || (result.filterContext = _.map(input.filterContext, function(fc) {
                        return {
                            filter: services.SemanticQuerySerializer.deserializeFilter(fc.filter),
                            metadata: fc.metadata ? services.FilterExpressionMetadataSerializer.deserializeFilterExpressionMetadata(fc.metadata) : void 0
                        };
                    })), result;
                }
                function deserializeTextRun(textRunInput) {
                    var textRunDefn = {
                        value: function(valueRef) {
                            var result;
                            _.isString(valueRef) ? result = valueRef : (result = deserializePropertyValueType(valueRef, textType)) || (valueRef = valueRef, 
                            powerbi.isValueRef(valueRef) && (result = valueRef));
                            return result;
                        }(textRunInput.value)
                    };
                    return textRunInput.textStyle && (textRunDefn.textStyle = textRunInput.textStyle), 
                    textRunInput.url && (textRunDefn.url = textRunInput.url), textRunInput.mentionEmail && (textRunDefn.mentionEmail = textRunInput.mentionEmail), 
                    textRunDefn;
                }
                function serializeSelector(contract) {
                    if (null === contract) return null;
                    if (contract) {
                        var result = {};
                        return contract.data && (result.data = _.chain(contract.data).map(serializeDataRepetitionSelector).filter(function(s) {
                            return null != s;
                        }).value()), contract.metadata && (result.metadata = contract.metadata), contract.id && (result.id = contract.id), 
                        void 0 !== contract.highlightMatching && (result.highlightMatching = contract.highlightMatching), 
                        result;
                    }
                }
                function serializeSelectorsByColumn(contract) {
                    if (contract) {
                        var result = {};
                        if (contract.dataMap) for (var key in result.dataMap = {}, contract.dataMap) {
                            var dataRepetitionSelectors = jsCommon.ArrayExtensions.ensureArray(contract.dataMap[key]);
                            result.dataMap[key] = _.chain(dataRepetitionSelectors).map(serializeDataRepetitionSelector).filter(function(s) {
                                return null != s;
                            }).value();
                        }
                        return contract.metadata && (result.metadata = contract.metadata), contract.id && (result.id = contract.id), 
                        result;
                    }
                }
                function serializeDecomposedIdentities(contract) {
                    if (contract) {
                        for (var values = [], _i = 0, _a = contract.values; _i < _a.length; _i++) {
                            for (var selectorLevelArr = [], _b = 0, selectorLevelArray_2 = _a[_i]; _b < selectorLevelArray_2.length; _b++) {
                                var identityLevelObj = selectorLevelArray_2[_b], identityLevelObj = _.mapValues(identityLevelObj, function(expressions) {
                                    return _.map(expressions, function(expression) {
                                        return services.SemanticQuerySerializer.serializeExpr(expression);
                                    });
                                });
                                selectorLevelArr.push(identityLevelObj);
                            }
                            values.push(selectorLevelArr);
                        }
                        return {
                            values: values,
                            columns: _.map(contract.columns, serializeDecomposedTree)
                        };
                    }
                }
                function serializeDecomposedSelectors(contract) {
                    if (contract) {
                        var result = {};
                        return copyDecomposedSelectors(contract, result, serializeDecomposedIdentities), 
                        result;
                    }
                }
                function serializeDecomposedTree(tree) {
                    var result = {};
                    return tree.left && tree.right ? (result.left = serializeDecomposedTree(tree.left), 
                    result.right = serializeDecomposedTree(tree.right), result) : tree.value ? (result.value = services.SemanticQuerySerializer.serializeExpr(tree.value), 
                    result) : void 0;
                }
                function serializeDataRepetitionSelector(contract) {
                    return data.Selector.isScopeIdentity(contract) && contract.expr ? services.DataViewScopeIdentitySerializer.serializeScopeIdentity(contract) : data.Selector.isScopeWildcard(contract) && contract.exprs ? {
                        wildcard: _.map(contract.exprs, function(expr) {
                            return services.SemanticQuerySerializer.serializeExpr(expr);
                        })
                    } : data.Selector.isRoleWildcard(contract) && contract.roles ? {
                        roles: contract.roles
                    } : data.Selector.isScopeTotal(contract) && contract.exprs ? {
                        total: _.map(contract.exprs, function(expr) {
                            return services.SemanticQuerySerializer.serializeExpr(expr);
                        })
                    } : data.Selector.isWildcard(contract) ? {
                        dataViewWildcard: {
                            matchingOption: contract.matchingOption
                        }
                    } : void 0;
                }
                function serializeObjectProperty(contract, type, forceSerialize, isSpaceOptimizationOn) {
                    if (type) {
                        type = parseType(type.type);
                        return data.DataViewObjectDefinitions.isObjectPropertySQExprWithContext(contract) ? {
                            propertyDefinitionKind: "ExprContext",
                            value: serializePropertyValueType(contract.value, type.value),
                            context: serializePropertyContext(contract.context, isSpaceOptimizationOn)
                        } : type.value ? serializePropertyValueType(contract, type.value) : serializePropertyStructuralType(contract, type.structural);
                    }
                    if (forceSerialize && contract) return data.DataViewObjectDefinitions.isObjectPropertySQExprWithContext(contract) ? {
                        propertyDefinitionKind: "ExprContext",
                        value: {
                            expr: services.SemanticQuerySerializer.serializeExpr(contract.value)
                        },
                        context: serializePropertyContext(contract.context, isSpaceOptimizationOn)
                    } : contract instanceof data.SQExpr ? {
                        expr: services.SemanticQuerySerializer.serializeExpr(contract)
                    } : contract instanceof data.SemanticFilter ? {
                        filter: services.SemanticQuerySerializer.serializeFilter(contract)
                    } : contract.solid ? serializePropertyStructuralType(contract, fillColorType) : void 0;
                }
                function serializePropertyValueType(contract, type) {
                    if (void 0 !== type.primitiveType && contract instanceof data.SQExpr) return {
                        expr: services.SemanticQuerySerializer.serializeExpr(contract, !0)
                    };
                }
                function serializePropertyStructuralType(contract, type) {
                    if (contract) {
                        var output;
                        if (type.fill && type.fill.solid && type.fill.solid.color) return {
                            solid: {
                                color: serializePropertyValueType(contract.solid.color, textType)
                            }
                        };
                        if (type.fillRule) {
                            var input = getParsedFillRule(contract, serializePropertyValueType);
                            if (input) return input;
                        }
                        return type.filter ? {
                            filter: services.SemanticQuerySerializer.serializeFilter(contract)
                        } : type.image ? {
                            image: function(definition) {
                                var serialized = {
                                    name: serializePropertyValueType(definition.name, textType),
                                    url: serializePropertyValueType(definition.url, powerbi.ValueType.fromDescriptor(powerbi.ImageDefinition.urlType))
                                };
                                definition.scaling && (serialized.scaling = serializePropertyValueType(definition.scaling, textType));
                                return serialized;
                            }(contract)
                        } : type.geoJson ? {
                            geoJson: {
                                type: serializePropertyValueType((output = contract).type, textType),
                                name: serializePropertyValueType(output.name, textType),
                                content: serializePropertyValueType(output.content, textType)
                            }
                        } : type.paragraphs ? function(definition) {
                            return _.map(definition, function(paragraphDefn) {
                                var paragraphSerialized = {
                                    textRuns: _.map(paragraphDefn.textRuns, function(runDefn) {
                                        return powerbi.ParagraphsDefinition.isTextRunDefinition(runDefn) ? serializeTextRun(runDefn) : powerbi.ParagraphsDefinition.isTextRunConditionalDefinition(runDefn) ? {
                                            cases: _.map(runDefn.cases, function(conditionalCase) {
                                                return {
                                                    pattern: serializePropertyValueType(conditionalCase.pattern, textType),
                                                    textRuns: _.map(conditionalCase.textRuns, serializeTextRun)
                                                };
                                            }),
                                            defaultCase: {
                                                textRuns: _.map(runDefn.defaultCase.textRuns, serializeTextRun)
                                            },
                                            expression: function(expression) {
                                                var expressionSerialized;
                                                expression instanceof data.SQExpr ? expressionSerialized = serializePropertyValueType(expression, textType) : powerbi.isValueRef(expression) && (expressionSerialized = expression);
                                                return expressionSerialized;
                                            }(runDefn.expression)
                                        } : void 0;
                                    })
                                };
                                return paragraphDefn.horizontalTextAlignment && (paragraphSerialized.horizontalTextAlignment = paragraphDefn.horizontalTextAlignment), 
                                paragraphDefn.listType && (paragraphSerialized.listType = paragraphDefn.listType), 
                                paragraphSerialized;
                            });
                        }(contract) : type.queryTransform ? function(definition) {
                            return {
                                algorithm: definition.algorithm,
                                parameters: _.map(definition.parameters, function(parameter) {
                                    var queryExpressionContainer = services.SemanticQuerySerializer.serializeExpr(parameter.expr);
                                    return queryExpressionContainer.Name = parameter.name, queryExpressionContainer;
                                })
                            };
                        }(contract) : type.dataBars ? function(definition) {
                            return {
                                minValue: serializePropertyValueType(definition.minValue, numericType),
                                maxValue: serializePropertyValueType(definition.maxValue, numericType),
                                positiveColor: serializePropertyStructuralType(definition.positiveColor, fillColorType),
                                negativeColor: serializePropertyStructuralType(definition.negativeColor, fillColorType),
                                axisColor: serializePropertyStructuralType(definition.axisColor, fillColorType),
                                reverseDirection: serializePropertyValueType(definition.reverseDirection, boolType),
                                hideText: serializePropertyValueType(definition.hideText, boolType)
                            };
                        }(contract) : type.icon && "Icon" === contract.kind ? function(input) {
                            var output = {
                                kind: "Icon"
                            };
                            input.layout && (output.layout = serializePropertyValueType(input.layout, textType));
                            input.verticalAlignment && (output.verticalAlignment = serializePropertyValueType(input.verticalAlignment, boolType));
                            input.value && (output.value = serializePropertyValueType(input.value, textType));
                            return output;
                        }(contract) : type.exprList && "ExprList" === contract.kind ? (input = contract, 
                        (output = {
                            exprs: [],
                            kind: "ExprList"
                        }).exprs = _.map(input.exprs, function(expr) {
                            return serializePropertyValueType(expr, textType);
                        }), output) : type.errorRange && "ErrorRange" === contract.kind ? function(explicit) {
                            var output = {
                                kind: "ErrorRange"
                            }, explicit = explicit.explicit;
                            explicit && (output.explicit = {
                                isRelative: serializePropertyValueType(explicit.isRelative, boolType)
                            }, explicit.lowerBound && (output.explicit.lowerBound = serializePropertyValueType(explicit.lowerBound, numericType)), 
                            explicit.upperBound && (output.explicit.upperBound = serializePropertyValueType(explicit.upperBound, numericType)));
                            return output;
                        }(contract) : void 0;
                    }
                }
                function serializePropertyContext(contract, isSpaceOptimizationOn) {
                    var result = {};
                    return _.isEmpty(contract.filterContext) || (result.filterContext = _.map(contract.filterContext, function(fc) {
                        return {
                            filter: services.SemanticQuerySerializer.serializeFilter(fc.filter),
                            metadata: fc.metadata ? services.FilterExpressionMetadataSerializer.serializeFilterExpressionMetadata(fc.metadata, isSpaceOptimizationOn) : void 0
                        };
                    })), result;
                }
                function serializeTextRun(runDefn) {
                    var runSerialized = {
                        value: function(value) {
                            var valueSerialized;
                            value instanceof data.SQExpr ? valueSerialized = serializePropertyValueType(value, textType) : (_.isString(value) || powerbi.isValueRef(value)) && (valueSerialized = value);
                            return valueSerialized;
                        }(runDefn.value)
                    };
                    return runDefn.textStyle && (runSerialized.textStyle = runDefn.textStyle), runDefn.url && (runSerialized.url = runDefn.url), 
                    runDefn.mentionEmail && (runSerialized.mentionEmail = runDefn.mentionEmail), runSerialized;
                }
                function parseType(typeDescriptor) {
                    var valueType = powerbi.ValueType.fromDescriptor(typeDescriptor);
                    return 0 !== valueType.primitiveType ? {
                        value: valueType
                    } : {
                        structural: typeDescriptor
                    };
                }
                function getParsedFillRule(fillRuleDefn, serializationDelegate) {
                    if (fillRuleDefn.linearGradient2) {
                        var output = {
                            min: {
                                color: serializationDelegate((input = fillRuleDefn.linearGradient2).min.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                            },
                            max: {
                                color: serializationDelegate(input.max.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                            }
                        };
                        return input.min.value && (output.min.value = serializationDelegate(input.min.value, powerbi.ValueType.fromPrimitiveTypeAndCategory(3))), 
                        input.max.value && (output.max.value = serializationDelegate(input.max.value, powerbi.ValueType.fromPrimitiveTypeAndCategory(3))), 
                        input.nullColoringStrategy && (output.nullColoringStrategy = {
                            strategy: serializationDelegate(input.nullColoringStrategy.strategy, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                        }, input.nullColoringStrategy.color && (output.nullColoringStrategy.color = serializationDelegate(input.nullColoringStrategy.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1)))), 
                        {
                            linearGradient2: output
                        };
                    }
                    if (fillRuleDefn.linearGradient3) {
                        var input, output = {
                            min: {
                                color: serializationDelegate((input = fillRuleDefn.linearGradient3).min.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                            },
                            mid: {
                                color: serializationDelegate(input.mid.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                            },
                            max: {
                                color: serializationDelegate(input.max.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                            }
                        };
                        return input.min.value && (output.min.value = serializationDelegate(input.min.value, powerbi.ValueType.fromPrimitiveTypeAndCategory(3))), 
                        input.mid.value && (output.mid.value = serializationDelegate(input.mid.value, powerbi.ValueType.fromPrimitiveTypeAndCategory(3))), 
                        input.max.value && (output.max.value = serializationDelegate(input.max.value, powerbi.ValueType.fromPrimitiveTypeAndCategory(3))), 
                        input.nullColoringStrategy && (output.nullColoringStrategy = {
                            strategy: serializationDelegate(input.nullColoringStrategy.strategy, powerbi.ValueType.fromPrimitiveTypeAndCategory(1))
                        }, input.nullColoringStrategy.color && (output.nullColoringStrategy.color = serializationDelegate(input.nullColoringStrategy.color, powerbi.ValueType.fromPrimitiveTypeAndCategory(1)))), 
                        {
                            linearGradient3: output
                        };
                    }
                    return null;
                }
                DataViewObjectSerializer.IdentityLimit = 300, DataViewObjectSerializer.isObjectPropertyWithContext = isObjectPropertyWithContext, 
                DataViewObjectSerializer.isDecomposedSelectors = isDecomposedSelectors, DataViewObjectSerializer.isSelectorsByColumn = function(selectors) {
                    return _.isArray(selectors) && !!selectors[0].dataMap;
                }, DataViewObjectSerializer.isDecomposedSelectorOverLimit = function(selectors) {
                    return selectors.decomposedIdentities.values[0].length > DataViewObjectSerializer.IdentityLimit;
                }, DataViewObjectSerializer.isSelectorsByColumnOverLimit = function(selectors) {
                    return selectors.length > DataViewObjectSerializer.IdentityLimit;
                }, DataViewObjectSerializer.deserializeObjects = function(input, descriptors) {
                    if (input) {
                        var objectName, result = {};
                        for (objectName in input) {
                            var descriptor = void 0;
                            if (!descriptors || (descriptor = descriptors[objectName])) for (var objectEntries = input[objectName], resultEntries = result[objectName] = [], i = 0, len = objectEntries.length; i < len; i++) resultEntries.push(function(selector, descriptor, result) {
                                if (debug.assertAnyValue(selector, "input"), selector) {
                                    result = {
                                        properties: function(input, propertyDescriptors, forceDeserialize) {
                                            if (debug.assertAnyValue(input, "input"), input) {
                                                var propertyName, result = {};
                                                for (propertyName in input) {
                                                    var propertyValue = deserializeObjectProperty(input[propertyName], propertyDescriptors ? propertyDescriptors[propertyName] : null, forceDeserialize);
                                                    void 0 !== propertyValue && (result[propertyName] = propertyValue);
                                                }
                                                return result;
                                            }
                                        }(selector.properties, descriptor ? descriptor.properties : null, result)
                                    }, selector = deserializeSelector(selector.selector);
                                    return selector && (result.selector = selector), result;
                                }
                            }(objectEntries[i], descriptor, !descriptors));
                        }
                        return result;
                    }
                }, DataViewObjectSerializer.deserializeSelectors = function(input) {
                    if (input) return _.map(input, deserializeSelector);
                }, DataViewObjectSerializer.serializeSelectors = function(input) {
                    if (input) return _.map(input, serializeSelector);
                }, DataViewObjectSerializer.serializeValueType = function(input) {
                    if (input) return {
                        category: input.categoryString,
                        underlyingType: input.extendedType
                    };
                }, DataViewObjectSerializer.deserializeValueType = function(input) {
                    if (input) return new powerbi.ValueType(input.underlyingType, input.category);
                }, DataViewObjectSerializer.deserializeSelector = deserializeSelector, DataViewObjectSerializer.deserializeSelectorsByColumn = deserializeSelectorsByColumn, 
                DataViewObjectSerializer.deserializeDecomposedIdentities = deserializeDecomposedIdentities, 
                DataViewObjectSerializer.deserializeDecomposedSelectors = deserializeDecomposedSelectors, 
                DataViewObjectSerializer.deserializeDecomposedFilterExpressionMetadata = function(input) {
                    if (input) {
                        var result = {
                            expressions: _.map(input.expressions, function(expr) {
                                return services.SemanticQuerySerializer.deserializeExpr(expr);
                            })
                        };
                        return input.decomposedIdentities && (result.decomposedIdentities = deserializeDecomposedIdentities(input.decomposedIdentities)), 
                        input.valueMap && (result.valueMap = input.valueMap), input.jsonFilter && (result.jsonFilter = input.jsonFilter), 
                        result;
                    }
                }, DataViewObjectSerializer.deserializeDecomposedTree = deserializeDecomposedTree, 
                DataViewObjectSerializer.deserializeVisualObjects = function(input) {
                    if (input) return _.map(input, function(item) {
                        return {
                            objectName: item.objectName,
                            selectorsByColumn: deserializeSelectorsByColumn(item.selectorsByColumn)
                        };
                    });
                }, DataViewObjectSerializer.deserializeObjectProperty = deserializeObjectProperty, 
                DataViewObjectSerializer.serializeObjects = function(contract, descriptors, isSpaceOptimizationOn) {
                    if (contract) {
                        var objectName, result = {};
                        for (objectName in contract) {
                            var descriptor = void 0;
                            if (!descriptors || (descriptor = descriptors[objectName])) for (var objectEntries = contract[objectName], resultEntries = result[objectName] = [], i = 0, len = objectEntries.length; i < len; i++) resultEntries.push(function(selector, descriptor, forceSerialize, result) {
                                if (debug.assertAnyValue(selector, "contract"), selector) {
                                    result = function(contract, descriptors, forceSerialize, isSpaceOptimizationOn) {
                                        if (debug.assertAnyValue(contract, "contract"), contract) {
                                            var propertyName, result = {};
                                            for (propertyName in contract) {
                                                var propertyValue = descriptors ? descriptors[propertyName] : null;
                                                (forceSerialize || propertyValue) && (void 0 === (propertyValue = serializeObjectProperty(contract[propertyName], propertyValue, forceSerialize, isSpaceOptimizationOn)) || (result[propertyName] = propertyValue));
                                            }
                                            return result;
                                        }
                                    }(selector.properties, descriptor ? descriptor.properties : null, forceSerialize, result);
                                    if (result) {
                                        result = {
                                            properties: result
                                        }, selector = serializeSelector(selector.selector);
                                        return selector && (result.selector = selector), result;
                                    }
                                }
                            }(objectEntries[i], descriptor, !descriptors, isSpaceOptimizationOn));
                        }
                        return result;
                    }
                }, DataViewObjectSerializer.serializeSelector = serializeSelector, DataViewObjectSerializer.serializeSelectorsByColumn = serializeSelectorsByColumn, 
                DataViewObjectSerializer.serializeDecomposedIdentities = serializeDecomposedIdentities, 
                DataViewObjectSerializer.serializeDecomposedSelectors = serializeDecomposedSelectors, 
                DataViewObjectSerializer.serializeSelection = function(contract, serializeSpaceOptimization) {
                    return serializeSpaceOptimization ? serializeDecomposedSelectors(data.DecomposedIdentities.decomposeSelectorsByColumn(contract)) : _.map(contract, serializeSelectorsByColumn);
                }, DataViewObjectSerializer.deserializeSelection = function(input) {
                    if (isDecomposedSelectors(input)) {
                        var decomposedSelectors = deserializeDecomposedSelectors(input);
                        return data.DecomposedIdentities.convertDecomposedSelectors(decomposedSelectors);
                    }
                    return _.map(input, deserializeSelectorsByColumn);
                }, DataViewObjectSerializer.serializeDecomposedFilterExpressionMetadata = function(contract) {
                    if (contract) {
                        var result = {
                            expressions: _.map(contract.expressions, function(expr) {
                                return services.SemanticQuerySerializer.serializeExpr(expr);
                            })
                        };
                        return contract.decomposedIdentities && (result.decomposedIdentities = serializeDecomposedIdentities(contract.decomposedIdentities)), 
                        contract.valueMap && (result.valueMap = contract.valueMap), contract.jsonFilter && (result.jsonFilter = contract.jsonFilter), 
                        result;
                    }
                }, DataViewObjectSerializer.serializeDecomposedTree = serializeDecomposedTree, DataViewObjectSerializer.serializeVisualObjects = function(input) {
                    if (input) return _.map(input, function(item) {
                        return {
                            objectName: item.objectName,
                            selectorsByColumn: serializeSelectorsByColumn(item.selectorsByColumn)
                        };
                    });
                }, DataViewObjectSerializer.serializeObjectProperty = serializeObjectProperty;
            }(services.DataViewObjectSerializer || (services.DataViewObjectSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            var ExpansionStateSerializer = powerbi.data.services.ExpansionStateSerializer, DataViewTransformActionsSerializer = function() {
                function DataViewTransformActionsSerializer() {}
                return DataViewTransformActionsSerializer.deserializeDataViewSelectTransforms = function(input) {
                    return services.DataViewTransformActionsUpgrade.V1.upgradeDataViewSelectTransform(input), 
                    _.map(input, function(item) {
                        var result = {
                            displayName: item.displayName,
                            format: item.format,
                            kpi: item.kpi,
                            queryName: item.queryName,
                            roles: item.roles,
                            sort: item.sort,
                            sortOrder: item.sortOrder,
                            type: services.DataViewObjectSerializer.deserializeValueType(item.type)
                        };
                        return item.expr && (result.expr = services.SemanticQuerySerializer.deserializeExpr(item.expr)), 
                        item.aggregateSources && (result.aggregateSources = item.aggregateSources), result;
                    });
                }, DataViewTransformActionsSerializer.serializeDataViewSelectTransforms = function(input) {
                    return _.map(input, function(item) {
                        var result = {
                            displayName: item.displayName,
                            format: item.format,
                            kpi: item.kpi,
                            queryName: item.queryName,
                            roles: item.roles,
                            sort: item.sort,
                            sortOrder: item.sortOrder,
                            type: services.DataViewObjectSerializer.serializeValueType(item.type)
                        };
                        return item.expr && (result.expr = services.SemanticQuerySerializer.serializeExpr(item.expr)), 
                        item.aggregateSources && (result.aggregateSources = item.aggregateSources), result;
                    });
                }, DataViewTransformActionsSerializer.serializeDataViewTransformActions = function(actions, objectDescriptors) {
                    var wireActions = {
                        objects: (actions = actions || {}).objects,
                        projectionOrdering: actions.roles && actions.roles.ordering,
                        projectionActiveItems: actions.roles && actions.roles.activeItems,
                        splits: actions.splits,
                        queryMetadata: null,
                        visualElements: null
                    };
                    return actions && actions.objects && (wireActions.objects = services.DataViewObjectSerializer.serializeObjects(actions.objects, objectDescriptors)), 
                    actions && actions.selects && (wireActions.selects = DataViewTransformActionsSerializer.serializeDataViewSelectTransforms(actions.selects)), 
                    actions && !_.isEmpty(actions.expansionStates) && (wireActions.expansionStates = ExpansionStateSerializer.serializeExpansionStates(actions.expansionStates)), 
                    wireActions;
                }, DataViewTransformActionsSerializer.deserializeDataViewTransformActions = function(actions, canCollapseRoot) {
                    var transformActions = canCollapseRoot && canCollapseRoot.objects, supportsMerge = actions.objects ? services.DataViewObjectSerializer.deserializeObjects(actions.objects, transformActions) : null, transformActions = DataViewTransformActionsSerializer.createTransformActions(actions.queryMetadata, actions.visualElements, transformActions, supportsMerge) || {}, supportsMerge = actions && actions.projectionActiveItems;
                    return _.isEmpty(supportsMerge) || this.upgradeActiveItemsIfNeeded(supportsMerge), 
                    transformActions.roles = {
                        ordering: actions.projectionOrdering,
                        activeItems: supportsMerge
                    }, transformActions.splits = actions.splits, actions.selects && (transformActions.selects = DataViewTransformActionsSerializer.deserializeDataViewSelectTransforms(actions.selects)), 
                    actions.expansionStates && (supportsMerge = canCollapseRoot && canCollapseRoot.expandCollapse && canCollapseRoot.expandCollapse.supportsMerge, 
                    canCollapseRoot = canCollapseRoot && canCollapseRoot.noDefaultProjections, transformActions.expansionStates = ExpansionStateSerializer.deserializeExpansionStates(actions.expansionStates, supportsMerge, canCollapseRoot)), 
                    this.upgradeComboChartFromCY16SU04AndPrior(transformActions), transformActions;
                }, DataViewTransformActionsSerializer.isStringArray = function(array) {
                    return _.isString(array[0]);
                }, DataViewTransformActionsSerializer.upgradeActiveItemsIfNeeded = function(activeItems) {
                    for (var role in activeItems) {
                        var activeItemsPerRole = activeItems[role], upgradedActiveItems = void 0;
                        !_.isEmpty(activeItemsPerRole) && this.isStringArray(activeItemsPerRole) && (upgradedActiveItems = _.map(activeItemsPerRole, function(activeItem) {
                            return {
                                queryRef: activeItem
                            };
                        })), activeItems[role] = upgradedActiveItems || activeItemsPerRole;
                    }
                }, DataViewTransformActionsSerializer.upgradeComboChartFromCY16SU04AndPrior = function(transformActions) {
                    var _a, firstOfTwoComboChartSplits, largestSelectIndexInFirstSplit, selectTransformSharedByMeasureRoles, newSelectTransform = transformActions.roles && transformActions.roles.ordering;
                    !newSelectTransform || void 0 !== (_a = newSelectTransform.Y && 1 === newSelectTransform.Y.length && _.includes(newSelectTransform.Y2, newSelectTransform.Y[0]) ? newSelectTransform.Y[0] : void 0) && (!(firstOfTwoComboChartSplits = transformActions.splits && 2 === transformActions.splits.length && !transformActions.splits[0].selects[_a] && transformActions.splits[1].selects[_a] ? transformActions.splits[0] : void 0) || (largestSelectIndexInFirstSplit = _.chain(Object.keys(firstOfTwoComboChartSplits.selects)).filter(function(selectIndex) {
                        return firstOfTwoComboChartSplits.selects[selectIndex];
                    }).map(function(selectIndex) {
                        return parseInt(selectIndex, 10);
                    }).maxBy(function(selectIndex) {
                        return selectIndex;
                    }).value()) !== Number.NEGATIVE_INFINITY && (!transformActions.selects || transformActions.selects.length !== largestSelectIndexInFirstSplit || (selectTransformSharedByMeasureRoles = transformActions.selects[_a]) && selectTransformSharedByMeasureRoles.roles.Y && selectTransformSharedByMeasureRoles.roles.Y2 && (delete selectTransformSharedByMeasureRoles.roles.Y, 
                    (newSelectTransform = __assign({}, selectTransformSharedByMeasureRoles)).roles = ((_a = {}).Y = !0, 
                    _a), newSelectTransform.queryName = selectTransformSharedByMeasureRoles.queryName, 
                    transformActions.selects[largestSelectIndexInFirstSplit] = newSelectTransform, transformActions.roles.ordering.Y = [ largestSelectIndexInFirstSplit ])));
                }, DataViewTransformActionsSerializer.serializeTransformActions = function(actions) {
                    return JSON.stringify(actions);
                }, DataViewTransformActionsSerializer.createTransformActions = function(queryMetadata, visualElements, objectDescs, objectDefns) {
                    if (queryMetadata && !_.isEmpty(queryMetadata.Select) || !_.isEmpty(visualElements) || objectDefns) {
                        var transforms = {};
                        if (queryMetadata) {
                            var querySelects = queryMetadata.Select;
                            if (querySelects) for (var transformSelects = transforms.selects = [], i = 0, len = querySelects.length; i < len; i++) {
                                var selectTransform, formatStringProp = querySelects[i];
                                formatStringProp ? (selectTransform = this.toTransformSelect(formatStringProp, i), 
                                transformSelects.push(selectTransform), selectTransform.format && objectDescs && (selectTransform.queryName, 
                                (formatStringProp = data.DataViewObjectDescriptors.findFormatString(objectDescs)) && data.DataViewObjectDefinitions.setValue(objectDefns = objectDefns || {}, formatStringProp, {
                                    metadata: selectTransform.queryName
                                }, data.SQExprBuilder.text(selectTransform.format)))) : transformSelects.push(null);
                            }
                        }
                        if (visualElements) {
                            var visualElementsLength = (visualElements = _.unionBy(visualElements, function(visualElement) {
                                return JSON.stringify(visualElement);
                            })).length;
                            1 < visualElementsLength && (transforms.splits = []);
                            for (i = 0; i < visualElementsLength; i++) {
                                var visualElement = visualElements[i];
                                visualElement.Settings && 0 === i && (objectDefns = this.upgradeSettingsToObjects(visualElement.Settings, objectDefns)), 
                                visualElement.DataRoles && (transforms.selects || (transforms.selects = []), transforms.roles || (transforms.roles = {
                                    ordering: {}
                                }), this.populateDataRoles(visualElement.DataRoles, transforms.selects, transforms.roles.ordering)), 
                                transforms.splits && transforms.splits.push(this.populateSplit(visualElement.DataRoles));
                            }
                        }
                        return objectDefns && (transforms.objects = objectDefns), transforms;
                    }
                }, DataViewTransformActionsSerializer.toTransformSelect = function(select, index) {
                    var result = {};
                    return select.Restatement && (result.displayName = select.Restatement), select.Name ? result.queryName = select.Name : result.queryName || (result.queryName = "$select" + index), 
                    select.Format && (result.format = select.Format), select.Type && (result.type = this.describeDataType(select.Type, powerbi.data.conceptualDataCategoryToString(select.DataCategory))), 
                    select.kpi && (result.kpi = select.kpi), select.kpiStatusGraphic && (result.kpi = {
                        graphic: select.kpiStatusGraphic
                    }), result;
                }, DataViewTransformActionsSerializer.describeDataType = function(type, category) {
                    var primitiveType = 0;
                    switch (type = type || 0) {
                      case 2048:
                        primitiveType = 1;
                        break;

                      case 1:
                        primitiveType = 3;
                        break;

                      case 3:
                        primitiveType = 4;
                        break;

                      case 4096:
                        primitiveType = 5;
                        break;

                      case 20:
                        primitiveType = 6;
                        break;

                      case 4:
                        primitiveType = 7;
                        break;

                      case 8:
                        primitiveType = 9;
                        break;

                      case 67:
                        primitiveType = 4, category = "Year";
                        break;

                      case 35:
                        primitiveType = 4, category = "Month";
                    }
                    return powerbi.ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
                }, DataViewTransformActionsSerializer.populateDataRoles = function(roles, selects, projectionOrdering) {
                    for (var i = 0, len = roles.length; i < len; i++) {
                        var projectionOrderingForRole = roles[i], roleProjection = projectionOrderingForRole.Projection, roleName = projectionOrderingForRole.Name, select = selects[roleProjection];
                        void 0 === select && (this.fillArray(selects, roleProjection), select = selects[roleProjection] = {});
                        projectionOrderingForRole = select.roles;
                        (projectionOrderingForRole = void 0 === select.roles ? select.roles = {} : projectionOrderingForRole)[roleName] = !0;
                        projectionOrderingForRole = projectionOrdering[roleName];
                        (projectionOrderingForRole = void 0 === projectionOrderingForRole ? projectionOrdering[roleName] = [] : projectionOrderingForRole).push(roleProjection);
                    }
                }, DataViewTransformActionsSerializer.fillArray = function(selects, length) {
                    for (var i = selects.length; i < length; i++) selects[i] = {};
                }, DataViewTransformActionsSerializer.populateSplit = function(roles) {
                    var selects = {}, split = {
                        selects: selects
                    };
                    if (roles) for (var i = 0, len = roles.length; i < len; i++) selects[roles[i].Projection] = !0;
                    return split;
                }, DataViewTransformActionsSerializer.upgradeSettingsToObjects = function(settings, objectDefns) {
                    if (settings) {
                        for (var propertyKey in objectDefns = objectDefns || {}, settings) {
                            var propertyValue = settings[propertyKey], upgradedPropertyKey = propertyKey, upgradedPropertyValue = propertyValue, objectName = "general";
                            switch (propertyKey) {
                              case "hasScalarCategoryAxis":
                                objectName = "categoryAxis", upgradedPropertyKey = "axisType", upgradedPropertyValue = data.SQExprBuilder.text(propertyValue ? "Scalar" : "Categorical");
                                break;

                              case "Totals":
                                upgradedPropertyKey = "totals", upgradedPropertyValue = data.SQExprBuilder.boolean(!!propertyValue);
                                break;

                              case "textboxSettings":
                                upgradedPropertyKey = "paragraphs", propertyValue && propertyValue.paragraphs && (upgradedPropertyValue = propertyValue.paragraphs);
                                break;

                              case "VisualType1":
                                upgradedPropertyKey = "visualType1", upgradedPropertyValue = data.SQExprBuilder.text(propertyValue);
                                break;

                              case "VisualType2":
                                upgradedPropertyKey = "visualType2", upgradedPropertyValue = data.SQExprBuilder.text(propertyValue);
                                break;

                              case "imageVisualSettings":
                                upgradedPropertyKey = "imageUrl", propertyValue && propertyValue.imageUrl && (upgradedPropertyValue = data.SQExprBuilder.text(propertyValue.imageUrl));
                                break;

                              default:
                                continue;
                            }
                            this.setObjectDefinition(objectDefns, objectName, upgradedPropertyKey, upgradedPropertyValue);
                        }
                        return objectDefns;
                    }
                }, DataViewTransformActionsSerializer.setObjectDefinition = function(objects, object, propertyName, value) {
                    var objectContainer = objects[object], object = (objectContainer = void 0 === objectContainer ? objects[object] = [] : objectContainer)[0];
                    (object = void 0 === object ? objectContainer[0] = {
                        properties: {}
                    } : object).properties[propertyName] = value;
                }, DataViewTransformActionsSerializer;
            }();
            services.DataViewTransformActionsSerializer = DataViewTransformActionsSerializer;
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            var directStringResourceProvider = {
                get: function(value) {
                    return value;
                },
                getOptional: function(value) {
                    return value;
                },
                format: function(id) {
                    return id;
                }
            };
            !function(DataViewObjectDescriptorSerializer) {
                function serializePropertyDescriptor(propertyDescriptor, resourceProvider) {
                    var result = {
                        type: function(result, resourceProvider) {
                            var valueType = powerbi.ValueType.fromDescriptor(result);
                            result = valueType && valueType.enum ? {
                                enumeration: serializeEnumType(valueType.enum, resourceProvider)
                            } : null != valueType && valueType.flagsEnum ? {
                                flagsEnumeration: serializeEnumType(valueType.flagsEnum, resourceProvider)
                            } : result;
                            return result;
                        }(propertyDescriptor.type, resourceProvider)
                    };
                    return propertyDescriptor.rule && (result.rule = propertyDescriptor.rule), propertyDescriptor.displayName && (result.displayName = data.getDisplayName(propertyDescriptor.displayName, resourceProvider)), 
                    propertyDescriptor.description && (result.description = data.getDisplayName(propertyDescriptor.description, resourceProvider)), 
                    propertyDescriptor.placeHolderText && (result.placeHolderText = data.getDisplayName(propertyDescriptor.placeHolderText, resourceProvider)), 
                    result;
                }
                function deserializePropertyDescriptor(value) {
                    var result = {
                        type: function(result) {
                            result = powerbi.ValueType.fromDescriptor(result) ? function(value) {
                                var result;
                                if (value.enumeration) {
                                    var enumType = deserializeEnumType(value.enumeration);
                                    result = {
                                        enumeration: enumType
                                    };
                                } else if (value.flagsEnumeration) result = {
                                    flagsEnumeration: deserializeEnumType(value.flagsEnumeration)
                                }; else for (var key in result = {}, value) result[key] = value[key];
                                return result;
                            }(result) : result;
                            return result;
                        }(value.type)
                    };
                    return value.displayName && (result.displayName = data.createDisplayNameGetter(value.displayName)), 
                    value.description && (result.description = data.createDisplayNameGetter(value.description)), 
                    value.placeHolderText && (result.placeHolderText = data.createDisplayNameGetter(value.placeHolderText)), 
                    value.rule && (result.rule = value.rule), result;
                }
                function serializeEnumType(enumType, resourceProvider) {
                    return _.map(enumType.members(), function(member) {
                        return function(member, resourceProvider) {
                            return {
                                displayName: data.getDisplayName(member.displayName, resourceProvider),
                                value: member.value
                            };
                        }(member, resourceProvider);
                    });
                }
                function deserializeEnumType(value) {
                    return powerbi.createEnumType(value);
                }
                DataViewObjectDescriptorSerializer.serialize = function(objectDescriptors, resourceProvider) {
                    var key, result = {};
                    for (key in objectDescriptors) result[key] = function(objectDescriptor, resourceProvider) {
                        if (objectDescriptor) {
                            var key, result = {
                                properties: {}
                            };
                            for (key in objectDescriptor.displayName && (result.displayName = data.getDisplayName(objectDescriptor.displayName, resourceProvider)), 
                            objectDescriptor.description && (result.description = data.getDisplayName(objectDescriptor.description, resourceProvider)), 
                            objectDescriptor.properties) result.properties[key] = serializePropertyDescriptor(objectDescriptor.properties[key], resourceProvider);
                            return result;
                        }
                    }(objectDescriptors[key], resourceProvider || directStringResourceProvider);
                    return result;
                }, DataViewObjectDescriptorSerializer.deserialize = function(wireObjectDescriptors) {
                    var key, result = {};
                    for (key in wireObjectDescriptors) result[key] = function(value) {
                        var key, result = {
                            properties: {}
                        };
                        value.displayName && (result.displayName = data.createDisplayNameGetter(value.displayName));
                        value.description && (result.description = data.createDisplayNameGetter(value.description));
                        for (key in value.properties) result.properties[key] = deserializePropertyDescriptor(value.properties[key]);
                        return result;
                    }(wireObjectDescriptors[key]);
                    return result;
                }, DataViewObjectDescriptorSerializer.serializePropertyDescriptor = serializePropertyDescriptor, 
                DataViewObjectDescriptorSerializer.deserializePropertyDescriptor = deserializePropertyDescriptor;
            }(services.DataViewObjectDescriptorSerializer || (services.DataViewObjectDescriptorSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(DataViewTransformActionsUpgrade) {
                !function(V1) {
                    V1.upgradeDataViewSelectTransform = function(contract) {
                        if (contract) for (var _i = 0, contract_1 = contract; _i < contract_1.length; _i++) {
                            var selectTransform = contract_1[_i];
                            selectTransform.kpiStatusGraphic && (selectTransform.kpi = {
                                graphic: selectTransform.kpiStatusGraphic
                            });
                        }
                    };
                }(DataViewTransformActionsUpgrade.V1 || (DataViewTransformActionsUpgrade.V1 = {}));
            }(services.DataViewTransformActionsUpgrade || (services.DataViewTransformActionsUpgrade = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        (data.tabular || (data.tabular = {})).type = "tabular";
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(data_15) {
    (function(tabular) {
        function getColumnsMetadata(row) {
            var key, propertyValue, columnType, columns = [];
            for (key in row = flattenJSON(row)) row.hasOwnProperty(key) && (columnType = void 0, 
            (propertyValue = row[key]) && (_.isDate(propertyValue) || null != parseDate(propertyValue.toString().substr(0, 26)) ? columnType = {
                dateTime: !0
            } : isNaN(+propertyValue) ? _.isString(propertyValue) && (columnType = {
                text: !0
            }) : columnType = {
                numeric: !0
            }, columnType && columns.push({
                name: key,
                type: columnType
            })));
            return columns;
        }
        function parseDate(pastTime) {
            var futureTime, date = null, numValue = +pastTime;
            return isNaN(numValue) ? date = jsCommon.DateExtensions.parseIsoDate(pastTime.toString()) : ((futureTime = new Date()).setDate(futureTime.getDate() - DateConversionRangeInDays), 
            pastTime = futureTime.getTime(), (futureTime = new Date()).setDate(futureTime.getDate() + DateConversionRangeInDays), 
            futureTime = futureTime.getTime(), numValue < pastTime && (numValue *= 1e3), pastTime < numValue && numValue < futureTime && (date = new Date(numValue))), 
            date;
        }
        function flattenJSON(object) {
            try {
                return function flattenJSONInternal(currentObject, result, columnPrefix) {
                    result = result || {};
                    _.isObject(currentObject) ? _.forOwn(currentObject, function(value, key) {
                        flattenJSONInternal(value, result, columnPrefix ? columnPrefix + "." + key : key);
                    }) : result[columnPrefix] = currentObject;
                    return result;
                }(object);
            } catch (e) {}
            return object;
        }
        tabular.createTabularDataCache = function() {
            return new TabularDataCache();
        }, tabular.getColumnsMetadata = getColumnsMetadata, tabular.parseDate = parseDate, 
        tabular.flattenJSON = flattenJSON, tabular.MaxRealTimeDataWindowInMs = 36e5;
        var DateConversionRangeInDays = 7, TabularDataCache = function() {
            function TabularDataCache() {
                this.clear();
            }
            return TabularDataCache.prototype.add = function(data) {
                var key = this.getKey(data.modelId, data.name);
                return this.tabularDataMap[key] = data, key;
            }, TabularDataCache.prototype.get = function(key) {
                return this.tabularDataMap[key];
            }, TabularDataCache.prototype.remove = function(key) {
                delete this.tabularDataMap[key];
            }, TabularDataCache.prototype.clear = function() {
                this.tabularDataMap = {};
            }, TabularDataCache.prototype.getKey = function(modelId, tableName) {
                return modelId + "_" + tableName;
            }, TabularDataCache.prototype.mergeRows = function(modelId, data_16, rowGroups, latestVersion) {
                var existingData = this.getKey(modelId, data_16), existingData = this.get(existingData);
                if (!existingData || !existingData.rowGroups) {
                    data_16 = {
                        modelId: modelId,
                        name: data_16,
                        rowGroups: rowGroups,
                        lastVersion: latestVersion,
                        columns: existingData && existingData.columns
                    };
                    return this.constructColumnsMetadataIfNeeded(data_16), this.fixUpValues(data_16.rowGroups, data_16.columns), 
                    void this.add(data_16);
                }
                var result = [], existingDataRowGroups = existingData.rowGroups || [], newDataRowGroups = rowGroups || [];
                for (this.fixUpValues(newDataRowGroups, existingData.columns); ;) {
                    if (_.isEmpty(existingDataRowGroups) && _.isEmpty(newDataRowGroups)) break;
                    var existingRow = _.head(existingDataRowGroups), newRow = _.head(newDataRowGroups);
                    existingRow && !newRow ? (this.appendRow(result, existingRow, latestVersion), existingDataRowGroups.shift()) : !existingRow && newRow ? (this.appendRow(result, newRow, latestVersion), 
                    newDataRowGroups.shift()) : existingRow.version < newRow.version ? (this.appendRow(result, existingRow, latestVersion), 
                    existingDataRowGroups.shift()) : newRow && (newDataRowGroups.shift(), existingRow.version === newRow.version && existingDataRowGroups.shift(), 
                    this.appendRow(result, newRow, latestVersion));
                }
                existingData.rowGroups = result, existingData.lastVersion = latestVersion;
            }, TabularDataCache.prototype.constructColumnsMetadataIfNeeded = function(tabularData) {
                var lastRow;
                tabularData.columns || (!(lastRow = _.last(tabularData.rowGroups)) || (lastRow = _.last(lastRow.rows)) && (tabularData.columns = getColumnsMetadata(lastRow)));
            }, TabularDataCache.prototype.fixUpValues = function(rowGroups, columns) {
                if (!_.isEmpty(rowGroups)) {
                    for (var isDateTime = {}, isNumeric = {}, _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
                        var c = columns_2[_i];
                        isDateTime[c.name] = c.type && c.type.dateTime, isNumeric[c.name] = c.type && c.type.numeric;
                    }
                    for (var _a = 0, rowGroups_1 = rowGroups; _a < rowGroups_1.length; _a++) {
                        var rowGroup = rowGroups_1[_a];
                        if (rowGroup.rows) for (var i = 0; i < rowGroup.rows.length; i++) {
                            var columnName, dateObj, num, row = rowGroup.rows[i] = flattenJSON(rowGroup.rows[i]);
                            for (columnName in row) row.hasOwnProperty(columnName) && ((num = row[columnName]) && (isDateTime[columnName] ? (dateObj = parseDate(num)) && (row[columnName] = dateObj) : isNumeric[columnName] && (num = parseFloat(num.toString()), 
                            isNaN(num) || (row[columnName] = num))));
                        }
                    }
                }
            }, TabularDataCache.prototype.appendRow = function(rows, row, latestVersion) {
                latestVersion - row.version > tabular.MaxRealTimeDataWindowInMs || rows.push(row);
            }, TabularDataCache;
        }();
    })((data_15 = data_15.data || (data_15.data = {})).tabular || (data_15.tabular = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(tabular) {
            tabular.createQueryGenerator = function() {
                return new TabularDataQueryGenerator(data.services.SemanticQuerySerializer);
            };
            var TabularDataQueryGenerator = function() {
                function TabularDataQueryGenerator(serializer) {
                    this.serializer = serializer;
                }
                return TabularDataQueryGenerator.prototype.execute = function(options) {
                    var entity = options.query, queryCommand = {
                        SemanticQueryDataShapeCommand: {
                            Query: this.serializer.serializeQuery(entity),
                            Binding: null
                        }
                    }, entity = data.SQExprUtils.getActiveTablesNames(entity);
                    entity.length;
                    entity = entity[0];
                    return {
                        command: {
                            dataWindow: options.dataWindow,
                            tableName: entity,
                            mappings: options.mappings,
                            Commands: [ queryCommand ]
                        }
                    };
                }, TabularDataQueryGenerator.prototype.produceIdentities = function(expr, schema) {
                    return [ expr ];
                }, TabularDataQueryGenerator;
            }();
        }(data.tabular || (data.tabular = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(tabular) {
            var createDataViewScopeIdentity = powerbi.data.createDataViewScopeIdentity;
            function normalizedName(fullyQualifiedColumnName) {
                var index = _.indexOf(fullyQualifiedColumnName, ".");
                return index < 0 || index >= fullyQualifiedColumnName.length - 1 ? fullyQualifiedColumnName : fullyQualifiedColumnName.substr(index + 1);
            }
            tabular.normalizedName = normalizedName;
            var TabularDataReader = function() {
                function TabularDataReader(host, tabularData) {
                    this.promiseFactory = host.promiseFactory(), this.tabularDataCache = tabularData, 
                    this.columnToIndexMap = {};
                }
                return TabularDataReader.prototype.execute = function(tabularDataView) {
                    var deferred = _.head(tabularDataView.dataSources), tabularDataView = tabularDataView.command, tabularDataView = this.buildDataView(tabularDataView, deferred.modelId), deferred = this.promiseFactory.defer();
                    return deferred.resolve(tabularDataView), powerbi.createRejectablePromise(deferred);
                }, TabularDataReader.prototype.transform = function(obj, _kinds, _perfId) {
                    return null == obj ? {
                        dataView: {
                            metadata: {
                                columns: []
                            },
                            error: {
                                code: "UndefinedData"
                            }
                        }
                    } : {
                        dataView: obj
                    };
                }, TabularDataReader.prototype.buildDataView = function(command, semanticQueryDataShapeCommand) {
                    var _this = this, dataView = command.mappings[0], filteredRowGroups = this.tabularDataCache, tabularData = filteredRowGroups.get(filteredRowGroups.getKey(semanticQueryDataShapeCommand, command.tableName)), filteredRowGroups = TabularDataReader.getLastVersion(tabularData) - command.dataWindow;
                    if (tabularData.rowGroups) {
                        semanticQueryDataShapeCommand = command && _.head(command.Commands);
                        !semanticQueryDataShapeCommand || (semanticQueryDataShapeCommand = semanticQueryDataShapeCommand.SemanticQueryDataShapeCommand) && semanticQueryDataShapeCommand.Query && semanticQueryDataShapeCommand.Query.Select && semanticQueryDataShapeCommand.Query.Select.map(function(val, index) {
                            _this.columnToIndexMap[normalizedName(val.Name)] = index;
                        });
                        filteredRowGroups = this.filterTabularDataRowGroups(tabularData.rowGroups, filteredRowGroups), 
                        dataView = this.createDataView({
                            rowGroups: filteredRowGroups,
                            columns: tabularData.columns,
                            modelId: tabularData.modelId,
                            name: tabularData.name
                        }, dataView);
                        return command.dataWindow && (dataView.metadata.objects = {
                            categoryAxis: {
                                duration: command.dataWindow
                            }
                        }), dataView;
                    }
                }, TabularDataReader.prototype.filterTabularDataRowGroups = function(rowGroups, cutOff) {
                    return _.filter(rowGroups, function(rowGroup) {
                        return rowGroup.version >= cutOff;
                    });
                }, TabularDataReader.prototype.createDataView = function(singleColMetadata, mapping) {
                    var categoricalInfo, dataView = {
                        metadata: {
                            columns: []
                        }
                    }, dataViewColumns = this.extractColumns(mapping), columns = [];
                    return mapping.categorical && (categoricalInfo = this.getCategoricalDataViewInfo(dataViewColumns.categorical, singleColMetadata), 
                    dataView.categorical = categoricalInfo.dataView, _.isEmpty(dataView.categorical.values) && (dataView.categorical.values = void 0), 
                    columns.push.apply(columns, categoricalInfo.columns || [])), mapping.table && (singleColMetadata = this.getSingleDataViewInfo(dataViewColumns.table, singleColMetadata), 
                    dataView.single = singleColMetadata.dataView, singleColMetadata = singleColMetadata.columns[0], 
                    null == _.find(columns, singleColMetadata) && columns.push(singleColMetadata)), 
                    dataView.metadata.columns = columns, dataView;
                }, TabularDataReader.prototype.getCategoricalDataViewInfo = function(categoricalColumns, tabularData) {
                    var dataView = data.createCategoricalDataViewBuilder();
                    _.isEmpty(categoricalColumns.categories) || (valueColumnOption = this.getCategoryColumnOption(categoricalColumns.categories, tabularData), 
                    dataView.withCategory(valueColumnOption));
                    var valueColumnOption = this.getValueColumnOptions(categoricalColumns.categories, categoricalColumns.values, tabularData);
                    _.isEmpty(categoricalColumns.groupedValues) || categoricalColumns.groupedValues === categoricalColumns.categories ? dataView.withValues({
                        columns: valueColumnOption
                    }) : this.addGroupValues(categoricalColumns, tabularData, dataView, valueColumnOption);
                    dataView = dataView.build();
                    return {
                        dataView: dataView.categorical,
                        columns: dataView.metadata.columns
                    };
                }, TabularDataReader.prototype.addGroupValues = function(groupedData, tabularData, dataViewBuilder, valueColumnOption) {
                    groupedData.groupedValues;
                    for (var groupValues = normalizedName(groupedData.groupedValues), groupColumnCategoryOption = this.getCategoryColumnOption(groupValues, tabularData), groupValues = this.extractColumnValues(groupValues, tabularData), uniqColValues = TabularDataReader.getUniqueValues(groupValues), valIndexMap = this.getValueToIndicesMap(groupValues), dataMap = {}, _i = 0, valueColumnNames_1 = groupedData.values; _i < valueColumnNames_1.length; _i++) for (var normalizedColumnName = normalizedName(valueColumnNames_1[_i]), columnDataValues = this.extractColumnValues(normalizedColumnName, tabularData), _a = 0, uniqColValues_1 = uniqColValues; _a < uniqColValues_1.length; _a++) {
                        var dataForValue = uniqColValues_1[_a], stringValue = TabularDataReader.valueToString(dataForValue);
                        null == dataMap[stringValue] && (dataMap[stringValue] = []);
                        dataForValue = valIndexMap[stringValue], dataForValue = _.at(columnDataValues, dataForValue);
                        dataMap[stringValue].push({
                            values: dataForValue
                        });
                    }
                    groupedData = _.values(dataMap);
                    _.isEmpty(groupedData) || dataViewBuilder.withGroupedValues({
                        groupColumn: groupColumnCategoryOption,
                        valueColumns: valueColumnOption,
                        data: groupedData
                    });
                }, TabularDataReader.prototype.getValueToIndicesMap = function(values) {
                    for (var valIndexMap = {}, i = 0, len = values.length; i < len; i++) {
                        var val = TabularDataReader.valueToString(values[i]), occurrencePositionsArray = valIndexMap[val];
                        occurrencePositionsArray ? occurrencePositionsArray.push(i) : valIndexMap[val] = [ i ];
                    }
                    return valIndexMap;
                }, TabularDataReader.prototype.getSingleDataViewInfo = function(columnData, lastValueIndex) {
                    columnData = this.getColumnMetadataAndValues(columnData, lastValueIndex), lastValueIndex = columnData.values.length - 1;
                    return {
                        dataView: {
                            value: columnData.values[lastValueIndex],
                            column: columnData.metadataColumn
                        },
                        columns: [ columnData.metadataColumn ]
                    };
                }, TabularDataReader.prototype.extractColumns = function(tableMapping) {
                    function walkRoleItems(items, arrToUpdate) {
                        if (items = items.items) for (var _i = 0, items_8 = items; _i < items_8.length; _i++) {
                            var item = items_8[_i];
                            arrToUpdate.push(item.queryName);
                        }
                    }
                    var categoryColumns_1, valuesColumns_1, groupedValueColumns_1, dataViewColumns = {}, categoricalMapping = tableMapping.categorical;
                    categoricalMapping && (categoryColumns_1 = [], data.CompiledDataViewMapping.visitCategoricalCategories(categoricalMapping.categories, {
                        visitRole: function(role) {
                            walkRoleItems(role, categoryColumns_1);
                        }
                    }), valuesColumns_1 = [], data.CompiledDataViewMapping.visitCategoricalValues(categoricalMapping.values, {
                        visitRole: function(role) {
                            walkRoleItems(role, valuesColumns_1);
                        }
                    }), groupedValueColumns_1 = [], data.CompiledDataViewMapping.visitGrouped(categoricalMapping.values, {
                        visitRole: function(role) {
                            walkRoleItems(role, groupedValueColumns_1);
                        }
                    }), dataViewColumns.categorical = {
                        categories: categoryColumns_1[0],
                        groupedValues: groupedValueColumns_1[0],
                        values: valuesColumns_1
                    });
                    var valuesColumns_2, tableMapping = tableMapping.table;
                    return tableMapping && (valuesColumns_2 = [], data.CompiledDataViewMapping.visitTable(tableMapping, {
                        visitRole: function(role) {
                            walkRoleItems(role, valuesColumns_2);
                        }
                    }), dataViewColumns.table = valuesColumns_2[0]), dataViewColumns;
                }, TabularDataReader.prototype.getCategoryColumnOption = function(identities, tabularData) {
                    var tabularColumnData = this.getColumnMetadataAndValues(identities, tabularData), values = TabularDataReader.getUniqueValues(tabularColumnData.values), expr = data.SQExprBuilder.columnRef(data.SQExprBuilder.entity(null, tabularData.name), identities), identities = _.map(values, function(value) {
                        return createDataViewScopeIdentity(data.SQExprBuilder.equal(expr, data.SQExprBuilder.text(value.toString())));
                    });
                    return {
                        source: tabularColumnData.metadataColumn,
                        values: values,
                        identityFrom: {
                            fields: [ expr ],
                            identities: identities
                        }
                    };
                }, TabularDataReader.prototype.getValueColumnOptions = function(categoryColumnName, columnNames, tabularData) {
                    for (var valueColumns = [], _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {
                        var column = columnNames_1[_i], tabularColumnData = this.getColumnMetadataAndValues(column, tabularData, categoryColumnName), column = tabularColumnData.values;
                        categoryColumnName || _.isEmpty(column) || (column = [ _.last(column) ]);
                        column = {
                            source: tabularColumnData.metadataColumn,
                            values: column,
                            minLocal: _.min(column),
                            maxLocal: _.max(column)
                        };
                        valueColumns.push(column);
                    }
                    return valueColumns;
                }, TabularDataReader.prototype.getColumnMetadataAndValues = function(columnIndex, tabularColumnValues, normalizedCategoryName) {
                    var column = tabularColumnValues.columns, normalizedColumnName = normalizedName(columnIndex), columnIndex = this.columnToIndexMap[normalizedColumnName];
                    tabularColumnValues = normalizedCategoryName ? (normalizedCategoryName = normalizedName(normalizedCategoryName), 
                    this.extractUniqueColumnValues(normalizedColumnName, tabularColumnValues, normalizedCategoryName)) : this.extractColumnValues(normalizedColumnName, tabularColumnValues);
                    column = _.find(column, function(c) {
                        return c.name === normalizedColumnName;
                    });
                    return {
                        metadataColumn: TabularDataReader.createMetadataColumn(normalizedColumnName, columnIndex, powerbi.ValueType.fromDescriptor(column.type)),
                        values: tabularColumnValues
                    };
                }, TabularDataReader.prototype.extractColumnValues = function(columnName, tabularData) {
                    for (var columnValues = [], _i = 0, tabularDataGroups_1 = tabularData.rowGroups; _i < tabularDataGroups_1.length; _i++) for (var _a = 0, _b = tabularDataGroups_1[_i].rows; _a < _b.length; _a++) {
                        var row = _b[_a];
                        columnValues.push(row[columnName]);
                    }
                    return columnValues;
                }, TabularDataReader.prototype.extractUniqueColumnValues = function(columnName, tabularData, categoryName) {
                    for (var categoryToMap = {}, _i = 0, tabularDataGroups_2 = tabularData.rowGroups; _i < tabularDataGroups_2.length; _i++) for (var _a = 0, _b = tabularDataGroups_2[_i].rows; _a < _b.length; _a++) {
                        var row = _b[_a], categoryValue = row[categoryName];
                        categoryToMap[TabularDataReader.valueToString(categoryValue)] = row[columnName];
                    }
                    return _.values(categoryToMap);
                }, TabularDataReader.getLastVersion = function(tabularData) {
                    if (_.isEmpty(tabularData.rowGroups)) return tabularData.lastVersion || Number.NEGATIVE_INFINITY;
                    var lastVersion = Number.NEGATIVE_INFINITY;
                    if (!tabularData.rowGroups) return lastVersion;
                    for (var _i = 0, _a = tabularData.rowGroups; _i < _a.length; _i++) {
                        var rowGroup = _a[_i];
                        rowGroup.version > lastVersion && (lastVersion = rowGroup.version);
                    }
                    return lastVersion;
                }, TabularDataReader.createMetadataColumn = function(name, metadataColumn, valueTypeDescriptor) {
                    metadataColumn = {
                        displayName: name,
                        queryName: name,
                        index: metadataColumn,
                        isMeasure: !1
                    };
                    return null != valueTypeDescriptor && (metadataColumn.type = valueTypeDescriptor, 
                    metadataColumn.isMeasure = !!valueTypeDescriptor.numeric), metadataColumn;
                }, TabularDataReader.getUniqueValues = function(values) {
                    return _.uniqBy(values, function(val) {
                        return TabularDataReader.valueToString(val);
                    });
                }, TabularDataReader.valueToString = function(value) {
                    return _.isDate(value) ? value.getTime().toString() : value ? value.toString() : "";
                }, TabularDataReader;
            }();
            tabular.TabularDataReader = TabularDataReader;
        }(data.tabular || (data.tabular = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(alignment) {
        alignment.right = "right", alignment.left = "left", alignment.center = "center";
    }(powerbi.alignment || (powerbi.alignment = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        data.DataSourcesUndefined = "DataSourcesUndefined", data.SchemaReaderUndefined = "SchemaReaderUndefined";
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            dsr.transformDataQueryToSemanticQueryDataShapeCommand = function(dataQuery) {
                return dataQuery.Commands, dataQuery.Commands[0].SemanticQueryDataShapeCommand, 
                dataQuery.Commands.length, 1 === dataQuery.Commands.length || 2 === dataQuery.Commands.length && (dataQuery.Commands[1].ScriptVisualCommand || dataQuery.Commands[1].ExportDataCommand), 
                dataQuery.Commands[0].SemanticQueryDataShapeCommand;
            }, dsr.generateSemanticQueryRequest = function(batch, executeSemanticQueryRequest, impersonationState) {
                var queryDataRequests = _.map(batch.queryOptions, function(queryOptions) {
                    var request = queryOptions.command, request = {
                        Query: request,
                        CacheKey: queryOptions.cacheResponseOnServer ? JSON.stringify(request) : void 0,
                        CacheOptions: batch.cacheOptions,
                        QueryId: queryOptions.queryId
                    };
                    return queryOptions.applicationContext && (request.ApplicationContext = queryOptions.applicationContext), 
                    1 === queryOptions.requestPriority && (request.RequestPriority = 1), request;
                }), cancelQueries = _.map(batch.cancelQueryOptions, function(options) {
                    return {
                        QueryId: options.queryId
                    };
                }), dataSource = dsr.single(batch.dataSources), executeSemanticQueryRequest = {
                    version: dsr.executeSemanticQueryRequestVersion1,
                    queries: queryDataRequests,
                    cancelQueries: cancelQueries,
                    modelId: dataSource.modelId,
                    userPreferredLocale: executeSemanticQueryRequest.getUserPreferredLocale()
                };
                return impersonationState && impersonationState.impersonating && ((impersonationState = impersonationState.getImpersonationState()).modelId === executeSemanticQueryRequest.modelId && _.extend(executeSemanticQueryRequest, impersonationState)), 
                executeSemanticQueryRequest;
            };
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_17;
    (function(CsvWriter) {
        var doubleQuotes = '"', delimiter = ",", dateFormat = "yyyy-MM-dd HH:mm:ss", singleQuote = "'";
        function escapeStringValue(stringValue) {
            return null == stringValue ? "" : (stringValue = stringValue.replace(/\"/g, '""'), 
            _.includes(stringValue, "\n") || _.includes(stringValue, doubleQuotes) || _.includes(stringValue, delimiter) || _.includes(stringValue, "\r") || 0 === stringValue.length ? doubleQuotes + stringValue + doubleQuotes : stringValue);
        }
        CsvWriter.fromDataView = function(dataView, formatStringProp, rowsLimit) {
            var _a, tableView = dataView.table;
            if (!tableView) return "";
            var columnsMetadata = tableView.columns, s = "";
            s += function(columnsMetadata) {
                for (var columnArray = [], _i = 0, columnsMetadata_1 = columnsMetadata; _i < columnsMetadata_1.length; _i++) {
                    var columnMetadata = columnsMetadata_1[_i];
                    columnArray.push(escapeStringValue(columnMetadata.displayName));
                }
                return columnArray.join(delimiter);
            }(columnsMetadata) + "\r\n", (null == rowsLimit || rowsLimit > tableView.rows.length) && (rowsLimit = tableView.rows.length);
            for (var i = 0; i < rowsLimit; i++) {
                for (var row = tableView.rows[i], data_18 = [], iCol = 0, len = row.length; iCol < len; iCol++) {
                    var format = columnsMetadata[iCol], valueType = format && format.type, format = powerbi.DataViewObjects.getValue(null === (_a = row.objects) || void 0 === _a ? void 0 : _a[iCol], formatStringProp) || format && format.format;
                    data_18.push(function(value, valueType, format) {
                        if (null == value) return "";
                        valueType = valueType || function(value) {
                            return _.isDate(value) ? powerbi.ValueType.fromPrimitiveTypeAndCategory(6) : _.isBoolean(value) ? powerbi.ValueType.fromPrimitiveTypeAndCategory(5) : _.isNumber(value) ? powerbi.ValueType.fromPrimitiveTypeAndCategory(3) : powerbi.ValueType.fromPrimitiveTypeAndCategory(1);
                        }(value);
                        var stringValue = "";
                        stringValue = valueType.dateTime ? powerbi.formattingService.formatValue(value, dateFormat) : valueType.bool || valueType.numeric && !format ? value.toString() : valueType.numeric ? powerbi.formattingService.formatValue(value, function(format) {
                            return format.replace(/(\r\n|\n|\r|,)/g, "");
                        }(format)) : function(stringValue) {
                            "=" !== stringValue.charAt(0) && "-" !== stringValue.charAt(0) && "+" !== stringValue.charAt(0) && "@" !== stringValue.charAt(0) || (stringValue = singleQuote.concat(stringValue));
                            return stringValue;
                        }(value.toString());
                        return escapeStringValue(stringValue);
                    }(row[iCol], valueType, format));
                }
                0 < data_18.length && (s += data_18.join(delimiter) + "\r\n");
            }
            return s;
        };
    })((data_17 = powerbi.data || (powerbi.data = {})).CsvWriter || (data_17.CsvWriter = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var ArrayExtensions = jsCommon.ArrayExtensions, ConceptualSchema = data.ConceptualSchema, StringExtensions = jsCommon.StringExtensions, Utility = jsCommon.Utility;
            !function(ConceptualSchemaFactory) {
                function convertEntity(contract, capabilities, locOptions) {
                    for (var entityCapabilities = contract.Capabilities, entitySource = contract.Source, result = {
                        name: contract.Name,
                        displayName: contract.DisplayName || contract.Name,
                        stableName: contract.StableName,
                        description: contract.Description,
                        visibility: convertVisibility(contract.Hidden, contract.ShowAsVariationsOnly, contract.Private),
                        calculated: contract.Calculated,
                        queryable: contract.Queryable,
                        properties: ArrayExtensions.createWithName(),
                        hierarchies: ArrayExtensions.createWithName(),
                        displayFolders: ArrayExtensions.createWithName(),
                        navigationProperties: ArrayExtensions.createWithName(),
                        errorMessage: contract.ErrorMessage,
                        isDateTable: !0 === contract.IsDateTable,
                        source: {
                            mode: entitySource && entitySource.Mode,
                            refreshedTime: entitySource && entitySource.RefreshedTime,
                            directQuerySourceType: entitySource && entitySource.DirectQuerySourceType,
                            directQuerySourceName: entitySource && entitySource.DirectQuerySourceName
                        },
                        capabilities: {
                            canRefresh: !entityCapabilities || !1 !== entityCapabilities.CanRefresh,
                            canEditSource: capabilities.canEdit && (!entityCapabilities || !1 !== entityCapabilities.CanEditSource),
                            canRename: capabilities.canEdit && (!entityCapabilities || !1 !== entityCapabilities.CanRename),
                            canDelete: capabilities.canEdit && (!entityCapabilities || !1 !== entityCapabilities.CanDelete),
                            canEditStorageMode: capabilities.canEdit && (!entityCapabilities || !1 !== entityCapabilities.CanEditStorageMode),
                            supportsClustering: capabilities.canEdit && (!entityCapabilities || !1 !== entityCapabilities.SupportsClustering),
                            supportsBinByCount: capabilities.canEdit && (!entityCapabilities || !1 !== entityCapabilities.SupportsBinByCount),
                            limitOnNumberOfGroups: entityCapabilities && entityCapabilities.LimitOnNumberOfGroups || null,
                            dataView: entityCapabilities && entityCapabilities.DataView || null
                        }
                    }, _i = 0, _a = contract.Properties; _i < _a.length; _i++) {
                        var property = _a[_i];
                        result.properties.push(convertProperty(property));
                    }
                    result.properties.length, contract.Properties.length;
                    for (var i = 0, len = contract.Properties.length; i < len; ++i) {
                        var resultProperty = result.properties[i], kpi = contract.Properties[i];
                        resultProperty.canDelete = capabilities.canEdit && !1 !== kpi.CanDelete;
                        var resultMeasure = kpi.Column;
                        resultMeasure && (measure = resultProperty.column = resultProperty.column || {}, 
                        resultMeasure.Keys && (measure.keys = getPropertiesFromNames(resultMeasure.Keys, result.properties)), 
                        resultMeasure.OrderBy && (measure.orderBy = getPropertiesFromNames(resultMeasure.OrderBy, result.properties)));
                        var measure = kpi.Measure;
                        measure && ((resultMeasure = resultProperty.measure = resultProperty.measure || {}).canEdit = !1 !== measure.canEdit, 
                        measure.Kpi && (updatePropertyOfKpi((kpi = resultMeasure.kpi = function(contract, kpi, normalizedFiveStateKpiRange) {
                            normalizedFiveStateKpiRange = normalizedFiveStateKpiRange.normalizedFiveStateKpiRange, 
                            kpi = {
                                statusMetadata: {
                                    graphic: contract.StatusGraphic,
                                    normalizedFiveStateKpiRange: normalizedFiveStateKpiRange
                                },
                                status: kpi.withName(contract.Status),
                                goal: kpi.withName(contract.Goal),
                                trend: kpi.withName(contract.Trend)
                            };
                            contract.TrendGraphic && (kpi.trendMetadata = {
                                graphic: contract.TrendGraphic,
                                normalizedFiveStateKpiRange: normalizedFiveStateKpiRange
                            });
                            return kpi;
                        }(measure.Kpi, result.properties, capabilities)).goal, resultProperty, 1, locOptions), 
                        updatePropertyOfKpi(kpi.status, resultProperty, 0, locOptions), updatePropertyOfKpi(kpi.trend, resultProperty, 3, locOptions)), 
                        measure.Template && (resultMeasure.template = {
                            name: measure.Template.DaxTemplateName
                        }), measure.ChangeDetectionMetadata && (resultMeasure.changeDetectionMetadata = {
                            refreshInterval: measure.ChangeDetectionMetadata.RefreshInterval
                        }), null != measure.DistributiveAggregate && (resultMeasure.distributiveAggregate = measure.DistributiveAggregate));
                    }
                    if (contract.Hierarchies) for (var _b = 0, _c = contract.Hierarchies; _b < _c.length; _b++) {
                        var hierarchy = _c[_b];
                        result.hierarchies.push(convertHierarchy(hierarchy, result.properties));
                    }
                    if (contract.DisplayFolders) for (var _d = 0, _e = contract.DisplayFolders; _d < _e.length; _d++) {
                        var folder = _e[_d];
                        result.displayFolders.push(convertDisplayFolder(folder, result.properties, result.hierarchies));
                    }
                    return contract.DefaultLabelColumnRef && (result.defaultLabel = result.properties.withName(contract.DefaultLabelColumnRef)), 
                    contract.DefaultFieldPropertyRefs && (result.defaultFields = _.map(contract.DefaultFieldPropertyRefs, function(defaultFieldRef) {
                        return result.properties.withName(defaultFieldRef);
                    })), result;
                }
                function convertDisplayFolder(contract, properties, hierarchies) {
                    var displayFolder = {
                        name: contract.Name,
                        displayName: contract.DisplayName || contract.Name,
                        description: contract.Description,
                        properties: ArrayExtensions.createWithName(),
                        hierarchies: ArrayExtensions.createWithName(),
                        displayFolders: ArrayExtensions.createWithName()
                    };
                    if (contract.DisplayItems) for (var _i = 0, _a = contract.DisplayItems; _i < _a.length; _i++) {
                        var item = _a[_i];
                        item.PropertyRef && properties ? displayFolder.properties.push(properties.withName(item.PropertyRef)) : item.HierarchyRef && hierarchies ? displayFolder.hierarchies.push(hierarchies.withName(item.HierarchyRef)) : item.DisplayFolder && displayFolder.displayFolders.push(convertDisplayFolder(item.DisplayFolder, properties, hierarchies));
                    }
                    return displayFolder;
                }
                function convertHierarchy(contract, properties) {
                    for (var hierarchy = {
                        name: contract.Name,
                        displayName: contract.DisplayName || contract.Name,
                        stableName: contract.StableName,
                        description: contract.Description,
                        hidden: contract.Hidden,
                        levels: ArrayExtensions.createWithName(),
                        canDelete: !1 !== contract.CanDelete
                    }, _i = 0, _a = contract.Levels; _i < _a.length; _i++) {
                        var level = _a[_i];
                        hierarchy.levels.push(convertHierarchyLevel(level, properties));
                    }
                    return hierarchy;
                }
                function convertHierarchyLevel(contract, properties) {
                    return {
                        name: contract.Name,
                        displayName: contract.DisplayName || contract.Name,
                        stableName: contract.StableName,
                        description: contract.Description,
                        column: properties.withName(contract.Column),
                        canDelete: !1 !== contract.CanDelete
                    };
                }
                function getPropertiesFromNames(names, properties) {
                    for (var selectedProperties = ArrayExtensions.createWithName(), _i = 0, names_1 = names; _i < names_1.length; _i++) {
                        var name_2 = names_1[_i];
                        selectedProperties.push(properties.withName(name_2));
                    }
                    return selectedProperties;
                }
                function updatePropertyOfKpi(property, kpiValue, kpiType, locOptions) {
                    if (property) {
                        var displayName = kpiValue.displayName;
                        switch (kpiType) {
                          case 1:
                            displayName = StringExtensions.format(locOptions.kpiGoalFmt, displayName);
                            break;

                          case 0:
                            displayName = StringExtensions.format(locOptions.kpiStatusFmt, displayName);
                            break;

                          case 3:
                            displayName = StringExtensions.format(locOptions.kpiTrendFmt, displayName);
                        }
                        property.displayName = displayName, property.hidden = !1, property.kpiValue = kpiValue;
                    }
                }
                function convertProperty(contract) {
                    return {
                        displayName: contract.DisplayName || contract.Name,
                        stableName: contract.StableName,
                        description: contract.Description,
                        name: contract.Name,
                        type: powerbi.ValueType.fromPrimitiveTypeAndCategory(contract.DataType, contract.DataCategory),
                        column: contract.Column ? convertColumn(contract.Column) : null,
                        kind: function(contract) {
                            return contract.Measure ? 1 : 0;
                        }(contract),
                        format: contract.FormatString,
                        hidden: contract.Hidden,
                        queryable: contract.Queryable,
                        errorMessage: contract.ErrorMessage
                    };
                }
                function convertColumn(contract) {
                    var result = {
                        defaultAggregate: contract.DefaultAggregate,
                        idOnEntityKey: contract.IdOnEntityKey,
                        calculated: contract.Calculated,
                        variations: ArrayExtensions.createWithName(),
                        aggregateBehavior: contract.AggregateBehavior
                    };
                    return void 0 !== contract.DefaultValue && (result.defaultValue = data.PrimitiveValueEncoding.parseValueToSQExpr(contract.DefaultValue)), 
                    result;
                }
                function convertVisibility(isHidden, showAsVariationsOnly, isPrivate) {
                    var retVal = 0;
                    return isHidden && (retVal |= 1), showAsVariationsOnly && (retVal |= 2), isPrivate && (retVal |= 4), 
                    retVal;
                }
                function convertCapabilities(contract) {
                    return {
                        canEdit: contract && contract.CanEdit || !1,
                        discourageQueryAggregateUsage: contract && contract.DiscourageQueryAggregateUsage || !1,
                        isExtendable: contract && contract.IsExtendable || !1,
                        isQnaEnabled: contract && contract.IsQnaEnabled || !1,
                        normalizedFiveStateKpiRange: contract && contract.NormalizedFiveStateKpiRange || !1,
                        supportsMedian: contract && contract.SupportsMedian || !1,
                        supportsPercentile: contract && contract.SupportsPercentile || !1,
                        supportsScopedEval: contract && contract.SupportsScopedEval || !1,
                        supportsStringMinMax: contract && contract.SupportsStringMinMax || !1,
                        supportsMultiTableTupleFilters: contract && contract.SupportsMultiTableTupleFilters || !1,
                        supportsTimeIntelligenceQuickMeasures: contract && contract.SupportsTimeIntelligenceQuickMeasures || !1,
                        supportsCalculatedColumns: contract && !1 !== contract.SupportsCalculatedColumns || !1,
                        supportsGrouping: contract && !1 !== contract.SupportsGrouping || !1,
                        limitMultiColumnFiltersToQueryGroupColumns: contract && contract.LimitMultiColumnFiltersToQueryGroupColumns || !1,
                        supportsBinnedLineSample: contract && contract.SupportsBinnedLineSample || !1,
                        supportsOverlappingPointsSample: contract && contract.SupportsOverlappingPointsSample || !1,
                        supportsQna: contract && contract.SupportsQna || !1,
                        supportsInstanceFilters: contract && contract.SupportsInstanceFilters || !1,
                        supportsDataSourceVariables: contract && contract.SupportsDataSourceVariables || !1,
                        insights: contract ? convertInsightsCapabilities(contract.Insights) : {},
                        supportsFastRefresh: contract && contract.SupportsFastRefresh || !1,
                        supportsSubqueryRegrouping: contract && contract.SupportsSubqueryRegrouping || !1,
                        supportsTopNPerLevel: contract && contract.SupportsTopNPerLevel || !1,
                        supportsExtensionColumns: contract && contract.SupportsExtensionColumns || !1,
                        canEditChangeDetectionMeasure: contract && contract.CanEditChangeDetectionMeasure || !1,
                        supportsGroupSynchronization: contract && contract.SupportsGroupSynchronization || !1,
                        supportsScopedDataReduction: contract && contract.SupportsScopedDataReduction || !1,
                        transformCapabilities: convertTranformCapabilities(contract && contract.TransformCapabilities),
                        supportChangeDetectionMeasureRefresh: contract && contract.SupportChangeDetectionMeasureRefresh || !1,
                        supportsSparklineData: contract && contract.SupportsSparklineData || !1
                    };
                }
                function convertInsightsCapabilities(contract) {
                    return contract ? {
                        supportsDistributionFactors: contract.SupportsDistributionFactors || !1,
                        supportsExplainChange: contract.SupportsExplainChange || !1,
                        supportsExplore: contract.SupportsExplore || !1,
                        supportsKeyDrivers: contract.SupportsKeyDrivers || !1,
                        supportsRelatedInsights: contract.SupportsRelatedInsights || !1,
                        supportsDecomposition: contract.SupportsDecomposition || !1,
                        supportsExplainAnomalies: contract.SupportsExplainAnomalies || !1,
                        supportsCompatibleFields: contract.SupportsCompatibleFields || !1,
                        supportsQuerySuggestions: contract.SupportsQuerySuggestions || !1,
                        supportsExplainVarianceToTarget: contract.SupportsExplainVarianceToTarget || !1,
                        supportsGenerateSummaries: contract.SupportsGenerateSummaries || !1
                    } : {};
                }
                function convertTranformCapabilities(contract) {
                    return contract ? {
                        supportedTransforms: contract.SupportedTransforms
                    } : {
                        supportedTransforms: []
                    };
                }
                ConceptualSchemaFactory.createLocOptions = function(loc) {
                    return {
                        kpiGoalFmt: loc.get("KpiGoalDisplayName"),
                        kpiStatusFmt: loc.get("KpiStatusDisplayName"),
                        kpiTrendFmt: loc.get("KpiTrendDisplayName")
                    };
                }, ConceptualSchemaFactory.convertSchema = function(contract, name, locOptions, cubeName) {
                    var result = new ConceptualSchema();
                    result.name = name, result.cubeName = cubeName, result.entities = ArrayExtensions.createWithName(), 
                    contract.canEdit && (contract.Capabilities || (contract.Capabilities = {}), contract.Capabilities.CanEdit = contract.canEdit), 
                    result.capabilities = convertCapabilities(contract.Capabilities);
                    for (var _i = 0, _a = contract.Entities; _i < _a.length; _i++) {
                        var entity = _a[_i];
                        result.entities.push(convertEntity(entity, result.capabilities, locOptions));
                    }
                    for (var i = 0, len = contract.Entities.length; i < len; ++i) !function(entity, contract, entities) {
                        var _c;
                        if (contract.NavigationProperties) for (var _i = 0, _d = contract.NavigationProperties; _i < _d.length; _i++) {
                            var navProp = _d[_i];
                            entity.navigationProperties.push(function(prop, entity, navigationProperty) {
                                navigationProperty = {
                                    name: prop.Name,
                                    isActive: prop.Active,
                                    sourceColumn: null,
                                    targetEntity: navigationProperty.withName(prop.TargetEntity),
                                    sourceMultiplicity: prop.SourceMultiplicity,
                                    targetMultiplicity: prop.TargetMultiplicity,
                                    behavior: prop.Behavior || 0,
                                    crossFilterDirection: Utility.valueOrDefault(prop.CrossFilterDirection, 0)
                                };
                                !prop.SourceColumn || (prop = entity.properties.withName(prop.SourceColumn)) && (navigationProperty.sourceColumn = prop.column);
                                return navigationProperty;
                            }(navProp, entity, entities));
                        }
                        if (contract.Properties) for (var i = 0, len = contract.Properties.length; i < len; ++i) {
                            var measure = contract.Properties[i], column = measure.Column;
                            if (column && column.Variations && function(column, contract, entity) {
                                for (var _i = 0, _a = contract.Variations; _i < _a.length; _i++) {
                                    var variationSource = _a[_i];
                                    column.variations.push(function(contract, entity) {
                                        var variation = {
                                            name: contract.Name,
                                            isDefault: contract.Default,
                                            navigationProperty: null,
                                            defaultHierarchy: null,
                                            defaultProperty: null
                                        }, targetEntity = entity;
                                        contract.NavigationProperty && (variation.navigationProperty = entity.navigationProperties.withName(contract.NavigationProperty), 
                                        targetEntity = variation.navigationProperty.targetEntity);
                                        contract.DefaultHierarchy && (variation.defaultHierarchy = targetEntity.hierarchies.withName(contract.DefaultHierarchy));
                                        contract.DefaultProperty && (variation.defaultProperty = targetEntity.properties.withName(contract.DefaultProperty));
                                        return variation;
                                    }(variationSource, entity));
                                }
                            }(entity.properties[i].column, column, entity), column && column.GroupingMetadata && (entity.properties[i].column.groupingMetadata = function(contract, entity) {
                                var result = {
                                    groupedColumns: _.map(contract.GroupedColumns, function(t) {
                                        return t.ColumnRef && !t.LevelRef ? entity.properties.withName(t.ColumnRef) : t.LevelRef && !t.ColumnRef ? entity.hierarchies.withName(t.LevelRef.Hierarchy).levels.withName(t.LevelRef.Level) : void 0;
                                    })
                                };
                                contract.BinningMetadata && (result.binningMetadata = function(contract) {
                                    var result = {};
                                    contract.BinSize && (result.binSize = function(contract) {
                                        return {
                                            value: contract.Value,
                                            unit: contract.Unit
                                        };
                                    }(contract.BinSize));
                                    return result;
                                }(contract.BinningMetadata));
                                return result;
                            }(column.GroupingMetadata, entity)), column && column.ParameterMetadata) {
                                var parameterMetadata = function(contract) {
                                    return {
                                        kind: null != contract.Kind ? contract.Kind : 0,
                                        mappedMParameterNames: contract.MappedMParameterNames,
                                        supportsMultipleValues: contract.SupportsMultipleValues,
                                        supportsSelectAll: contract.SupportsSelectAll
                                    };
                                }(column.ParameterMetadata);
                                if (2 === (entity.properties[i].column.parameterMetadata = parameterMetadata).kind) for (var _e = 0, _f = entity.properties; _e < _f.length; _e++) {
                                    var property = _f[_e];
                                    if (null !== (_c = null == property ? void 0 : property.column) && void 0 !== _c && _c.keys && 1 === property.column.keys.length && null != (null === (_c = null === (_c = property.column.keys[0].column) || void 0 === _c ? void 0 : _c.parameterMetadata) || void 0 === _c ? void 0 : _c.kind) && 2 === property.column.keys[0].column.parameterMetadata.kind) {
                                        property.column.parameterMetadata = parameterMetadata;
                                        break;
                                    }
                                }
                            }
                            measure = measure.Measure;
                            measure && !_.isEmpty(measure.DistributiveBy) && (entity.properties[i].measure.distributiveBy = _.map(measure.DistributiveBy, function(d) {
                                return entities.withName(d);
                            }));
                        }
                    }(result.entities[i], contract.Entities[i], result.entities);
                    return result;
                }, ConceptualSchemaFactory.convertEntity = convertEntity, ConceptualSchemaFactory.convertDisplayFolder = convertDisplayFolder, 
                ConceptualSchemaFactory.convertHierarchy = convertHierarchy, ConceptualSchemaFactory.convertHierarchyLevel = convertHierarchyLevel, 
                ConceptualSchemaFactory.convertProperty = convertProperty, ConceptualSchemaFactory.convertColumn = convertColumn, 
                ConceptualSchemaFactory.convertVisibility = convertVisibility, ConceptualSchemaFactory.convertCapabilities = convertCapabilities, 
                ConceptualSchemaFactory.convertInsightsCapabilities = convertInsightsCapabilities, 
                ConceptualSchemaFactory.convertTranformCapabilities = convertTranformCapabilities;
            }(dsr.ConceptualSchemaFactory || (dsr.ConceptualSchemaFactory = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data_19;
    (function(dsr) {
        var DataGetConceptualSchemaEventName = powerbi.telemetry.DataGetConceptualSchemaEventName, fillTelemetryEvent = powerbi.fillTelemetryEvent, HttpUtils = jsCommon.HttpUtils, MonitorWith = powerbi.MonitorWith;
        !function(wireContracts) {
            wireContracts.InsightsCapabilities = function() {};
        }(dsr.wireContracts || (dsr.wireContracts = {})), dsr.createConceptualSchemaReader = function(promiseFactory, telemetryService, localeProvider, conceptualSchemaProxyCommunication, locOptions, featureSwitches, embedModeService) {
            return new ConceptualSchemaReader(promiseFactory, telemetryService, localeProvider, conceptualSchemaProxyCommunication, locOptions, featureSwitches, embedModeService);
        }, dsr.createConceptualSchemaProxyHttpCommunication = function(httpService, promiseFactory, uri, featureSwitches, preloadConceptualSchemaService) {
            return new ConceptualSchemaProxyCommunication(httpService, promiseFactory, uri, featureSwitches, preloadConceptualSchemaService);
        };
        var ConceptualSchemaProxyCommunication = function() {
            function ConceptualSchemaProxyCommunication(httpService, promiseFactory, uri, featureSwitches, preloadConceptualSchemaService) {
                this.httpService = httpService, this.promiseFactory = promiseFactory, this.uri = uri, 
                this.featureSwitches = featureSwitches, this.preloadConceptualSchemaService = preloadConceptualSchemaService;
            }
            return ConceptualSchemaProxyCommunication.prototype.execute = function(request, postEvent) {
                var conceptualSchemaPromise, preloadConceptualSchemaUrl, preloadConceptualSchemaRequestBody, _this = this, telemetryV2Enabled = this.featureSwitches && this.featureSwitches().telemetryV2, deferred = this.promiseFactory.defer(telemetryV2Enabled);
                return postEvent.event.info.endPoint = this.uri, this.preloadConceptualSchemaService && (conceptualSchemaPromise = this.preloadConceptualSchemaService.getPreloadedConceptualSchema(), 
                preloadConceptualSchemaUrl = this.preloadConceptualSchemaService.getPreloadConceptualSchemaUrl(), 
                preloadConceptualSchemaRequestBody = this.preloadConceptualSchemaService.getPreloadConceptualSchemaRequestBody()), 
                JSON.stringify(request) === preloadConceptualSchemaRequestBody && this.uri === preloadConceptualSchemaUrl && conceptualSchemaPromise ? (conceptualSchemaPromise.then(function(result) {
                    1 !== result.schemas.length || result.schemas[0].modelId !== request.modelIds[0] || result.error ? _this.httpExecute(request, postEvent, deferred) : deferred.resolve({
                        requestId: _this.preloadConceptualSchemaService.getPreloadConceptualSchemaResponseRequestId(),
                        schemas: result.schemas
                    });
                }, function(result) {
                    _this.httpExecute(request, postEvent, deferred);
                }), this.preloadConceptualSchemaService.clear()) : this.httpExecute(request, postEvent, deferred), 
                deferred.promise;
            }, ConceptualSchemaProxyCommunication.prototype.httpExecute = function(request, postEvent, deferred) {
                var _this = this;
                this.httpService.post(this.uri, request, this.httpService.powerbiRequestOptions(postEvent.event, "GetConceptualSchema")).then(function(result) {
                    _this.setTelemetryEventInfo(postEvent.event, result), deferred.resolve({
                        requestId: result.responseRequestId || result.requestId,
                        schemas: result.data.schemas
                    });
                }, function(errorResult) {
                    errorResult = errorResult || {};
                    _this.setTelemetryEventInfo(postEvent.event, errorResult), deferred.reject({
                        requestId: errorResult.responseRequestId || errorResult.requestId,
                        error: errorResult.error,
                        status: errorResult.status,
                        schemas: void 0
                    });
                });
            }, ConceptualSchemaProxyCommunication.prototype.setTelemetryEventInfo = function(event, result) {
                event.info.clientAndServerRequestIdMatch = HttpUtils.clientAndServerRequestIdMatch(result), 
                event.info.responseRequestId = HttpUtils.getResponseRequestId(result), event.info.requestId = result.requestId;
            }, ConceptualSchemaProxyCommunication;
        }(), ConceptualSchemaReader = function() {
            function ConceptualSchemaReader(promiseFactory, telemetryService, localeProvider, conceptualSchemaProxyCommunication, locOptions, featureSwitches, embedModeService) {
                this.promiseFactory = promiseFactory, this.telemetryService = telemetryService, 
                this.localeProvider = localeProvider, this.conceptualSchemaProxyCommunication = conceptualSchemaProxyCommunication, 
                this.locOptions = locOptions, this.featureSwitches = featureSwitches, this.embedModeService = embedModeService;
            }
            return ConceptualSchemaReader.prototype.execute = function(request) {
                var _this = this, datasetIds = request.dataSources, telemetryV2Enabled = this.featureSwitches && this.featureSwitches().telemetryV2;
                if (!datasetIds || 1 < datasetIds.length) return this.promiseFactory.reject({}, telemetryV2Enabled);
                var deferred = this.promiseFactory.defer(telemetryV2Enabled), schemaNames = _.map(datasetIds, function(d) {
                    return d.name;
                }), request = {
                    modelIds: _.map(datasetIds, function(d) {
                        return d.id;
                    }),
                    userPreferredLocale: this.localeProvider.getUserPreferredLocale()
                };
                datasetIds.some(function(d) {
                    return d.perspectiveId;
                }) && (request.perspectiveIds = _.map(datasetIds, function(d) {
                    return d.perspectiveId;
                }));
                datasetIds = JSON.stringify(request.modelIds);
                telemetryV2Enabled && fillTelemetryEvent(DataGetConceptualSchemaEventName, {
                    datasetIds: datasetIds
                });
                var getSchemaEvent = this.telemetryService.startEvent(powerbi.telemetry.DataGetConceptualSchema, {
                    endPoint: "",
                    datasetIds: datasetIds,
                    clientAndServerRequestIdMatch: !0,
                    embedType: this.embedModeService && this.embedModeService.getEmbedTypeDescription()
                });
                return this.conceptualSchemaProxyCommunication.execute(request, getSchemaEvent).then(function(result) {
                    return _this.onSuccess(result, schemaNames, deferred, getSchemaEvent);
                }, function(result) {
                    return _this.onError(result, deferred, getSchemaEvent);
                }), deferred.promise;
            }, ConceptualSchemaReader.prototype.transform = function(obj) {
                if (!obj.data) return {
                    schema: null,
                    error: obj.error
                };
                var schemaResponse = obj.data, schemaResponses = schemaResponse.schemas, schemaNames = obj.schemaNames;
                schemaNames.length, schemaResponses.length;
                for (var schemas = {}, i = 0, len = schemaResponses.length; i < len; i++) {
                    var name_3 = schemaNames[i];
                    schemas[name_3] = dsr.ConceptualSchemaFactory.convertSchema(schemaResponses[i].schema, name_3, this.locOptions, schemaResponses[i].cubeName);
                }
                return {
                    schema: new data_19.FederatedConceptualSchema({
                        schemas: schemas
                    })
                };
            }, ConceptualSchemaReader.prototype.onSuccess = function(response, schemaNames, deferred, event) {
                if (_.isEmpty(response.schemas)) this.onError(response, deferred, event); else {
                    for (var _i = 0, _a = response.schemas; _i < _a.length; _i++) {
                        var error = _a[_i].error;
                        if (error) {
                            deferred.reject({
                                data: null,
                                error: {
                                    requestId: response.requestId,
                                    serviceError: error,
                                    clientError: null,
                                    ignorable: !0
                                }
                            });
                            var telemetryErrorDetails = powerbi.errorDetailsHelper.getTelemetryErrorDetailsFromServiceError(error);
                            return telemetryErrorDetails.asErrorCode = error.parameters && error.parameters.ASErrorCode, 
                            void event.reject(telemetryErrorDetails);
                        }
                    }
                    deferred.resolve({
                        data: response,
                        schemaNames: schemaNames,
                        error: null
                    }), event.resolve();
                }
            }, ConceptualSchemaReader.prototype.onError = function(response, deferred, event) {
                var error = response.error;
                deferred.reject({
                    data: null,
                    error: {
                        requestId: response.requestId,
                        clientError: new powerbi.PowerBIAPIErrorToClientError(response.error)
                    }
                }), event.reject(powerbi.errorDetailsHelper.getTelemetryErrorDetails(error, response.status));
            }, __decorate([ MonitorWith(DataGetConceptualSchemaEventName) ], ConceptualSchemaReader.prototype, "execute", null), 
            ConceptualSchemaReader;
        }();
    })((data_19 = powerbi.data || (powerbi.data = {})).dsr || (data_19.dsr = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(fake) {
            fake.queryGenerator = {
                execute: function(options) {
                    return {
                        command: {
                            query: options.query,
                            mappings: options.mappings
                        }
                    };
                },
                produceIdentities: function(expr, schema) {
                    return [ expr ];
                }
            };
        }(data.fake || (data.fake = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    var data, data_20;
    (function(fake) {
        var SQExpr = data.SQExpr, SQExprUtils = data.SQExprUtils, FakeDataReader = function() {
            function FakeDataReader(host, schemaProvider) {
                this.promiseFactory = host.promiseFactory(), this.schemaProvider = schemaProvider;
            }
            return FakeDataReader.prototype.execute = function(options) {
                var deferred = this.promiseFactory.defer();
                return this.schemaProvider.get().then(function(schema) {
                    var data = options.command;
                    data.schema = schema, deferred.resolve(data);
                }, function() {
                    deferred.reject();
                }), powerbi.createRejectablePromise2(deferred);
            }, FakeDataReader.prototype.transform = function(mappings) {
                var dataView = mappings.schema, query = mappings.query, mappings = mappings.mappings, dataView = function(query, mapping, valueSrc, config) {
                    if (debug.assertValue(query, "query"), mapping) return mapping.categorical ? function(query, mapping, valueSrc, config) {
                        var hasCategories, select = query.select(), builder = data_20.createCategoricalDataViewBuilder();
                        data_20.CompiledDataViewMapping.visitCategoricalCategories(mapping.categories, {
                            visitRole: function(role) {
                                if (!_.isEmpty(role.items)) for (var _i = 0, _a = role.items; _i < _a.length; _i++) {
                                    var values = _a[_i], selectItem = select.withName(values.queryName), selectExpr = selectItem.expr, values = valueSrc.generate(selectExpr, config.rowCount);
                                    builder.withCategory({
                                        source: createMetadataColumn(selectItem, _.indexOf(select, selectItem)),
                                        values: values,
                                        identityFrom: {
                                            fields: [ selectExpr ]
                                        }
                                    }), hasCategories = !0;
                                }
                            }
                        });
                        var columnValues = [];
                        data_20.CompiledDataViewMapping.visitCategoricalValues(mapping.values, {
                            visitRole: function(role) {
                                if (!_.isEmpty(role.items)) for (var _i = 0, _a = role.items; _i < _a.length; _i++) {
                                    var selectItem = _a[_i], selectItem = select.withName(selectItem.queryName);
                                    columnValues.push({
                                        source: createMetadataColumn(selectItem, _.indexOf(select, selectItem)),
                                        values: valueSrc.generate(selectItem.expr, hasCategories ? config.rowCount : 1)
                                    });
                                }
                            }
                        }), _.isEmpty(columnValues) || builder.withValues({
                            columns: columnValues
                        });
                        return builder.build();
                    }(query, mapping.categorical, valueSrc, config) : void 0;
                }(query, _.head(mappings), new FakeSchemaValueSource(dataView), {
                    rowCount: 10
                });
                if (dataView) return {
                    dataView: dataView
                };
            }, FakeDataReader;
        }();
        function createMetadataColumn(select, index) {
            return {
                displayName: "",
                queryName: select.name,
                index: index,
                type: {}
            };
        }
        fake.FakeDataReader = FakeDataReader;
        var FakeSchemaValueSource = function() {
            function FakeSchemaValueSource(schema) {
                this.schema = schema;
            }
            return FakeSchemaValueSource.prototype.generate = function(expr, count) {
                if (SQExpr.isConstant(expr)) {
                    for (var values = [], i = 0; i < count; i++) values.push(expr.value);
                    return values;
                }
                var type = expr.getMetadata(this.schema);
                if (type) {
                    if (type.aggregate) return _.range(10, 11 * count, 10);
                    type = type.type;
                    if (type) {
                        if (type.integer || type.numeric) return _.range(1, 1 + count);
                        if (type.text) {
                            var baseString_1 = SQExprUtils.defaultName(expr, "value ") + " ";
                            return _.range(1, 1 + count).map(function(valueIdx) {
                                return baseString_1 + valueIdx;
                            });
                        }
                    }
                }
                return _.range(1, 1 + count);
            }, FakeSchemaValueSource;
        }();
    })((data_20 = data = powerbi.data || (powerbi.data = {})).fake || (data_20.fake = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var CustomVisualSelectionId = function() {
            function CustomVisualSelectionId(dataMap, measures, nodeIsCollapsed) {
                this.deepestNodeLevelInPath = -1, this.measures = measures || [], this.dataMap = dataMap || null, 
                this.nodeIsCollapsed = null != nodeIsCollapsed ? nodeIsCollapsed : null;
            }
            return CustomVisualSelectionId.prototype.withCategory = function(categoryColumn, index, _addValueDetails) {
                var identity, queryName;
                return void 0 === _addValueDetails && (_addValueDetails = !1), categoryColumn && categoryColumn.source && categoryColumn.identity && categoryColumn.identity[index] && (identity = categoryColumn.identity[index], 
                queryName = categoryColumn.source.queryName || "noQueryName"), this.addItemToDataMap(queryName, identity), 
                this;
            }, CustomVisualSelectionId.prototype.withSeries = function(seriesColumn, valueColumn, _addValueDetails) {
                var identity, queryName;
                return void 0 === _addValueDetails && (_addValueDetails = !1), seriesColumn && seriesColumn.source && valueColumn && (identity = valueColumn.identity, 
                queryName = seriesColumn.source.queryName || "noQueryName"), this.addItemToDataMap(queryName, identity), 
                this;
            }, CustomVisualSelectionId.prototype.withMeasure = function(measureId) {
                return this.measures.push(measureId), this;
            }, CustomVisualSelectionId.prototype.withMatrixNode = function(matrixNode, levels, _addValueDetails) {
                var identity, queryName, isCollapsed, nodeLevel;
                return void 0 === _addValueDetails && (_addValueDetails = !1), matrixNode && matrixNode.identity && levels && levels[matrixNode.level] && levels[matrixNode.level].sources && levels[matrixNode.level].sources[0] && (identity = matrixNode.identity, 
                queryName = levels[matrixNode.level].sources[0].queryName || "noQueryName"), matrixNode && null != matrixNode.isCollapsed && null != matrixNode.level && (isCollapsed = matrixNode.isCollapsed, 
                nodeLevel = matrixNode.level), this.addItemToDataMap(queryName, identity, isCollapsed, nodeLevel), 
                this;
            }, CustomVisualSelectionId.prototype.withTable = function(table, rowIndex, _addValueDetails) {
                var identity, queryName;
                return void 0 === _addValueDetails && (_addValueDetails = !1), table && table.identity && null != rowIndex && (queryName = (identity = table.identity[rowIndex]) ? JSON.stringify(identity) : "noQueryName"), 
                this.addItemToDataMap(queryName, identity), this;
            }, CustomVisualSelectionId.prototype.equals = function(otherSelectionId) {
                return !!(this.compareMeasures(this.measures, otherSelectionId.measures) && this.compareMetadata(this.getSelector(), otherSelectionId.getSelector()) && this.compareMetadata(otherSelectionId.getSelector(), this.getSelector()));
            }, CustomVisualSelectionId.prototype.createSelectionId = function(newSelection) {
                return this.key = JSON.stringify(this.dataMap) + JSON.stringify(this.measures), 
                this;
            }, CustomVisualSelectionId.prototype.getKey = function() {
                return this.key;
            }, CustomVisualSelectionId.prototype.includes = function(otherSelectionId, ignoreHighlight) {
                void 0 === ignoreHighlight && (ignoreHighlight = !1);
                return !(this.dataMap || !this.compareMeasures(this.measures, otherSelectionId.measures)) || !!(this.dataMap && otherSelectionId.dataMap && this.compareMetadata(this.getSelector(), otherSelectionId.getSelector()));
            }, CustomVisualSelectionId.prototype.hasIdentity = function() {
                return !!this.dataMap;
            }, CustomVisualSelectionId.prototype.compareMeasures = function(measures, otherMeasures) {
                if (measures.length !== otherMeasures.length) return !1;
                for (var _i = 0, otherMeasures_1 = otherMeasures; _i < otherMeasures_1.length; _i++) {
                    var measure = otherMeasures_1[_i];
                    if (-1 === measures.indexOf(measure)) return !1;
                }
                return !0;
            }, CustomVisualSelectionId.prototype.compareMetadata = function(selectorOne, selectorTwo) {
                if (!selectorOne.data && selectorTwo.data || selectorOne.data && !selectorTwo.data) return !1;
                if (!selectorOne.data && !selectorTwo.data) return !0;
                for (var _i = 0, _a = selectorOne.data; _i < _a.length; _i++) {
                    var state_4 = function(dataRepition) {
                        if (!selectorTwo.data.some(function(dataI) {
                            return JSON.stringify(dataI) === JSON.stringify(dataRepition);
                        })) return {
                            value: !1
                        };
                    }(_a[_i]);
                    if ("object" == typeof state_4) return state_4.value;
                }
                return !0;
            }, CustomVisualSelectionId.prototype.addItemToDataMap = function(queryName, id, isCollapsed, nodeLevel) {
                if (id) {
                    this.dataMap || (this.dataMap = {});
                    var dataMap = this.dataMap, currentItem = dataMap[queryName];
                    if (null == currentItem) return dataMap[queryName] = [ id ], void (null != isCollapsed && null != nodeLevel && nodeLevel > this.deepestNodeLevelInPath && (this.nodeIsCollapsed = isCollapsed, 
                    this.deepestNodeLevelInPath = nodeLevel));
                    currentItem.push(id);
                }
            }, CustomVisualSelectionId.prototype.getSelector = function() {
                var selector = {
                    data: void 0,
                    metadata: _.head(this.measures)
                };
                if (this.dataMap) for (var key in selector.data = [], this.dataMap) this.dataMap[key].length, 
                selector.data.push(this.dataMap[key][0]);
                return selector;
            }, CustomVisualSelectionId.prototype.getSelectorsByColumn = function() {
                return null;
            }, CustomVisualSelectionId;
        }();
        visuals.CustomVisualSelectionId = CustomVisualSelectionId;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(contracts) {
            contracts.primitiveTypeFromDataType = function(dataType) {
                switch (dataType) {
                  case "Binary":
                    return 11;

                  case "Boolean":
                    return 5;

                  case "Currency":
                    return 2;

                  case "Number":
                    return 3;

                  case "Date":
                    return 6;

                  case "DateTime":
                    return 7;

                  case "Time":
                    return 9;

                  case "WholeNumber":
                    return 4;

                  case "Text":
                    return 1;
                }
            };
        }(data.contracts || (data.contracts = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            function areCommunicationOptions(options) {
                return _.isPlainObject(options);
            }
            dsr.registerDsrPlugin = function(plugins, options) {
                var executeSemanticQueryProxyCommunication = areCommunicationOptions(options.reader.communication) ? dsr.createExecuteSemanticQueryProxyHttpCommunication(options.reader.communication.httpService, options.telemetryService, options.localeProvider, options.promiseFactory, options.reader.communication.uri, options.reader.communication.impersinationStateProvider, options.reader.featureSwitches, options.reader.directToMwcConnectionInfoService, options.queryContextProvider) : options.reader.communication, conceptualSchemaProxyCommunication = areCommunicationOptions(options.schemaReader.communication) ? dsr.createConceptualSchemaProxyHttpCommunication(options.schemaReader.communication.httpService, options.promiseFactory, options.schemaReader.communication.uri, options.reader.featureSwitches, options.schemaReader.preloadConceptualSchemaService) : options.schemaReader.communication;
                plugins.dsr = {
                    name: "dsr",
                    reader: function(h) {
                        return new dsr.DsrDataReader(h, executeSemanticQueryProxyCommunication, options.telemetryService, options.reader.featureSwitches(), options.reader.timeoutService, options.reader.delayedQueryResultResolver, options.reader.preferredMaxConnections, options.queryContextProvider);
                    },
                    queryGenerator: function() {
                        return dsr.createQueryGenerator(options.reader.featureSwitches());
                    },
                    schemaReader: function() {
                        return dsr.createConceptualSchemaReader(options.promiseFactory, options.telemetryService, options.localeProvider, conceptualSchemaProxyCommunication, options.schemaReader.localizationOptions, options.reader.featureSwitches, options.embedModeService);
                    },
                    queryExtensionProvider: dsr.createQueryExtensionProvider()
                };
            };
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            dsr.toDsrV1Calc = function(dataShapeParser) {
                for (var result = new Array(dataShapeParser.calcCount()), i = 0; dataShapeParser.nextCalc(); i++) result[i] = {
                    Id: dataShapeParser.calcId(),
                    Value: dataShapeParser.calcValue()
                };
                return result;
            }, dsr.toDsrV1Limit = function(dataShapeParser) {
                for (var limitParser = dataShapeParser.limits(), limitCount = limitParser.count(), result = new Array(limitCount), i = 0; i < limitCount; i++) limitParser.next(), 
                result[i] = {
                    Id: limitParser.id()
                };
                return result;
            };
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var SemanticQuerySerializer = powerbi.data.services.SemanticQuerySerializer, QueryDefinitionBuilder = function() {
            function QueryDefinitionBuilder() {
                this.from = {}, this.selects = {};
            }
            return QueryDefinitionBuilder.prototype.withFrom = function(name, entity) {
                return this.from[name] = {
                    Name: name,
                    Entity: entity,
                    Type: 0
                }, this;
            }, QueryDefinitionBuilder.prototype.withSelect = function(source, property, aggr) {
                return this.withNamedSelect(source, property, this.buildSelectName(property, source, aggr), aggr);
            }, QueryDefinitionBuilder.prototype.withNamedSelect = function(source, column, select, aggr) {
                select = {
                    Name: select
                }, column = {
                    Expression: {
                        SourceRef: {
                            Source: source
                        }
                    },
                    Property: column
                };
                return void 0 !== aggr ? select.Aggregation = {
                    Expression: {
                        Column: column
                    },
                    Function: aggr
                } : select.Column = column, this.selects[select.Name] = select, this;
            }, QueryDefinitionBuilder.prototype.build = function(version) {
                return {
                    Version: null != version ? version : data.SemanticQueryVersions.Version2,
                    From: _.values(this.from),
                    Select: _.values(this.selects)
                };
            }, QueryDefinitionBuilder.prototype.buildAndDeserialize = function(version) {
                return SemanticQuerySerializer.deserializeQuery(this.build(version));
            }, QueryDefinitionBuilder.prototype.buildSelectName = function(property, entity, aggr) {
                for (var entity = this.from[entity], name = entity.Entity + "." + property, index = 1, originalName = name = void 0 !== aggr ? data.aggregateFunctionName(aggr) + "(" + name + ")" : name; null != this.selects[name]; ) name = originalName + index, 
                index++;
                return name;
            }, QueryDefinitionBuilder;
        }();
        data.QueryDefinitionBuilder = QueryDefinitionBuilder;
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var SQExprRewriter = powerbi.data.SQExprRewriter, StringExtensions = jsCommon.StringExtensions;
            function extensionProvider(_dsrSources) {
                return function(query, queryRewrites, rewritter) {
                    var result = {
                        query: query,
                        extensions: void 0,
                        queryRewrites: queryRewrites
                    }, rewritter = new NativeExpressionRewritter(queryRewrites, rewritter);
                    return result.query = query.rewrite(rewritter), result.extensions = rewritter.extensionSchema, 
                    result.queryRewrites = rewritter.queryRewrites, result;
                };
            }
            dsr.createQueryExtensionProvider = function() {
                return extensionProvider;
            }, dsr.nativeMeasureFlexibleEntityName = "NativeMeasures_778a1d25-9ebf-4f33-a1c3-827ad532874e", 
            dsr.extensionSchemaName = "NativeExpressionExtensions";
            var NativeExpressionRewritter = function(_super) {
                function NativeExpressionRewritter(queryRewrites, extensionSchema) {
                    var _this = _super.call(this) || this;
                    return _this.queryRewrites = queryRewrites, _this.extensionSchema = extensionSchema, 
                    _this.existingEntityNames = {}, _this.existingExtensionFieldNames = {}, _this;
                }
                return __extends(NativeExpressionRewritter, _super), NativeExpressionRewritter.prototype.visitNativeMeasure = function(expr) {
                    this.ensureSchemaInitialized(), this.nativeMeasuresTargetEntity || (this.nativeMeasuresTargetEntity = {
                        Name: StringExtensions.findUniqueName(this.existingEntityNames, dsr.nativeMeasureFlexibleEntityName),
                        NamingBehavior: 1,
                        Measures: []
                    }, this.extensionSchema.Entities.push(this.nativeMeasuresTargetEntity));
                    var measureRef = _.find(this.nativeMeasuresTargetEntity.Measures, function(m) {
                        return m.DataType === expr.dataType && m.Expression === expr.expression;
                    });
                    if (measureRef) return data.SQExprBuilder.measureRef(data.SQExprBuilder.entity(this.extensionSchema.Name, this.nativeMeasuresTargetEntity.Name), measureRef.Name);
                    var uniqueName = StringExtensions.findUniqueName(this.existingExtensionFieldNames, expr.proposedName || "NativeMeasure");
                    this.existingExtensionFieldNames[uniqueName] = !0;
                    measureRef = data.SQExprBuilder.measureRef(data.SQExprBuilder.entity(this.extensionSchema.Name, this.nativeMeasuresTargetEntity.Name), uniqueName);
                    return this.nativeMeasuresTargetEntity.Measures.push({
                        Name: uniqueName,
                        DataType: expr.dataType,
                        Expression: expr.expression
                    }), measureRef;
                }, NativeExpressionRewritter.prototype.visitNativeColumn = function(expr) {
                    this.ensureSchemaInitialized();
                    var entity = expr.source.getTargetEntity(), extensionEntity = _.find(this.extensionSchema.Entities, function(e) {
                        return e.Name === entity.entity;
                    });
                    extensionEntity || (extensionEntity = {
                        Name: entity.entity,
                        Extends: entity.entity,
                        Columns: []
                    }, this.extensionSchema.Entities.push(extensionEntity)), extensionEntity.Columns || (extensionEntity.Columns = []);
                    var columnRef = _.find(extensionEntity.Columns, function(c) {
                        return c.DataType === expr.dataType && c.Expression === expr.expression;
                    });
                    if (columnRef) return data.SQExprBuilder.columnRef(data.SQExprBuilder.entity(this.extensionSchema.Name, extensionEntity.Name), columnRef.Name);
                    var uniqueName = StringExtensions.findUniqueName(this.existingExtensionFieldNames, expr.proposedName || "NativeColumn");
                    this.existingExtensionFieldNames[uniqueName] = !0;
                    columnRef = data.SQExprBuilder.columnRef(data.SQExprBuilder.entity(this.extensionSchema.Name, extensionEntity.Name), uniqueName);
                    return extensionEntity.Columns.push({
                        Name: uniqueName,
                        DataType: expr.dataType,
                        Expression: expr.expression,
                        NamingBehavior: 1
                    }), this.queryRewrites || (this.queryRewrites = []), this.queryRewrites.push({
                        selectExprReplaced: {
                            originalExpr: expr,
                            replacedExpr: columnRef
                        }
                    }), columnRef;
                }, NativeExpressionRewritter.prototype.ensureSchemaInitialized = function() {
                    if (!this.schemaInitialized) {
                        this.extensionSchema ? this.extensionSchema.Version = Math.max(this.extensionSchema.Version, 1) : this.extensionSchema = {
                            Name: dsr.extensionSchemaName,
                            Version: 1,
                            Extends: dsr.DefaultSchemaName
                        }, this.extensionSchema.Entities || (this.extensionSchema.Entities = []), this.existingExtensionFieldNames = {};
                        for (var _i = 0, _a = this.extensionSchema.Entities; _i < _a.length; _i++) {
                            var entity = _a[_i];
                            if (this.existingEntityNames[entity.Name] = !0, entity.Measures) for (var _b = 0, _c = entity.Measures; _b < _c.length; _b++) {
                                var measure = _c[_b];
                                this.existingExtensionFieldNames[measure.Name] = !0;
                            }
                            if (entity.Columns) for (var _d = 0, _e = entity.Columns; _d < _e.length; _d++) {
                                var column = _e[_d];
                                this.existingExtensionFieldNames[column.Name] = !0;
                            }
                        }
                        this.schemaInitialized = !0;
                    }
                }, NativeExpressionRewritter;
            }(SQExprRewriter);
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(QueryRewriterUtils) {
                QueryRewriterUtils.duplicateSelect = function(newSelectSqExpr, newQueryRef, roleName) {
                    var queryRewriteRecords = [], oldQueryRef = newSelectSqExpr.select(), newSelectIndex = null === (newQuery = oldQueryRef.withName(newQueryRef)) || void 0 === newQuery ? void 0 : newQuery.expr, newQuery = newSelectSqExpr.addSelect(newSelectIndex);
                    return (newSelectSqExpr = newQuery.select()).length, oldQueryRef.length, newSelectIndex = newSelectSqExpr.length - 1, 
                    newSelectSqExpr = newSelectSqExpr[newSelectIndex], oldQueryRef.withName(newSelectSqExpr.name), 
                    oldQueryRef = newQueryRef, newQueryRef = newSelectSqExpr.name, queryRewriteRecords.push({
                        selectExprAdded: {
                            selectIndex: newSelectIndex,
                            namedSQExpr: newSelectSqExpr
                        }
                    }), void 0 !== roleName && queryRewriteRecords.push({
                        projectionQueryRefChanged: {
                            role: roleName,
                            oldQueryRef: oldQueryRef,
                            newInternalQueryRef: newQueryRef
                        }
                    }), {
                        rewriteRecords: queryRewriteRecords,
                        newQuery: newQuery,
                        newQueryName: newQueryRef
                    };
                };
            }(dsr.QueryRewriterUtils || (dsr.QueryRewriterUtils = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var RestartValuesBuilder = function() {
                function RestartValuesBuilder(restartIdentitiesCalcIds) {
                    this.restartValuesCount = restartIdentitiesCalcIds.length, this.calcIdToRestartIdentityIndex = {};
                    for (var i = 0; i < this.restartValuesCount; i++) this.calcIdToRestartIdentityIndex[restartIdentitiesCalcIds[i]] = i;
                }
                return RestartValuesBuilder.prototype.getRestartValues = function(instanceParser) {
                    var restartValues = new Array(this.restartValuesCount);
                    for (instanceParser.restartCalcs(); instanceParser.nextCalc(); ) {
                        var restartIdentityIndex = this.calcIdToRestartIdentityIndex[instanceParser.calcId()];
                        void 0 !== restartIdentityIndex && (restartValues[restartIdentityIndex] = instanceParser.calcValueAsExpr());
                    }
                    return _.every(restartValues, function(value) {
                        return !!value;
                    }), restartValues;
                }, RestartValuesBuilder;
            }();
            dsr.RestartValuesBuilder = RestartValuesBuilder;
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            var ScopedMeasure = function() {
                function ScopedMeasure() {}
                return ScopedMeasure.prototype.conflictsWith = function(scopeDelta) {
                    if (this.getQueryName() !== scopeDelta.getQueryName()) return !1;
                    scopeDelta = _.xor(this.getScopeRefs(), scopeDelta.getScopeRefs());
                    return !_.isEmpty(scopeDelta);
                }, ScopedMeasure;
            }(), AdditionalProjectionMeasure = function(_super) {
                function AdditionalProjectionMeasure(additionalProjection, querySelects, queryRefsByRole) {
                    var _a, _this = _super.call(this) || this, dataRepetition = (_this.additionalProjection = additionalProjection).aggregates && _.isEmpty(null === (_a = additionalProjection.selector) || void 0 === _a ? void 0 : _a.data) ? [ data.DataViewWildcard.create() ] : null === (dataRepetition = additionalProjection.selector) || void 0 === dataRepetition ? void 0 : dataRepetition.data;
                    return _this.scopeRefs = data.DataBoundObjectQueryExtender.getScopeRefs(dataRepetition, querySelects, queryRefsByRole), 
                    _this;
                }
                return __extends(AdditionalProjectionMeasure, _super), AdditionalProjectionMeasure.prototype.getQueryName = function() {
                    return this.additionalProjection.queryName;
                }, AdditionalProjectionMeasure.prototype.getScopeRefs = function() {
                    return this.scopeRefs;
                }, AdditionalProjectionMeasure.prototype.updateQueryName = function(newQueryName) {
                    this.additionalProjection.queryName = newQueryName;
                }, AdditionalProjectionMeasure.prototype.getRoleName = function() {}, AdditionalProjectionMeasure;
            }(ScopedMeasure), RoleMeasure = function(_super) {
                function RoleMeasure(roleItem, roleName, scopeRefs) {
                    var _this = _super.call(this) || this;
                    return _this.roleItem = roleItem, _this.roleName = roleName, _this.scopeRefs = scopeRefs, 
                    _this;
                }
                return __extends(RoleMeasure, _super), RoleMeasure.prototype.getQueryName = function() {
                    return this.roleItem.queryName;
                }, RoleMeasure.prototype.getScopeRefs = function() {
                    return this.scopeRefs;
                }, RoleMeasure.prototype.getRoleName = function() {
                    return this.roleName;
                }, RoleMeasure.prototype.updateQueryName = function(newQueryName) {
                    this.roleItem.queryName = newQueryName;
                }, RoleMeasure;
            }(ScopedMeasure);
            !function(ScopedValuesQueryRewriter) {
                ScopedValuesQueryRewriter.run = function(rewrittenQuery, rewriteAdditionalProjections) {
                    void 0 === rewriteAdditionalProjections && (rewriteAdditionalProjections = !1);
                    var scopedMeasures = [], mappingsAnalysis = function(mappings) {
                        if (!(1 < mappings.length) && mappings[0].matrix) {
                            var matrixMapping = mappings[0].matrix, rowsVisitor = new GroupingRoleVisitor("MatrixRowsGroup");
                            data.CompiledDataViewMapping.visitMatrixRows(matrixMapping.rows, rowsVisitor);
                            var columnsVisitor = new GroupingRoleVisitor("MatrixColumnsGroup");
                            data.CompiledDataViewMapping.visitMatrixColumns(matrixMapping.columns, columnsVisitor);
                            var scopedValuesVisitor = __spreadArray(__spreadArray([], rowsVisitor.scopeRefs), columnsVisitor.scopeRefs), intersectionsVisitor = new MeasuresRoleVisitor(scopedValuesVisitor, "MatrixIntersection");
                            data.CompiledDataViewMapping.visitMatrixValues(matrixMapping.values, intersectionsVisitor);
                            scopedValuesVisitor = new MeasuresRoleVisitor(rowsVisitor.scopeRefs, "MatrixRowsScopedValue");
                            return data.CompiledDataViewMapping.visitMatrixRows(matrixMapping.rows, scopedValuesVisitor), 
                            {
                                groupingRefsByRole: __assign(__assign({}, rowsVisitor.queryRefsByRole), columnsVisitor.queryRefsByRole),
                                roleItemsInfo: __spreadArray(__spreadArray([], intersectionsVisitor.rolesMeasures), scopedValuesVisitor.rolesMeasures)
                            };
                        }
                        mappings.length <= 1 || null == mappings[0].matrix && mappings[1].matrix;
                    }(rewrittenQuery.mappings);
                    if (!mappingsAnalysis) return rewrittenQuery;
                    if (scopedMeasures.push.apply(scopedMeasures, mappingsAnalysis.roleItemsInfo), rewriteAdditionalProjections && !_.isEmpty(rewrittenQuery.additionalProjections)) for (var selects = rewrittenQuery.query.select(), _i = 0, _a = rewrittenQuery.additionalProjections; _i < _a.length; _i++) {
                        var additionalProjection = _a[_i];
                        scopedMeasures.push(new AdditionalProjectionMeasure(additionalProjection, selects, mappingsAnalysis.groupingRefsByRole));
                    }
                    return _.isEmpty(scopedMeasures) ? rewrittenQuery : rewrittenQuery = function(projectedMeasures, rewrittenQuery) {
                        for (var i = 0; i < projectedMeasures.length; i++) for (var currentProjection = projectedMeasures[i], j = 0; j < i; j++) {
                            var previousProjection = projectedMeasures[j];
                            currentProjection.conflictsWith(previousProjection) && (rewrittenQuery = function(projectedMeasure, rewrittenQuery) {
                                var queryRewriteRecords = rewrittenQuery.queryRewrites || [], result = rewrittenQuery.query, result = dsr.QueryRewriterUtils.duplicateSelect(result, projectedMeasure.getQueryName(), null === (result = projectedMeasure.getRoleName) || void 0 === result ? void 0 : result.call(projectedMeasure));
                                return projectedMeasure.updateQueryName(result.newQueryName), queryRewriteRecords.push.apply(queryRewriteRecords, result.rewriteRecords), 
                                {
                                    query: result.newQuery,
                                    queryRewrites: queryRewriteRecords,
                                    mappings: rewrittenQuery.mappings,
                                    additionalProjections: rewrittenQuery.additionalProjections
                                };
                            }(currentProjection, rewrittenQuery));
                        }
                        return rewrittenQuery;
                    }(scopedMeasures, rewrittenQuery);
                };
                var GroupingRoleVisitor = function() {
                    function GroupingRoleVisitor(expectedContext) {
                        this.expectedContext = expectedContext, this.scopeRefs = [], this.queryRefsByRole = {};
                    }
                    return GroupingRoleVisitor.prototype.visitRole = function(role, rowItems) {
                        if (rowItems === this.expectedContext) for (var rowItems = data.CompiledDataViewMapping.getRoleActiveItems(role), roleItems = this.queryRefsByRole[role.role] = [], _i = 0, rowItems_1 = rowItems; _i < rowItems_1.length; _i++) {
                            var item = rowItems_1[_i];
                            this.scopeRefs.push(item.queryName), roleItems.push(item.queryName);
                        }
                    }, GroupingRoleVisitor;
                }(), MeasuresRoleVisitor = function() {
                    function MeasuresRoleVisitor(scopeRefs, expectedContext) {
                        this.scopeRefs = scopeRefs, this.expectedContext = expectedContext, this.rolesMeasures = [];
                    }
                    return MeasuresRoleVisitor.prototype.visitRole = function(role, context) {
                        if (context === this.expectedContext) for (var _i = 0, items_9 = data.CompiledDataViewMapping.getRoleActiveItems(role); _i < items_9.length; _i++) {
                            var item = items_9[_i];
                            this.rolesMeasures.push(new RoleMeasure(item, role.role, this.scopeRefs));
                        }
                    }, MeasuresRoleVisitor;
                }();
            }(dsr.ScopedValuesQueryRewriter || (dsr.ScopedValuesQueryRewriter = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(dsr) {
            !function(reader) {
                var Iterator = function() {
                    function Iterator(elements) {
                        this.elements = elements, this.currentIndex = -1;
                    }
                    return Iterator.prototype.reset = function(elements) {
                        this.currentIndex = -1, elements && (this.elements, this.elements = elements);
                    }, Iterator.prototype.count = function() {
                        return _.size(this.elements);
                    }, Iterator.prototype.current = function() {
                        return this.currentIndex, this.elements[this.currentIndex];
                    }, Iterator.prototype.done = function() {
                        return this.currentIndex === _.size(this.elements) - 1;
                    }, Iterator.prototype.next = function() {
                        return !this.done() && (this.currentIndex++, !0);
                    }, Iterator.prototype.index = function() {
                        return this.currentIndex;
                    }, Iterator;
                }();
                reader.Iterator = Iterator;
            }(dsr.reader || (dsr.reader = {}));
        }(data.dsr || (data.dsr = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        var dsr_5;
        (function(reader) {
            !function(CalculationContainerParser) {
                CalculationContainerParser.createDsrParser = function(dsr) {
                    return new DsrParser(dsr);
                };
                var DsrParser = function() {
                    function DsrParser(dsr) {
                        this.parser = new DataShapeParser(dsr.DataShapes);
                    }
                    return DsrParser.prototype.dataShapes = function() {
                        return this.parser;
                    }, DsrParser.prototype.reset = function() {
                        this.parser.reset();
                    }, DsrParser.prototype.lockCache = function() {}, DsrParser;
                }(), CalculationContainerParser = function() {
                    function CalculationContainerParser() {}
                    return CalculationContainerParser.prototype.setCalculations = function(calculations) {
                        this.calcIt ? this.calcIt.reset(calculations) : this.calcIt = new reader.Iterator(calculations), 
                        this.calcExpr = void 0;
                    }, CalculationContainerParser.prototype.restartCalcs = function() {
                        this.calcIt, this.calcIt.reset(), this.calcExpr = void 0;
                    }, CalculationContainerParser.prototype.nextCalc = function() {
                        var success = this.calcIt.next();
                        return success && (this.calcExpr = data.PrimitiveValueEncoding.parseValueToSQExpr(this.calcIt.current().Value)), 
                        success;
                    }, CalculationContainerParser.prototype.calcId = function() {
                        return this.calcIt.current().Id;
                    }, CalculationContainerParser.prototype.calcValue = function() {
                        return this.calcValueAsExpr().value;
                    }, CalculationContainerParser.prototype.calcValueAsExpr = function() {
                        return this.calcExpr || (this.calcExpr = data.PrimitiveValueEncoding.parseValueToSQExpr(this.calcIt.current().Value)), 
                        this.calcExpr;
                    }, CalculationContainerParser.prototype.calcCount = function() {
                        return this.calcIt.count();
                    }, CalculationContainerParser;
                }(), DataShapeParser = function(_super) {
                    function DataShapeParser(dataShapes) {
                        var _this = _super.call(this) || this;
                        return _this.it = new reader.Iterator(dataShapes), _this;
                    }
                    return __extends(DataShapeParser, _super), DataShapeParser.prototype.reset = function() {
                        this.it.reset();
                    }, DataShapeParser.prototype.index = function() {
                        return this.it.index();
                    }, DataShapeParser.prototype.count = function() {
                        return this.it.count();
                    }, DataShapeParser.prototype.next = function() {
                        this.primaryHierarchyParser = this.secondaryHierarchyParser = this.messageParser = void 0;
                        var currentDataShape, success = this.it.next();
                        return success && (currentDataShape = this.it.current(), this.setCalculations(currentDataShape.Calculations)), 
                        success;
                    }, DataShapeParser.prototype.id = function() {
                        return this.it.current().Id;
                    }, DataShapeParser.prototype.nestedDataShapes = function() {
                        return {};
                    }, DataShapeParser.prototype.primaryHierarchy = function() {
                        var primaryHierarchy;
                        return this.primaryHierarchyParser || (primaryHierarchy = this.it.current().PrimaryHierarchy, 
                        this.primaryHierarchyParser = primaryHierarchy && new DataMemberParser(primaryHierarchy, 0)), 
                        this.primaryHierarchyParser;
                    }, DataShapeParser.prototype.secondaryHierarchy = function() {
                        var secondaryHierarchy;
                        return this.secondaryHierarchyParser || (secondaryHierarchy = this.it.current().SecondaryHierarchy, 
                        this.secondaryHierarchyParser = secondaryHierarchy && new DataMemberParser(secondaryHierarchy, 1)), 
                        this.secondaryHierarchyParser;
                    }, DataShapeParser.prototype.messages = function() {
                        return !this.messageParser && 0 < _.size(this.it.current().DataShapeMessages) && (this.messageParser = new MessageParser(this.it.current().DataShapeMessages)), 
                        this.messageParser;
                    }, DataShapeParser.prototype.hasRestartTokens = function() {
                        return 0 < _.size(this.restartTokens());
                    }, DataShapeParser.prototype.restartTokens = function() {
                        return this.it.current().RestartTokens;
                    }, DataShapeParser.prototype.complete = function() {
                        return this.it.current().IsComplete;
                    }, DataShapeParser.prototype.hasAllData = function() {}, DataShapeParser.prototype.limitsExceeded = function() {
                        return 0 < _.size(this.it.current().DataLimitsExceeded);
                    }, DataShapeParser.prototype.limits = function() {
                        return this.limitsParser || (this.limitsParser = new LimitsParser(this.it.current().DataLimitsExceeded)), 
                        this.limitsParser;
                    }, DataShapeParser;
                }(CalculationContainerParser), LimitsParser = function() {
                    function LimitsParser(limits) {
                        this.it = new reader.Iterator(limits);
                    }
                    return LimitsParser.prototype.next = function() {
                        return this.it.next();
                    }, LimitsParser.prototype.id = function() {
                        return this.it.current().Id;
                    }, LimitsParser.prototype.count = function() {
                        return this.it.count();
                    }, LimitsParser;
                }(), MessageParser = function() {
                    function MessageParser(dataShapeMessage) {
                        this.it = new reader.Iterator(dataShapeMessage);
                    }
                    return MessageParser.prototype.next = function() {
                        return this.it.next();
                    }, MessageParser.prototype.code = function() {
                        return this.it.current().Code;
                    }, MessageParser.prototype.severity = function() {
                        return this.it.current().Severity;
                    }, MessageParser.prototype.dsrMessage = function() {
                        return new dsr_5.DsrMessage(this.it.current());
                    }, MessageParser;
                }(), DataMemberParser = function() {
                    function DataMemberParser(dataMembers, hierarchy) {
                        this.hierarchy = hierarchy, this.it = new reader.Iterator(dataMembers);
                    }
                    return DataMemberParser.prototype.count = function() {
                        return this.it.count();
                    }, DataMemberParser.prototype.reset = function() {
                        this.it.reset();
                    }, DataMemberParser.prototype.next = function() {
                        return this.instancesParser && (this.instancesParser = void 0), this.it.next();
                    }, DataMemberParser.prototype.id = function() {
                        return this.it.current().Id;
                    }, DataMemberParser.prototype.instances = function() {
                        var instances;
                        return this.instancesParser || (instances = this.it.current().Instances, this.instancesParser = instances && new DataMemberInstanceParser(instances, this.hierarchy)), 
                        this.instancesParser;
                    }, DataMemberParser;
                }(), DataMemberInstanceParser = function(_super) {
                    function DataMemberInstanceParser(instances, hierarchy) {
                        var _this = _super.call(this) || this;
                        return _this.hierarchy = hierarchy, _this.it = new reader.Iterator(instances), _this;
                    }
                    return __extends(DataMemberInstanceParser, _super), DataMemberInstanceParser.prototype.next = function() {
                        var instance, success = this.it.next();
                        return success && (instance = this.it.current(), this.setCalculations(instance.Calculations), 
                        this.dataMemberIt = void 0, this.intersectionParserDirty = !0, 1 === this.hierarchy && instance.Intersections), 
                        success;
                    }, DataMemberInstanceParser.prototype.count = function() {
                        return this.it.count();
                    }, DataMemberInstanceParser.prototype.currentIndex = function() {
                        return this.it.index();
                    }, DataMemberInstanceParser.prototype.intersections = function() {
                        if (this.intersectionParser) return this.intersectionParserDirty && this.intersectionParser.reset(this.it.current().Intersections), 
                        this.intersectionParser;
                        this.intersectionParserDirty = !1;
                        var intersections = this.it.current().Intersections;
                        return this.intersectionParser = intersections && new IntersectionsParser(intersections);
                    }, DataMemberInstanceParser.prototype.restartFlagKind = function() {
                        return this.it.current().RestartFlag;
                    }, DataMemberInstanceParser.prototype.restartKind = function() {
                        return 0;
                    }, DataMemberInstanceParser.prototype.members = function() {
                        var nestedMembers;
                        return this.dataMemberIt || (nestedMembers = this.it.current().Members, this.dataMemberIt = nestedMembers && new DataMemberParser(nestedMembers, this.hierarchy)), 
                        this.dataMemberIt;
                    }, DataMemberInstanceParser;
                }(CalculationContainerParser), IntersectionsParser = function(_super) {
                    function IntersectionsParser(intersections) {
                        var _this = _super.call(this) || this;
                        return _this.it = new reader.Iterator(intersections), _this;
                    }
                    return __extends(IntersectionsParser, _super), IntersectionsParser.prototype.reset = function(intersections) {
                        this.it.reset(intersections);
                    }, IntersectionsParser.prototype.next = function() {
                        var success = this.it.next();
                        return success && this.setCalculations(this.it.current().Calculations), success;
                    }, IntersectionsParser;
                }(CalculationContainerParser);
            }(reader.V1 || (reader.V1 = {}));
        })((dsr_5 = data.dsr || (data.dsr = {})).reader || (dsr_5.reader = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(data) {
        !function(services) {
            !function(DataShapeBindingWindowExpansionStateSerializer) {
                DataShapeBindingWindowExpansionStateSerializer.serializeWindowExpansionState = function(queryFrom) {
                    if (queryFrom && queryFrom.root) {
                        var root = function toDataReductionWindowExpansionInstance(windowExpansion) {
                            return {
                                Values: _.map(windowExpansion.identityValues, function(expr) {
                                    return services.SemanticQuerySerializer.serializeExpr(expr);
                                }),
                                WindowExpansionInstanceWindowValue: _.map(windowExpansion.windowValues, function(windowValue) {
                                    return {
                                        Values: _.map(windowValue.restartValues, function(expr) {
                                            return services.SemanticQuerySerializer.serializeExpr(expr);
                                        }),
                                        WindowStartKind: windowValue.windowKind
                                    };
                                }),
                                Children: _.map(windowExpansion.children, function(child) {
                                    return toDataReductionWindowExpansionInstance(child);
                                })
                            };
                        }(queryFrom.root), serializedLevels = function getDepth(node) {
                            if (!node || _.isEmpty(node.Children)) return 0;
                            return Math.max.apply(Math, _.map(node.Children, function(child) {
                                return getDepth(child);
                            })) + 1;
                        }(root), from = new data.SQFrom(null);
                        _.size(queryFrom.levels);
                        queryFrom = _.take(queryFrom.levels, serializedLevels), serializedLevels = _.map(queryFrom, function(level) {
                            return function(level, from) {
                                return {
                                    Expressions: _.map(level.identityKeys, function(rewrittenExpr) {
                                        rewrittenExpr = data.SQExprRewriterWithSourceRenames.rewrite(rewrittenExpr, from, from);
                                        return services.SemanticQuerySerializer.serializeExprWithRef(rewrittenExpr);
                                    }),
                                    Default: 0
                                };
                            }(level, from);
                        }), queryFrom = [];
                        return services.SemanticQuerySerializer.serializeFrom(from, queryFrom), {
                            From: queryFrom,
                            Levels: serializedLevels,
                            WindowInstances: root
                        };
                    }
                };
            }(services.DataShapeBindingWindowExpansionStateSerializer || (services.DataShapeBindingWindowExpansionStateSerializer = {}));
        }(data.services || (data.services = {}));
    }(powerbi.data || (powerbi.data = {}));
}(powerbi = powerbi || {});