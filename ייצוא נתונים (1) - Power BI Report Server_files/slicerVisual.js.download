"use strict";
this.parseTimeMarkers = this.parseTimeMarkers || {};
var marker = this.parseTimeMarkers['slicerVisual.js'] || (this.parseTimeMarkers['slicerVisual.js'] = {});
marker.startEval = window.jsCommon && window.jsCommon.performance && window.jsCommon.performance.now ? window.jsCommon.performance.now() : Date.now(); marker.isExternal = false;
if (window.perfTracking && window.perfTracking.startBundleEval) window.perfTracking.startBundleEval('slicerVisual.js');

var es6, powerbi, __assign = this && this.__assign || function() {
    return (__assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) for (var p in s = arguments[i]) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
        return t;
    }).apply(this, arguments);
}, __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        return (extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        })(d, b);
    };
    return function(d, b) {
        if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        function __() {
            this.constructor = d;
        }
        extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
    };
}(), __spreadArray = this && this.__spreadArray || function(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
    return to;
}, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P = P || Promise)(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            var value;
            result.done ? resolve(result.value) : ((value = result.value) instanceof P ? value : new P(function(resolve) {
                resolve(value);
            })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}, __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (1 & t[0]) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
    };
    return "function" == typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return function(op) {
                if (f) throw new TypeError("Generator is already executing.");
                for (;_; ) try {
                    if (f = 1, y && (t = 2 & op[0] ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 
                    0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                    switch (y = 0, (op = t ? [ 2 & op[0], t.value ] : op)[0]) {
                      case 0:
                      case 1:
                        t = op;
                        break;

                      case 4:
                        return _.label++, {
                            value: op[1],
                            done: !1
                        };

                      case 5:
                        _.label++, y = op[1], op = [ 0 ];
                        continue;

                      case 7:
                        op = _.ops.pop(), _.trys.pop();
                        continue;

                      default:
                        if (!(t = 0 < (t = _.trys).length && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
                            _ = 0;
                            continue;
                        }
                        if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (6 === op[0] && _.label < t[1]) {
                            _.label = t[1], t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2], _.ops.push(op);
                            break;
                        }
                        t[2] && _.ops.pop(), _.trys.pop();
                        continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [ 6, e ], y = 0;
                } finally {
                    f = t = 0;
                }
                if (5 & op[0]) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: !0
                };
            }([ n, v ]);
        };
    }
};

!function(powerbi) {
    !function(visuals) {
        !function(readers) {
            var SlicerCategoricalDataReader = function() {
                function SlicerCategoricalDataReader(categorical, columns, selectedDataPoints) {
                    this.columns = columns, this.selectedDataPoints = selectedDataPoints, this.column = categorical && !_.isEmpty(categorical.categories) ? categorical.categories[0] : null, 
                    this.column && (this.objects = this.column.objects), this.count = this.column && this.column.values ? this.column.values.length : 0, 
                    this.isImage = visuals.converterHelper.isImageUrlColumn(this.columns[0]);
                }
                return SlicerCategoricalDataReader.prototype.getDataPointsCount = function() {
                    return this.count;
                }, SlicerCategoricalDataReader.prototype.getMetadataColumn = function() {
                    return this.column && this.column.source || this.columns[0];
                }, SlicerCategoricalDataReader.prototype.getDataViewDataPoint = function(index) {
                    var object, count;
                    return this.count, this.objects && (object = this.objects[index], count = powerbi.DataViewObjects.getValue(object, visuals.slicerProps.general.count, count)), 
                    {
                        scopeId: this.column.identity[index],
                        count: count,
                        value: this.column.values[index]
                    };
                }, SlicerCategoricalDataReader.prototype.isImageData = function() {
                    return this.isImage;
                }, SlicerCategoricalDataReader.prototype.getLevel = function() {
                    return 0;
                }, SlicerCategoricalDataReader.prototype.hasCount = function() {
                    return !_.isEmpty(this.objects);
                }, SlicerCategoricalDataReader.prototype.getSelectedNodes = function() {
                    return this.selectedDataPoints;
                }, SlicerCategoricalDataReader.prototype.getMetadataColumns = function() {
                    return this.column && [ this.column.source ];
                }, SlicerCategoricalDataReader.prototype.getIdentityExprs = function() {
                    return this.column && this.column.identityFields && [ this.column.identityFields ];
                }, SlicerCategoricalDataReader;
            }();
            readers.SlicerCategoricalDataReader = SlicerCategoricalDataReader;
        }(visuals.readers || (visuals.readers = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var RangeFilterPattern = powerbi.data.RangeFilterPattern, SQExprBuilder = powerbi.data.SQExprBuilder, StringExtensions = jsCommon.StringExtensions, DateSlicer = function() {
            function DateSlicer(hostServices) {
                hostServices && (this.preventVirtualKeyboardOnTheFirstTap = hostServices.preventVirtualKeyboardOnTheFirstTap, 
                this.featureSwitches = hostServices.featureSwitches), this.culture = powerbi.formattingService.getCurrentCulture(), 
                this.inputElements = [], this.eventsHelper = new visuals.SlicerUtil.EventsHelper();
                hostServices = this.hostServices = hostServices.hostServices;
                this.startInputLabel = hostServices.getLocalizedString("Slicer_StartLabel"), this.endInputLabel = hostServices.getLocalizedString("Slicer_EndLabel");
            }
            return DateSlicer.prototype.createRange = function(data) {
                return new visuals.DateRange(data.bounds.min, data.bounds.max, data.value.min, data.value.max);
            }, DateSlicer.prototype.getSliderOptions = function(data, singleValue) {
                return {
                    min: 0,
                    max: visuals.DateUtil.getDifferenceInDays(data.bounds.max, data.bounds.min),
                    step: 1
                };
            }, DateSlicer.prototype.areEqual = function(val1, val2) {
                return visuals.DateUtil.isEqual(val1, val2);
            }, DateSlicer.prototype.defaultValue = function() {
                return new Date(0);
            }, DateSlicer.prototype.startProperty = function() {
                return visuals.slicerProps.data.startDate;
            }, DateSlicer.prototype.endProperty = function() {
                return visuals.slicerProps.data.endDate;
            }, DateSlicer.prototype.formatValue = function(value, formatter) {
                return powerbi.formattingService.formatValue(value, "d");
            }, DateSlicer.prototype.parseSingleSliderValue = function(value, dataPoints) {
                return null;
            }, DateSlicer.prototype.inputStyleProperties = function() {
                return {
                    background: visuals.slicerProps.date.background,
                    fontColor: visuals.slicerProps.date.fontColor,
                    textSize: visuals.slicerProps.date.textSize,
                    fontFamily: visuals.slicerProps.date.fontFamily,
                    bold: visuals.slicerProps.date.bold,
                    italic: visuals.slicerProps.date.italic,
                    underline: visuals.slicerProps.date.underline
                };
            }, DateSlicer.prototype.parseInput = function(inputString, dataPoints, singleValue) {
                return powerbi.formattingService.parseDate(inputString);
            }, DateSlicer.prototype.isInputValid = function(inputValue, range, type, singleValue) {
                return !(null == inputValue || 0 === type && inputValue > range.max || 1 === type && inputValue < range.min);
            }, DateSlicer.prototype.setRange = function(value, formatter, start, end, type, bounds) {
                null == type ? (this.featureSwitches.useModernDatePickerSlicer || (start.val(powerbi.formattingService.formatValue(value.min, "d")), 
                end.val(powerbi.formattingService.formatValue(value.max, "d"))), start.attr("aria-label", StringExtensions.format(this.startInputLabel, powerbi.formattingService.formatValue(bounds.min, "d"), powerbi.formattingService.formatValue(value.max, "d"))), 
                end.attr("aria-label", StringExtensions.format(this.endInputLabel, powerbi.formattingService.formatValue(value.min, "d"), powerbi.formattingService.formatValue(bounds.max, "d")))) : 0 === type ? (this.featureSwitches.useModernDatePickerSlicer || start.val(powerbi.formattingService.formatValue(value.min, "d")), 
                start.attr("aria-label", StringExtensions.format(this.startInputLabel, powerbi.formattingService.formatValue(bounds.min, "d"), powerbi.formattingService.formatValue(bounds.max, "d")))) : 1 === type && (this.featureSwitches.useModernDatePickerSlicer || end.val(powerbi.formattingService.formatValue(value.max, "d")), 
                end.attr("aria-label", StringExtensions.format(this.endInputLabel, powerbi.formattingService.formatValue(bounds.min, "d"), powerbi.formattingService.formatValue(bounds.max, "d"))));
            }, DateSlicer.prototype.enumerateObjectInstances = function(instance, data, featureSwitches) {
                if ("date" === instance.objectName && data && data.inputStyle) {
                    var dateProps = visuals.slicerProps.date, instance = {
                        selector: null,
                        objectName: "date",
                        properties: {
                            fontColor: data.inputStyle.fontColor,
                            background: data.inputStyle.background,
                            textSize: data.inputStyle.textSize,
                            fontFamily: data.inputStyle.fontFamily
                        }
                    };
                    return featureSwitches && featureSwitches.enableBIU && (instance.properties[dateProps.bold.propertyName] = data.inputStyle.labelBold, 
                    instance.properties[dateProps.italic.propertyName] = data.inputStyle.labelItalic, 
                    instance.properties[dateProps.underline.propertyName] = data.inputStyle.labelUnderline), 
                    [ instance ];
                }
            }, DateSlicer.prototype.getValuesCard = function(data, featureSwitches) {
                var _this = this, dateProps = visuals.slicerProps.date, valuesCardBuilder = new visuals.builder.FormattingCardBuilder(new visuals.builder.FormattingCardUidBuilder("values"), "Role_DisplayName_Values", [ dateProps.fontFamily, dateProps.textSize, dateProps.fontColor, dateProps.background, dateProps.bold, dateProps.italic, dateProps.underline ], function(key) {
                    return _this.hostServices.getLocalizedString(key);
                }), fontControlBuilder = new visuals.builder.FontControlBuilder().withFontFamily({
                    descriptor: dateProps.fontFamily,
                    value: data.inputStyle.fontFamily
                }).withFontSizeProperties({
                    descriptor: dateProps.textSize,
                    value: data.inputStyle.textSize
                });
                featureSwitches && featureSwitches.enableBIU && fontControlBuilder.withBold({
                    descriptor: dateProps.bold,
                    value: data.inputStyle.labelBold
                }).withItalic({
                    descriptor: dateProps.italic,
                    value: data.inputStyle.labelItalic
                }).withUnderline({
                    descriptor: dateProps.underline,
                    value: data.inputStyle.labelUnderline
                });
                var fontControl = fontControlBuilder.build();
                return valuesCardBuilder.addGroup("values", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Values"), groupBuilder.addCompositeSlice("fontselector", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("color", function() {
                        var colordata = {
                            value: data.inputStyle.fontColor
                        };
                        return new visuals.builder.ColorPickerBuilder({
                            descriptor: dateProps.fontColor,
                            value: colordata
                        }).build();
                    });
                }).addGroup("background", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Background").addSimpleSlice("color", function() {
                        var colordata = {
                            value: data.inputStyle.background
                        };
                        return new visuals.builder.ColorPickerBuilder({
                            descriptor: dateProps.background,
                            value: colordata
                        }).build();
                    });
                }), valuesCardBuilder.build();
            }, DateSlicer.prototype.getDataPointsForSingleValueRange = function(dataView) {
                return [];
            }, DateSlicer.prototype.createInputElement = function(control, type) {
                var _this = this, pattern = this.culture.calendar.patterns.d, $element = InJs.DomFactory.textBox().attr("type", "text").attr(visuals.RangeSlicerConstants.DisableDragAttribute, "true").prop("readonly", !!this.preventVirtualKeyboardOnTheFirstTap).attr("placeholder", pattern).addClass(visuals.RangeSlicerConstants.InputClass.class).appendTo(control);
                control.attr("tabindex", "0"), control.keydown(function(event) {
                    13 !== event.keyCode && 32 !== event.keyCode || $element.focus();
                }), $element.datepicker({
                    showOtherMonths: !0,
                    selectOtherMonths: !0,
                    changeMonth: !0,
                    changeYear: !0,
                    nextText: "",
                    prevText: "",
                    firstDay: this.culture.calendar.firstDay,
                    dayNamesMin: this.culture.calendar.days.namesAbbr,
                    dateFormat: this.culture.calendar.patterns.d.replace("yyyy", "yy").toLowerCase(),
                    monthNamesShort: this.culture.calendar.months.names,
                    onClose: function() {
                        $element.prop("readonly", !!_this.preventVirtualKeyboardOnTheFirstTap);
                    }
                }), $element.on("click", function(event) {
                    _this.preventVirtualKeyboardOnTheFirstTap && $element.is("[readonly]") && ($element.prop("readonly", !1), 
                    $element.blur()), $element.datepicker("show");
                }), this.preventVirtualKeyboardOnTheFirstTap && $element.on("touchstart", function(event) {
                    $element.is("[readonly]") || $element.is(":focus") || $element.focus();
                });
                var widget = $element.datepicker("widget");
                return widget.attr("prevent-focus-loss", "false"), $element.attr("prevent-focus-loss", "false"), 
                $element.datepicker("option", "beforeShow", function() {
                    widget.addClass("themeableElement"), _this.unregisterPopupHideEvents = _this.eventsHelper.onPopupHideEvent(function(eventType, target) {
                        _this.onPopupHideEvent(eventType, target);
                    }, control.get(0)), _this.fixLayout(widget, $element, 1e3);
                }), this.inputElements.push($element), $element;
            }, DateSlicer.prototype.onPopupHideEvent = function(eventType, target) {
                "resize" !== eventType && ((target = $(target)).hasClass("hasDatepicker") || target.hasClass("ui-datepicker") || target.hasClass("ui-icon") || $(target).closest(".ui-datepicker").length) || this.hideDatepicker();
            }, DateSlicer.prototype.hideDatepicker = function() {
                this.unbindPopupHideEventHandlers();
                for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
                    var inputElement = _a[_i];
                    inputElement.datepicker("widget").is(":visible") && inputElement.datepicker("hide").blur();
                }
            }, DateSlicer.prototype.onDestroy = function() {
                this.hideDatepicker();
            }, DateSlicer.prototype.unbindPopupHideEventHandlers = function() {
                this.unregisterPopupHideEvents && this.unregisterPopupHideEvents();
            }, DateSlicer.prototype.fixLayout = function(widget, element, maxWait) {
                var _this = this;
                setTimeout(function() {
                    widget.is(":visible") ? (visuals.SlicerHelper.fixWidgetPosition(widget, element, null, !0), 
                    widget.find(".ui-datepicker-current-day").addClass("backgroundToForegroundColor")) : 0 < maxWait && _this.fixLayout(widget, element, maxWait - 20);
                }, 20);
            }, DateSlicer.prototype.filterExpr = function(roundedRange) {
                roundedRange = RangeFilterPattern.roundUpDateRange(roundedRange);
                return {
                    lower: SQExprBuilder.dateTime(roundedRange.min),
                    upper: SQExprBuilder.dateTime(roundedRange.max)
                };
            }, DateSlicer.prototype.comparisonKind = function() {
                return {
                    lower: 2,
                    upper: 3
                };
            }, DateSlicer.prototype.addAriaDescription = function(inputControl) {
                var inputTextHint = this.culture.calendar.patterns.d, inputTextHint = powerbi.formattingService.format(this.hostServices.getLocalizedString("DateSlicer_InputTextHint"), [ inputTextHint ]);
                inputControl.attr("aria-description", inputTextHint);
            }, DateSlicer;
        }();
        visuals.DateSlicer = DateSlicer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var FocusManager = jsCommon.FocusManager, FontSize = visuals.Units.FontSize, PixelConverter = jsCommon.PixelConverter, DropdownSlicerRenderer = function() {
            function DropdownSlicerRenderer(verticalSlicer, initOptions) {
                var _this = this;
                this.DefaultRestatementColorName = "foregroundDark", this.verticalSlicerRenderer = verticalSlicer, 
                this.popup = $("<div ></div>").addClass("slicer-dropdown-popup"), jsCommon.BrowserUtils.isIOSWebView() && this.popup.addClass(visuals.SlicerUtil.Selectors.DisableScrollHover.class), 
                this.popup.on("slicer.dataPointSelected", function(e) {
                    _this.strictSingleSelect && (_this.hidePopup(), e.stopPropagation());
                }), this.content = $("<div ></div>").addClass("slicer-dropdown-content"), this.loader = $("<div ></div>").addClass("slicer-dropdown-loader"), 
                this.hostServices = initOptions.hostServices, this.popup.addClass("visual").attr("focus-nav-mode", "Group").keydown(function(event) {
                    27 !== event.keyCode || _this.popup.is(":hidden") ? 9 !== event.keyCode || _this.popup.is(":hidden") || (_this.hidePopup(), 
                    jsCommon.FocusManager.focus(jsCommon.FocusGroupNavigation.getFocusNextElement(!0, _this.menu.get(0))), 
                    event.preventDefault(), event.stopPropagation()) : (_this.hidePopup(), _this.menu.focus(), 
                    event.preventDefault(), event.stopPropagation());
                }), $("body").append(this.popup), this.popup.append(this.content), this.popup.append(this.loader), 
                this.featureSwitches = initOptions.featureSwitches, this.eventsHelper = new visuals.SlicerUtil.EventsHelper();
            }
            return DropdownSlicerRenderer.prototype.onClear = function() {
                this.verticalSlicerRenderer.onClear();
            }, DropdownSlicerRenderer.prototype.onModeChange = function(mode) {
                this.popup.remove(), this.verticalSlicerRenderer.onModeChange(mode);
            }, DropdownSlicerRenderer.prototype.hasSlider = function() {
                return !1;
            }, DropdownSlicerRenderer.prototype.supportsOrientation = function() {
                return !1;
            }, DropdownSlicerRenderer.prototype.enumerateObjectInstances = function(options) {
                return this.verticalSlicerRenderer.enumerateObjectInstances(options, this.featureSwitches);
            }, DropdownSlicerRenderer.prototype.getValuesCard = function() {
                return this.verticalSlicerRenderer.getValuesCard(this.featureSwitches);
            }, DropdownSlicerRenderer.prototype.getSlicerSettingsCardOptions = function(cardUidBuilder, orientation) {
                return this.verticalSlicerRenderer.getSlicerSettingsCardOptions(cardUidBuilder, orientation);
            }, DropdownSlicerRenderer.prototype.getAdditionalCards = function() {
                return this.verticalSlicerRenderer.getAdditionalCards();
            }, DropdownSlicerRenderer.prototype.init = function(slicerInitOptions, element) {
                return this.container = element, this.style = slicerInitOptions.visualInitOptions.style, 
                this.slicerSelectionHandler = this.verticalSlicerRenderer.init(slicerInitOptions, this.content), 
                this.slicerSelectionHandler;
            }, DropdownSlicerRenderer.prototype.onDestroy = function() {
                this.verticalSlicerRenderer && this.verticalSlicerRenderer.onDestroy(), this.unbindPopupHideEventHandlers(), 
                this.popup.remove();
            }, DropdownSlicerRenderer.prototype.render = function(options) {
                this.options = options, this.data = this.verticalSlicerRenderer.converter(this.options.dataView, this.options.isSlicer), 
                this.renderMenu(this.data.restatement), this.isExpanded && this.showPopup(this.setFocus, !0);
            }, DropdownSlicerRenderer.prototype.renderMenu = function(restatement) {
                var objects, colorHelper, slicerItemTextFontProperties, _this = this;
                this.menu || (this.menu = InJs.DomFactory.div(), this.menu.addClass("slicer-dropdown-menu"), 
                this.menu.attr(((slicerItemTextFontProperties = {
                    role: "combobox",
                    "aria-haspopup": "listbox",
                    tabindex: "0"
                })["aria-expanded"] = "false", slicerItemTextFontProperties[visuals.RangeSlicerConstants.DisableDragAttribute] = "true", 
                slicerItemTextFontProperties)), this.container.append(this.menu), this.menu.click(function(event) {
                    _this.onRenderMenuClick(event), _this.popup.removeClass("focused");
                }), this.menu.on("touchstart keydown", function(event) {
                    event.preventDefault(), ("touchstart" === event.type || 40 === event.keyCode && !event.ctrlKey || 38 === event.keyCode && !event.ctrlKey || 32 === event.keyCode || 13 === event.keyCode) && _this.onRenderMenuClick(event, !0);
                }), this.restatement = InJs.DomFactory.div(), this.restatement.addClass("slicer-restatement"), 
                this.menu.append(this.restatement), this.icon = $("<i ></i>").addClass("dropdown-chevron"), 
                this.icon.appendTo(this.menu)), this.menu.attr({
                    "aria-label": this.options.restatement
                }), this.icon.addClass("powervisuals-glyph"), this.icon.addClass("chevron-down"), 
                this.settings = this.defaultRestatementSetting(), this.options.dataView.metadata && this.options.dataView.metadata.objects && (objects = this.options.dataView.metadata.objects, 
                colorHelper = visuals.ColorHelper.create(this.style), slicerItemTextFontProperties = visuals.FontProperties.createFromObjectOrStyle(powerbi.DataViewObjects.getObject(objects, "items"), {
                    color: "fontColor",
                    family: "fontFamily",
                    size: "textSize"
                }, colorHelper, this.style, "foregroundNeutralSecondary", "lightLabel", {
                    color: this.settings.fontColor,
                    family: this.settings.fontFamily,
                    size: FontSize.createFromPt(this.settings.textSize)
                }), this.settings.fontColor = slicerItemTextFontProperties.color, this.settings.fontFamily = slicerItemTextFontProperties.family, 
                this.settings.textSize = slicerItemTextFontProperties.size.pt, this.settings.background = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.items.background, this.settings.background), 
                this.strictSingleSelect = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.selection.strictSingleSelect, this.strictSingleSelect)), 
                this.restatement.text(restatement), this.menu.css({
                    "background-color": this.settings.background || "",
                    color: this.settings.fontColor,
                    "font-size": PixelConverter.fromPointToPixel(this.settings.textSize),
                    "font-family": this.settings.fontFamily
                }), this.popup.css({
                    "background-color": this.settings.background || ""
                });
            }, DropdownSlicerRenderer.prototype.onRenderMenuClick = function(event, setFocus) {
                if (event.stopPropagation(), this.popup.is(":hidden")) return this.isExpanded = !0, 
                this.setFocus = setFocus, this.hostServices.setShouldDeferData(!1), this.loader.show(), 
                this.popup.addClass("focused"), void this.showPopup(!1, !1);
                this.popup.removeClass("focused"), this.hidePopup();
            }, DropdownSlicerRenderer.prototype.showPopup = function(setFocus, requireUpdate) {
                var _this = this;
                window.requestAnimationFrame(function() {
                    var width;
                    _this.popup && (_this.unbindPopupHideEventHandlers(), width = _this.menu.width() + 10, 
                    _this.popup.css({
                        width: width
                    }), _this.menu.attr("aria-expanded", "true"), _this.icon.removeClass("chevron-down"), 
                    _this.icon.addClass("chevron-up"), visuals.SlicerHelper.fixWidgetPosition(_this.popup, _this.menu, null, !0), 
                    requireUpdate && _this.verticalSlicerRenderer.renderVerticalSlicer(_this.data, _this.options, function() {
                        _this.loader.hide(), _this.focusCallbackTimeout && window.clearTimeout(_this.focusCallbackTimeout), 
                        _this.focusCallbackTimeout = window.setTimeout(function() {
                            setFocus && FocusManager.focusChildInGroup(_this.popup.get(0)), _this.focusCallbackTimeout = void 0, 
                            _this.setFocus = !1;
                        }, 0);
                    }), _this.unregisterPopupHideEvents = _this.eventsHelper.onPopupHideEvent(function(eventType, target) {
                        _this.onPopupHideEvent(eventType, target);
                    }, _this.menu.get(0), _this.popup.get(0), !0), _this.popup.show());
                });
            }, DropdownSlicerRenderer.prototype.hidePopup = function() {
                this.popup && (this.isResize = !1, this.isExpanded = !1, this.popup.hide(), this.hostServices.setShouldDeferData(!0), 
                this.menu.attr("aria-expanded", "false"), this.icon.removeClass("chevron-up"), this.icon.addClass("chevron-down"), 
                this.unbindPopupHideEventHandlers());
            }, DropdownSlicerRenderer.prototype.onPopupHideEvent = function(eventType, target) {
                "resize" !== eventType ? ("focusin" === eventType && (this.isResize = !1), (target = $(target)).parents(".slicer-dropdown-popup").length || target.is(this.menu) || this.menu.find(target).length || this.isResize || this.hidePopup()) : this.isResize = !0;
            }, DropdownSlicerRenderer.prototype.unbindPopupHideEventHandlers = function() {
                this.unregisterPopupHideEvents && (this.unregisterPopupHideEvents(), this.unregisterPopupHideEvents = void 0);
            }, DropdownSlicerRenderer.prototype.defaultRestatementSetting = function() {
                return {
                    textSize: 10,
                    fontFamily: visuals.Font.Family.regular.css,
                    fontColor: visuals.ColorHelper.getThemeColor(this.style, this.DefaultRestatementColorName),
                    background: this.style.isHighContrast ? visuals.ColorHelper.getThemeColor(this.style, visuals.BackgroundColorName) : void 0
                };
            }, DropdownSlicerRenderer;
        }();
        visuals.DropdownSlicerRenderer = DropdownSlicerRenderer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(HorizontalSlicer) {
            !function(Selectors) {
                var createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
                Selectors.container = createClassAndSelector("horizontalSlicerContainer"), Selectors.ItemsContainer = createClassAndSelector("slicerItemsContainer"), 
                Selectors.NavigationArrow = createClassAndSelector("navigationArrow"), Selectors.LeftNavigationArrow = createClassAndSelector("left"), 
                Selectors.RightNavigationArrow = createClassAndSelector("right"), Selectors.MultiSelectEnabled = createClassAndSelector("isMultiSelectEnabled"), 
                Selectors.FlexDisplay = createClassAndSelector("flexDisplay"), Selectors.CanScrollRight = createClassAndSelector("canScrollRight"), 
                Selectors.CanScrollLeft = createClassAndSelector("canScrollLeft"), Selectors.IndividualItemContainer = createClassAndSelector("individualItemContainer"), 
                Selectors.ImageContainer = createClassAndSelector("horizontalImageContainer"), Selectors.HorizontalSlicerImage = createClassAndSelector("horizontalSlicerImage"), 
                Selectors.Input = createClassAndSelector("slicerCheckbox");
            }(HorizontalSlicer.Selectors || (HorizontalSlicer.Selectors = {}));
        }(visuals.HorizontalSlicer || (visuals.HorizontalSlicer = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var Utility = jsCommon.Utility, PixelConverter = jsCommon.PixelConverter, DefaultStyleProperties_label = {
            marginRight: 2,
            paddingLeft: 8,
            paddingRight: 8
        }, HorizontalSlicerRenderer = function() {
            function HorizontalSlicerRenderer(options, featureSwitches) {
                this.viewModelAdapter = featureSwitches, this.textProperties = {
                    fontFamily: visuals.Font.Family.regular.css,
                    fontSize: "14px"
                }, options && (this.horizontalSlicerLayout = options.horizontalSlicerLayout, featureSwitches = options.featureSwitches, 
                this.featureSwitches = options.featureSwitches, this.expressionBasedFormatting = featureSwitches && featureSwitches.expressionBasedFormatting), 
                this.behavior = new visuals.SlicerWebBehavior(), this.horizontalSlicerLayout || (this.horizontalSlicerLayout = new HorizontalSlicerLayout()), 
                this.domHelper = new visuals.SlicerUtil.DOMHelper(), this.dataStartIndex = 0, this.searchComponent = new visuals.SlicerSearchInput(this.featureSwitches, null == options ? void 0 : options.hostServices);
            }
            return HorizontalSlicerRenderer.prototype.hasSlider = function() {
                return !1;
            }, HorizontalSlicerRenderer.prototype.getDefaultValue = function() {
                if (this.data && !_.isEmpty(this.data.defaultValueByLevel)) return this.data.defaultValueByLevel[0].value;
            }, HorizontalSlicerRenderer.prototype.getIdentityFields = function() {
                return visuals.SlicerUtil.DefaultValueHandler.getIdentityFields(this.dataView);
            }, HorizontalSlicerRenderer.prototype.supportsOrientation = function() {
                return !0;
            }, HorizontalSlicerRenderer.prototype.getSlicerSettings = function(data) {
                return data && data.slicerSettings || visuals.DataConversion.DefaultSlicerProperties(this.style);
            }, HorizontalSlicerRenderer.prototype.enumerateObjectInstances = function(options) {
                var data = this.originalData, settings = this.getSlicerSettings(data);
                return visuals.SlicerUtil.ObjectEnumerator.enumerateObjectInstances(options, data, settings, this.dataView, this.featureSwitches);
            }, HorizontalSlicerRenderer.prototype.getValuesCard = function() {
                var data = this.originalData, settings = this.getSlicerSettings(data);
                return visuals.SlicerUtil.ObjectEnumerator.getValuesCard(this.hostServices, data, settings, this.expressionBasedFormatting, this.featureSwitches);
            }, HorizontalSlicerRenderer.prototype.getSlicerSettingsCardOptions = function(cardUidBuilder, orientation) {
                var data = this.originalData, settings = (settings = data ? data.slicerSettings : void 0) || visuals.DataConversion.DefaultSlicerProperties(this.style);
                return visuals.SlicerUtil.ObjectEnumerator.getSlicerSettingsFormattingOptions({
                    canShowSearch: this.hasSearchableData && settings.search.enabled,
                    cardUidBuilder: cardUidBuilder,
                    currentSlicerSettings: settings,
                    data: data,
                    dataView: this.dataView,
                    hostServices: this.hostServices,
                    orientation: orientation
                });
            }, HorizontalSlicerRenderer.prototype.getAdditionalCards = function() {
                var data = this.originalData, settings = (settings = data ? data.slicerSettings : void 0) || visuals.DataConversion.DefaultSlicerProperties(this.style);
                return visuals.SlicerUtil.ObjectEnumerator.getAdditionalCards(this.hostServices, data, settings, this.dataView);
            }, HorizontalSlicerRenderer.prototype.onModeChange = function(mode) {
                visuals.SlicerUtil.clearSlicerFilter(this.hostServices, mode);
            }, HorizontalSlicerRenderer.prototype.getRestatement = function() {
                return this.data && this.data.restatement;
            }, HorizontalSlicerRenderer.prototype.onClear = function(isUserAction) {
                visuals.SlicerUtil.clearFilters(this.selectionHandler, isUserAction);
            }, HorizontalSlicerRenderer.prototype.init = function(slicerInitOptions, itemsContainerElement) {
                var _this = this;
                this.element = itemsContainerElement, this.currentViewport = slicerInitOptions.visualInitOptions.viewport;
                var body = this.hostServices = slicerInitOptions.visualInitOptions.host;
                this.style = slicerInitOptions.visualInitOptions.style, this.behavior && (this.selectionHandler = new visuals.SlicerSelectionHandler(body, this.behavior)), 
                this.loadMoreData = function() {
                    return slicerInitOptions.loadMoreData();
                };
                var containerDiv = document.createElement("div");
                containerDiv.className = visuals.HorizontalSlicer.Selectors.container.class;
                itemsContainerElement = this.container = d3.select(containerDiv);
                this.searchComponent.create(itemsContainerElement);
                var body = this.body = itemsContainerElement.append("div").classed(visuals.SlicerUtil.Selectors.Body.class + " " + visuals.HorizontalSlicer.Selectors.FlexDisplay.class, !0), navigationArrowColor = {
                    color: visuals.ColorHelper.getThemeColor(this.style, "foregroundNeutralSecondary")
                }, navigationArrowHoverColor = {
                    color: visuals.ColorHelper.getThemeColor(this.style, "foreground")
                };
                this.leftNavigationArrow = body.append("button").call(this.horizontalSlicerLayout.getNavigationArrowsClass, !0).attr("aria-label", this.hostServices.getLocalizedString("Previous_ButtonText")).attr("tabindex", -1).styles(navigationArrowColor).on("pointerover", function() {
                    return _this.leftNavigationArrow.styles(navigationArrowHoverColor);
                }).on("pointerleave", function() {
                    return _this.leftNavigationArrow.styles(navigationArrowColor);
                }), this.itemsContainer = body.append("div").classed(visuals.HorizontalSlicer.Selectors.ItemsContainer.class + " " + visuals.HorizontalSlicer.Selectors.FlexDisplay.class, !0).attr("tabindex", "0").attr("role", "listbox");
                itemsContainerElement = this.itemsContainer.node();
                return $(itemsContainerElement).on("keydown", function(event) {
                    var keyCode = event.keyCode, isForward = 39 === keyCode || 40 === keyCode;
                    !isForward && (37 !== keyCode && 38 !== keyCode) || (_this.focusNextElement(isForward), 
                    event.stopPropagation());
                }), this.rightNavigationArrow = body.append("button").call(this.horizontalSlicerLayout.getNavigationArrowsClass, !1).attr("aria-label", this.hostServices.getLocalizedString("Next_ButtonText")).attr("tabindex", -1).styles(navigationArrowColor).on("pointerover", function() {
                    return _this.rightNavigationArrow.styles(navigationArrowHoverColor);
                }).on("pointerleave", function() {
                    return _this.rightNavigationArrow.styles(navigationArrowColor);
                }), this.element.get(0).appendChild(containerDiv), this.bindNavigationEvents(), 
                this.selectionHandler;
            }, HorizontalSlicerRenderer.prototype.render = function(options) {
                this.hasSearchableData = options.hasSearchableData;
                var localizedSelectAllText = this.hostServices.getLocalizedString(visuals.SlicerUtil.DisplayNameKeys.SelectAll), dataView = options.dataView;
                if (this.originalData = this.data = visuals.DataConversion.convert({
                    dataView: dataView,
                    localizedSelectAllText: localizedSelectAllText,
                    selectionHandler: this.selectionHandler,
                    hostServices: this.hostServices,
                    style: this.style,
                    isSlicer: options.isSlicer,
                    featureSwitches: this.featureSwitches,
                    slicerType: 1
                }), this.viewModelAdapter && (this.data = this.viewModelAdapter.applyChanges(options.viewport, this.originalData, dataView)), 
                this.updateStyle(this.hasSearchableData), !dataView || !this.data || _.isEmpty(this.data.slicerDataPoints)) return this.itemsContainer.selectAll("*").remove(), 
                void (this.itemsToDisplay = 0);
                this.dataView = dataView, this.currentViewport && options.viewport && (this.currentViewport.height !== options.viewport.height || this.currentViewport.width !== options.viewport.width) && !this.isMaxDimensionsNeedsReCalculate() || this.calculateAndSetMaxItemDimensions(), 
                this.currentViewport = options.viewport, this.itemsToDisplay = this.horizontalSlicerLayout.calculateNumberOfItemsToDisplay(this.element, this.totalItemWidth, this.totalItemHeight, this.getDataPointsCount()), 
                0 !== this.itemsToDisplay && this.renderCore();
            }, HorizontalSlicerRenderer.prototype.renderCore = function() {
                this.horizontalSlicerLayout.renderCore && this.horizontalSlicerLayout.renderCore(this.container);
                var dataPointsLength, itemsToDisplay, dataStartIndex, canScrollRight, canScrollLeft, focusOnExitingRightArrow, focusOnExitingLeftArrow, data = this.data;
                data && data.slicerDataPoints && (this.normalizePosition(), dataPointsLength = this.getDataPointsCount(), 
                itemsToDisplay = this.itemsToDisplay, canScrollRight = (dataStartIndex = this.dataStartIndex) + this.itemsToDisplay <= dataPointsLength - 1, 
                canScrollLeft = 0 < dataStartIndex, focusOnExitingRightArrow = this.container.classed(visuals.HorizontalSlicer.Selectors.CanScrollRight.class) && !canScrollRight && document.activeElement === this.rightNavigationArrow.node(), 
                focusOnExitingLeftArrow = this.container.classed(visuals.HorizontalSlicer.Selectors.CanScrollLeft.class) && !canScrollLeft && document.activeElement === this.leftNavigationArrow.node(), 
                (focusOnExitingRightArrow || focusOnExitingLeftArrow) && this.itemsContainer.node().focus(), 
                this.container.classed(visuals.HorizontalSlicer.Selectors.CanScrollRight.class, canScrollRight), 
                this.container.classed(visuals.HorizontalSlicer.Selectors.CanScrollLeft.class, canScrollLeft), 
                this.renderItems(data.slicerSettings), this.bindInteractivityService(), this.updateItemsContainerLabel(), 
                .8 * dataPointsLength <= dataStartIndex + itemsToDisplay && this.loadMoreData());
            }, HorizontalSlicerRenderer.prototype.updateStyle = function(searchEnabled) {
                var data = this.data, settings = data && data.slicerSettings, searchEnabled = searchEnabled && settings.search.enabled;
                this.searchComponent.update(settings, data && data.searchKey, searchEnabled, !1), 
                settings && this.container.classed(visuals.HorizontalSlicer.Selectors.MultiSelectEnabled.class, !settings.selection.singleSelect);
            }, HorizontalSlicerRenderer.prototype.renderItems = function(slicerSettings) {
                var _this = this, items = this.itemsToDisplay, dataStartIndex = this.dataStartIndex, items = this.data.slicerDataPoints.slice(dataStartIndex, dataStartIndex + items), items = this.horizontalSlicerLayout.bindData(items, this.data, this.itemsContainer), itemsEnterUpdate = items.enter().append("div").classed(visuals.HorizontalSlicer.Selectors.IndividualItemContainer.class, !0).classed("containerBackground", !slicerSettings.items.accessibilityContrastProperties).classed("containerBackgroundContrast", slicerSettings.items.accessibilityContrastProperties).attr("role", "option").attr("tabindex", 0).each(function(imageContainer) {
                    var item = d3.select(this);
                    imageContainer.isImage ? ((imageContainer = item.append("div").classed(visuals.HorizontalSlicer.Selectors.ImageContainer.class, !0)).append("div").classed(visuals.HorizontalSlicer.Selectors.Input.class, !0).append("input").attr("type", "checkbox"), 
                    imageContainer.append("img").classed(visuals.HorizontalSlicer.Selectors.HorizontalSlicerImage.class, !0)) : item.append("div").classed(visuals.SlicerUtil.Selectors.LabelText.class, !0).classed(visuals.HorizontalSlicer.Selectors.FlexDisplay.class, !0);
                }).merge(items);
                itemsEnterUpdate.each(function(d) {
                    var item = d3.select(this);
                    visuals.SlicerUtil.updateDisableState(item, d), item.attr("aria-label", d.tooltip).attr("aria-setsize", -1).attr("aria-posinset", d.levelIndex || 1);
                }), itemsEnterUpdate.attr("aria-selected", function(d) {
                    return !0 === d.selected;
                }), itemsEnterUpdate.order(), itemsEnterUpdate.select(visuals.SlicerUtil.Selectors.LabelText.selector).styles({
                    "padding-left": PixelConverter.toString(DefaultStyleProperties_label.paddingLeft),
                    "padding-right": PixelConverter.toString(DefaultStyleProperties_label.paddingRight)
                }), itemsEnterUpdate.styles({
                    "margin-right": function(d, i) {
                        return _this.horizontalSlicerLayout.getDataPointRightMargin(i, _this.itemsToDisplay);
                    }
                }), this.domHelper.setSlicerTextStyle(itemsEnterUpdate, slicerSettings, this.featureSwitches), 
                items.exit().remove(), this.animationFrameId && window.cancelAnimationFrame(this.animationFrameId), 
                this.animationFrameId = window.requestAnimationFrame(function() {
                    itemsEnterUpdate.select("img").attr("title", function(d) {
                        return d.tooltip;
                    }).attr("src", function(d) {
                        return d.value;
                    }), itemsEnterUpdate.select(visuals.SlicerUtil.Selectors.LabelText.selector).attr("title", function(d) {
                        return d.tooltip;
                    }).text(function(d) {
                        return d.value;
                    });
                    var labels = _this.element.find(visuals.SlicerUtil.Selectors.LabelText.selector), item = labels.first(), itemHeight = item.height(), itemWidth = item.width();
                    labels.each(function(i, element) {
                        powerbi.TextMeasurementService.wordBreakOverflowingText(element, itemWidth, itemHeight);
                    });
                });
            }, HorizontalSlicerRenderer.prototype.bindInteractivityService = function() {
                var itemsContainer, data_1, behaviorOptions, existingSearchKey = visuals.HorizontalSlicer.Selectors.IndividualItemContainer.selector;
                this.selectionHandler && this.body && (itemsContainer = this.body.selectAll(existingSearchKey), 
                data_1 = this.data, (behaviorOptions = this.searchComponent.input).empty() || (existingSearchKey = behaviorOptions.node().value, 
                (_.isEmpty(existingSearchKey) || _.isEmpty(data_1.searchKey)) && behaviorOptions.property("value", data_1.searchKey)), 
                behaviorOptions = {
                    slicerContainer: this.container,
                    itemsContainer: itemsContainer,
                    settings: data_1.slicerSettings,
                    searchInput: behaviorOptions,
                    style: this.style
                }, this.selectionHandler.bind(data_1.retainedDataPoints, {
                    behaviorOptions: behaviorOptions,
                    orientation: 1
                })), this.behavior.renderSelection();
            }, HorizontalSlicerRenderer.prototype.normalizePosition = function() {
                var lastStartIndex = this.getDataPointsCount(), lastStartIndex = this.horizontalSlicerLayout.getLastStartIndex(this.itemsToDisplay, lastStartIndex);
                this.dataStartIndex = Utility.clampValue(this.dataStartIndex, 0, lastStartIndex);
            }, HorizontalSlicerRenderer.prototype.bindNavigationEvents = function() {
                this.registerMouseWheelScrollEvents(), this.registerMouseClickEvents();
            }, HorizontalSlicerRenderer.prototype.registerMouseClickEvents = function() {
                var _this = this, rightNavigationArrow = this.container.selectAll(visuals.HorizontalSlicer.Selectors.RightNavigationArrow.selector), leftNavigationArrow = this.container.selectAll(visuals.HorizontalSlicer.Selectors.LeftNavigationArrow.selector);
                rightNavigationArrow.on("click", function() {
                    _this.scrollRight();
                }), leftNavigationArrow.on("click", function() {
                    _this.scrollLeft();
                });
            }, HorizontalSlicerRenderer.prototype.registerMouseWheelScrollEvents = function() {
                var _this = this, scrollableElement = this.body.node();
                scrollableElement.addEventListener("mousewheel", function(e) {
                    _this.onMouseWheel(e.wheelDelta);
                }), scrollableElement.addEventListener("DOMMouseScroll", function(e) {
                    _this.onMouseWheel(e.detail);
                });
            }, HorizontalSlicerRenderer.prototype.onMouseWheel = function(wheelDelta) {
                wheelDelta < 0 ? this.scrollRight() : 0 < wheelDelta && this.scrollLeft();
            }, HorizontalSlicerRenderer.prototype.scrollRight = function() {
                var lastItemStartIndex = this.horizontalSlicerLayout.getLastStartIndex(this.itemsToDisplay, this.getDataPointsCount());
                this.dataStartIndex !== lastItemStartIndex && (this.dataStartIndex += this.horizontalSlicerLayout.getScrollSize(this.itemsToDisplay), 
                this.dataStartIndex = Math.min(this.dataStartIndex, lastItemStartIndex), this.renderCore());
            }, HorizontalSlicerRenderer.prototype.scrollLeft = function() {
                0 !== this.dataStartIndex && (this.dataStartIndex -= this.horizontalSlicerLayout.getScrollSize(this.itemsToDisplay), 
                this.dataStartIndex = Math.max(this.dataStartIndex, 0), this.renderCore());
            }, HorizontalSlicerRenderer.prototype.getScaledTextWidth = function(textSize) {
                return textSize / jsCommon.TextSizeDefaults.TextSizeMin * 80;
            }, HorizontalSlicerRenderer.prototype.isMaxDimensionsNeedsReCalculate = function() {
                if (!this.lastCalculatedProperties) return !0;
                var fontFamily = this.data.slicerSettings, outlineWeight = fontFamily.general.outlineWeight, lastProps = fontFamily.slicerText, outline = lastProps.outline, outlineStyle = lastProps.outlineStyle, textSize = lastProps.textSize, fontFamily = lastProps.fontFamily, lastProps = this.lastCalculatedProperties;
                return lastProps.textSize !== textSize || lastProps.fontFamily !== fontFamily || lastProps.outline !== outline || lastProps.outlineStyle !== outlineStyle || lastProps.outlineWeight !== outlineWeight || lastProps.hasImage !== this.data.hasImages;
            }, HorizontalSlicerRenderer.prototype.calculateAndSetMaxItemDimensions = function() {
                var data = this.data, result = this.data.slicerSettings, itemPadding = this.getDataPointsCount(), maxItemWidth = 0, maxItemHeight = 0, outline = result.slicerText.outline, outlineStyle = result.slicerText.outlineStyle, outlineWeight = result.general.outlineWeight;
                if (0 === itemPadding) maxItemHeight = maxItemWidth = 0; else if (data.hasImages) maxItemHeight = maxItemWidth = 100; else {
                    var dataPoints = data.slicerDataPoints, sampleSize = Math.min(itemPadding, 50), properties = jQuery.extend(!0, {}, this.textProperties), textSize = result.slicerText.textSize, fontFamily = result.slicerText.fontFamily;
                    properties.fontSize = PixelConverter.fromPoint(textSize), properties.fontFamily = fontFamily, 
                    properties.text = "Sample";
                    for (var getMaxWordWidth = jsCommon.WordBreaker.getMaxWordWidth, textHeight = powerbi.TextMeasurementService.measureSvgTextHeight(properties), i = 0; i < sampleSize; i++) {
                        var lines = dataPoints[i].value;
                        properties.text = lines;
                        maxItemWidth = Math.max(maxItemWidth, getMaxWordWidth(lines, powerbi.TextMeasurementService.measureSvgTextWidth, properties)), 
                        lines = Math.min(2, jsCommon.WordBreaker.wordCount(lines)), maxItemHeight = Math.max(maxItemHeight, textHeight * lines);
                    }
                    maxItemWidth = Math.min(maxItemWidth, this.getScaledTextWidth(textSize));
                }
                itemPadding = DefaultStyleProperties_label.paddingLeft + DefaultStyleProperties_label.paddingRight + DefaultStyleProperties_label.marginRight, 
                result = this.featureSwitches.outlineDropdownToCheckboxes ? outlineStyle : outline, 
                result = this.domHelper.getRowsOutlineWidth(result, outlineWeight);
                this.totalItemWidth = maxItemWidth + itemPadding + result, this.totalItemHeight = maxItemHeight + itemPadding + result;
                result = this.horizontalSlicerLayout.calculateTotalItemDimensions(this.totalItemWidth, this.totalItemHeight);
                this.totalItemWidth = result.width, this.totalItemHeight = result.height, this.lastCalculatedProperties = {
                    outline: outline,
                    outlineStyle: outlineStyle,
                    outlineWeight: outlineWeight,
                    textSize: textSize,
                    fontFamily: fontFamily,
                    hasImage: data.hasImages
                };
            }, HorizontalSlicerRenderer.prototype.focusNextElement = function(forward) {
                var itemContainer, element, option = this.horizontalSlicerLayout.findNextElement(document.activeElement, forward);
                option || (forward ? this.scrollRight() : this.scrollLeft(), itemContainer = this.itemsContainer.node(), 
                element = document.activeElement, itemContainer.contains(element) || (element = itemContainer), 
                option = this.horizontalSlicerLayout.findNextElement(element, forward)), option && option.focus();
            }, HorizontalSlicerRenderer.prototype.updateItemsContainerLabel = function() {
                this.itemsContainer.attr("aria-label", this.data.categorySourceName);
            }, HorizontalSlicerRenderer.prototype.getDataPointsCount = function() {
                return _.size(this.data.slicerDataPoints);
            }, HorizontalSlicerRenderer.prototype.addWarnings = function(warningBuilder) {
                visuals.SlicerUtil.addWarningsToSlicerVisual(this.data.warnings, warningBuilder);
            }, HorizontalSlicerRenderer;
        }();
        visuals.HorizontalSlicerRenderer = HorizontalSlicerRenderer;
        var HorizontalSlicerLayout = function() {
            function HorizontalSlicerLayout() {}
            return HorizontalSlicerLayout.prototype.bindData = function(materializedDataPoints, data, itemsContainer) {
                return itemsContainer.selectAll(visuals.HorizontalSlicer.Selectors.IndividualItemContainer.selector).data(materializedDataPoints, function(d) {
                    return visuals.SlicerUtil.getDataPointKey(d);
                });
            }, HorizontalSlicerLayout.prototype.calculateTotalItemDimensions = function(totalItemWidth, totalItemHeight) {
                return {
                    width: totalItemWidth,
                    height: totalItemHeight
                };
            }, HorizontalSlicerLayout.prototype.calculateNumberOfItemsToDisplay = function(availableWidth, numberOfItems, totalItemsHeight, dataPointsLength) {
                availableWidth = availableWidth.find(visuals.SlicerUtil.Selectors.Body.selector).width() - 2 * HorizontalSlicerLayout.NavigationArrowWidth;
                if (0 === numberOfItems) return 0;
                numberOfItems = Math.round(availableWidth / numberOfItems);
                return Utility.clampValue(numberOfItems, 1, dataPointsLength);
            }, HorizontalSlicerLayout.prototype.findNextElement = function(element, forward) {
                return $(element).hasClass(visuals.HorizontalSlicer.Selectors.ItemsContainer.class) ? forward ? element.firstElementChild : void 0 : forward ? element.nextElementSibling : element.previousElementSibling;
            }, HorizontalSlicerLayout.prototype.getNavigationArrowsClass = function(selection, isLeft) {
                isLeft ? selection.classed(visuals.HorizontalSlicer.Selectors.NavigationArrow.class, !0).classed(visuals.HorizontalSlicer.Selectors.LeftNavigationArrow.class, !0) : selection.classed(visuals.HorizontalSlicer.Selectors.NavigationArrow.class, !0).classed(visuals.HorizontalSlicer.Selectors.RightNavigationArrow.class, !0);
            }, HorizontalSlicerLayout.prototype.getScrollSize = function(itemsToDisplay) {
                return 1 === itemsToDisplay ? itemsToDisplay : itemsToDisplay - 1;
            }, HorizontalSlicerLayout.prototype.getLastStartIndex = function(itemsToDisplay, dataPointsLength) {
                return dataPointsLength - itemsToDisplay;
            }, HorizontalSlicerLayout.prototype.getDataPointRightMargin = function(index, itemsToDisplay) {
                return this.isLastRowItem(index, itemsToDisplay) ? "0px" : PixelConverter.toString(DefaultStyleProperties_label.marginRight);
            }, HorizontalSlicerLayout.prototype.isLastRowItem = function(fieldIndex, columnsToDisplay) {
                return fieldIndex === columnsToDisplay - 1;
            }, HorizontalSlicerLayout.NavigationArrowWidth = 19, HorizontalSlicerLayout;
        }();
        visuals.HorizontalSlicerLayout = HorizontalSlicerLayout;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var HorizontalSlicerWebBehavior = function() {
            function HorizontalSlicerWebBehavior() {}
            return HorizontalSlicerWebBehavior.prototype.bindEvents = function(options, selectionHandler) {
                this.selectionHandler = selectionHandler, this.slicerSettings = options.settings, 
                this.style = options.style, this.items = options.itemsContainer, visuals.SlicerWebBehavior.bindSlicerEvents(options, this.items, selectionHandler, this.slicerSettings);
            }, HorizontalSlicerWebBehavior.prototype.renderSelection = function() {
                visuals.SlicerWebBehavior.setSelectionOnSlicerItems(this.items, this.selectionHandler, this.style);
            }, HorizontalSlicerWebBehavior;
        }();
        visuals.HorizontalSlicerWebBehavior = HorizontalSlicerWebBehavior;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var Builder = powerbi.visuals.builder, SQExprBuilder = powerbi.data.SQExprBuilder, StringExntesions = jsCommon.StringExtensions;
        visuals.NumericSlicerOptions = powerbi.createEnumType([ {
            value: visuals.slicerMode.between,
            displayName: function(resources) {
                return resources.get("Visual_SliderMode_Between");
            }
        }, {
            value: visuals.slicerMode.before,
            displayName: function(resources) {
                return resources.get("Visual_SliderMode_LessThanEqualLabel");
            }
        }, {
            value: visuals.slicerMode.after,
            displayName: function(resources) {
                return resources.get("Visual_SliderMode_GreaterThanEqualLabel");
            }
        }, {
            value: visuals.slicerMode.basic,
            displayName: function(resources) {
                return resources.get("Visual_SliderMode_Basic");
            }
        }, {
            value: visuals.slicerMode.dropdown,
            displayName: function(resources) {
                return resources.get("Visual_SliderMode_Dropdown");
            }
        }, {
            value: visuals.slicerMode.single,
            displayName: function(resources) {
                return resources.get("Visual_SliderMode_SingleVal");
            }
        } ]);
        var NumericSlicer = function() {
            function NumericSlicer(options) {
                this.hostServices = options.hostServices, this.startInputLabel = this.hostServices.getLocalizedString("Slicer_StartLabel"), 
                this.endInputLabel = this.hostServices.getLocalizedString("Slicer_EndLabel");
            }
            return NumericSlicer.prototype.createRange = function(data) {
                return new (data.isSourceInteger ? visuals.NonScaledNumericRange : visuals.NumericRange)(data.bounds.min, data.bounds.max, data.value.min, data.value.max);
            }, NumericSlicer.prototype.areEqual = function(val1, val2) {
                return val1 === val2;
            }, NumericSlicer.prototype.defaultValue = function() {
                return 0;
            }, NumericSlicer.prototype.startProperty = function() {
                return visuals.slicerProps.data.numericStart;
            }, NumericSlicer.prototype.endProperty = function() {
                return visuals.slicerProps.data.numericEnd;
            }, NumericSlicer.prototype.parseSingleSliderValue = function(value, dataPoints) {
                value = dataPoints[value];
                return {
                    min: value,
                    max: value
                };
            }, NumericSlicer.prototype.formatValue = function(value, formatter) {
                return formatter ? formatter.format(value) : value.toString();
            }, NumericSlicer.prototype.getSliderOptions = function(data, singleValue) {
                return singleValue ? {
                    min: 0,
                    max: data.dataPoints.length - 1,
                    step: 1
                } : data.isSourceInteger ? {
                    min: data.bounds.min,
                    max: data.bounds.max,
                    step: 1
                } : {
                    min: data.bounds.min,
                    max: data.bounds.max,
                    step: null
                };
            }, NumericSlicer.prototype.inputStyleProperties = function() {
                return {
                    background: visuals.slicerProps.numericInputStyle.background,
                    fontColor: visuals.slicerProps.numericInputStyle.fontColor,
                    textSize: visuals.slicerProps.numericInputStyle.textSize,
                    fontFamily: visuals.slicerProps.numericInputStyle.fontFamily,
                    bold: visuals.slicerProps.numericInputStyle.bold,
                    italic: visuals.slicerProps.numericInputStyle.italic,
                    underline: visuals.slicerProps.numericInputStyle.underline
                };
            }, NumericSlicer.prototype.parseInput = function(value, dataPoints, singleValue) {
                value = parseFloat(value);
                return !singleValue || !$.isNumeric(value) || -1 < _.indexOf(dataPoints, value) ? value : this.findClosestPoint(value, dataPoints);
            }, NumericSlicer.prototype.findClosestPoint = function(value, dataPoints) {
                for (var result = _.head(dataPoints), difference = Math.abs(result - value), i = 1; i < dataPoints.length; i++) {
                    var currentDifference = Math.abs(dataPoints[i] - value);
                    currentDifference < difference && (difference = currentDifference, result = dataPoints[i]);
                }
                return result;
            }, NumericSlicer.prototype.isInputValid = function(inputValue, range, type, singleValue) {
                return !(!$.isNumeric(inputValue) || 0 === type && inputValue > range.max || 1 === type && inputValue < range.min || singleValue && inputValue === range.min);
            }, NumericSlicer.prototype.setRange = function(value, formatter, start, end, type, bounds) {
                value.min, value.max, null == type ? (start.val(formatter.format(value.min)), start.attr("aria-label", StringExntesions.format(this.startInputLabel, formatter.format(bounds.min), formatter.format(value.max))), 
                end.val(formatter.format(value.max)), end.attr("aria-label", StringExntesions.format(this.endInputLabel, formatter.format(value.min), formatter.format(bounds.max)))) : 0 === type ? (start.val(formatter.format(value.min)), 
                start.attr("aria-label", StringExntesions.format(this.startInputLabel, formatter.format(bounds.min), formatter.format(bounds.max)))) : 1 === type && (end.val(formatter.format(value.max)), 
                end.attr("aria-label", StringExntesions.format(this.endInputLabel, formatter.format(bounds.min), formatter.format(bounds.max))));
            }, NumericSlicer.prototype.createInputElement = function(control, type) {
                return InJs.DomFactory.textBox().attr("type", "text").attr(visuals.RangeSlicerConstants.DisableDragAttribute, "true").addClass(visuals.RangeSlicerConstants.InputClass.class).appendTo(control);
            }, NumericSlicer.prototype.enumerateObjectInstances = function(instance, data, featureSwitches) {
                if ("numericInputStyle" === instance.objectName && data && data.inputStyle) {
                    var numericProps = visuals.slicerProps.numericInputStyle, instance = {
                        selector: null,
                        objectName: "numericInputStyle",
                        properties: {
                            fontColor: data.inputStyle.fontColor,
                            background: data.inputStyle.background,
                            textSize: data.inputStyle.textSize,
                            fontFamily: data.inputStyle.fontFamily
                        }
                    };
                    return featureSwitches && featureSwitches.enableBIU && (instance.properties[numericProps.bold.propertyName] = data.inputStyle.labelBold, 
                    instance.properties[numericProps.italic.propertyName] = data.inputStyle.labelItalic, 
                    instance.properties[numericProps.underline.propertyName] = data.inputStyle.labelUnderline), 
                    [ instance ];
                }
            }, NumericSlicer.prototype.getValuesCard = function(data, featureSwitches) {
                var _this = this, numericProps = visuals.slicerProps.numericInputStyle, valuesCardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("values"), "Role_DisplayName_Values", [ numericProps.fontFamily, numericProps.textSize, numericProps.fontColor, numericProps.background, numericProps.bold, numericProps.italic, numericProps.underline ], function(key) {
                    return _this.hostServices.getLocalizedString(key);
                }), fontControlBuilder = new Builder.FontControlBuilder().withFontFamily({
                    descriptor: numericProps.fontFamily,
                    value: data.inputStyle.fontFamily
                }).withFontSizeProperties({
                    descriptor: numericProps.textSize,
                    value: data.inputStyle.textSize
                });
                featureSwitches && featureSwitches.enableBIU && fontControlBuilder.withBold({
                    descriptor: numericProps.bold,
                    value: data.inputStyle.labelBold
                }).withItalic({
                    descriptor: numericProps.italic,
                    value: data.inputStyle.labelItalic
                }).withUnderline({
                    descriptor: numericProps.underline,
                    value: data.inputStyle.labelUnderline
                });
                var fontControl = fontControlBuilder.build();
                return valuesCardBuilder.addGroup("values", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Values"), groupBuilder.addCompositeSlice("fontselector", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("color", function() {
                        var colordata = {
                            value: data.inputStyle.fontColor
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: numericProps.fontColor,
                            value: colordata
                        }).build();
                    });
                }).addGroup("background", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Background").addSimpleSlice("color", function() {
                        var colordata = {
                            value: data.inputStyle.background
                        };
                        return new Builder.ColorPickerBuilder({
                            descriptor: numericProps.background,
                            value: colordata
                        }).build();
                    });
                }), valuesCardBuilder.build();
            }, NumericSlicer.prototype.getDataPointsForSingleValueRange = function(result) {
                result = result.categorical.categories[0], result = result && result.values || [], 
                result = _.filter(result, function(n) {
                    return $.isNumeric(n);
                }), result = _.sortBy(result, function(n) {
                    return n;
                });
                return result = _.uniq(result);
            }, NumericSlicer.prototype.filterExpr = function(filter) {
                return {
                    lower: SQExprBuilder.double(filter.min),
                    upper: SQExprBuilder.double(filter.max)
                };
            }, NumericSlicer.prototype.comparisonKind = function() {
                return {
                    lower: 2,
                    upper: 4
                };
            }, NumericSlicer;
        }();
        visuals.NumericSlicer = NumericSlicer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var Builder = powerbi.visuals.builder, Color = jsCommon.Color, CssConstants = jsCommon.CssConstants, FontSize = visuals.Units.FontSize, PixelConverter = jsCommon.PixelConverter, SQExprBuilder = powerbi.data.SQExprBuilder, DefaultFontFamily = "Segoe UI,wf_segoe-ui_normal,helvetica,arial,sans-serif", RangeClass = CssConstants.createClassAndSelector("date-slicer-range"), ContainerClass = CssConstants.createClassAndSelector("date-slicer"), HeadClass = CssConstants.createClassAndSelector("date-slicer-head"), SliderClass = CssConstants.createClassAndSelector("date-slicer-slider"), ControlClass = CssConstants.createClassAndSelector("date-slicer-control"), RoundHandlesClass = CssConstants.createClassAndSelector("roundHandles"), WrapRangeBoxesClass = CssConstants.createClassAndSelector("wrap");
        visuals.DateSlicerClass = CssConstants.createClassAndSelector("date-slicer-datepicker"), 
        visuals.DateSlicerWrapperClass = CssConstants.createClassAndSelector("date-slicer-datepicker-wrapper");
        var RangeSlicerConstants, noUiConnectClass = CssConstants.createClassAndSelector("noUi-connect"), noUiBackgroundClass = CssConstants.createClassAndSelector("noUi-background"), noUiHandleClass = CssConstants.createClassAndSelector("noUi-handle");
        !function(RangeSlicerConstants) {
            RangeSlicerConstants.InputClass = CssConstants.createClassAndSelector("date-slicer-input"), 
            RangeSlicerConstants.DisableDragAttribute = "drag-resize-disabled";
        }(RangeSlicerConstants = visuals.RangeSlicerConstants || (visuals.RangeSlicerConstants = {})), 
        visuals.RangeSlicerSupportedModes = [ visuals.slicerMode.after, visuals.slicerMode.before, visuals.slicerMode.between ];
        var RangeSlicer = function() {
            function RangeSlicer(options, renderer, singleValue, isCategorySourceNumeric, viewModelAdapter) {
                this.viewModelAdapter = viewModelAdapter, this.isRendered = !1, options && (this.hostServices = options.hostServices, 
                this.preventTextSelection = options.preventTextSelection, this.featureSwitches = options.featureSwitches), 
                this.rangeSlicerRenderer = renderer, this.singleValue = singleValue, this.isCategorySourceNumeric = isCategorySourceNumeric, 
                this.useModernDatePicker = !this.isCategorySourceNumeric && this.featureSwitches.useModernDatePickerSlicer;
            }
            return Object.defineProperty(RangeSlicer.prototype, "defaultSliderMode", {
                get: function() {
                    return this.singleValue ? visuals.slicerMode.single : visuals.slicerMode.between;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(RangeSlicer.prototype, "activeMode", {
                get: function() {
                    return this.data.mode || this.defaultSliderMode;
                },
                enumerable: !1,
                configurable: !0
            }), RangeSlicer.prototype.init = function(options, element) {
                this.host = element, this.style = options.visualInitOptions.style, this.featureSwitches = options.visualInitOptions.featureSwitches;
            }, RangeSlicer.prototype.onModeChange = function(mode) {
                -1 < _.indexOf(visuals.RangeSlicerSupportedModes, mode) ? this.data && this.updateMode(mode) : visuals.SlicerUtil.clearSlicerFilter(this.hostServices, mode);
            }, RangeSlicer.prototype.onClear = function() {
                var message;
                this.data && this.data.initialValue && (this.data.value = this.data.initialValue, 
                this.data.state = 0, this.updateProperties(), message = this.hostServices.getLocalizedString("Slicer_ClearSelectionsCleared"), 
                this.hostServices.alertWithDebounce("announce-clear-selection", message));
            }, RangeSlicer.prototype.render = function(options) {
                if (_.isEmpty(options.dataView)) this.hostServices.setWarnings([ new visuals.DateSlicerNoDataWarning() ]); else {
                    if (this.dataView = options.dataView, this.reader = powerbi.data.createDataViewCategoricalReaderAdvanced(this.dataView), 
                    this.originalData = this.data = this.converter(this.reader, options), !this.isMetaColumnsValid(this.reader)) return this.hostServices.setWarnings([ new visuals.DateSlicerNoDataWarning() ]), 
                    void (this.isRendered && this.disableSlicer());
                    this.isRendered && this.enableSlicer(), this.viewModelAdapter && (this.data = this.viewModelAdapter.applyChanges(options.viewport, this.originalData, this.dataView)), 
                    this.isRendered || this.initControls(), this.rangeSlicerRenderer.setRange(this.data.value, this.data.formatter, this.start, this.end, null, this.data.bounds), 
                    this.range = this.rangeSlicerRenderer.createRange(this.data), this.updateInputControls(), 
                    this.updateSlider(this.activeMode), this.updateProperties(), this.isDataColumnsValid(this.reader) || (this.hostServices.setWarnings([ new visuals.DateSlicerNoDataWarning() ]), 
                    this.isRendered && this.disableSlicer());
                }
            }, RangeSlicer.prototype.hasSlider = function() {
                return !!this.data && this.data.sliderSettings.show;
            }, RangeSlicer.prototype.supportsOrientation = function() {
                return !1;
            }, RangeSlicer.prototype.enumerateObjectInstances = function(options) {
                var data = this.originalData;
                return "date" === options.objectName || "numericInputStyle" === options.objectName ? this.rangeSlicerRenderer.enumerateObjectInstances(options, data, this.featureSwitches) : "slider" === options.objectName && data ? [ {
                    selector: null,
                    objectName: "slider",
                    properties: {
                        show: data.sliderSettings.show,
                        color: data.sliderSettings.color
                    },
                    propertyInstanceKind: {
                        color: this.featureSwitches.expressionBasedFormatting ? 3 : 1
                    }
                } ] : void 0;
            }, RangeSlicer.prototype.getSlicerSettingsCardOptions = function() {}, RangeSlicer.prototype.getValuesCard = function() {
                var data = this.originalData;
                if (data) return this.rangeSlicerRenderer.getValuesCard(data, this.featureSwitches);
            }, RangeSlicer.prototype.getAdditionalCards = function() {
                var _this = this, data = this.originalData;
                if (data) {
                    var sliderProps = visuals.slicerProps.slider, sliderCardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("slider"), "Slicer_Slider", [ sliderProps.show, sliderProps.color ], function(key) {
                        return _this.hostServices.getLocalizedString(key);
                    });
                    return sliderCardBuilder.addTopLevelToggle("show", function() {
                        return new visuals.builder.ToggleSwitchBuilder({
                            descriptor: sliderProps.show,
                            value: data.sliderSettings.show
                        }).build();
                    }).addGroup("colors", function(groupBuilder) {
                        groupBuilder.withDisplayName("Generic_Color").addSimpleSlice("color", function() {
                            var colordata = {
                                value: data.sliderSettings.color
                            };
                            return new Builder.ColorPickerBuilder({
                                descriptor: __assign(__assign({}, sliderProps.color), {
                                    instanceKind: _this.featureSwitches.expressionBasedFormatting ? 3 : 1
                                }),
                                value: colordata
                            }).build();
                        });
                    }), [ sliderCardBuilder.build() ];
                }
            }, RangeSlicer.prototype.isDataColumnsValid = function(metadata) {
                if (this.singleValue) return 0 < metadata.columns.getCategoryCount();
                metadata = metadata.columns.getMetadataColumns(visuals.slicerRoles.value);
                if (!_.isEmpty(metadata)) {
                    metadata = metadata[0];
                    if (metadata.aggregates && null != metadata.aggregates.min && null != metadata.aggregates.max) return !0;
                }
                return !1;
            }, RangeSlicer.prototype.isMetaColumnsValid = function(metadataColumns) {
                metadataColumns = metadataColumns.columns.getMetadataColumns(visuals.slicerRoles.value);
                return !_.isEmpty(metadataColumns);
            }, RangeSlicer.prototype.converter = function(slicerNumericInputFontProperties, options) {
                var result = {
                    state: 0,
                    mode: null,
                    formatter: null,
                    identity: null,
                    value: null,
                    initialValue: null,
                    bounds: null,
                    filter: null,
                    properties: {
                        filter: null
                    },
                    sliderSettings: (inputProps = this.style, {
                        color: visuals.ColorHelper.getThemeColor(inputProps, "foregroundNeutralSecondary"),
                        show: !0,
                        drawRoundSliderHandles: !1,
                        minSliderVisibilityHeight: 0,
                        minSliderVisibilityWidth: 150
                    }),
                    inputStyle: function(style) {
                        return {
                            textSize: 9,
                            fontFamily: visuals.Font.Family.regular.css,
                            fontColor: visuals.ColorHelper.getThemeColor(style, "foregroundDark"),
                            background: null,
                            labelBold: !1,
                            labelItalic: !1,
                            labelUnderline: !1
                        };
                    }(this.style),
                    dataPoints: null,
                    wrapRangeBoxes: !1,
                    isSourceInteger: !1,
                    hideDatePickerButton: !0
                }, metadata = slicerNumericInputFontProperties.columns.getMetadataColumns(visuals.slicerRoles.value)[0], colorHelper = visuals.valueFormatter.getFormatString(metadata, visuals.slicerProps.general.formatString);
                result.isSourceInteger = !0 === metadata.type.integer, result.formatter = visuals.valueFormatter.createDefaultFormatter(colorHelper), 
                result.identity = metadata.expr;
                var inputProps = this.rangeSlicerRenderer.defaultValue(), colorHelper = this.rangeSlicerRenderer.defaultValue();
                this.singleValue ? (result.dataPoints = this.rangeSlicerRenderer.getDataPointsForSingleValueRange(this.dataView), 
                0 < result.dataPoints.length && (inputProps = result.dataPoints[0], colorHelper = result.dataPoints[result.dataPoints.length - 1])) : (null != (color = metadata.aggregates).min && (inputProps = color.min), 
                null != color.max && (colorHelper = color.max)), result.value = {
                    min: inputProps,
                    max: colorHelper
                }, result.initialValue = {
                    min: inputProps,
                    max: colorHelper
                }, result.bounds = {
                    min: result.value.min,
                    max: result.value.max
                };
                var color = slicerNumericInputFontProperties.objects.getStaticObjects();
                color ? (result.filter = powerbi.DataViewObjects.getValue(color, visuals.slicerProps.general.filter), 
                result.properties.start = result.filter ? powerbi.DataViewObjects.getValue(color, this.rangeSlicerRenderer.startProperty(), null) : null, 
                result.properties.end = result.filter ? powerbi.DataViewObjects.getValue(color, this.rangeSlicerRenderer.endProperty(), null) : null, 
                result.properties.mode = powerbi.DataViewObjects.getValue(color, visuals.slicerProps.data.mode, null), 
                result.hideDatePickerButton = powerbi.DataViewObjects.getValue(color, visuals.slicerProps.date.hideDatePickerButton, !0), 
                inputProps = this.rangeSlicerRenderer.inputStyleProperties(), colorHelper = visuals.ColorHelper.create(this.style), 
                slicerNumericInputFontProperties = this.rangeSlicerRenderer instanceof visuals.NumericSlicer ? powerbi.DataViewObjects.getObject(color, "numericInputStyle") : powerbi.DataViewObjects.getObject(color, "date"), 
                slicerNumericInputFontProperties = visuals.FontProperties.createFromObjectOrStyle(slicerNumericInputFontProperties, {
                    color: "fontColor",
                    family: "fontFamily",
                    size: "textSize"
                }, colorHelper, this.style, "foregroundDark", "smallLabel", {
                    color: result.inputStyle.fontColor,
                    family: result.inputStyle.fontFamily,
                    size: FontSize.createFromPt(result.inputStyle.textSize)
                }), result.inputStyle.fontColor = slicerNumericInputFontProperties.color, result.inputStyle.fontFamily = slicerNumericInputFontProperties.family, 
                result.inputStyle.textSize = slicerNumericInputFontProperties.size.pt, result.inputStyle.background = colorHelper.getColorForPropertyWithDefaultColor(color, inputProps.background, result.inputStyle.background), 
                result.inputStyle.labelBold = powerbi.DataViewObjects.getValue(color, inputProps.bold, result.inputStyle.labelBold), 
                result.inputStyle.labelItalic = powerbi.DataViewObjects.getValue(color, inputProps.italic, result.inputStyle.labelItalic), 
                result.inputStyle.labelUnderline = powerbi.DataViewObjects.getValue(color, inputProps.underline, result.inputStyle.labelUnderline), 
                result.sliderSettings.color = colorHelper.getColorForPropertyWithDefaultColor(color, visuals.slicerProps.slider.color, result.sliderSettings.color), 
                result.sliderSettings.show = powerbi.DataViewObjects.getValue(color, visuals.slicerProps.slider.show, result.sliderSettings.show), 
                null !== result.properties.start && (result.state |= 1, result.value.min = result.properties.start, 
                result.properties.start < result.bounds.min && (result.bounds.min = result.properties.start)), 
                null !== result.properties.end && (result.state = result.state |= 2, result.value.max = result.properties.end, 
                result.properties.end > result.bounds.max && (result.bounds.max = result.properties.end)), 
                result.value.min > result.bounds.max && (result.value.max = result.bounds.max = result.value.min), 
                result.value.max < result.bounds.min && (result.value.min = result.bounds.min = result.value.max), 
                null != result.properties.mode && (result.mode = result.properties.mode), result.filter && (result.properties.filter = {
                    min: result.value.min,
                    max: result.value.max
                })) : (result.state = 0, result.properties.start = null, result.properties.end = null, 
                result.properties.mode = null);
                color = Color.parseColorString(result.sliderSettings.color);
                return result.sliderSettings.activeColor = Color.calculateHighlightColor(color, .5, .2), 
                result.sliderSettings.hoverColor = Color.hexString(Color.darken(color, 100)), result.sliderSettings.label = options.restatement, 
                result.properties.bounds = {
                    min: result.bounds.min,
                    max: result.bounds.max
                }, result;
            }, RangeSlicer.prototype.initControls = function() {
                this.isRendered = !0, this.createHtmlControls(), this.updateMode(this.data.mode);
            }, RangeSlicer.prototype.createHtmlControls = function() {
                var _this = this;
                this.container = InJs.DomFactory.div().addClass(ContainerClass.class).appendTo(this.host), 
                this.container.on("keyup keydown", function(event) {
                    9 !== event.keyCode && 27 !== event.keyCode && event.stopPropagation();
                });
                var enableHoverClass = InJs.DomFactory.div().addClass(HeadClass.class).css(this.getFontStyles()).appendTo(this.container), enableHoverClass = InJs.DomFactory.div().addClass(RangeClass.class).appendTo(enableHoverClass);
                this.startContainer = InJs.DomFactory.div().addClass(ControlClass.class).appendTo(enableHoverClass), 
                this.endContainer = InJs.DomFactory.div().addClass(ControlClass.class).appendTo(enableHoverClass), 
                this.useModernDatePicker ? (this.data.value.min, Date, this.data.value.max, Date, 
                this.data.bounds.min, Date, this.data.bounds.max, Date, this.startComponentRef = this.hostServices.getUIComponentFactory().createDatePicker(this.startContainer.get(0), this.data.value.min, function() {
                    return _this.onRangeChange(0);
                }, jsCommon.Utility.generateGuid(), this.data.bounds.min, this.data.bounds.max, this.data.hideDatePickerButton), 
                this.endComponentRef = this.hostServices.getUIComponentFactory().createDatePicker(this.endContainer.get(0), this.data.value.max, function() {
                    return _this.onRangeChange(1);
                }, jsCommon.Utility.generateGuid(), this.data.bounds.min, this.data.bounds.max, this.data.hideDatePickerButton), 
                this.start = this.startComponentRef.datePickerElement.find(":input").first(), this.end = this.endComponentRef.datePickerElement.find(":input").first(), 
                this.data.hideDatePickerButton ? (this.start.addClass(RangeSlicerConstants.InputClass.class), 
                this.end.addClass(RangeSlicerConstants.InputClass.class)) : (this.start.addClass(visuals.DateSlicerClass.class), 
                this.startComponentRef.datePickerElement.addClass(visuals.DateSlicerWrapperClass.class), 
                this.end.addClass(visuals.DateSlicerClass.class), this.endComponentRef.datePickerElement.addClass(visuals.DateSlicerWrapperClass.class))) : (this.start = this.rangeSlicerRenderer.createInputElement(this.startContainer, 0), 
                this.end = this.rangeSlicerRenderer.createInputElement(this.endContainer, 1)), this.rangeSlicerRenderer.addAriaDescription && (this.rangeSlicerRenderer.addAriaDescription(this.start), 
                this.rangeSlicerRenderer.addAriaDescription(this.end)), visuals.SlicerUtil.enableHover() && (enableHoverClass = visuals.SlicerUtil.Selectors.EnableHover.class, 
                this.start.addClass(enableHoverClass), this.end.addClass(enableHoverClass)), this.bindEventHandlersToInputElements(), 
                this.sliderContainer = InJs.DomFactory.div().addClass(SliderClass.class).appendTo(this.container);
            }, RangeSlicer.prototype.bindEventHandlersToInputElements = function() {
                var _this = this;
                this.start.on("click touchend contextmenu", function(event) {
                    event.stopPropagation();
                }), this.end.on("click touchend contextmenu", function(event) {
                    event.stopPropagation();
                }), this.start.on("change", function(event) {
                    _this.onRangeChange(0);
                }), this.start.on("keyup", function(event) {
                    13 === event.which && (_this.start.blur(), _this.start.focus());
                }), this.start.on("focus", function(event) {
                    _this.singleValue && !_this.data.filter || (_this.useModernDatePicker ? (_this.data.value.min, 
                    Date, _this.startComponentRef.writeValue(_this.data.value.min)) : _this.start.val(_this.rangeSlicerRenderer.formatValue(_this.data.value.min, null))), 
                    _this.preventTextSelection || _this.start.select();
                }), this.start.on("blur", function(event) {
                    _this.singleValue && !_this.data.filter || (_this.useModernDatePicker ? (_this.data.value.min, 
                    Date, _this.startComponentRef.writeValue(_this.data.value.min)) : _this.start.val(_this.rangeSlicerRenderer.formatValue(_this.data.value.min, _this.data.formatter)));
                }), this.end.on("change", function(event) {
                    _this.onRangeChange(1);
                }), this.end.on("keyup", function(event) {
                    13 === event.which && (_this.end.blur(), _this.end.focus());
                }), this.end.on("focus", function(event) {
                    _this.useModernDatePicker ? (_this.data.value.max, Date, _this.endComponentRef.writeValue(_this.data.value.max)) : _this.end.val(_this.rangeSlicerRenderer.formatValue(_this.data.value.max, null)), 
                    _this.preventTextSelection || _this.end.select();
                }), this.end.on("blur", function(event) {
                    _this.useModernDatePicker ? (_this.data.value.max, Date, _this.endComponentRef.writeValue(_this.data.value.max)) : _this.end.val(_this.rangeSlicerRenderer.formatValue(_this.data.value.max, _this.data.formatter));
                });
            }, RangeSlicer.prototype.onRangeChange = function(rangeType) {
                var inputValue = (0 === rangeType ? this.start : this.end).val(), inputValue = this.rangeSlicerRenderer.parseInput(inputValue, this.data.dataPoints, this.singleValue);
                this.rangeSlicerRenderer.isInputValid(inputValue, this.data.value, rangeType, this.singleValue) ? this.updateRange({
                    min: inputValue,
                    max: inputValue
                }, rangeType) : (this.rangeSlicerRenderer.setRange(this.data.value, this.data.formatter, this.start, this.end, rangeType, this.data.bounds), 
                this.useModernDatePicker && (this.data.value.min, Date, this.data.value.max, Date, 
                this.startComponentRef.writeValue(this.data.value.min), this.endComponentRef.writeValue(this.data.value.max)));
            }, RangeSlicer.prototype.onDestroy = function() {
                this.rangeSlicerRenderer.onDestroy && this.rangeSlicerRenderer.onDestroy();
            }, RangeSlicer.prototype.getFontStyles = function() {
                var _a = {};
                return _a["font-size"] = PixelConverter.fromPointToPixel(9), _a["font-family"] = DefaultFontFamily, 
                _a["font-weight"] = visuals.DataLabelRenderer.defaultFontProperties.weight, _a;
            }, RangeSlicer.prototype.updateSliderControl = function() {
                var sliderValue, value, _this = this, sliderHandles = this.createSliderOptions();
                this.slider ? (this.slider.updateOptions(sliderHandles), sliderValue = [], this.singleValue ? (value = _.indexOf(this.data.dataPoints, this.data.value.min), 
                sliderValue.push(value)) : (value = this.range.getScaledValue(), this.activeMode !== visuals.slicerMode.before && sliderValue.push(value.min), 
                this.activeMode !== visuals.slicerMode.after && sliderValue.push(value.max)), this.slider.set(sliderValue)) : (this.sliderOptions = sliderHandles, 
                this.slider && (this.slider.destroy(), this.sliderContainer.empty()), this.sliderElement = InJs.DomFactory.div().attr(RangeSlicerConstants.DisableDragAttribute, "true").attr("rtl", ("rtl" === document.dir).toString()).appendTo(this.sliderContainer), 
                noUiSlider.create(this.sliderElement.get(0), this.sliderOptions), this.slider = this.sliderElement.get(0).noUiSlider, 
                this.slider.on("slide", function(data, index, values) {
                    window.requestAnimationFrame(function() {
                        var rangeValue = _this.parseSliderValue(values);
                        _this.rangeSlicerRenderer.setRange(rangeValue, _this.data.formatter, _this.start, _this.end, null, _this.data.bounds), 
                        _this.useModernDatePicker && (rangeValue.min, Date, rangeValue.max, Date, _this.startComponentRef.writeValue(rangeValue.min), 
                        _this.endComponentRef.writeValue(rangeValue.max));
                    });
                }), this.slider.on("change", _.debounce(function(data, type, value) {
                    value = _this.parseSliderValue(value), type = _this.getChangeType(_this.activeMode, type);
                    _this.updateRange(value, type);
                }, 100)), this.applyHandlesHoverState(this.sliderContainer.find(noUiHandleClass.selector))), 
                this.updateAccessibilityAttributes(this.data, this.sliderContainer.find(noUiHandleClass.selector), this.activeMode), 
                this.sliderContainer.find(noUiConnectClass.selector).css({
                    "background-color": this.data.sliderSettings.color
                }), this.sliderContainer.find(noUiHandleClass.selector).each(function(i, color) {
                    var jqueryElement = $(color), color = jqueryElement.is(":hover") ? _this.data.sliderSettings.activeColor : _this.data.sliderSettings.color;
                    _this.setSliderHandleColor(jqueryElement, color);
                }), this.sliderContainer.find(noUiConnectClass.selector).addClass("backgroundToSelectedBackgroundColor"), 
                this.sliderContainer.find(noUiBackgroundClass.selector).addClass("backgroundToForegroundColor");
                sliderHandles = this.sliderContainer.find(noUiHandleClass.selector);
                this.data.sliderSettings.drawRoundSliderHandles ? (sliderHandles.addClass("backgroundToSolidBackgroundColor"), 
                sliderHandles.addClass("highContrastSelectedBorderColor")) : sliderHandles.addClass("backgroundToSelectedBackgroundColor");
            }, RangeSlicer.prototype.setSliderHandleColor = function(element, color) {
                var cssProps = {
                    "border-color": "",
                    "background-color": ""
                };
                cssProps[this.data.sliderSettings.drawRoundSliderHandles ? "border-color" : "background-color"] = color, 
                element.css(cssProps);
            }, RangeSlicer.prototype.disableSlicer = function() {
                this.disableSlider(), 1 & this.data.state || (this.useModernDatePicker ? this.startComponentRef.writeValue() : this.start.val(""), 
                this.start.prop("disabled", !0), this.disableInput(this.start, this.data.inputStyle.fontColor)), 
                2 & this.data.state || (this.useModernDatePicker ? this.endComponentRef.writeValue() : this.end.val(""), 
                this.end.prop("disabled", !0), this.disableInput(this.end, this.data.inputStyle.fontColor)), 
                this.data.bounds.min = this.data.bounds.max = null, this.updateProperties();
            }, RangeSlicer.prototype.disableSlider = function() {
                this.sliderElement && this.sliderElement.get(0).setAttribute("disabled", "true"), 
                this.sliderContainer.css("opacity", "0.1"), this.slider && this.slider.set([ 0, 100 ]);
            }, RangeSlicer.prototype.enableSlicer = function() {
                this.sliderElement && !this.rangeSlicerRenderer.areEqual(this.data.bounds.min, this.data.bounds.max) && this.sliderElement.get(0).removeAttribute("disabled"), 
                this.sliderContainer.css("opacity", "1.0"), this.start.prop("disabled", !1), this.end.prop("disabled", !1);
            }, RangeSlicer.prototype.applyHandlesHoverState = function(handles) {
                var isMouseDown = !1, isMouseOver = !1, rangeSlicer = this;
                handles.on("mouseenter", function() {
                    isMouseOver = !0, isMouseDown || rangeSlicer.setSliderHandleColor($(this), rangeSlicer.data.sliderSettings.hoverColor);
                }).on("mouseleave", function() {
                    isMouseOver = !1, isMouseDown || rangeSlicer.setSliderHandleColor($(this), rangeSlicer.data.sliderSettings.color);
                }).on("mousedown touchstart", function() {
                    var _this = this;
                    isMouseDown = !0, rangeSlicer.setSliderHandleColor($(this), rangeSlicer.data.sliderSettings.activeColor);
                    var mouseup = function() {
                        $(document).off("mouseup touchEnd", mouseup), isMouseDown && (isMouseDown = !1, 
                        rangeSlicer.setSliderHandleColor($(_this), rangeSlicer.data.sliderSettings.color));
                    };
                    $(document).on("mouseup touchEnd", mouseup);
                }).on("mouseup touchend", function() {
                    isMouseDown = !1, rangeSlicer.setSliderHandleColor($(this), isMouseOver ? rangeSlicer.data.sliderSettings.hoverColor : rangeSlicer.data.sliderSettings.color);
                });
            }, RangeSlicer.prototype.updateInputControls = function() {
                this.singleValue && !this.data.filter && (this.useModernDatePicker ? this.startComponentRef.writeValue() : this.start.val(""));
                var properties = {
                    fontSize: PixelConverter.fromPoint(this.data.inputStyle.textSize),
                    fontFamily: this.data.inputStyle.fontFamily || DefaultFontFamily,
                    fontWeight: this.data.inputStyle.labelBold ? CssConstants.boldValue : CssConstants.normalValue,
                    fontStyle: this.data.inputStyle.labelItalic ? CssConstants.italicValue : CssConstants.normalValue
                }, css = {
                    "font-size": properties.fontSize,
                    "font-family": properties.fontFamily,
                    "font-weight": properties.fontWeight,
                    "font-style": properties.fontStyle,
                    "text-decoration": this.data.inputStyle.labelUnderline ? CssConstants.underlineValue : CssConstants.noneValue
                };
                this.start.parent().css(css), this.end.parent().css(css);
                css = {
                    color: this.data.inputStyle.fontColor,
                    "background-color": this.data.inputStyle.background || "",
                    "text-decoration": this.data.inputStyle.labelUnderline ? CssConstants.underlineValue : CssConstants.noneValue
                };
                this.start.css(css), this.end.css(css), this.useModernDatePicker && (this.data.value.min, 
                Date, this.data.value.max, Date, this.data.bounds.min, Date, this.data.bounds.max, 
                Date, this.startComponentRef.updateDateRange(this.data.bounds.min, this.data.bounds.max), 
                this.endComponentRef.updateDateRange(this.data.bounds.min, this.data.bounds.max), 
                this.startComponentRef.writeValue(this.data.value.min), this.endComponentRef.writeValue(this.data.value.max)), 
                this.setInputWidth(this.start, properties), this.setInputWidth(this.end, properties);
            }, RangeSlicer.prototype.setInputWidth = function(input, padding) {
                input.css("width", "");
                var border, width = input.val();
                width && (border = width.toString(), width = powerbi.TextMeasurementService.measureSvgTextWidth(padding, border), 
                padding = parseFloat(input.css("padding-left")) + parseFloat(input.css("padding-right")), 
                border = 2 * parseFloat(input.css("border-width")), width = Math.ceil(width + padding + border), 
                input.outerWidth(!1) < width && input.css({
                    width: width
                }));
            }, RangeSlicer.prototype.disableInput = function(control, RGBA) {
                RGBA = Color.parseColorString(RGBA);
                RGBA.A = .3, control.css({
                    color: Color.rgbString(RGBA)
                });
            }, RangeSlicer.prototype.createSliderOptions = function() {
                var start, connect, sliderOptions = this.rangeSlicerRenderer.getSliderOptions(this.data, this.singleValue), range = this.range.getScaledValue();
                switch (this.activeMode) {
                  case visuals.slicerMode.before:
                    start = range.max, connect = [ !0, !1 ];
                    break;

                  case visuals.slicerMode.after:
                    start = range.min, connect = [ !1, !0 ];
                    break;

                  case visuals.slicerMode.between:
                    start = [ range.min, range.max ], connect = !0;
                    break;

                  case visuals.slicerMode.single:
                    start = _.indexOf(this.data.dataPoints, this.data.value.min), connect = !1;
                }
                return {
                    connect: connect,
                    behaviour: "tap",
                    range: {
                        min: sliderOptions.min === sliderOptions.max ? 0 : sliderOptions.min,
                        max: sliderOptions.min === sliderOptions.max ? 1 : sliderOptions.max
                    },
                    start: start,
                    step: sliderOptions.step
                };
            }, RangeSlicer.prototype.parseSliderValue = function(values) {
                if ((this.data.isSourceInteger || this.singleValue) && (values = _.map(values, function(value) {
                    return Math.round(value);
                })), this.singleValue) return this.rangeSlicerRenderer.parseSingleSliderValue(values[0], this.data.dataPoints);
                var rangeValue = this.range.getScaledValue();
                switch (this.activeMode) {
                  case visuals.slicerMode.before:
                    rangeValue.max = values[0];
                    break;

                  case visuals.slicerMode.after:
                    rangeValue.min = values[0];
                    break;

                  case visuals.slicerMode.between:
                    rangeValue.min = values[0], rangeValue.max = values[1];
                }
                return this.range.setScaledValue(rangeValue), this.range.getValue();
            }, RangeSlicer.prototype.updateSlider = function(mode) {
                mode === visuals.slicerMode.after ? (this.end.prop("disabled", !0), this.disableInput(this.end, this.data.inputStyle.fontColor), 
                this.start.prop("disabled", !1)) : mode === visuals.slicerMode.before ? (this.end.prop("disabled", !1), 
                this.start.prop("disabled", !0), this.disableInput(this.start, this.data.inputStyle.fontColor)) : (this.end.prop("disabled", !1), 
                this.start.prop("disabled", !1)), mode === visuals.slicerMode.single ? this.endContainer.hide() : this.endContainer.show(), 
                !this.data.sliderSettings.show || this.shouldHideSmallSlider() ? this.sliderContainer.hide() : (this.sliderContainer.show(), 
                this.updateSliderControl()), this.sliderContainer.toggleClass(RoundHandlesClass.class, !!this.data.sliderSettings.drawRoundSliderHandles), 
                this.container.find(HeadClass.selector).toggleClass(WrapRangeBoxesClass.class, !!this.data.wrapRangeBoxes), 
                this.rangeSlicerRenderer.areEqual(this.data.bounds.min, this.data.bounds.max) && this.disableSlider();
            }, RangeSlicer.prototype.updateMode = function(mode) {
                var lastMode = this.data.mode;
                null == mode ? mode = this.defaultSliderMode : this.data.mode = mode, mode === visuals.slicerMode.before ? (lastMode === visuals.slicerMode.after && 1 & this.data.state && (this.data.value.max = this.data.value.min, 
                this.data.value.min = this.data.bounds.min, this.data.state = 2), this.data.state &= -2) : mode === visuals.slicerMode.after && (lastMode === visuals.slicerMode.before && 2 & this.data.state && (this.data.value.min = this.data.value.max, 
                this.data.state = 1), this.data.state &= -3), this.updateProperties();
            }, RangeSlicer.prototype.updateProperties = function() {
                var filter = {
                    min: this.data.value.min,
                    max: this.data.value.max
                }, bounds = {
                    min: this.data.bounds.min,
                    max: this.data.bounds.max
                }, objects = {
                    start: 1 & this.data.state ? this.data.value.min : null,
                    end: 2 & this.data.state ? this.data.value.max : null,
                    mode: this.data.mode,
                    filter: filter,
                    bounds: bounds
                };
                this.requireToUpdate(objects) && (this.data.properties.filter = filter, this.data.properties.bounds = bounds, 
                objects = this.createPersistProperties(objects, this.data.identity, this.data.state), 
                this.hostServices.persistProperties(objects), this.hostServices.onSelect({
                    visualObjects: []
                }));
            }, RangeSlicer.prototype.getChangeType = function(mode, handle) {
                var type = null;
                switch (mode) {
                  case visuals.slicerMode.after:
                  case visuals.slicerMode.single:
                    type = 0;
                    break;

                  case visuals.slicerMode.before:
                    type = 1;
                    break;

                  default:
                    type = 0 === handle ? 0 : 1;
                }
                return type;
            }, RangeSlicer.prototype.createPersistProperties = function(properties, objects, state) {
                var filter = null == properties.mode ? this.defaultSliderMode : properties.mode, filter = this.createFilter(properties, filter, state, objects), objects = {
                    merge: [ {
                        objectName: "general",
                        selector: void 0,
                        properties: {}
                    } ],
                    replace: [ {
                        objectName: "data",
                        selector: void 0,
                        properties: {}
                    } ],
                    remove: [ {
                        objectName: "data",
                        selector: void 0,
                        properties: {}
                    }, {
                        objectName: "general",
                        selector: void 0,
                        properties: {}
                    } ]
                };
                return null !== filter ? objects.merge[0].properties[visuals.slicerProps.general.filter.propertyName] = filter : objects.remove[1].properties[visuals.slicerProps.general.filter.propertyName] = !0, 
                1 & state && null !== properties.start ? objects.replace[0].properties[this.rangeSlicerRenderer.startProperty().propertyName] = properties.start : null == properties.start && (objects.remove[0].properties[this.rangeSlicerRenderer.startProperty().propertyName] = !0), 
                2 & state && null !== properties.end ? objects.replace[0].properties[this.rangeSlicerRenderer.endProperty().propertyName] = properties.end : null == properties.end && (objects.remove[0].properties[this.rangeSlicerRenderer.endProperty().propertyName] = !0), 
                null != properties.mode && (objects.replace[0].properties[visuals.slicerProps.data.mode.propertyName] = properties.mode), 
                objects;
            }, RangeSlicer.prototype.updateRange = function(value, type) {
                null == type ? (this.data.value.min = value.min, this.data.value.max = value.max) : 0 === type ? (this.data.value.min = value.min, 
                null !== this.data.bounds.min && !this.singleValue && this.rangeSlicerRenderer.areEqual(this.data.value.min, this.data.bounds.min) ? this.data.state &= -2 : this.data.state |= 1) : 1 === type && (this.data.value.max = value.max, 
                null !== this.data.bounds.max && this.rangeSlicerRenderer.areEqual(this.data.value.max, this.data.bounds.max) ? this.data.state &= -3 : this.data.state |= 2), 
                this.updateProperties();
            }, RangeSlicer.prototype.createFilter = function(comparisonKind, upperFilter, state, identity) {
                var filterExpr = null, lowerFilter = comparisonKind.filter, result = null, slicerFilters = this.rangeSlicerRenderer.filterExpr(lowerFilter);
                return upperFilter === visuals.slicerMode.single ? filterExpr = 1 & state ? SQExprBuilder.compare(0, identity, slicerFilters.lower) : null : (comparisonKind = this.rangeSlicerRenderer.comparisonKind(), 
                1 & state && 2 & state ? (lowerFilter = SQExprBuilder.compare(comparisonKind.lower, identity, slicerFilters.lower), 
                upperFilter = SQExprBuilder.compare(comparisonKind.upper, identity, slicerFilters.upper), 
                filterExpr = SQExprBuilder.and(lowerFilter, upperFilter)) : 1 & state ? filterExpr = SQExprBuilder.compare(comparisonKind.lower, identity, slicerFilters.lower) : 2 & state && (filterExpr = SQExprBuilder.compare(comparisonKind.upper, identity, slicerFilters.upper))), 
                result = null !== filterExpr ? powerbi.data.SemanticFilter.fromSQExpr(filterExpr) : result;
            }, RangeSlicer.prototype.requireToUpdate = function(properties) {
                return (null !== this.data.properties.filter || 0 !== this.data.state || properties.mode !== this.data.properties.mode && (properties.mode !== this.defaultSliderMode || null !== this.data.properties.mode)) && !(null != this.data.properties.filter && properties.mode === this.data.properties.mode && this.rangeSlicerRenderer.areEqual(properties.start, this.data.properties.start) && this.rangeSlicerRenderer.areEqual(properties.end, this.data.properties.end) && this.rangeSlicerRenderer.areEqual(properties.filter.min, this.data.properties.filter.min) && this.rangeSlicerRenderer.areEqual(properties.filter.max, this.data.properties.filter.max) && this.rangeSlicerRenderer.areEqual(properties.bounds.min, this.data.properties.bounds.min) && this.rangeSlicerRenderer.areEqual(properties.bounds.max, this.data.properties.bounds.max));
            }, RangeSlicer.prototype.shouldHideSmallSlider = function() {
                var sliderSettings = this.data.sliderSettings;
                if ((this.container.width() || 0) <= sliderSettings.minSliderVisibilityWidth) return !0;
                if (0 < sliderSettings.minSliderVisibilityHeight) {
                    var textboxesHeight = this.endContainer.position().top + this.endContainer.outerHeight();
                    if (this.container.parent().outerHeight() - textboxesHeight < sliderSettings.minSliderVisibilityHeight) return !0;
                }
                return !1;
            }, RangeSlicer.prototype.updateAccessibilityAttributes = function(data, handles, activeMode) {
                var hintText, sliderMinValue = data.value.min, sliderMaxValue = data.value.max;
                switch (activeMode) {
                  case visuals.slicerMode.before:
                    hintText = this.getRangeText(data.bounds.min, data.bounds.max), this.addAccessibilityAttributesToSliderHandle(handles, hintText, sliderMaxValue);
                    break;

                  case visuals.slicerMode.after:
                    hintText = this.getRangeText(data.bounds.min, data.bounds.max), this.addAccessibilityAttributesToSliderHandle(handles, hintText, sliderMinValue);
                    break;

                  case visuals.slicerMode.between:
                    hintText = this.getRangeText(data.bounds.min, data.value.max), this.addAccessibilityAttributesToSliderHandle(handles.first(), hintText, sliderMinValue), 
                    hintText = this.getRangeText(data.value.min, data.bounds.max), this.addAccessibilityAttributesToSliderHandle(handles.last(), hintText, sliderMaxValue);
                }
                handles.attr("aria-label", data.sliderSettings.label);
            }, RangeSlicer.prototype.addAccessibilityAttributesToSliderHandle = function(handle, hintText, currentHandleValue) {
                handle.attr("aria-valuetext", this.rangeSlicerRenderer.formatValue(currentHandleValue, this.data.formatter)).attr("aria-description", hintText);
            }, RangeSlicer.prototype.getRangeText = function(lowerBoundValue, upperBoundValue) {
                return this.isCategorySourceNumeric ? powerbi.formattingService.format(this.hostServices.getLocalizedString("Slicer_Range_Hint"), [ lowerBoundValue, upperBoundValue ]) : powerbi.formattingService.format(this.hostServices.getLocalizedString("Slicer_Range_Hint"), [ powerbi.formattingService.formatValue(lowerBoundValue, "d"), powerbi.formattingService.formatValue(upperBoundValue, "d") ]);
            }, RangeSlicer;
        }();
        visuals.RangeSlicer = RangeSlicer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var FontSize = visuals.Units.FontSize, SelectMenu = powerbi.visuals.controls.SelectMenu, RelativeDateRangeHelper = powerbi.data.RelativeDateRangeHelper, RelativeDateFilterPattern = powerbi.data.RelativeDateFilterPattern, SemanticFilter = powerbi.data.SemanticFilter, PixelConverter = jsCommon.PixelConverter, CssConstants = jsCommon.CssConstants;
        var RelativeSlicer = function() {
            function RelativeSlicer(options, type) {
                this.isRendered = !1, this.hostServices = options.hostServices, this.relativeSlicerComponent = visuals.RelativeSlicerUtil.relativeUnitSlicerFactory(type);
            }
            return RelativeSlicer.prototype.init = function(options, element) {
                this.host = element, this.isRendered = !1, this.style = options.visualInitOptions.style, 
                this.eventsHelper = new visuals.SlicerUtil.EventsHelper();
            }, RelativeSlicer.prototype.onDestroy = function() {
                this.unregisterSelectMenuCloseEvents && this.unregisterSelectMenuCloseEvents(), 
                this.rangeSelectMenu && this.rangeSelectMenu.destroy(), this.periodSelectMenu && this.periodSelectMenu.destroy();
            }, RelativeSlicer.prototype.hasSlider = function() {
                return !1;
            }, RelativeSlicer.prototype.supportsOrientation = function() {
                return !1;
            }, RelativeSlicer.prototype.onClear = function() {
                this.data.range = visuals.relativeSlicerRelativeQualifier.last, this.data.period = visuals.relativeSlicerPeriod.none, 
                this.data.duration = 1, this.data.filter = null, this.renderInternal(), visuals.SlicerUtil.clearSlicerFilter(this.hostServices, this.data.mode);
            }, RelativeSlicer.prototype.enumerateObjectInstances = function(instance, featureSwitches) {
                var numericProps = this.relativeSlicerComponent.getVisualObjectInstance(this.data);
                if ("dateRange" === instance.objectName && numericProps) return [ numericProps ];
                if ("numericInputStyle" === instance.objectName) {
                    numericProps = visuals.slicerProps.numericInputStyle, instance = {
                        selector: null,
                        objectName: "numericInputStyle",
                        properties: {
                            fontColor: this.data.inputStyle.fontColor,
                            background: this.data.inputStyle.background,
                            textSize: this.data.inputStyle.textSize,
                            fontFamily: this.data.inputStyle.fontFamily
                        }
                    };
                    return featureSwitches && featureSwitches.enableBIU && (instance.properties[numericProps.bold.propertyName] = this.data.inputStyle.labelBold, 
                    instance.properties[numericProps.italic.propertyName] = this.data.inputStyle.labelItalic, 
                    instance.properties[numericProps.underline.propertyName] = this.data.inputStyle.labelUnderline), 
                    [ instance ];
                }
            }, RelativeSlicer.prototype.getValuesCard = function(featureSwitches) {
                var _this = this, numericProps = visuals.slicerProps.numericInputStyle, valuesCardBuilder = new visuals.builder.FormattingCardBuilder(new visuals.builder.FormattingCardUidBuilder("values"), "Role_DisplayName_Values", [ numericProps.fontFamily, numericProps.textSize, numericProps.fontColor, numericProps.background, numericProps.bold, numericProps.italic, numericProps.underline, visuals.slicerProps.dateRange.includeToday, visuals.slicerProps.dateRange.anchorDate ], function(key) {
                    return _this.hostServices.getLocalizedString(key);
                }), fontControlBuilder = new visuals.builder.FontControlBuilder().withFontFamily({
                    descriptor: numericProps.fontFamily,
                    value: this.data.inputStyle.fontFamily
                }).withFontSizeProperties({
                    descriptor: numericProps.textSize,
                    value: this.data.inputStyle.textSize
                });
                featureSwitches && featureSwitches.enableBIU && fontControlBuilder.withBold({
                    descriptor: numericProps.bold,
                    value: this.data.inputStyle.labelBold
                }).withItalic({
                    descriptor: numericProps.italic,
                    value: this.data.inputStyle.labelItalic
                }).withUnderline({
                    descriptor: numericProps.underline,
                    value: this.data.inputStyle.labelUnderline
                });
                var fontControl = fontControlBuilder.build();
                return valuesCardBuilder.addGroup("values", function(groupBuilder) {
                    groupBuilder.withDisplayName("Role_DisplayName_Values"), groupBuilder.addCompositeSlice("fontselector", "Font", fontControl), 
                    groupBuilder.addSimpleSlice("color", function() {
                        var colordata = {
                            value: _this.data.inputStyle.fontColor
                        };
                        return new visuals.builder.ColorPickerBuilder({
                            descriptor: numericProps.fontColor,
                            value: colordata
                        }).build();
                    }), _this.relativeSlicerComponent.appendVisualSlices(groupBuilder, _this.data);
                }).addGroup("background", function(groupBuilder) {
                    groupBuilder.withDisplayName("Visual_Background").addSimpleSlice("color", function() {
                        var colordata = {
                            value: _this.data.inputStyle.background
                        };
                        return new visuals.builder.ColorPickerBuilder({
                            descriptor: numericProps.background,
                            value: colordata
                        }).build();
                    });
                }), valuesCardBuilder.build();
            }, RelativeSlicer.prototype.getSlicerSettingsCardOptions = function() {}, RelativeSlicer.prototype.getAdditionalCards = function() {}, 
            RelativeSlicer.prototype.onModeChange = function(mode) {
                visuals.SlicerUtil.clearSlicerFilter(this.hostServices, mode);
            }, RelativeSlicer.converter = function(colorHelper, slicerNumericInputFontProperties, objects, relativePropertyId) {
                var result = {
                    mode: objects,
                    range: visuals.relativeSlicerRelativeQualifier.last,
                    period: visuals.relativeSlicerPeriod.none,
                    duration: 1,
                    includeToday: !0,
                    identity: null,
                    anchorDate: void 0,
                    filter: null,
                    inputStyle: function(style) {
                        return {
                            textSize: 9,
                            fontFamily: visuals.Font.Family.regular.css,
                            fontColor: visuals.ColorHelper.getThemeColor(style, "foregroundDark"),
                            background: null,
                            labelBold: !1,
                            labelItalic: !1,
                            labelUnderline: !1
                        };
                    }(slicerNumericInputFontProperties)
                }, objects = colorHelper.columns.getMetadataColumns(visuals.slicerRoles.value);
                objects.length;
                objects = objects[0];
                result.identity = objects.expr;
                objects = colorHelper.objects.getStaticObjects();
                return objects && (colorHelper = visuals.ColorHelper.create(slicerNumericInputFontProperties), 
                result.filter = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.general.filter, result.filter), 
                result.range = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.data.relativeRange, result.range), 
                result.period = powerbi.DataViewObjects.getValue(objects, relativePropertyId, result.period), 
                result.duration = Math.abs(powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.data.relativeDuration, result.duration)), 
                result.includeToday = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.dateRange.includeToday, result.includeToday), 
                result.anchorDate = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.dateRange.anchorDate, result.anchorDate), 
                slicerNumericInputFontProperties = visuals.FontProperties.createFromObjectOrStyle(powerbi.DataViewObjects.getObject(objects, "numericInputStyle"), {
                    color: "fontColor",
                    family: "fontFamily",
                    size: "textSize"
                }, colorHelper, slicerNumericInputFontProperties, "foregroundDark", "smallLabel", {
                    color: result.inputStyle.fontColor,
                    family: result.inputStyle.fontFamily,
                    size: FontSize.createFromPt(result.inputStyle.textSize)
                }), result.inputStyle.fontColor = slicerNumericInputFontProperties.color, result.inputStyle.fontFamily = slicerNumericInputFontProperties.family, 
                result.inputStyle.textSize = slicerNumericInputFontProperties.size.pt, result.inputStyle.background = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.numericInputStyle.background, result.inputStyle.background), 
                result.inputStyle.labelBold = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.numericInputStyle.bold, result.inputStyle.labelBold), 
                result.inputStyle.labelItalic = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.numericInputStyle.italic, result.inputStyle.labelItalic), 
                result.inputStyle.labelUnderline = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.numericInputStyle.underline, result.inputStyle.labelUnderline)), 
                result;
            }, RelativeSlicer.prototype.render = function(reader) {
                var _this = this, reader = powerbi.data.createDataViewCategoricalReaderAdvanced(reader.dataView);
                this.data = RelativeSlicer.converter(reader, this.style, this.relativeSlicerComponent.getMode(), this.relativeSlicerComponent.getRelativePropertyId()), 
                this.isRendered || (this.initControls(), this.unregisterSelectMenuCloseEvents = this.eventsHelper.onPopupHideEvent(function(eventType, target) {
                    _this.onSelectMenuClose(eventType, target);
                }, this.selectionContainer.get(0))), this.updateProperties(this.data.range, this.data.period, this.data.duration), 
                this.renderInternal();
            }, RelativeSlicer.prototype.onSelectMenuClose = function(eventType, target) {
                $(target).hasClass("slicer-select-menu") || $(target).closest(".slicer-select-menu").length || (this.rangeSelectMenu.close(), 
                this.periodSelectMenu.close());
            }, RelativeSlicer.prototype.initControls = function() {
                var _this = this;
                this.isRendered = !0, this.container = InJs.DomFactory.div().addClass("relative-slicer").appendTo(this.host), 
                this.selectionContainer = InJs.DomFactory.div().addClass("selection-container").appendTo(this.container), 
                this.selectionContainer.on("keyup keydown", function(event) {
                    9 !== event.keyCode && 27 !== event.keyCode && event.stopPropagation();
                }), this.rangeSelectMenuContainer = InJs.DomFactory.div().addClass("range-menu").appendTo(this.selectionContainer);
                var periodSettings = {
                    onChange: function(val) {
                        _this.rangeChanged(val);
                    },
                    container: this.rangeSelectMenuContainer,
                    options: this.getSelectMenuOptions(visuals.relativeSlicerRelativeQualifier.type.members()),
                    className: "slicer-select-menu",
                    selectedValue: "Select",
                    title: this.hostServices.getLocalizedString("Visual_Axis_Range")
                };
                this.rangeSelectMenu = new SelectMenu(periodSettings), this.rangeSelectMenu.update({
                    selectedValue: visuals.relativeSlicerRelativeQualifier.last
                }), this.durationInput = InJs.DomFactory.textBox().attr("type", "number").attr("min", "1").attr("drag-resize-disabled", "true").addClass("duration-input").attr("aria-label", this.hostServices.getLocalizedString("Duration")).appendTo(this.selectionContainer), 
                this.durationInput.val(this.data.duration.toString()), this.durationInput.on("change", _.debounce(function(event) {
                    _this.durationChanged();
                }, 100)), this.periodSelectMenuContainer = InJs.DomFactory.div().addClass("period-menu").appendTo(this.selectionContainer);
                periodSettings = this.relativeSlicerComponent.getListOfOptions(), periodSettings = {
                    onChange: function(val) {
                        _this.periodChanged(val);
                    },
                    container: this.periodSelectMenuContainer,
                    options: this.getSelectMenuOptions(periodSettings),
                    className: "slicer-select-menu",
                    title: this.hostServices.getLocalizedString("DaxTemplates_PeriodField")
                };
                this.periodSelectMenu = new SelectMenu(periodSettings), this.periodSelectMenu.disableOption(visuals.relativeSlicerPeriod.none), 
                this.updatePeriod(), this.restatementContainer = InJs.DomFactory.div().addClass("restatement-container").appendTo(this.container), 
                this.restatementIcon = $("<i ></i>").addClass("restatement-icon").addClass("pbi-glyph-datetime").appendTo(this.restatementContainer), 
                this.restatement = InJs.DomFactory.div().addClass("restatement").appendTo(this.restatementContainer), 
                this.restatement.text(this.hostServices.getLocalizedString("ExportData_NoAppliedFiltersText"));
            }, RelativeSlicer.prototype.updatePeriod = function() {
                var periods = this.relativeSlicerComponent.getPeriods(this.data);
                this.periodSelectMenu.update({
                    options: this.getSelectMenuOptions(periods),
                    selectedValue: this.data.period
                });
            }, RelativeSlicer.prototype.rangeChanged = function(val) {
                this.data.range = val, this.data.range === visuals.relativeSlicerRelativeQualifier.current ? (this.durationInput.attr("type", "text"), 
                this.durationInput.val("-"), this.durationInput.prop("disabled", !0), this.data.duration = 0) : ("-" === this.durationInput.val() ? (this.durationInput.attr("type", "number"), 
                this.durationInput.val("1"), this.data.duration = 1) : this.updateDuration(), this.durationInput.prop("disabled", !1)), 
                this.updatePeriod(), this.updateProperties(this.data.range, this.data.period, this.data.duration), 
                this.renderInternal();
            }, RelativeSlicer.prototype.periodChanged = function(val) {
                this.updateDuration(), this.updateProperties(this.data.range, val, this.data.duration), 
                this.renderInternal();
            }, RelativeSlicer.prototype.durationChanged = function() {
                this.updateDuration(), this.updateProperties(this.data.range, this.data.period, this.data.duration), 
                this.renderInternal();
            }, RelativeSlicer.prototype.renderInternal = function() {
                var periodTooltip = this.relativeSlicerComponent.getSelectedPeriodOption(this.data), periodMenuButton = PixelConverter.fromPointToPixel(this.data.inputStyle.textSize), css = {
                    "font-size": periodMenuButton,
                    "font-family": this.data.inputStyle.fontFamily,
                    color: this.data.inputStyle.fontColor,
                    "background-color": this.data.inputStyle.background || "",
                    "font-weight": this.data.inputStyle.labelBold ? CssConstants.boldValue : CssConstants.normalValue,
                    "font-style": this.data.inputStyle.labelItalic ? CssConstants.italicValue : CssConstants.normalValue,
                    "text-decoration": this.data.inputStyle.labelUnderline ? CssConstants.underlineValue : CssConstants.noneValue
                };
                this.durationInput.css(css), css["font-size"] = periodMenuButton - 1, this.restatement.css(css);
                var rangeMenuButton = this.rangeSelectMenuContainer.find(".ui-selectmenu-button");
                rangeMenuButton.css(css);
                periodMenuButton = visuals.relativeSlicerRelativeQualifier.type.members([ this.data.range ])[0].displayName({
                    get: this.hostServices.getLocalizedString.bind(this.hostServices)
                });
                rangeMenuButton.attr("title", periodMenuButton);
                periodMenuButton = this.periodSelectMenuContainer.find(".ui-selectmenu-button");
                periodMenuButton.css(css);
                periodTooltip = periodTooltip.displayName({
                    get: this.hostServices.getLocalizedString.bind(this.hostServices)
                });
                periodMenuButton.attr("title", periodTooltip), this.rangeSelectMenu.update({
                    selectedValue: this.data.range
                }), this.updatePeriod(), this.periodSelectMenu.disableOption(visuals.relativeSlicerPeriod.none), 
                0 === this.data.duration ? (this.durationInput.attr("type", "text"), this.durationInput.val("-"), 
                this.durationInput.prop("disabled", !0)) : (this.durationInput.attr("type", "number"), 
                this.durationInput.prop("disabled", !1), this.durationInput.val(Math.abs(this.data.duration).toString())), 
                this.setRestatement();
            }, RelativeSlicer.prototype.updateProperties = function(periodChanged, period, semanticFilter) {
                this.data.range = periodChanged;
                periodChanged = this.data.period !== period;
                this.data.period = period, this.data.duration = semanticFilter;
                semanticFilter = null;
                null === (semanticFilter = this.data.period !== visuals.relativeSlicerPeriod.none ? this.createFilter() : semanticFilter) && this.data.filter ? this.onClear() : (semanticFilter = semanticFilter ? SemanticFilter.fromSQExpr(semanticFilter) : null, 
                SemanticFilter.isSameFilter(semanticFilter, this.data.filter) && !periodChanged || (this.createAndPersistProperties(semanticFilter), 
                this.setRestatement()));
            }, RelativeSlicer.prototype.updateDuration = function() {
                this.data.range === visuals.relativeSlicerRelativeQualifier.current ? this.data.duration = 0 : this.isDurationValid() && (this.data.duration = Math.min(parseInt(this.durationInput.val(), 10), this.getDurationMax()));
            }, RelativeSlicer.prototype.isDurationValid = function() {
                var inputValue = parseInt(this.durationInput.val(), 10);
                return $.isNumeric(inputValue) && 0 < inputValue;
            }, RelativeSlicer.prototype.getDurationMax = function() {
                var period = this.data.period !== visuals.relativeSlicerPeriod.none ? this.data.period : visuals.relativeSlicerPeriod.days;
                return RelativeDateRangeHelper.getDurationMax(visuals.RelativeSlicerUtil.toRelativeDateQualifier(this.data.range), visuals.RelativeSlicerUtil.toRelativeDateUnit(period));
            }, RelativeSlicer.prototype.createFilter = function() {
                var filter;
                return this.data.identity && (filter = visuals.RelativeSlicerUtil.toRelativeDateRangeOptions(this.data), 
                filter = RelativeDateFilterPattern.buildFilterCondition({
                    field: this.data.identity,
                    options: filter
                })), filter;
            }, RelativeSlicer.prototype.getRelativePropertyName = function() {
                return this.relativeSlicerComponent.getRelativePropertyId().propertyName;
            }, RelativeSlicer.prototype.createAndPersistProperties = function(objectDateRange) {
                var objects = {
                    merge: [],
                    replace: [],
                    remove: []
                }, relativePropertyName = {
                    objectName: "general",
                    selector: null,
                    properties: {}
                };
                null !== objectDateRange ? (relativePropertyName.properties[visuals.slicerProps.general.filter.propertyName] = objectDateRange, 
                objects.merge.push(relativePropertyName)) : (relativePropertyName.properties[visuals.slicerProps.general.filter.propertyName] = !0, 
                objects.remove.push(relativePropertyName));
                objectDateRange = {
                    objectName: "data",
                    selector: null,
                    properties: {}
                };
                null != this.data.mode && (objectDateRange.properties[visuals.slicerProps.data.mode.propertyName] = this.data.mode), 
                null != this.data.range && (objectDateRange.properties[visuals.slicerProps.data.relativeRange.propertyName] = this.data.range), 
                null != this.data.duration && (objectDateRange.properties[visuals.slicerProps.data.relativeDuration.propertyName] = this.data.duration), 
                null != this.data.period && (relativePropertyName = this.getRelativePropertyName(), 
                objectDateRange.properties[relativePropertyName] = this.data.period), objects.replace.push(objectDateRange);
                objectDateRange = {
                    objectName: "dateRange",
                    selector: null,
                    properties: {}
                };
                null != this.data.includeToday && (objectDateRange.properties[visuals.slicerProps.dateRange.includeToday.propertyName] = this.data.includeToday), 
                this.data.anchorDate && (objectDateRange.properties[visuals.slicerProps.dateRange.anchorDate.propertyName] = this.data.anchorDate), 
                objects.replace.push(objectDateRange), this.hostServices.persistProperties(objects), 
                this.hostServices.onSelect({
                    visualObjects: []
                });
            }, RelativeSlicer.prototype.setRestatement = function() {
                var options, _c, _this = this;
                this.data.period === visuals.relativeSlicerPeriod.none ? this.restatement.text(this.hostServices.getLocalizedString("ExportData_NoAppliedFiltersText")) : (options = visuals.RelativeSlicerUtil.toRelativeDateRangeOptions(this.data), 
                _c = null === (_c = null === (_c = this.hostServices) || void 0 === _c ? void 0 : _c.networkAvailability()) || void 0 === _c ? void 0 : _c.isNetworkAvailable(), 
                this.restatement.text(RelativeDateRangeHelper.getRestatement(options, _c, function(key, args) {
                    return _this.hostServices.getLocalizedString(key, args);
                }, null === (_c = this.hostServices.visualTimeSynchronization()) || void 0 === _c ? void 0 : _c.getAnchorTime())));
            }, RelativeSlicer.prototype.getSelectMenuOptions = function(options) {
                for (var selectMenuOptions = [], _i = 0, options_1 = options; _i < options_1.length; _i++) {
                    var option = options_1[_i], displayName = option.displayName({
                        get: this.hostServices.getLocalizedString.bind(this.hostServices)
                    });
                    selectMenuOptions.push({
                        text: displayName,
                        value: option.value
                    });
                }
                return selectMenuOptions;
            }, RelativeSlicer;
        }();
        visuals.RelativeSlicer = RelativeSlicer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var StringExtensions = jsCommon.StringExtensions, RelativeTimeComponent = function() {
            function RelativeTimeComponent() {}
            return RelativeTimeComponent.prototype.getVisualObjectInstance = function(data) {}, 
            RelativeTimeComponent.prototype.appendVisualSlices = function(groupBuilder, data) {}, 
            RelativeTimeComponent.prototype.getMode = function() {
                return visuals.slicerMode.relativeTime;
            }, RelativeTimeComponent.prototype.getRelativePropertyId = function() {
                return visuals.slicerProps.data.relativeTimePeriod;
            }, RelativeTimeComponent.prototype.getListOfOptions = function() {
                return visuals.relativeSlicerPeriod.typeTime.members();
            }, RelativeTimeComponent.prototype.getSelectedPeriodOption = function(data) {
                return StringExtensions.isNullOrUndefinedOrWhiteSpaceString(data.period), visuals.relativeSlicerPeriod.typeTime.members([ data.period ])[0];
            }, RelativeTimeComponent.prototype.getPeriods = function(data) {
                return (data.range !== visuals.relativeSlicerRelativeQualifier.current ? visuals.relativeSlicerPeriod.typeTime : visuals.relativeSlicerPeriod.typeTimeCurrent).members();
            }, RelativeTimeComponent;
        }();
        visuals.RelativeTimeComponent = RelativeTimeComponent;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var StringExtensions = jsCommon.StringExtensions, RelativeDateComponent = function() {
            function RelativeDateComponent() {}
            return RelativeDateComponent.prototype.getVisualObjectInstance = function(data) {
                return {
                    selector: null,
                    objectName: "dateRange",
                    properties: {
                        includeToday: data.includeToday,
                        anchorDate: data.anchorDate
                    }
                };
            }, RelativeDateComponent.prototype.appendVisualSlices = function(groupBuilder, data) {
                null != data.includeToday && groupBuilder.addSimpleSlice("includeToday", function() {
                    return new visuals.builder.ToggleSwitchBuilder({
                        descriptor: visuals.slicerProps.dateRange.includeToday,
                        value: data.includeToday
                    }).build();
                }), groupBuilder.addSimpleSlice("anchorDate", function() {
                    return new visuals.builder.DatePickerBuilder({
                        descriptor: visuals.slicerProps.dateRange.anchorDate,
                        value: data.anchorDate,
                        placeholder: ""
                    }).build();
                });
            }, RelativeDateComponent.prototype.getMode = function() {
                return visuals.slicerMode.relativeDate;
            }, RelativeDateComponent.prototype.getRelativePropertyId = function() {
                return visuals.slicerProps.data.relativePeriod;
            }, RelativeDateComponent.prototype.getListOfOptions = function() {
                return visuals.relativeSlicerPeriod.typeDate.members();
            }, RelativeDateComponent.prototype.getSelectedPeriodOption = function(data) {
                return StringExtensions.isNullOrUndefinedOrWhiteSpaceString(data.period), visuals.relativeSlicerPeriod.typeDate.members([ data.period ])[0];
            }, RelativeDateComponent.prototype.getPeriods = function(data) {
                var periods = (data.range !== visuals.relativeSlicerRelativeQualifier.current ? visuals.relativeSlicerPeriod.typeDate : visuals.relativeSlicerPeriod.typeDateCurrent).members();
                if (data.range === visuals.relativeSlicerRelativeQualifier.current) switch (data.period) {
                  case visuals.relativeSlicerPeriod.calendarWeeks:
                    data.period = visuals.relativeSlicerPeriod.weeks;
                    break;

                  case visuals.relativeSlicerPeriod.calendarMonths:
                    data.period = visuals.relativeSlicerPeriod.months;
                    break;

                  case visuals.relativeSlicerPeriod.calendarYears:
                    data.period = visuals.relativeSlicerPeriod.years;
                }
                return periods;
            }, RelativeDateComponent;
        }();
        visuals.RelativeDateComponent = RelativeDateComponent;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var DefaultSQExprVisitor = powerbi.data.DefaultSQExprVisitor, FontProperties = powerbi.visuals.FontProperties, FontSize = powerbi.visuals.Units.FontSize, outline = powerbi.visuals.outline, SemanticFilter = powerbi.data.SemanticFilter, SQConstantExpr = powerbi.data.SQConstantExpr, UrlUtils = jsCommon.UrlUtils;
        !function(DataConversion) {
            DataConversion.DefaultSlicerOutlineColorName = "foregroundNeutralSecondaryAlt2", 
            DataConversion.DefaultSlicerTextColorName = "foregroundNeutralSecondary";
            function restoreFromSelection(level, filter, nodes, queryNamePerLevel, valueMap, source, reader, levelReader, parent, dataPoints, selectedDataPoints, shouldRender, slicerIndex) {
                var formatString = visuals.valueFormatter.getFormatString(source, visuals.slicerProps.general.formatString);
                parent && (parent.children = []);
                for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                    var node = nodes_1[_i], nextLevel = void 0, cache = void 0, nextLevel = filter && filter.isDefaultFilter && !_.isEmpty(filter.defaultValueByLevel) && filter.defaultValueByLevel[level] ? SQConstantExpr.getTextValue(filter.defaultValueByLevel[level].value) : (cache = function(level, node, values) {
                        if (!_.isEmpty(values)) {
                            for (var result = [], _i = 0, values_1 = values; _i < values_1.length; _i++) {
                                var map = values_1[_i];
                                powerbi.DataViewScopeIdentity.equals(map.identities[level], node.identity) && result.push(map);
                            }
                            return result;
                        }
                    }(level, node, valueMap), _.isEmpty(cache) ? powerbi.data.SQExprConverter.getFirstComparandValue(node.identity) : cache[0].valueMap[level]);
                    slicerIndex.calculatedIndex++;
                    var source_1 = visuals.valueFormatter.format(nextLevel, formatString), dataPoint = function(selected, label, hasCount, isImage, level, identity, parent, partially, queryNamePerLevel, dataPoint) {
                        dataPoint = {
                            value: label,
                            tooltip: label,
                            identity: null,
                            selected: selected,
                            count: hasCount ? 0 : void 0,
                            isImage: isImage,
                            level: level,
                            parent: parent,
                            scopeIdentity: identity,
                            partially: partially,
                            disabled: !1,
                            index: dataPoint
                        };
                        setIdentity(dataPoint, queryNamePerLevel), parent && parent.children.push(dataPoint);
                        return dataPoint;
                    }(node.checked, source_1, levelReader.hasCount(), levelReader.isImageData(), level, node.identity, parent, !_.isEmpty(node.children), queryNamePerLevel, slicerIndex.calculatedIndex);
                    shouldRender && dataPoints.push(dataPoint), dataPoint.selected && selectedDataPoints.push(dataPoint), 
                    _.isEmpty(node.children) || (source_1 = reader.getMetadataColumnByLevel(nextLevel = level + 1), 
                    restoreFromSelection(nextLevel, filter, node.children, queryNamePerLevel, cache, source_1, reader, levelReader, dataPoint, dataPoints, selectedDataPoints, shouldRender, slicerIndex));
                }
            }
            function setIdentity(slicerData, queryNamesByLevel) {
                for (var builder = visuals.SelectionIdBuilder.builder(), data = slicerData; data; ) builder.withColumnIdentity(data.scopeIdentity, queryNamesByLevel[slicerData.level]), 
                data = data.parent;
                slicerData.identity = builder.createSelectionId();
            }
            function getRestatement(hostServices, MultiColumn_Join_Separator, isInverted, columnsByLevel) {
                if (_.isEmpty(MultiColumn_Join_Separator)) return hostServices.getLocalizedString("All");
                if (1 !== MultiColumn_Join_Separator.length || isInverted) return hostServices.getLocalizedString("Slicer_Restatement_Multiple");
                var dataPoint = MultiColumn_Join_Separator[0];
                if (null == dataPoint.parent) return dataPoint.value;
                for (var values = [], MultiColumn_Join_Separator = hostServices.getLocalizedString("MultiColumn_Join_Separator"), NamePattern_Bracket = hostServices.getLocalizedString("NamePattern_Bracket"); dataPoint; ) {
                    var columnName = columnsByLevel[dataPoint.level].displayName;
                    values.unshift(jsCommon.StringExtensions.format(NamePattern_Bracket, dataPoint.value, columnName)), 
                    dataPoint = dataPoint.parent;
                }
                return values.join(MultiColumn_Join_Separator);
            }
            DataConversion.DefaultSlicerProperties = function(style) {
                return {
                    general: {
                        outlineWeight: 1,
                        outlineColor: visuals.ColorHelper.getThemeColor(style, DataConversion.DefaultSlicerOutlineColorName)
                    },
                    slicerText: {
                        color: visuals.ColorHelper.getThemeColor(style, DataConversion.DefaultSlicerTextColorName),
                        outlineStyle: 0,
                        outline: outline.none,
                        textSize: 10,
                        fontFamily: visuals.Font.Family.regular.css,
                        labelBold: !1,
                        labelItalic: !1,
                        labelUnderline: !1
                    },
                    selection: {
                        selectAllCheckboxEnabled: !1,
                        singleSelect: !0,
                        strictSingleSelect: !1
                    },
                    search: {
                        enabled: !1,
                        outlineStyle: 4,
                        outline: outline.bottomOnly,
                        borderColor: "#C8C8C8",
                        background: "#ffffff"
                    },
                    expandCollapse: {
                        indentation: 15,
                        visible: !0,
                        toggleType: 0
                    },
                    items: {
                        padding: void 0,
                        accessibilityContrastProperties: !1
                    }
                };
            }, DataConversion.convert = function(options) {
                var dataView = options.dataView, hostServices = options.hostServices, selectionHandler = options.selectionHandler;
                if (dataView && dataView.metadata && !_.isEmpty(dataView.metadata.columns)) {
                    var listSeparator = hostServices.getLocalizedString("ListJoin_Separator"), dataViewReader = new visuals.readers.SlicerDataViewReader(dataView, hostServices.getLocalizedString("ListJoin_Separator")), analyzer = dataViewReader.getIdentityFields();
                    if (!_.isEmpty(analyzer)) {
                        var filter = dataView.metadata && dataView.metadata.objects && powerbi.DataViewObjects.getValue(dataView.metadata.objects, visuals.slicerProps.general.filter), slicerData = dataViewReader.getColumns(), analyzer = {
                            columns: slicerData,
                            defaultValuePropertyId: visuals.slicerProps.general.defaultValue,
                            filter: filter,
                            fieldSQExprs: analyzer
                        }, analyzer = new visuals.SlicerFilterAnalyzer(analyzer, hostServices.ignoreDefaultFilter());
                        _.isEmpty(analyzer.selectedIdentities) || (dataViewReader = new visuals.readers.SlicerDataViewReader(dataView, listSeparator, analyzer.selectedIdentities));
                        slicerData = analyzer.hasMappedColumn && !visuals.SlicerUtil.doDataViewColumnSupportSelectAll({
                            columns: slicerData
                        });
                        !function(originalFilter, analyzer, selectionHandler, hostServices, shouldDisableSelectAll) {
                            var analyzedSemanticFilter = analyzer.filter, isInvertedSelectionMode = selectionHandler.isSelectionModeInverted();
                            {
                                var filterPropertyIdentifier, changes;
                                analyzedSemanticFilter && !SemanticFilter.isSameFilter(analyzedSemanticFilter, originalFilter) && (selectionHandler.handleClearSelection(), 
                                filterPropertyIdentifier = visuals.slicerProps.general.filter, (changes = {})[filterPropertyIdentifier.propertyName] = analyzer.filter, 
                                changes = {
                                    merge: [ {
                                        objectName: filterPropertyIdentifier.objectName,
                                        selector: void 0,
                                        properties: changes
                                    } ]
                                }, hostServices.persistProperties(changes));
                            }
                            !shouldDisableSelectAll || !isInvertedSelectionMode && SemanticFilter.isSameFilter(analyzedSemanticFilter, originalFilter) || visuals.SlicerUtil.clearFilters(selectionHandler, !1);
                        }(filter, analyzer, selectionHandler, hostServices, slicerData), selectionHandler.setColumns(dataViewReader.getColumns()), 
                        selectionHandler.setQueryNameByLevel(dataViewReader.getQueryNamePerLevel());
                        slicerData = function(analyzer, strictSingleSelect, dataReader, searchKey, shouldDisableSelectAll) {
                            var hostServices = searchKey.hostServices, selectionHandler = searchKey.selectionHandler, slicerDataPoints = searchKey.style, localizedSelectAllText = searchKey.localizedSelectAllText, isSlicer = null != searchKey.isSlicer && searchKey.isSlicer, isInvertedSelectionMode = null != selectionHandler && selectionHandler.isSelectionModeInverted(), retainedDataPoints = [];
                            isInvertedSelectionMode = analyzer.filter ? analyzer.isAnyFilter ? powerbi.DataViewObjects.getValue(strictSingleSelect.objects, visuals.slicerProps.data.isInvertedSelectionMode, isInvertedSelectionMode) : analyzer.isNotFilter : !analyzer.hasMappedColumn && powerbi.DataViewObjects.getValue(strictSingleSelect.objects, visuals.slicerProps.data.isInvertedSelectionMode, isInvertedSelectionMode);
                            var defaultSettings = function(slicerItemTextFontProperties, style, searchBackground) {
                                var defaultSettings = DataConversion.DefaultSlicerProperties(style), objects = slicerItemTextFontProperties.objects, colorHelper = visuals.ColorHelper.create(style);
                                objects && (defaultSettings.items.accessibilityContrastProperties = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.accessibilityContrastProperties, !1), 
                                slicerItemTextFontProperties = "lightLabel", defaultSettings.items.accessibilityContrastProperties && 0 === searchBackground && (slicerItemTextFontProperties = "largeLightLabel"), 
                                slicerItemTextFontProperties = FontProperties.createFromObjectOrStyle(powerbi.DataViewObjects.getObject(objects, "items"), {
                                    color: "fontColor",
                                    family: "fontFamily",
                                    size: "textSize"
                                }, colorHelper, style, "foregroundNeutralSecondary", slicerItemTextFontProperties, {
                                    color: defaultSettings.slicerText.color,
                                    family: defaultSettings.slicerText.fontFamily,
                                    size: FontSize.createFromPt(defaultSettings.slicerText.textSize)
                                }), defaultSettings.slicerText.color = slicerItemTextFontProperties.color, defaultSettings.slicerText.fontFamily = slicerItemTextFontProperties.family, 
                                defaultSettings.slicerText.textSize = slicerItemTextFontProperties.size.pt, defaultSettings.items.accessibilityContrastProperties && 1 === searchBackground && (defaultSettings.slicerText.outline = outline.frame, 
                                defaultSettings.slicerText.outlineStyle = 15), defaultSettings.slicerText.outline = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.outline, defaultSettings.slicerText.outline), 
                                defaultSettings.slicerText.outlineStyle = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.outlineStyle, defaultSettings.slicerText.outlineStyle), 
                                (searchBackground = colorHelper.getColorForProperty(objects, visuals.slicerProps.items.background, void 0)) && (defaultSettings.slicerText.background = searchBackground), 
                                defaultSettings.search.enabled = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.general.selfFilterEnabled, defaultSettings.search.enabled), 
                                defaultSettings.search.outlineStyle = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.searchBox.outlineStyle, defaultSettings.search.outlineStyle), 
                                defaultSettings.search.outline = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.searchBox.outline, defaultSettings.search.outline), 
                                defaultSettings.search.borderColor = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.searchBox.borderColor, defaultSettings.search.borderColor), 
                                searchBackground = colorHelper.getColorForProperty(objects, visuals.slicerProps.searchBox.background, void 0), 
                                defaultSettings.search.background = searchBackground || defaultSettings.slicerText.background || defaultSettings.search.background, 
                                defaultSettings.expandCollapse.toggleType = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.expandCollapseToggleType, defaultSettings.expandCollapse.toggleType), 
                                defaultSettings.expandCollapse.indentation = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.steppedLayoutIndentation, defaultSettings.expandCollapse.indentation), 
                                defaultSettings.general.outlineWeight = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.general.outlineWeight, defaultSettings.general.outlineWeight), 
                                defaultSettings.general.outlineColor = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.general.outlineColor, defaultSettings.general.outlineColor), 
                                defaultSettings.selection.selectAllCheckboxEnabled = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.selection.selectAllCheckboxEnabled, defaultSettings.selection.selectAllCheckboxEnabled), 
                                defaultSettings.selection.singleSelect = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.selection.singleSelect, defaultSettings.selection.singleSelect), 
                                defaultSettings.selection.strictSingleSelect = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.selection.strictSingleSelect, defaultSettings.selection.strictSingleSelect), 
                                defaultSettings.slicerText.labelBold = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.bold, !1), 
                                defaultSettings.slicerText.labelItalic = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.italic, !1), 
                                defaultSettings.slicerText.labelUnderline = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.underline, !1), 
                                defaultSettings.items.padding = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.items.padding, void 0));
                                return defaultSettings;
                            }(strictSingleSelect, slicerDataPoints, searchKey.slicerType);
                            selectionHandler && (selectionHandler.setSelectionModeInverted(isInvertedSelectionMode), 
                            selectionHandler.setDefaultValueMode(SemanticFilter.isDefaultFilter(analyzer.filter)));
                            var queryNamePerLevel = dataReader.getQueryNamePerLevel(), tooltipValue = hostServices.getFilterExpressionMetadata(), slicerDataPoints = function readSlicerDataPoints(dataReader, dataLevelReader, selectedDataPoints, hostServices, queryNamePerLevel, cache, slicerIndex, parent, analyzer, featureSwitches) {
                                var selectedFilterNodes = dataLevelReader.getSelectedNodes();
                                var levelDataPoints = [];
                                var categoryValuesLen = dataLevelReader.getDataPointsCount();
                                var slicerDataPoints = [];
                                var source = dataLevelReader.getMetadataColumn();
                                var formatString = visuals.valueFormatter.getFormatString(source, visuals.slicerProps.general.formatString);
                                var level = dataLevelReader.getLevel();
                                var levelIndex = 0;
                                for (var i = 0; i < categoryValuesLen; i++) {
                                    var selectedFilterNode, label, isImage, tooltip, slicerData, nextLevel, metadataColumn = dataLevelReader.getDataViewDataPoint(i);
                                    metadataColumn && (levelIndex++, slicerIndex.calculatedIndex++, selectedFilterNode = visuals.SlicerUtil.tryRemoveValueFromRetainedList(metadataColumn.scopeId, selectedFilterNodes), 
                                    label = visuals.valueFormatter.format(metadataColumn.value, formatString), isImage = dataLevelReader.isImageData() && UrlUtils.isValidImageUrl(label), 
                                    tooltip = label, slicerData = !1, nextLevel = level + ":" + levelIndex, null != analyzer && analyzer.hasMappedColumn && null == metadataColumn.value && (slicerData = !0, 
                                    tooltip = hostServices.getLocalizedString("DQP_Disabled_Blank")), slicerData = {
                                        value: label,
                                        tooltip: tooltip,
                                        identity: null,
                                        selected: null != selectedFilterNode && selectedFilterNode.checked,
                                        partially: selectedFilterNode && !_.isEmpty(selectedFilterNode.children),
                                        count: metadataColumn.count,
                                        isImage: isImage,
                                        level: level,
                                        parent: parent,
                                        isCollapsed: metadataColumn.isCollapsed,
                                        scopeIdentity: metadataColumn.scopeId,
                                        levelIndex: levelIndex,
                                        disabled: slicerData,
                                        index: slicerIndex.calculatedIndex,
                                        id: parent ? parent.id + "," + nextLevel : nextLevel
                                    }, selectedFilterNode && selectedFilterNode.checked && (featureSwitches && featureSwitches.fieldParameters && source.parameter && 2 === source.parameter.kind ? levelDataPoints[selectedFilterNode.index] = slicerData : selectedDataPoints.push(slicerData)), 
                                    slicerDataPoints.push(slicerData), parent && parent.children.push(slicerData), setIdentity(slicerData, queryNamePerLevel), 
                                    !metadataColumn.isCollapsed && metadataColumn.childrenReader ? (slicerData.children = [], 
                                    slicerDataPoints.push.apply(slicerDataPoints, readSlicerDataPoints(dataReader, metadataColumn.childrenReader, selectedDataPoints, hostServices, queryNamePerLevel, cache, slicerIndex, slicerData, void 0, featureSwitches) || [])) : selectedFilterNode && !_.isEmpty(selectedFilterNode.children) && (nextLevel = level + 1, 
                                    metadataColumn = dataReader.getMetadataColumnByLevel(nextLevel), restoreFromSelection(nextLevel, analyzer, selectedFilterNode.children, queryNamePerLevel, cache && cache.cachedValueItems, metadataColumn, dataReader, dataLevelReader, slicerData, slicerDataPoints, selectedDataPoints, !1, slicerIndex)));
                                }
                                _.isEmpty(selectedFilterNodes) || restoreFromSelection(level, analyzer, selectedFilterNodes, queryNamePerLevel, cache && cache.cachedValueItems, source, dataReader, dataLevelReader, parent, slicerDataPoints, selectedDataPoints, !parent || !1 === parent.isCollapsed, slicerIndex);
                                selectedDataPoints.unshift.apply(selectedDataPoints, levelDataPoints);
                                return slicerDataPoints;
                            }(dataReader, dataReader.getDataPointsReader(), retainedDataPoints, hostServices, queryNamePerLevel, tooltipValue, {
                                calculatedIndex: 0
                            }, void 0, analyzer, searchKey.featureSwitches), tooltipValue = selectionHandler.toFilterExpressionMetadata(retainedDataPoints);
                            hostServices.setFilterExpressionMetadata(tooltipValue);
                            searchKey = function(containsValueVisitor) {
                                var containsFilter = powerbi.DataViewObjects.getValue(containsValueVisitor.objects, visuals.slicerProps.general.selfFilter, void 0);
                                if (!containsFilter) return "";
                                containsValueVisitor = containsFilter.conditions();
                                containsValueVisitor.length;
                                containsFilter = containsValueVisitor[0];
                                if (containsFilter) {
                                    containsValueVisitor = new ConditionsFilterValueVisitor();
                                    return containsFilter.accept(containsValueVisitor), containsValueVisitor.getValueForField();
                                }
                            }(strictSingleSelect), tooltipValue = defaultSettings.selection, strictSingleSelect = tooltipValue.strictSingleSelect;
                            !strictSingleSelect && isSlicer && selectionHandler.isDisableMultipleSelectForMappedColumn() && (strictSingleSelect = !0, 
                            defaultSettings.selection.strictSingleSelect = !0);
                            tooltipValue.selectAllCheckboxEnabled && !strictSingleSelect && _.isEmpty(searchKey) && (tooltipValue = shouldDisableSelectAll ? hostServices.getLocalizedString("DQP_Disabled_SelectAll") : localizedSelectAllText, 
                            slicerDataPoints.unshift({
                                value: localizedSelectAllText,
                                tooltip: tooltipValue,
                                identity: visuals.SelectionId.createWithMeasure(localizedSelectAllText),
                                selected: !1,
                                isSelectAllDataPoint: !0,
                                partially: 0 < retainedDataPoints.length,
                                count: void 0,
                                disabled: shouldDisableSelectAll,
                                levelIndex: 0,
                                index: 0,
                                id: "0:0"
                            }));
                            selectionHandler && selectionHandler.setStrictSingleSelect(strictSingleSelect, _.isEmpty(retainedDataPoints) ? slicerDataPoints : retainedDataPoints);
                            return {
                                categorySourceName: dataReader.getDisplayName(),
                                slicerSettings: defaultSettings,
                                slicerDataPoints: slicerDataPoints,
                                defaultValueByLevel: analyzer.defaultValueByLevel,
                                searchKey: searchKey,
                                restatement: getRestatement(hostServices, retainedDataPoints, isInvertedSelectionMode, dataReader.getColumns()),
                                warnings: new visuals.VisualWarningBuilder(),
                                retainedDataPoints: retainedDataPoints,
                                queryNameByLevel: queryNamePerLevel
                            };
                        }(analyzer, dataView.metadata, dataViewReader, options, slicerData);
                        return slicerData.hasImages = _.some(slicerData.slicerDataPoints, function(slicerDatePoint) {
                            return slicerDatePoint.isImage;
                        }), slicerData;
                    }
                }
            }, DataConversion.getRestatement = getRestatement;
            var ConditionsFilterValueVisitor = function(_super) {
                function ConditionsFilterValueVisitor() {
                    return null !== _super && _super.apply(this, arguments) || this;
                }
                return __extends(ConditionsFilterValueVisitor, _super), ConditionsFilterValueVisitor.prototype.visitConstant = function(expr) {
                    expr.type && expr.type.text && (this.value = expr.value);
                }, ConditionsFilterValueVisitor.prototype.visitContains = function(expr) {
                    expr.left.accept(this), expr.right.accept(this);
                }, ConditionsFilterValueVisitor.prototype.visitOr = function(expr) {
                    expr.left.accept(this), expr.right.accept(this);
                }, ConditionsFilterValueVisitor.prototype.visitColumnRef = function(expr) {
                    this.fieldExpr = expr;
                }, ConditionsFilterValueVisitor.prototype.visitHierarchyLevel = function(expr) {
                    this.fieldExpr = expr;
                }, ConditionsFilterValueVisitor.prototype.visitDefault = function(expr) {
                    this.value = void 0, this.fieldExpr = void 0;
                }, ConditionsFilterValueVisitor.prototype.getValueForField = function() {
                    return this.fieldExpr && this.value;
                }, ConditionsFilterValueVisitor;
            }(DefaultSQExprVisitor);
        }(visuals.DataConversion || (visuals.DataConversion = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var controls = powerbi.visuals.controls, FocusManagerFocusEventName = jsCommon.FocusManagerFocusEventName, RelativeFilterType = powerbi.data.RelativeFilterType, Builder = powerbi.visuals.builder;
        function DefaultModes() {
            return visuals.slicerMode.type.members([ visuals.slicerMode.basic, visuals.slicerMode.dropdown ]);
        }
        var Slicer = function() {
            function Slicer(options) {
                this.areControlButtonsAlwaysVisible = !1, this.enableInFocusRenderers = !1, this.enableMultiElementRows = !1, 
                this.preventVirtualKeyboardOnTheFirstTap = !1, this.isInFocus = !1, this.hasSearchableData = !1, 
                this.lockKeyboardNavigation = !0, this.isSlicer = !1, options && (this.enableInFocusRenderers = options.enableInFocusRenderers, 
                this.enableMultiElementRows = options.enableMultiElementRows, this.preventVirtualKeyboardOnTheFirstTap = options.preventVirtualKeyboardOnTheFirstTap, 
                this.lockKeyboardNavigation = !1 !== options.lockKeyboardNavigation, this.featureSwitches = options.featureSwitches, 
                this.isSlicer = options.isSlicer), this.activeMode = visuals.slicerMode.basic, this.slicerOrientation = 0, 
                this.viewModelAdapter = new visuals.SlicerViewModelAdapter();
            }
            return Slicer.prototype.init = function(options) {
                var _this = this;
                this.initOptions = options, this.element = options.element, this.style = options.style, 
                this.visibilityHelper = powerbi.responsiveVisualUtilModuleFactory().visibilityHelper(this.element, "slicerResponsiveIcon"), 
                this.currentViewport = options.viewport, this.hostServices = options.host, this.loadMoreHandler = new visuals.SimpleLoadMoreDataHandler(this.hostServices), 
                this.container = InJs.DomFactory.div().addClass("slicer-container").appendTo(this.element), 
                this.alert = InJs.DomFactory.span().appendTo(this.container).attr("aria-live", "polite").attr("role", "status").hide(), 
                this.headerContainer = InJs.DomFactory.div().appendTo(this.container).addClass("slicer-header-wrapper"), 
                this.slicerContainer = InJs.DomFactory.div().appendTo(this.container).addClass("slicer-content-wrapper"), 
                this.initializeSlicerRenderer(), this.container.on(FocusManagerFocusEventName, function() {
                    _this.areControlButtonsAlwaysVisible = !0, _this.container.addClass("focused"), 
                    _this.alert.text(_this.activeMode);
                    var hasSlider = !!_this.slicerRenderer && _this.slicerRenderer.hasSlider();
                    _this.updateSlicerHeader(hasSlider);
                }), this.container.on("focusin", function() {
                    _this.container.addClass("focused");
                });
            }, Slicer.prototype.destroy = function() {
                this.slicerRenderer.onDestroy && this.slicerRenderer.onDestroy(), this.slicerHeader && this.slicerHeader.destroy();
            }, Slicer.prototype.update = function(options) {
                this.isInFocus = !!options.isInFocus, options.type & powerbi.VisualUpdateType.Resize && this.resizing(options.viewport), 
                (!options.type || options.type & powerbi.VisualUpdateType.Data) && this.dataChanged(options.dataViews, options.operationKind);
            }, Slicer.prototype.dataChanged = function(dataViews, resetScrollbarPosition) {
                _.isEmpty(dataViews) || (this.dataView = dataViews[0], resetScrollbarPosition = resetScrollbarPosition !== powerbi.VisualDataChangeOperationKind.Append, 
                this.render(resetScrollbarPosition, !0));
            }, Slicer.prototype.resizing = function(finalViewport) {
                this.currentViewport = finalViewport, this.render(!1);
            }, Slicer.prototype.enumerateObjectInstances = function(options) {
                if (this.dataView) switch (options.objectName) {
                  case "header":
                  case "modeSelection":
                    return this.slicerHeader.enumerateObjectInstances(options);

                  case "general":
                    var orientation_1, objects = this.slicerHeader.enumerateObjectInstances(options);
                    return this.slicerRenderer && this.slicerRenderer.supportsOrientation() && (orientation_1 = this.data ? this.data.orientation : 0, 
                    objects[0].properties.orientation = orientation_1), this.viewModelAdapter && this.viewModelAdapter.enumerateObjectInstances(options, objects, this.dataView, this.activeMode, this.slicerOrientation), 
                    objects;

                  default:
                    return this.slicerRenderer.enumerateObjectInstances(options, this.featureSwitches);
                }
            }, Slicer.prototype.getFormattingModel = function() {
                var _this = this;
                if (this.dataView) return new visuals.builder.FormattingModelBuilder(function() {
                    return _this.getSlicerSettingsCard();
                }, function() {
                    return _this.slicerHeader.getSlicerHeaderCard(_this.hostServices);
                }, function() {
                    return _this.slicerRenderer.getValuesCard(_this.featureSwitches);
                }, function() {
                    return _this.slicerRenderer.getAdditionalCards();
                }).build();
            }, Slicer.prototype.getSlicerSettingsCard = function() {
                var _this = this, cardUidBuilder = new Builder.FormattingCardUidBuilder("slicerSettings");
                this.slicerRenderer && this.slicerRenderer.supportsOrientation() && (groups = this.data ? this.data.orientation : 0);
                var revertToDefaultDescriptors = this.slicerRenderer.getSlicerSettingsCardOptions(cardUidBuilder, groups);
                if (revertToDefaultDescriptors) {
                    var groups = revertToDefaultDescriptors.groups, revertToDefaultDescriptors = revertToDefaultDescriptors.revertToDefaultDescriptors;
                    return new Builder.FormattingCardBuilder(cardUidBuilder, "Slicer_Settings", revertToDefaultDescriptors, function(key) {
                        return _this.hostServices.getLocalizedString(key);
                    }).withGroups(groups).build();
                }
            }, Slicer.prototype.resolveFormattingPlaceholder = function(name_1) {
                if (visuals.builder.isVisualFormattingSlicePlaceholder(name_1)) {
                    name_1 = name_1.name;
                    if ("responsive" === name_1) return this.getResponsiveSlice();
                }
            }, Slicer.prototype.getResponsiveSlice = function() {
                var _this = this;
                if (this.dataView && this.viewModelAdapter) return this.viewModelAdapter.getResponsiveSlice(this.dataView, this.activeMode, this.slicerOrientation, function(key) {
                    return _this.hostServices.getLocalizedString(key);
                });
            }, Slicer.prototype.loadMoreData = function() {
                return this.loadMoreHandler.updateDataView(this.dataView), this.loadMoreHandler.loadMoreData();
            }, Slicer.prototype.onClearSelection = function() {
                this.slicerRenderer && this.slicerRenderer.onClear && this.slicerRenderer.onClear();
            }, Slicer.converter = function(column, featureSwitches, listJoinSeparator) {
                if (column) {
                    var categorySourceName, columns, mode = null, orientation = 0, strictSingleSelect = !1, isCategorySourceNumeric = !1, activeOptions = DefaultModes(), switchMode = 1, hasSearchableData = !1;
                    return column.metadata && column.metadata.objects && (columns = column.metadata.objects, 
                    orientation = powerbi.DataViewObjects.getValue(columns, visuals.slicerProps.general.orientation, orientation), 
                    strictSingleSelect = powerbi.DataViewObjects.getValue(columns, visuals.slicerProps.selection.strictSingleSelect, strictSingleSelect), 
                    mode = powerbi.DataViewObjects.getValue(columns, visuals.slicerProps.data.mode, mode)), 
                    column.metadata && column.metadata.columns && (columns = visuals.SlicerUtil.readMetadataColumns(column.metadata.columns), 
                    _.isEmpty(columns) || (column = columns[0], mode = visuals.SlicerPluginMethods.getValidatedSlicerMode(columns, mode), 
                    categorySourceName = _.join(_.map(columns, function(cl) {
                        return cl.displayName;
                    }), listJoinSeparator), hasSearchableData = !_.some(columns, function(column) {
                        return !0 !== column.type.text;
                    }), 1 === columns.length ? (hasSearchableData = !0 === column.type.text, isCategorySourceNumeric = !0 === column.type.numeric, 
                    column.parameter && 1 === column.parameter.kind ? (activeOptions = _.union(DefaultModes(), visuals.slicerMode.type.members([ mode ])), 
                    strictSingleSelect = strictSingleSelect || !column.parameter.supportsMultipleValues) : !0 === column.type.dateTime ? activeOptions = visuals.slicerMode.type.members([ visuals.slicerMode.basic, visuals.slicerMode.dropdown, visuals.slicerMode.before, visuals.slicerMode.after, visuals.slicerMode.between, visuals.slicerMode.relativeDate, visuals.slicerMode.relativeTime ]) : isCategorySourceNumeric && (activeOptions = _.union(activeOptions, visuals.slicerMode.type.members([ visuals.slicerMode.basic, visuals.slicerMode.dropdown, visuals.slicerMode.before, visuals.slicerMode.after, visuals.slicerMode.between ])), 
                    column.parameter && (activeOptions = _.union(activeOptions, visuals.slicerMode.type.members([ visuals.slicerMode.single ]))))) : orientation = 0, 
                    visuals.slicerMode.slicerModeSupportsMinMax(mode) && 1 === columns.length && (switchMode = column.aggregates && null != column.aggregates.min && null != column.aggregates.max ? switchMode : 2))), 
                    {
                        orientation: orientation,
                        categorySourceName: categorySourceName,
                        isCategorySourceNumeric: isCategorySourceNumeric,
                        mode: mode || visuals.slicerMode.basic,
                        switchMode: switchMode,
                        hasSearchableData: hasSearchableData,
                        activeOptions: activeOptions,
                        showIcon: !1,
                        showTabularSlicer: !1,
                        warningObjectCollection: new visuals.VisualWarningBuilder(),
                        strictSingleSelect: strictSingleSelect
                    };
                }
            }, Slicer.prototype.render = function(resetScrollbarPosition, stopWaitingForData) {
                this.updateViewport(), this.previousData = this.data, this.data = this.originalData = Slicer.converter(this.dataView, this.featureSwitches, this.hostServices.getLocalizedString("ListJoin_Separator")), 
                this.viewModelAdapter && this.dataView && (this.data = this.viewModelAdapter.applySlicerChanges(this.currentViewport, this.originalData, this.dataView)), 
                this.data && (this.hasSearchableData = this.data.hasSearchableData), this.renderSlicer(resetScrollbarPosition, stopWaitingForData), 
                this.data && this.data.showIcon ? this.visibilityHelper.updateVisibility({
                    showIcon: !0,
                    viewport: this.currentViewport
                }) : this.visibilityHelper.updateVisibility({
                    showIcon: !1
                });
            }, Slicer.prototype.renderSlicer = function(supportsRestatement, stopWaitingForData) {
                this.updateSlicerRendererIfNeeded(), this.slicerRenderer.render({
                    dataView: this.dataView,
                    viewport: this.currentViewport,
                    resetScrollbarPosition: supportsRestatement,
                    hasSearchableData: this.hasSearchableData,
                    restatement: this.data && this.data.categorySourceName,
                    isSlicer: this.isSlicer,
                    isSearchMode: !!this.selectionHandler && this.selectionHandler.isSearchMode()
                }), this.updateSlicerHeader(this.slicerRenderer.hasSlider());
                supportsRestatement = null != this.slicerRenderer.getRestatement;
                this.slicerHeader && this.slicerHeader.setFilterRestatement(supportsRestatement ? this.slicerRenderer.getRestatement() : void 0, supportsRestatement), 
                stopWaitingForData && this.loadMoreHandler.onLoadMoreDataCompleted(), this.updateWarnings();
            }, Slicer.prototype.updateSlicerRendererIfNeeded = function() {
                var showTabularSlicer, newOrientation;
                if (this.enableInFocusRenderers && this.container.hasClass("full-screen") !== this.isInFocus) return this.isInFocus ? this.container.addClass("full-screen") : this.container.removeClass("full-screen"), 
                void this.initializeSlicerRenderer();
                this.data && (newOrientation = this.data.mode || visuals.slicerMode.basic, this.activeMode !== newOrientation || visuals.slicerMode.isRangeSlicerMode(this.activeMode) && this.previousData && this.previousData.isCategorySourceNumeric !== this.data.isCategorySourceNumeric ? (this.activeMode = newOrientation, 
                this.initializeSlicerRenderer()) : (showTabularSlicer = this.data.showTabularSlicer, 
                newOrientation = this.data.orientation || 0, (this.slicerOrientation !== newOrientation || this.previousData && this.previousData.showTabularSlicer !== showTabularSlicer) && this.initializeSlicerRenderer()));
            }, Slicer.prototype.updateViewport = function() {
                var css = {
                    height: this.currentViewport.height
                };
                this.container.css(css);
            }, Slicer.prototype.updateSlicerHeader = function(hasSlider) {
                var reader, settings, services_1, _this = this;
                this.dataView && (reader = powerbi.data.createDataViewCategoricalReader(this.dataView), 
                this.slicerHeader || (settings = {
                    onClear: function() {
                        _this.slicerRenderer && _this.slicerRenderer.onClear(!0);
                    },
                    onChange: function(mode) {
                        _this.slicerRenderer && _this.slicerRenderer.onModeChange(mode);
                    },
                    host: this.headerContainer,
                    visibilityState: this.data.switchMode,
                    selectedValue: this.activeMode,
                    hoverContainer: this.element,
                    enableInFocusRenderers: this.enableInFocusRenderers,
                    slicerModeOptions: this.slicerActiveOptions()
                }, services_1 = {
                    localize: this.hostServices.getLocalizedString.bind(this.hostServices),
                    getViewMode: this.hostServices.getViewMode.bind(this.hostServices),
                    applySlicerHeaderChanges: function(visualSlicerHeaderData) {
                        var result = visualSlicerHeaderData;
                        return result = _this.viewModelAdapter && _this.dataView && _this.data ? _this.viewModelAdapter.applySlicerHeaderChanges(_this.currentViewport, visualSlicerHeaderData, _this.dataView, _this.data, hasSlider) : result;
                    }
                }, this.slicerHeader = new controls.SlicerHeader(settings, services_1, this.style, this.featureSwitches)), 
                this.slicerHeader.update(reader, {
                    text: this.data.categorySourceName,
                    restatement: this.slicerRenderer.getRestatement ? this.slicerRenderer.getRestatement() : void 0,
                    selectedValue: this.activeMode,
                    visibilityState: this.data.switchMode,
                    isInFocus: this.isInFocus,
                    slicerModeOptions: this.slicerActiveOptions(),
                    areControlButtonsAlwaysVisible: this.areControlButtonsAlwaysVisible,
                    strictSingleSelect: this.data.strictSingleSelect
                }));
            }, Slicer.prototype.slicerActiveOptions = function() {
                if (this.data.isCategorySourceNumeric) {
                    for (var activeOptions = [], _i = 0, _a = this.data.activeOptions; _i < _a.length; _i++) {
                        var option = _a[_i];
                        activeOptions.push(visuals.NumericSlicerOptions.members([ option.value ])[0]);
                    }
                    return activeOptions;
                }
                return this.data.activeOptions;
            }, Slicer.prototype.initializeSlicerRenderer = function() {
                switch (this.slicerRenderer && this.slicerRenderer.onDestroy && this.slicerRenderer.onDestroy(), 
                this.slicerOrientation = this.data && this.data.orientation || 0, this.slicerContainer.empty(), 
                this.activeMode) {
                  case visuals.slicerMode.basic:
                    return void this.initializeBasicSlicer();

                  case visuals.slicerMode.dropdown:
                    return void this.initializeDropdownSlicer();

                  case visuals.slicerMode.relativeDate:
                    return void this.initializeRelativeSlicer(RelativeFilterType.Date);

                  case visuals.slicerMode.relativeTime:
                    return void this.initializeRelativeSlicer(RelativeFilterType.Time);

                  case visuals.slicerMode.between:
                  case visuals.slicerMode.before:
                  case visuals.slicerMode.after:
                    return void this.initializeRangeSlicer(!1);

                  case visuals.slicerMode.single:
                    return void this.initializeRangeSlicer(!0);

                  default:
                    return this.activeMode, void this.initializeVerticalSlicer();
                }
            }, Slicer.prototype.initializeBasicSlicer = function() {
                if (this.enableInFocusRenderers && this.isInFocus) this.initializeInFocusVerticalSlicer(); else switch (this.slicerOrientation) {
                  case 1:
                    this.initializeHorizontalOrTabularSlicer();
                    break;

                  case 0:
                    this.initializeVerticalSlicer();
                }
            }, Slicer.prototype.initializeInFocusVerticalSlicer = function() {
                this.hostServices.setShouldDeferData(!1);
                var verticalSlicerRenderer = this.slicerRenderer = new visuals.VerticalSlicerRenderer(new visuals.VerticalSlicerRenderer.CheckListSlicerStrategy(), {
                    hostServices: this.hostServices,
                    featureSwitches: this.featureSwitches
                }, this.lockKeyboardNavigation), options = this.createInitOptions();
                this.selectionHandler = verticalSlicerRenderer.init(options, this.slicerContainer);
            }, Slicer.prototype.initializeVerticalSlicer = function() {
                var verticalSlicerRenderer = this.slicerRenderer = new visuals.VerticalSlicerRenderer(new visuals.VerticalSlicerRenderer.CheckBoxSlicerStrategy(), {
                    hostServices: this.hostServices,
                    featureSwitches: this.featureSwitches
                }, this.lockKeyboardNavigation), options = this.createInitOptions();
                this.selectionHandler = verticalSlicerRenderer.init(options, this.slicerContainer);
            }, Slicer.prototype.initializeRangeSlicer = function(singleValue) {
                var rangeSlicerRenderer;
                this.data.isCategorySourceNumeric ? (options = new visuals.RangeSlicerViewModelAdapter(), 
                rangeSlicerRenderer = new visuals.NumericSlicer({
                    hostServices: this.hostServices
                }), this.slicerRenderer = new visuals.RangeSlicer({
                    hostServices: this.hostServices,
                    featureSwitches: this.featureSwitches
                }, rangeSlicerRenderer, singleValue, this.data.isCategorySourceNumeric, options)) : (options = new visuals.RangeSlicerViewModelAdapter(), 
                rangeSlicerRenderer = new visuals.DateSlicer({
                    preventVirtualKeyboardOnTheFirstTap: this.preventVirtualKeyboardOnTheFirstTap,
                    hostServices: this.hostServices,
                    featureSwitches: this.featureSwitches
                }), this.slicerRenderer = new visuals.RangeSlicer({
                    preventTextSelection: this.preventVirtualKeyboardOnTheFirstTap,
                    hostServices: this.hostServices,
                    featureSwitches: this.featureSwitches
                }, rangeSlicerRenderer, singleValue, this.data.isCategorySourceNumeric, options));
                var options = this.createInitOptions();
                this.selectionHandler = this.slicerRenderer.init(options, this.slicerContainer);
            }, Slicer.prototype.initializeHorizontalOrTabularSlicer = function() {
                var slicerRenderer = new (!!this.data && this.data.showTabularSlicer ? visuals.TabularSlicerLayout : visuals.HorizontalSlicerLayout)(), options = new visuals.HorizontalSlicerViewModelAdapter(), slicerRenderer = this.slicerRenderer = new visuals.HorizontalSlicerRenderer({
                    hostServices: this.hostServices,
                    horizontalSlicerLayout: slicerRenderer,
                    featureSwitches: this.featureSwitches
                }, options), options = this.createInitOptions();
                this.selectionHandler = slicerRenderer.init(options, this.slicerContainer);
            }, Slicer.prototype.initializeRelativeSlicer = function(relativeSlicerRenderer) {
                var options = {
                    hostServices: this.hostServices
                }, relativeSlicerRenderer = this.slicerRenderer = visuals.RelativeSlicerUtil.createRelativeSlicer(relativeSlicerRenderer, options), options = this.createInitOptions();
                this.selectionHandler = relativeSlicerRenderer.init(options, this.slicerContainer);
            }, Slicer.prototype.initializeDropdownSlicer = function() {
                var verticalSlicerRenderer, options;
                this.enableInFocusRenderers && this.isInFocus ? this.initializeInFocusVerticalSlicer() : (options = {
                    hostServices: this.hostServices,
                    featureSwitches: this.featureSwitches
                }, verticalSlicerRenderer = new visuals.VerticalSlicerRenderer(new visuals.VerticalSlicerRenderer.CheckBoxSlicerStrategy(), options), 
                this.slicerRenderer = new visuals.DropdownSlicerRenderer(verticalSlicerRenderer, options), 
                options = this.createInitOptions(), this.selectionHandler = this.slicerRenderer.init(options, this.slicerContainer));
            }, Slicer.prototype.createInitOptions = function() {
                var _this = this;
                return {
                    visualInitOptions: this.initOptions,
                    loadMoreData: function() {
                        return _this.loadMoreData();
                    },
                    enableMultiElementRows: this.enableMultiElementRows
                };
            }, Slicer.prototype.updateWarnings = function() {
                this.data && (this.slicerHeader.addWarnings(this.data.warningObjectCollection), 
                this.slicerRenderer.addWarnings && this.slicerRenderer.addWarnings(this.data.warningObjectCollection), 
                this.hostServices.setWarnings(this.data.warningObjectCollection.complete()));
            }, Slicer;
        }();
        visuals.Slicer = Slicer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var BrowserUtils = jsCommon.BrowserUtils, DOMConstants = jsCommon.DOMConstants, KeyUtils = jsCommon.KeyUtils, SlicerWebBehavior = function() {
            function SlicerWebBehavior() {}
            return SlicerWebBehavior.prototype.bindEvents = function(options, selectionHandler) {
                this.behavior = this.createWebBehavior(options), this.behavior.bindEvents(options.behaviorOptions, selectionHandler);
            }, SlicerWebBehavior.prototype.renderSelection = function() {
                this.behavior && this.behavior.renderSelection();
            }, SlicerWebBehavior.bindSlicerEvents = function(behaviorOptions, slicers, selectionHandler, slicerSettings) {
                SlicerWebBehavior.bindSlicerItemSelectionEvent(slicers, selectionHandler, slicerSettings), 
                behaviorOptions.searchInput && SlicerWebBehavior.bindSlicerSearchEvent(behaviorOptions.searchInput, behaviorOptions.clearSearchTextButton, selectionHandler);
            }, SlicerWebBehavior.setSelectionOnSlicerItems = function(selectableItems, selectionHandler, style) {
                var isSelectionInverted = selectionHandler.isSelectionModeInverted(), hasSelection = selectionHandler.hasSelection();
                selectableItems.each(function(shouldCheck, i) {
                    var borderColor, partially = !!shouldCheck.partially || shouldCheck.isSelectAllDataPoint && hasSelection, shouldCheck = !hasSelection && isSelectionInverted || hasSelection && !partially && visuals.SlicerUtil.getSlicerDataPointCheckedState(shouldCheck, isSelectionInverted);
                    $(this).toggleClass("selected", shouldCheck), $(this).toggleClass("partiallySelected", !!partially), 
                    style.isHighContrast && (input = this.getElementsByTagName("span")[0], shouldCheck ? (borderColor = visuals.ColorHelper.getThemeColor(style, "foregroundSelected"), 
                    input && (input.style.backgroundColor = borderColor, input.style.borderColor = borderColor)) : (borderColor = visuals.ColorHelper.getThemeColor(style, "foreground"), 
                    input && (input.style.backgroundColor = "", input.style.borderColor = borderColor, 
                    input.style.boxShadow = "none")));
                    var input = this.getElementsByTagName("input")[0];
                    input && (input.checked = shouldCheck);
                });
            }, SlicerWebBehavior.bindSlicerItemSelectionEvent = function(slicers, selectionHandler, slicerSettings) {
                var _this = this;
                slicers.on("keydown", function(d) {
                    var event = d3.event, keyCode = event.keyCode;
                    32 !== keyCode && 13 !== keyCode || (32 === keyCode && event.preventDefault(), _this.toggleItemSelection(d, selectionHandler, slicerSettings));
                }).on("click", function(d) {
                    $(d3.event.target).trigger("slicer.dataPointSelected"), _this.toggleItemSelection(d, selectionHandler, slicerSettings);
                });
            }, SlicerWebBehavior.toggleItemSelection = function(d, selectionHandler, selectMode) {
                var d3Event;
                d.disabled || (d3Event = d3.event, d.isSelectAllDataPoint ? (selectionHandler.toggleSelectionModeInversion(), 
                selectionHandler.persistSelectionFilter(visuals.slicerProps.general.filter)) : (selectMode = SlicerWebBehavior.isMultiSelect(d, d3Event, selectMode, selectionHandler) ? 3 : 0, 
                selectionHandler.handleSelection(d, selectMode, {
                    x: d3Event.clientX,
                    y: d3Event.clientY
                }) && selectionHandler.persistSelectionFilter(visuals.slicerProps.general.filter)));
            }, SlicerWebBehavior.bindSlicerSearchEvent = function(slicerSearch, clearSearchTextButton, selectionHandler) {
                var _this = this;
                slicerSearch.empty() || (slicerSearch.on(DOMConstants.keyDownEventName, function() {
                    var d3Event = d3.event;
                    BrowserUtils.isCtrlOrMeta(d3Event) && KeyUtils.isCtrlShortcutKey(d3Event.keyCode) || KeyUtils.isArrowKey(d3Event.keyCode) || KeyUtils.isDeleteKey(d3Event.keyCode) ? d3Event.stopPropagation() : 27 === d3Event.keyCode ? (_this.clearSearch(selectionHandler), 
                    d3Event.preventDefault()) : 13 === d3Event.keyCode && (SlicerWebBehavior.startSearch(slicerSearch, selectionHandler), 
                    d3Event.stopPropagation());
                }).on(DOMConstants.keyUpEventName, _.debounce(function() {
                    SlicerWebBehavior.startSearch(slicerSearch, selectionHandler);
                }, SlicerWebBehavior.searchInputTimeoutDuration)), clearSearchTextButton && !clearSearchTextButton.empty() && clearSearchTextButton.on(DOMConstants.mouseClickEventName, function() {
                    _this.clearSearch(selectionHandler), d3.event.stopPropagation();
                }));
            }, SlicerWebBehavior.clearSearch = function(selectionHandler) {
                selectionHandler.setSearchMode(!0), selectionHandler.persistSelfFilter(visuals.slicerProps.general.selfFilter, null);
            }, SlicerWebBehavior.startSearch = function(searchKey, selectionHandler) {
                searchKey = searchKey.node(), searchKey = searchKey && searchKey.value, searchKey = _.trim(searchKey);
                selectionHandler.setSearchMode(!0), selectionHandler.persistSelfFilter(visuals.slicerProps.general.selfFilter, searchKey);
            }, SlicerWebBehavior.isMultiSelect = function(d, event, settings, selectionHandler) {
                return !settings.selection.strictSingleSelect && !selectionHandler.isDisableMultipleSelectForMappedColumn() && (selectionHandler.isSelectionModeInverted() || !settings.selection.singleSelect || BrowserUtils.isCtrlOrMeta(event) || 1 === selectionHandler.getDataMultiSelectMode() || SlicerWebBehavior.hasParentSelected(d));
            }, SlicerWebBehavior.hasParentSelected = function(d) {
                for (;d.parent; ) {
                    if (d.parent.selected) return !0;
                    d = d.parent;
                }
            }, SlicerWebBehavior.prototype.createWebBehavior = function(behavior) {
                behavior = new (1 === behavior.orientation ? visuals.HorizontalSlicerWebBehavior : visuals.VerticalSlicerWebBehavior)();
                return behavior;
            }, SlicerWebBehavior.searchInputTimeoutDuration = 500, SlicerWebBehavior;
        }();
        visuals.SlicerWebBehavior = SlicerWebBehavior;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(controls) {
            var Builder = powerbi.visuals.builder, FontSize = powerbi.visuals.Units.FontSize, outline = visuals.outline, PixelConverter = jsCommon.PixelConverter, SelectMenu = powerbi.visuals.controls.SelectMenu, StringExtensions = jsCommon.StringExtensions, CssConstants = jsCommon.CssConstants, SlicerHeader = function() {
                function SlicerHeader(settings, services, style, featureSwitches) {
                    this.services = services, this.settings = settings, this.style = style, this.originalData = this.data = SlicerHeader.DefaultData(this.style, settings.text), 
                    this.featureSwitches = featureSwitches, this.render();
                }
                return SlicerHeader.DefaultData = function(style, text) {
                    return {
                        borderStyle: "solid",
                        borderBottomWidth: 1,
                        show: !0,
                        outline: outline.none,
                        outlineStyle: 0,
                        fontColor: visuals.ColorHelper.getThemeColor(style, "foregroundDark"),
                        textSize: 9,
                        fontFamily: visuals.Font.Family.regular.css,
                        iconColor: visuals.ColorHelper.getThemeColor(style, "foregroundNeutralSecondary"),
                        iconHoverColor: visuals.ColorHelper.getThemeColor(style, "foreground"),
                        outlineColor: visuals.ColorHelper.getThemeColor(style, "foregroundNeutralSecondaryAlt2"),
                        outlineWeight: 1,
                        searchEnabled: !1,
                        background: null,
                        showRestatement: !1,
                        menu: {
                            fontColor: visuals.ColorHelper.getThemeColor(style, "foregroundNeutralSecondary")
                        },
                        warnings: new visuals.VisualWarningBuilder(),
                        text: text,
                        labelBold: !1,
                        labelItalic: !1,
                        labelUnderline: !1
                    };
                }, SlicerHeader.InFocusModeData = function(style, data) {
                    data = SlicerHeader.DefaultData(style, data);
                    return data.borderStyle = "none", data.background = visuals.ColorHelper.getThemeColor(style, "foregroundNeutralLight"), 
                    data.textSize = PixelConverter.toPoint(13), data.fontColor = visuals.ColorHelper.getThemeColor(style, "foregroundNeutralDark"), 
                    data.fontFamily = visuals.Font.Family.regular.css, data;
                }, SlicerHeader.prototype.destroy = function() {
                    this.selectMenu && this.selectMenu.destroy();
                }, SlicerHeader.prototype.enumerateObjectInstances = function(result) {
                    var data = this.originalData;
                    if (data) {
                        if ("header" !== result.objectName) return "general" === result.objectName ? [ {
                            selector: null,
                            objectName: "general",
                            properties: {
                                outlineColor: data.outlineColor,
                                outlineWeight: data.outlineWeight
                            }
                        } ] : void 0;
                        result = {
                            selector: null,
                            objectName: "header",
                            properties: {
                                text: data.text,
                                show: data.show,
                                fontColor: data.fontColor,
                                background: data.background,
                                textSize: data.textSize,
                                fontFamily: data.fontFamily,
                                outlineColor: data.outlineColor,
                                outlineWeight: data.outlineWeight
                            },
                            propertyInstanceKind: {
                                text: 3,
                                fontColor: this.featureSwitches.expressionBasedFormatting ? 3 : 1,
                                background: this.featureSwitches.expressionBasedFormatting ? 3 : 1
                            }
                        };
                        return this.featureSwitches.outlineDropdownToCheckboxes ? result.properties.outlineStyle = data.outlineStyle : result.properties.outline = data.outline, 
                        this.settings.supportsRestatement && (result.properties.showRestatement = data.showRestatement), 
                        this.featureSwitches && this.featureSwitches.enableBIU && (result.properties.bold = data.labelBold, 
                        result.properties.italic = data.labelItalic, result.properties.underline = data.labelUnderline), 
                        [ result ];
                    }
                }, SlicerHeader.prototype.getSlicerHeaderCard = function(hostServices) {
                    var _this = this, data = this.originalData;
                    if (data) {
                        var headerProps = visuals.slicerProps.header, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("slicerHeader"), "Slicer_Header", [ headerProps.text, headerProps.fontFamily, headerProps.textSize, headerProps.bold, headerProps.italic, headerProps.underline, headerProps.fontColor, headerProps.showRestatement, headerProps.outlineStyle, headerProps.outline, visuals.slicerProps.general.outlineColor, visuals.slicerProps.general.outlineWeight, headerProps.background, headerProps.show ], function(key) {
                            return hostServices.getLocalizedString(key);
                        }), fontControlBuilder = new visuals.builder.FontControlBuilder().withFontFamily({
                            descriptor: headerProps.fontFamily,
                            value: data.fontFamily
                        }).withFontSizeProperties({
                            descriptor: headerProps.textSize,
                            value: data.textSize
                        });
                        this.featureSwitches && this.featureSwitches.enableBIU && fontControlBuilder.withBold({
                            descriptor: headerProps.bold,
                            value: data.labelBold
                        }).withItalic({
                            descriptor: headerProps.italic,
                            value: data.labelItalic
                        }).withUnderline({
                            descriptor: headerProps.underline,
                            value: data.labelUnderline
                        });
                        var fontControl = fontControlBuilder.build();
                        return cardBuilder.addTopLevelToggle("show", function() {
                            return new visuals.builder.ToggleSwitchBuilder({
                                descriptor: headerProps.show,
                                value: data.show
                            }).build();
                        }).addGroup("text", function(groupBuilder) {
                            groupBuilder.withDisplayName("Text").addSimpleSlice("title", new Builder.TextInputBuilder({
                                descriptor: __assign(__assign({}, headerProps.text), {
                                    instanceKind: 3
                                }),
                                value: data.text,
                                placeholder: ""
                            }).build()).addCompositeSlice("fontselector", "Font", fontControl).addSimpleSlice("color", function() {
                                var colordata = {
                                    value: data.fontColor
                                };
                                return new Builder.ColorPickerBuilder({
                                    descriptor: __assign(__assign({}, headerProps.fontColor), {
                                        instanceKind: _this.featureSwitches.expressionBasedFormatting ? 3 : 1
                                    }),
                                    value: colordata
                                }).build();
                            }), _this.settings.supportsRestatement && groupBuilder.addSimpleSlice("labelContents", new Builder.ToggleSwitchBuilder({
                                descriptor: headerProps.showRestatement,
                                value: data.showRestatement
                            }).build());
                        }).addGroup("border", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Border"), _this.featureSwitches.outlineDropdownToCheckboxes ? groupBuilder.addSimpleSlice("border position", new Builder.FlagSelectionBuilder({
                                descriptor: headerProps.outlineStyle,
                                value: data.outlineStyle
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : groupBuilder.addSimpleSlice("border position", new Builder.DropdownBuilder({
                                descriptor: headerProps.outline,
                                value: data.outline
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), groupBuilder.addSimpleSlice("color", function() {
                                var colordata = {
                                    value: data.outlineColor
                                };
                                return new Builder.ColorPickerBuilder({
                                    descriptor: __assign(__assign({}, visuals.slicerProps.general.outlineColor), {
                                        instanceKind: _this.featureSwitches.expressionBasedFormatting ? 3 : 1
                                    }),
                                    value: colordata
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Background_Color");
                            }).addSimpleSlice("lineWidth", new Builder.SliderBuilder({
                                descriptor: visuals.slicerProps.general.outlineWeight,
                                value: data.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                },
                                localize: function(key) {
                                    return hostServices.getLocalizedString(key);
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Line_Width");
                            });
                        }).addGroup("background", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Background").addSimpleSlice("color", function() {
                                var colordata = {
                                    value: data.background
                                };
                                return new Builder.ColorPickerBuilder({
                                    descriptor: __assign(__assign({}, headerProps.background), {
                                        instanceKind: _this.featureSwitches.expressionBasedFormatting ? 3 : 1
                                    }),
                                    value: colordata
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Background_Color");
                            });
                        }), cardBuilder.build();
                    }
                }, SlicerHeader.prototype.update = function(reader, settings) {
                    $.extend(this.settings, settings), this.settings.enableInFocusRenderers && this.settings.isInFocus ? this.data = SlicerHeader.InFocusModeData(this.style, settings.text) : (this.originalData = SlicerHeader.converter(reader, this.style, settings.text), 
                    this.data = this.services.applySlicerHeaderChanges(this.originalData)), this.maintainSelectMenu(), 
                    this.updateTitle();
                }, SlicerHeader.prototype.setFilterRestatement = function(restatement, supportsRestatement) {
                    this.settings.restatement = restatement, this.settings.supportsRestatement = supportsRestatement, 
                    this.updateTitleText();
                }, SlicerHeader.converter = function(colorHelper, slicerHeaderFontProperties, objects) {
                    var data = SlicerHeader.DefaultData(slicerHeaderFontProperties, objects), objects = colorHelper.objects.getStaticObjects(), colorHelper = visuals.ColorHelper.create(slicerHeaderFontProperties);
                    return objects && (slicerHeaderFontProperties = visuals.FontProperties.createFromObjectOrStyle(powerbi.DataViewObjects.getObject(objects, "header"), {
                        color: "fontColor",
                        family: "fontFamily",
                        size: "textSize"
                    }, colorHelper, slicerHeaderFontProperties, "foregroundDark", "title", {
                        color: data.fontColor,
                        family: data.fontFamily,
                        size: FontSize.createFromPt(data.textSize)
                    }), data.fontColor = slicerHeaderFontProperties.color, data.fontFamily = slicerHeaderFontProperties.family, 
                    data.textSize = slicerHeaderFontProperties.size.pt, data.show = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.show, data.show), 
                    data.text = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.text, data.text), 
                    data.menu.fontColor = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.header.fontColor, data.menu.fontColor), 
                    data.background = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.header.background, data.background), 
                    data.outlineColor = colorHelper.getColorForPropertyWithDefaultColor(objects, visuals.slicerProps.general.outlineColor, data.outlineColor), 
                    data.outlineWeight = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.general.outlineWeight, data.outlineWeight), 
                    data.outlineStyle = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.outlineStyle, data.outlineStyle), 
                    data.outline = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.outline, data.outline), 
                    data.searchEnabled = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.general.selfFilterEnabled, data.searchEnabled), 
                    data.showRestatement = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.showRestatement, data.showRestatement), 
                    data.labelBold = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.bold, data.labelBold), 
                    data.labelItalic = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.italic, data.labelItalic), 
                    data.labelUnderline = powerbi.DataViewObjects.getValue(objects, visuals.slicerProps.header.underline, data.labelUnderline)), 
                    data;
                }, SlicerHeader.prototype.render = function() {
                    this.header = InJs.DomFactory.div().addClass("slicer-header").appendTo(this.settings.host), 
                    this.addTitle(), this.maintainSelectMenu();
                }, SlicerHeader.prototype.maintainSelectMenu = function() {
                    var viewModel_1;
                    this.selectMenu || 0 === this.services.getViewMode() ? this.updateSelectMenu() : this.addSelectMenu(), 
                    this.selectMenuContainer && (viewModel_1 = this.data, this.selectMenuContainer.find("span.ui-icon").css("color", this.data.iconColor).hover(function() {
                        $(this).css("color", viewModel_1.iconHoverColor);
                    }, function() {
                        $(this).css("color", viewModel_1.iconColor);
                    }));
                }, SlicerHeader.prototype.addSelectMenu = function() {
                    var _this = this;
                    this.selectMenuContainer = InJs.DomFactory.div().addClass("slicer-header-selectmenu").toggleClass(visuals.SlicerUtil.Selectors.EnableHover.class, visuals.SlicerUtil.enableHover()).appendTo(this.title);
                    var settings = {
                        onChange: function(val) {
                            _this.settings.onChange && _this.settings.onChange(val);
                        },
                        container: this.selectMenuContainer,
                        options: this.getSelectMenuOptions(),
                        selectedValue: this.settings.selectedValue,
                        className: "slicer-select-menu",
                        disabled: 2 === this.settings.visibilityState,
                        title: this.services.localize("Slicer_SelectMenu_Tooltip")
                    };
                    this.selectMenu = new SelectMenu(settings), SlicerHeader.addHoverInOut(this.settings.hoverContainer, function() {
                        0 !== _this.services.getViewMode() && (_this.selectMenuContainer.css("visibility", "visible"), 
                        _this.selectMenuContainer.css("display", "flex"));
                    }, function() {
                        _this.settings.areControlButtonsAlwaysVisible || (_.isEmpty(_this.data.text) ? _this.selectMenuContainer.css("visibility", "hidden") : _this.selectMenuContainer.css("display", "none"));
                    });
                }, SlicerHeader.prototype.addTitle = function() {
                    var _this = this;
                    this.title = InJs.DomFactory.div().addClass("slicer-header-title").appendTo(this.header);
                    var clearText = this.services.localize(visuals.SlicerUtil.DisplayNameKeys.Clear);
                    this.clearButton = InJs.DomFactory.span().addClass("slicer-header-clear").toggleClass(visuals.SlicerUtil.Selectors.EnableHover.class, visuals.SlicerUtil.enableHover()).attr("title", clearText).attr("aria-label", clearText).attr("role", "button").attr("tabindex", "0").on("keydown", function(event) {
                        32 !== event.keyCode && 13 !== event.keyCode || _this.settings.onClear && (_this.settings.onClear(), 
                        event.stopPropagation());
                    }).appendTo(this.title), this.clearButton.click(function() {
                        _this.settings.onClear && _this.settings.onClear();
                    }), SlicerHeader.addHoverInOut(this.settings.hoverContainer, function() {
                        _this.settings.strictSingleSelect || (_this.clearButton.css("visibility", "visible"), 
                        _this.clearButton.css("display", "block"));
                    }, function() {
                        _this.settings.areControlButtonsAlwaysVisible || (_.isEmpty(_this.data.text) ? _this.clearButton.css("visibility", "hidden") : _this.clearButton.css("display", "none"));
                    }), this.textElement = $("<h3></h3>").addClass("slicer-header-text").appendTo(this.title);
                }, SlicerHeader.prototype.updateTitle = function() {
                    var fontSizeInPixels, hideOutline, outlineToUse, viewModel_2;
                    this.data.show ? (fontSizeInPixels = PixelConverter.fromPoint(this.data.textSize), 
                    hideOutline = !1, this.settings.areControlButtonsAlwaysVisible && (this.settings.strictSingleSelect || (this.clearButton.css("visibility", "visible"), 
                    this.clearButton.css("display", "block")), 0 !== this.services.getViewMode() && (this.selectMenuContainer.css("visibility", "visible"), 
                    this.selectMenuContainer.css("display", "flex"))), this.data.searchEnabled && (outlineToUse = SlicerHeader.DefaultData(this.style, this.settings.text), 
                    hideOutline = (this.featureSwitches.outlineDropdownToCheckboxes ? this.data.outlineStyle === outlineToUse.outlineStyle : this.data.outline === outlineToUse.outline) && this.data.outlineWeight === outlineToUse.outlineWeight && this.data.outlineColor === outlineToUse.outlineColor), 
                    this.title.show(), outlineToUse = this.featureSwitches.outlineDropdownToCheckboxes ? this.data.outlineStyle : this.data.outline, 
                    this.title.css({
                        "border-style": hideOutline ? "none" : this.data.borderStyle,
                        "border-color": this.data.outlineColor,
                        "border-width": visuals.VisualBorderUtil.getBorderCss(outlineToUse, this.data.outlineWeight),
                        "background-color": _.isEmpty(this.data.background) ? "" : this.data.background,
                        "font-size": fontSizeInPixels
                    }), this.clearButton.css({
                        "font-size": fontSizeInPixels
                    }), this.textElement.css({
                        "font-size": PixelConverter.fromPoint(this.data.textSize),
                        "font-family": this.data.fontFamily,
                        color: this.data.fontColor,
                        "font-weight": this.data.labelBold ? CssConstants.boldValue : CssConstants.normalValue,
                        "font-style": this.data.labelItalic ? CssConstants.italicValue : CssConstants.normalValue,
                        "text-decoration": this.data.labelUnderline ? CssConstants.underlineValue : CssConstants.noneValue
                    }), this.updateTitleText(), viewModel_2 = this.data, this.clearButton.css("color", this.data.iconColor).hover(function() {
                        $(this).css("color", viewModel_2.iconHoverColor);
                    }, function() {
                        $(this).css("color", viewModel_2.iconColor);
                    })) : this.title.hide();
                }, SlicerHeader.prototype.updateTitleText = function() {
                    var formatString, text = this.data.text;
                    this.data.showRestatement && this.settings.restatement && (formatString = this.services.localize("NamePattern_Colon"), 
                    text = StringExtensions.format(formatString, text, this.settings.restatement)), 
                    this.textElement.text(text).attr("title", text).attr("aria-label", text);
                }, SlicerHeader.prototype.updateSelectMenu = function() {
                    this.selectMenu && 0 === this.services.getViewMode() ? this.selectMenuContainer.hide() : this.selectMenu && (this.selectMenuContainer.show(), 
                    this.selectMenu.update({
                        options: this.getSelectMenuOptions(),
                        selectedValue: this.settings.selectedValue,
                        disabled: 2 === this.settings.visibilityState
                    }));
                }, SlicerHeader.prototype.getSelectMenuOptions = function() {
                    for (var selectMenuOptions = [], _i = 0, options_2 = this.settings.slicerModeOptions; _i < options_2.length; _i++) {
                        var option = options_2[_i], displayName = option.displayName({
                            get: this.services.localize
                        });
                        selectMenuOptions.push({
                            text: displayName,
                            value: option.value
                        });
                    }
                    return selectMenuOptions;
                }, SlicerHeader.prototype.addWarnings = function(warningBuilder) {
                    visuals.SlicerUtil.addWarningsToSlicerVisual(this.data.warnings, warningBuilder);
                }, SlicerHeader.addHoverInOut = function(element, handlerIn, handlerOut) {
                    visuals.SlicerUtil.enableHover() && element.hover(handlerIn, handlerOut);
                }, SlicerHeader;
            }();
            controls.SlicerHeader = SlicerHeader;
        }(visuals.controls || (visuals.controls = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var BrowserUtils = jsCommon.BrowserUtils, Builder = powerbi.visuals.builder, Color = jsCommon.Color, EnumExtensions = jsCommon.EnumExtensions, PixelConverter = jsCommon.PixelConverter, SQExprBuilder = powerbi.data.SQExprBuilder, SemanticFilter = powerbi.data.SemanticFilter, CssConstants = jsCommon.CssConstants;
        !function(SlicerUtil) {
            var Selectors, DisplayNameKeys;
            !function(Selectors) {
                var createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
                Selectors.ClearSearchTextButton = createClassAndSelector("clearSearchTextButton"), 
                Selectors.HeaderContainer = createClassAndSelector("headerContainer"), Selectors.Header = createClassAndSelector("slicerHeader"), 
                Selectors.Hidden = createClassAndSelector("hidden"), Selectors.Icon = createClassAndSelector("icon"), 
                Selectors.TitleHeader = createClassAndSelector("titleHeader"), Selectors.HeaderText = createClassAndSelector("headerText"), 
                Selectors.Body = createClassAndSelector("slicerBody"), Selectors.Label = createClassAndSelector("slicerLabel"), 
                Selectors.LabelText = createClassAndSelector("slicerText"), Selectors.LabelImage = createClassAndSelector("slicerImage"), 
                Selectors.CountText = createClassAndSelector("slicerCountText"), Selectors.SearchHeader = createClassAndSelector("searchHeader"), 
                Selectors.SearchIconClass = createClassAndSelector("searchIcon"), Selectors.SearchInput = createClassAndSelector("searchInput"), 
                Selectors.SearchHeaderCollapsed = createClassAndSelector("collapsed"), Selectors.SearchHeaderShow = createClassAndSelector("show"), 
                Selectors.MultiSelectEnabled = createClassAndSelector("isMultiSelectEnabled"), Selectors.EnableHover = createClassAndSelector("enable-hover"), 
                Selectors.DisableScrollHover = createClassAndSelector("disableScrollHover");
            }(Selectors = SlicerUtil.Selectors || (SlicerUtil.Selectors = {})), function(DisplayNameKeys) {
                DisplayNameKeys.SelectAll = "SelectAll", DisplayNameKeys.Search = "SearchBox_Text";
            }(DisplayNameKeys = SlicerUtil.DisplayNameKeys || (SlicerUtil.DisplayNameKeys = {})), 
            function(SettingsHelper) {
                SettingsHelper.areSettingsDefined = function(data) {
                    return null != data && null != data.slicerSettings;
                };
            }(SlicerUtil.SettingsHelper || (SlicerUtil.SettingsHelper = {})), SlicerUtil.readMetadataColumns = function(columns) {
                if (!_.isEmpty(columns)) {
                    for (var result = [], _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                        var column = columns_1[_i];
                        if (column.roles && column.roles[visuals.slicerRoles.value] && void 0 !== column.index) if (column.rolesIndex && column.rolesIndex[visuals.slicerRoles.value]) for (var _a = 0, order_1 = column.rolesIndex[visuals.slicerRoles.value]; _a < order_1.length; _a++) result[order_1[_a]] = column; else result.push(column);
                    }
                    return result;
                }
            }, SlicerUtil.buildDataPointInfo = function(d, queryNameByLevel) {
                var selector = {
                    dataMap: {},
                    metadata: [ queryNameByLevel[d.level] ]
                }, path = [], indexes = [], node = d;
                for (path.push(d), indexes.push(d.levelIndex); node.parent; ) node = node.parent, 
                path.unshift(node), indexes.unshift(node.levelIndex);
                for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
                    var d_1 = path_1[_i], queryName_1 = queryNameByLevel[d_1.level];
                    selector.dataMap[queryName_1] = [ d_1.scopeIdentity ];
                }
                return {
                    selector: selector,
                    path: indexes
                };
            }, SlicerUtil.buildContainsFilter = function(fields, key) {
                var filter;
                if (!_.isEmpty(key) && !_.isEmpty(fields)) {
                    for (var sqText = SQExprBuilder.text(key), expr = void 0, _i = 0, fields_1 = fields; _i < fields_1.length; _i++) var contains = fields_1[_i], contains = SQExprBuilder.contains(contains, sqText), expr = expr ? SQExprBuilder.or(expr, contains) : contains;
                    filter = SemanticFilter.fromSQExpr(expr);
                }
                return filter;
            }, function(DefaultValueHandler) {
                DefaultValueHandler.getIdentityFields = function(dataViewCategorical) {
                    if (dataViewCategorical) {
                        dataViewCategorical = dataViewCategorical.categorical;
                        if (dataViewCategorical && !_.isEmpty(dataViewCategorical.categories)) return dataViewCategorical.categories[0].identityFields;
                    }
                };
            }(SlicerUtil.DefaultValueHandler || (SlicerUtil.DefaultValueHandler = {})), SlicerUtil.tryRemoveValueFromRetainedList = function(value, selected, caseInsensitive) {
                if (value && !_.isEmpty(selected)) for (var i = 0, len = selected.length; i < len; i++) {
                    var retained = selected[i];
                    if (powerbi.DataViewScopeIdentity.equals(value, retained.identity, caseInsensitive)) return selected.splice(i, 1)[0];
                }
            }, SlicerUtil.getSlicerDataPointCheckedState = function getSlicerDataPointCheckedState(dataPoint, inheritedState) {
                inheritedState = dataPoint.parent ? getSlicerDataPointCheckedState(dataPoint.parent, inheritedState) : inheritedState;
                return dataPoint.selected ? !inheritedState : inheritedState;
            }, SlicerUtil.clearSlicerFilter = function(hostServices, mode) {
                var message = {
                    remove: [ {
                        objectName: "general",
                        selector: null,
                        properties: {
                            filter: !0
                        }
                    } ],
                    replace: [ {
                        objectName: "data",
                        selector: null,
                        properties: ((message = {})[visuals.slicerProps.data.mode.propertyName] = mode, 
                        message)
                    } ]
                };
                hostServices.persistProperties(message), hostServices.onSelect({
                    visualObjects: []
                }), message = hostServices.getLocalizedString("Slicer_ClearSelectionsCleared"), 
                hostServices.alertWithDebounce("announce-clear-selection", message);
            }, SlicerUtil.addWarningsToSlicerVisual = function(warningsCollection, slicerVisualWarningsBuilder) {
                var warningKey, warnings = (warningsCollection = warningsCollection.complete()) ? warningsCollection.visualObjectWarnings : void 0;
                for (warningKey in warnings) slicerVisualWarningsBuilder.addForVisualObject.apply(slicerVisualWarningsBuilder, __spreadArray([ warningKey ], warnings[warningKey] || []));
            }, SlicerUtil.getDataPointKey = function(d) {
                return d.identity.getKey();
            }, SlicerUtil.clearFilters = function(selectionHandler, isUserAction) {
                selectionHandler.handleClearSelection(), selectionHandler.persistSelectionFilter(visuals.slicerProps.general.filter, null, !0 !== isUserAction);
            }, SlicerUtil.clearSearchFilter = function(selectionHandler) {
                selectionHandler.setSearchMode(!0), selectionHandler.persistSelfFilter(visuals.slicerProps.general.selfFilter, null);
            }, SlicerUtil.isDataViewColumnMapped = function(dataViewMetadata) {
                return _.some(dataViewMetadata.columns, function(_a) {
                    return 1 === (null === (_a = _a.parameter) || void 0 === _a ? void 0 : _a.kind);
                });
            }, SlicerUtil.doDataViewColumnSupportMultipleValues = function(dataViewMetadata) {
                return _.some(dataViewMetadata.columns, function(_a) {
                    return null === (_a = _a.parameter) || void 0 === _a ? void 0 : _a.supportsMultipleValues;
                });
            }, SlicerUtil.doDataViewColumnSupportSelectAll = function(dataViewMetadata) {
                return _.some(dataViewMetadata.columns, function(_a) {
                    return null === (_a = _a.parameter) || void 0 === _a ? void 0 : _a.supportsSelectAll;
                });
            }, SlicerUtil.updateDisableState = function(item, d) {
                item.attr("disabled", !!d.disabled || void 0);
            };
            var DOMHelper = function() {
                function EventsHelper() {}
                return EventsHelper.prototype.onPopupHideEvent = function(handler, boundBox, popupElement, supportsContextMenu) {
                    var _this = this;
                    return this.popup = popupElement, this.popupHideEventHandler = handler, this.boundBox = boundBox, 
                    this.originalOffset = $(boundBox).offset(), this.scrollEventHandler = function(event) {
                        return _this.scrollEventReceived(event);
                    }, this.focusEventHandler = function(event) {
                        return _this.focusInEventReceived(event, supportsContextMenu);
                    }, this.popupHideEvent = function(event) {
                        return _this.popupHideEventReceived(event);
                    }, this.mouseEventHandler = function(event) {
                        return _this.onMouseDown(event, supportsContextMenu);
                    }, this.bindPopupHideHandlers(), $.proxy(this.unbindPopupHideHandlers, this);
                }, EventsHelper.prototype.popupHideEventReceived = function(event) {
                    this.popupHideEventHandler(event.type, event.target);
                }, EventsHelper.prototype.scrollEventReceived = function(event) {
                    var offset;
                    this.boundBox && ((offset = $(this.boundBox).offset()).left === this.originalOffset.left && offset.top === this.originalOffset.top || (this.originalOffset = offset, 
                    this.popupHideEventHandler(event.type, event.target)));
                }, EventsHelper.prototype.focusInEventReceived = function(event, supportsContextMenu) {
                    !this.popup || this.popup.contains(event.target) || supportsContextMenu && this.isContextMenuElement(event.target) || this.popupHideEventHandler(event.type, event.target);
                }, EventsHelper.prototype.onMouseDown = function(event, supportsContextMenu) {
                    2 === event.button && supportsContextMenu && (!this.popup || this.popup.contains(event.target) || this.isContextMenuElement(event.target)) || this.popupHideEventHandler(event.type, event.target);
                }, EventsHelper.prototype.bindPopupHideHandlers = function() {
                    document.addEventListener("mousedown", this.mouseEventHandler, !0), document.addEventListener("pointerdown", this.mouseEventHandler, !0), 
                    document.addEventListener("touchstart", this.popupHideEvent, !0), $(window).on("resize", $.proxy(this.popupHideEventReceived, this)), 
                    $(this.boundBox).on("destroy", $.proxy(this.popupHideEventReceived, this)), document.addEventListener("scroll", this.scrollEventHandler, !0), 
                    document.addEventListener("focusin", this.focusEventHandler, !0);
                }, EventsHelper.prototype.unbindPopupHideHandlers = function() {
                    document.removeEventListener("mousedown", this.mouseEventHandler, !0), document.removeEventListener("pointerdown", this.mouseEventHandler, !0), 
                    document.removeEventListener("touchstart", this.popupHideEvent, !0), $(window).off("resize", this.popupHideEventReceived), 
                    document.removeEventListener("scroll", this.scrollEventHandler, !0), $(this.boundBox).off("destroy", this.popupHideEventReceived), 
                    document.removeEventListener("focusin", this.focusEventHandler, !0);
                }, EventsHelper.prototype.isContextMenuElement = function(element) {
                    return 0 < $(element).parents("drop-down-list:first").length;
                }, EventsHelper;
            }();
            SlicerUtil.EventsHelper = DOMHelper;
            DOMHelper = function() {
                function DOMHelper() {}
                return DOMHelper.prototype.addSearch = function(hostServices, slicerSearch) {
                    slicerSearch = slicerSearch.append("div").classed(Selectors.SearchHeader.class, !0).classed(Selectors.SearchHeaderCollapsed.class, !0);
                    return slicerSearch.append("span").classed("powervisuals-glyph search", !0).classed(Selectors.Icon.class, !0).classed(Selectors.SearchIconClass.class, !0).attr("title", hostServices.getLocalizedString(DisplayNameKeys.Search)), 
                    slicerSearch.append("input").attr("type", "text").attr("aria-label", hostServices.getLocalizedString(DisplayNameKeys.Search)).attr("placeholder", hostServices.getLocalizedString(DisplayNameKeys.Search)).attr("spellcheck", !1).classed(Selectors.SearchInput.class, !0).attr("drag-resize-disabled", "true"), 
                    slicerSearch;
                }, DOMHelper.prototype.addClearSearchButton = function(hostServices, searchContainer) {
                    var clearSearchTextButton = searchContainer.append("span").classed("powervisuals-glyph x", !0).classed(Selectors.Icon.class, !0).classed(Selectors.ClearSearchTextButton.class, !0);
                    return searchContainer.select(SlicerUtil.Selectors.SearchInput.selector).attr("placeholder", hostServices.getLocalizedString(DisplayNameKeys.Search)), 
                    clearSearchTextButton;
                }, DOMHelper.prototype.configureSearchBoxIcon = function(searchContainer, searchKeyIsEmpty) {
                    searchKeyIsEmpty = _.isEmpty(searchKeyIsEmpty);
                    searchContainer.select(SlicerUtil.Selectors.SearchIconClass.selector).classed(SlicerUtil.Selectors.Hidden.class, !searchKeyIsEmpty), 
                    searchContainer.select(SlicerUtil.Selectors.ClearSearchTextButton.selector).classed(SlicerUtil.Selectors.Hidden.class, searchKeyIsEmpty);
                }, DOMHelper.prototype.getRowHeight = function(settings, textProperties, outlineToUse) {
                    outlineToUse = outlineToUse.outlineDropdownToCheckboxes ? settings.slicerText.outlineStyle : settings.slicerText.outline;
                    return powerbi.TextMeasurementService.estimateSvgTextHeight(this.getTextProperties(settings.slicerText.textSize, settings.slicerText.fontFamily, textProperties)) + this.getRowsOutlineWidth(outlineToUse, settings.general.outlineWeight);
                }, DOMHelper.prototype.setSlicerTextStyle = function(slicerText, settings, outlineToUse) {
                    outlineToUse = outlineToUse.outlineDropdownToCheckboxes ? settings.slicerText.outlineStyle : settings.slicerText.outline;
                    slicerText.styles({
                        color: settings.slicerText.color,
                        "background-color": settings.slicerText.background,
                        "border-style": "solid",
                        "border-color": settings.general.outlineColor,
                        "border-width": visuals.VisualBorderUtil.getBorderCss(outlineToUse, settings.general.outlineWeight),
                        "font-size": PixelConverter.fromPoint(settings.slicerText.textSize),
                        "font-family": settings.slicerText.fontFamily,
                        "line-height": Math.floor(1.79 * settings.slicerText.textSize) + "px",
                        "font-weight": settings.slicerText.labelBold ? CssConstants.boldValue : CssConstants.normalValue,
                        "font-style": settings.slicerText.labelItalic ? CssConstants.italicValue : CssConstants.normalValue,
                        "text-decoration": settings.slicerText.labelUnderline ? CssConstants.underlineValue : CssConstants.noneValue
                    });
                    var color = this.calculateSlicerTextHighlightColor(settings.slicerText.color);
                    slicerText.on("mouseover", function(d) {
                        d3.select(this).styles({
                            color: color
                        });
                    }), slicerText.on("mouseout", function(d) {
                        d3.select(this).styles({
                            color: settings.slicerText.color
                        });
                    });
                }, DOMHelper.prototype.getRowsOutlineWidth = function(outlineElement, outlineWeight) {
                    if ("number" == typeof outlineElement) {
                        var hasTop = EnumExtensions.hasFlag(outlineElement, 1), hasBottom = EnumExtensions.hasFlag(outlineElement, 4);
                        return hasTop && hasBottom ? 2 * outlineWeight : hasTop || hasBottom ? outlineWeight : 0;
                    }
                    switch (outlineElement) {
                      case visuals.outline.none:
                      case visuals.outline.leftRight:
                        return 0;

                      case visuals.outline.bottomOnly:
                      case visuals.outline.topOnly:
                        return outlineWeight;

                      case visuals.outline.topBottom:
                      case visuals.outline.frame:
                        return 2 * outlineWeight;

                      default:
                        return 0;
                    }
                }, DOMHelper.prototype.calculateSlicerTextHighlightColor = function(rgbColor) {
                    rgbColor = Color.parseColorString(rgbColor);
                    return rgbColor && 255 === rgbColor.R && 255 === rgbColor.G && 255 === rgbColor.B ? "#C8C8C8" : Color.calculateHighlightColor(rgbColor, .8, .2);
                }, DOMHelper.prototype.getTextProperties = function(textSize, textFontFamily, textProperties) {
                    return textProperties.fontSize = PixelConverter.fromPoint(textSize), textProperties.fontFamily = textFontFamily, 
                    textProperties;
                }, DOMHelper;
            }();
            SlicerUtil.DOMHelper = DOMHelper, SlicerUtil.enableHover = function() {
                return !BrowserUtils.isIOSWebView() && !BrowserUtils.isAndroidWebView();
            };
        }(visuals.SlicerUtil || (visuals.SlicerUtil = {})), function(SlicerUtil) {
            !function(ObjectEnumerator) {
                ObjectEnumerator.enumerateObjectInstances = function(options, data, settings, dataView, featureSwitches) {
                    if (data) switch (options.objectName) {
                      case "items":
                        return function(data, fontColor, featureSwitches) {
                            var slicerSettings = fontColor, properties = SlicerUtil.SettingsHelper.areSettingsDefined(data) && data.slicerSettings.slicerText, fontColor = (properties && data.slicerSettings.slicerText.color ? data.slicerSettings : slicerSettings).slicerText.color, properties = (properties && data.slicerSettings.slicerText.background ? data.slicerSettings : slicerSettings).slicerText.background, properties = {
                                fontColor: fontColor,
                                background: properties,
                                textSize: slicerSettings.slicerText.textSize,
                                fontFamily: slicerSettings.slicerText.fontFamily
                            };
                            featureSwitches.outlineDropdownToCheckboxes ? properties.outlineStyle = slicerSettings.slicerText.outlineStyle : properties.outline = slicerSettings.slicerText.outline;
                            featureSwitches && featureSwitches.enableBIU && (properties.bold = slicerSettings.slicerText.labelBold, 
                            properties.italic = slicerSettings.slicerText.labelItalic, properties.underline = slicerSettings.slicerText.labelUnderline);
                            !_.isEmpty(data.queryNameByLevel) && 1 < data.queryNameByLevel.length && (properties.steppedLayoutIndentation = slicerSettings.expandCollapse.indentation, 
                            properties.expandCollapseToggleType = slicerSettings.expandCollapse.toggleType);
                            return [ {
                                selector: null,
                                objectName: "items",
                                properties: properties
                            } ];
                        }(data, settings, featureSwitches);

                      case "selection":
                        return function(data, strictSingleSelect, selection) {
                            var areSelectionSettingsDefined = SlicerUtil.SettingsHelper.areSettingsDefined(data) && data.slicerSettings.selection, selectAllCheckboxEnabled = (areSelectionSettingsDefined && data.slicerSettings.selection.selectAllCheckboxEnabled ? data.slicerSettings : strictSingleSelect).selection.selectAllCheckboxEnabled, singleSelect = (areSelectionSettingsDefined && void 0 !== data.slicerSettings.selection.singleSelect ? data.slicerSettings : strictSingleSelect).selection.singleSelect, strictSingleSelect = (areSelectionSettingsDefined && void 0 !== data.slicerSettings.selection.strictSingleSelect ? data.slicerSettings : strictSingleSelect).selection.strictSingleSelect;
                            strictSingleSelect || !SlicerUtil.isDataViewColumnMapped(selection.metadata) || SlicerUtil.doDataViewColumnSupportMultipleValues(selection.metadata) || (strictSingleSelect = !0);
                            selection = {
                                selector: null,
                                objectName: "selection",
                                properties: {
                                    strictSingleSelect: strictSingleSelect
                                }
                            };
                            strictSingleSelect || (selection.properties.singleSelect = singleSelect, selection.properties.selectAllCheckboxEnabled = selectAllCheckboxEnabled);
                            return [ selection ];
                        }(data, settings, dataView);
                    }
                }, ObjectEnumerator.getValuesCard = function(hostServices, fontControlBuilder, slicerSettings, expressionBasedFormatting, featureSwitches) {
                    if (fontControlBuilder) {
                        var cardBuilder = SlicerUtil.SettingsHelper.areSettingsDefined(fontControlBuilder) && fontControlBuilder.slicerSettings.slicerText, fontColor = (cardBuilder && fontControlBuilder.slicerSettings.slicerText.color ? fontControlBuilder.slicerSettings : slicerSettings).slicerText.color, background = (cardBuilder && fontControlBuilder.slicerSettings.slicerText.background ? fontControlBuilder.slicerSettings : slicerSettings).slicerText.background, itemsProps = visuals.slicerProps.items, cardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("values"), "Role_DisplayName_Values", [ itemsProps.fontFamily, itemsProps.textSize, itemsProps.bold, itemsProps.italic, itemsProps.underline, itemsProps.fontColor, itemsProps.padding, itemsProps.outline, itemsProps.outlineStyle, visuals.slicerProps.general.outlineColor, visuals.slicerProps.general.outlineWeight, itemsProps.background ], function(key) {
                            return hostServices.getLocalizedString(key);
                        }), fontControlBuilder = new visuals.builder.FontControlBuilder().withFontFamily({
                            descriptor: itemsProps.fontFamily,
                            value: slicerSettings.slicerText.fontFamily
                        }).withFontSizeProperties({
                            descriptor: itemsProps.textSize,
                            value: slicerSettings.slicerText.textSize
                        });
                        featureSwitches && featureSwitches.enableBIU && fontControlBuilder.withBold({
                            descriptor: itemsProps.bold,
                            value: slicerSettings.slicerText.labelBold
                        }).withItalic({
                            descriptor: itemsProps.italic,
                            value: slicerSettings.slicerText.labelItalic
                        }).withUnderline({
                            descriptor: itemsProps.underline,
                            value: slicerSettings.slicerText.labelUnderline
                        });
                        var fontControl = fontControlBuilder.build();
                        return cardBuilder.addGroup("values", function(groupBuilder) {
                            groupBuilder.withDisplayName("Role_DisplayName_Values").addCompositeSlice("fontselector", "Font", fontControl).addSimpleSlice("color", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: itemsProps.fontColor,
                                    value: {
                                        value: fontColor
                                    }
                                }).build();
                            }), featureSwitches && featureSwitches.slicerAccessibility && groupBuilder.addSimpleSlice("padding", function() {
                                return new Builder.NumUpDownBuilder({
                                    descriptor: itemsProps.padding,
                                    value: slicerSettings.items.padding,
                                    options: {
                                        minValue: {
                                            type: 0,
                                            value: 0
                                        },
                                        maxValue: {
                                            type: 1,
                                            value: 999
                                        },
                                        unitSymbol: "Numeric_Pixel"
                                    }
                                }).build();
                            });
                        }).addGroup("border", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Border"), featureSwitches.outlineDropdownToCheckboxes ? groupBuilder.addSimpleSlice("border position", new Builder.FlagSelectionBuilder({
                                descriptor: itemsProps.outlineStyle,
                                value: slicerSettings.slicerText.outlineStyle
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }) : groupBuilder.addSimpleSlice("border position", new Builder.DropdownBuilder({
                                descriptor: itemsProps.outline,
                                value: slicerSettings.slicerText.outline
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Border_Position");
                            }), groupBuilder.addSimpleSlice("color", function() {
                                var colordata = {
                                    value: slicerSettings.general.outlineColor
                                };
                                return new Builder.ColorPickerBuilder({
                                    descriptor: __assign(__assign({}, visuals.slicerProps.general.outlineColor), {
                                        instanceKind: expressionBasedFormatting ? 3 : 1
                                    }),
                                    value: colordata
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Background_Color");
                            }).addSimpleSlice("lineWidth", new Builder.SliderBuilder({
                                descriptor: visuals.slicerProps.general.outlineWeight,
                                value: slicerSettings.general.outlineWeight,
                                options: {
                                    minValue: {
                                        type: 0,
                                        value: 1
                                    },
                                    maxValue: {
                                        type: 1,
                                        value: 10
                                    }
                                },
                                localize: function(key) {
                                    return hostServices.getLocalizedString(key);
                                }
                            }).build(), function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Line_Width");
                            });
                        }).addGroup("background", function(groupBuilder) {
                            groupBuilder.withDisplayName("Visual_Background").addSimpleSlice("color", function() {
                                return new Builder.ColorPickerBuilder({
                                    descriptor: itemsProps.background,
                                    value: {
                                        value: background
                                    }
                                }).build();
                            }, function(sliceBuilder) {
                                return sliceBuilder.withCustomDisplayName("Visual_Background_Color");
                            });
                        }), cardBuilder.build();
                    }
                }, ObjectEnumerator.getAdditionalCards = function(hostServices, data, slicerSettings, dataView) {
                    if (data) {
                        var itemsProps = visuals.slicerProps.items, hierarchyCardBuilder = new Builder.FormattingCardBuilder(new Builder.FormattingCardUidBuilder("hierarchy"), "Hierarchy", [ itemsProps.steppedLayoutIndentation, itemsProps.expandCollapseToggleType ], function(key) {
                            return hostServices.getLocalizedString(key);
                        });
                        return !_.isEmpty(data.queryNameByLevel) && 1 < data.queryNameByLevel.length ? (hierarchyCardBuilder.addGroup("levels", function(groupBuilder) {
                            groupBuilder.withDisplayName("Slicer_Hierarchy_Levels").addSimpleSlice("steppedIndentation", function() {
                                return new Builder.SliderBuilder({
                                    descriptor: itemsProps.steppedLayoutIndentation,
                                    value: slicerSettings.expandCollapse.indentation,
                                    options: {
                                        minValue: {
                                            type: 0,
                                            value: 0
                                        },
                                        maxValue: {
                                            type: 1,
                                            value: 40
                                        }
                                    },
                                    localize: function(key) {
                                        return hostServices.getLocalizedString(key);
                                    }
                                }).build();
                            });
                        }).addGroup("expandCollapseButtons", function(groupBuilder) {
                            groupBuilder.withDisplayName("Slicer_ExpandCollapse").addSimpleSlice("expand/collapseIcon", function() {
                                return new Builder.DropdownBuilder({
                                    descriptor: itemsProps.expandCollapseToggleType,
                                    value: slicerSettings.expandCollapse.toggleType
                                }).build();
                            });
                        }), [ hierarchyCardBuilder.build() ]) : void 0;
                    }
                }, ObjectEnumerator.getSlicerSettingsFormattingOptions = function(selectionSettings) {
                    var canShowSearch = selectionSettings.canShowSearch, selectionGroupBuilder = selectionSettings.cardUidBuilder, defaultSelectionSecttions = selectionSettings.currentSlicerSettings, optionsGroup = selectionSettings.data, dataView = selectionSettings.dataView, hostServices = selectionSettings.hostServices, orientation = selectionSettings.orientation;
                    if (optionsGroup) {
                        var groups = [], revertToDefaultDescriptors = [], selectionSettings = optionsGroup && optionsGroup.slicerSettings, optionsGroup = new Builder.FormattingGroupBuilder(new Builder.FormattingGroupUidBuilder(selectionGroupBuilder, "options"), function(key) {
                            return hostServices.getLocalizedString(key);
                        });
                        revertToDefaultDescriptors.push(visuals.slicerProps.general.selfFilterEnabled), 
                        optionsGroup.withDisplayName("Desktop_FileMenu_Options"), canShowSearch && optionsGroup.addSimpleSlice("search", new Builder.ToggleSwitchBuilder({
                            descriptor: visuals.slicerProps.general.selfFilterEnabled,
                            value: selectionSettings && selectionSettings.search.enabled
                        }).build(), function(sliceBuilder) {
                            return sliceBuilder.withCustomDisplayName("Slicer_SearchBox_Text");
                        }), null != orientation && optionsGroup.addSimpleSlice("orientation", new Builder.DropdownBuilder({
                            descriptor: visuals.slicerProps.general.orientation,
                            value: orientation
                        }).build());
                        optionsGroup = optionsGroup.build();
                        0 < optionsGroup.slices.length && groups.push(optionsGroup);
                        var selectionSettings = selectionSettings && selectionSettings.selection, defaultSelectionSecttions = defaultSelectionSecttions.selection, selectAllCheckboxEnabled = (selectionSettings && selectionSettings.selectAllCheckboxEnabled ? selectionSettings : defaultSelectionSecttions).selectAllCheckboxEnabled, singleSelect = (selectionSettings && void 0 !== selectionSettings.singleSelect ? selectionSettings : defaultSelectionSecttions).singleSelect, strictSingleSelect = (selectionSettings && void 0 !== selectionSettings.strictSingleSelect ? selectionSettings : defaultSelectionSecttions).strictSingleSelect;
                        strictSingleSelect || !SlicerUtil.isDataViewColumnMapped(dataView.metadata) || SlicerUtil.doDataViewColumnSupportMultipleValues(dataView.metadata) || (strictSingleSelect = !0);
                        var selectionProps = visuals.slicerProps.selection, selectionGroupBuilder = new Builder.FormattingGroupBuilder(new Builder.FormattingGroupUidBuilder(selectionGroupBuilder, "selection"), function(key) {
                            return hostServices.getLocalizedString(key);
                        });
                        return revertToDefaultDescriptors.push(visuals.slicerProps.general.selfFilterEnabled, visuals.slicerProps.general.orientation, selectionProps.strictSingleSelect, selectionProps.singleSelect, selectionProps.selectAllCheckboxEnabled), 
                        selectionGroupBuilder.withDisplayName("ExpandCollapseNode").addSimpleSlice("strictSingleSelect", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: selectionProps.strictSingleSelect,
                                value: strictSingleSelect
                            }).build();
                        }), strictSingleSelect || selectionGroupBuilder.addSimpleSlice("singleSelect", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: selectionProps.singleSelect,
                                value: singleSelect
                            }).build();
                        }).addSimpleSlice("selectAllCheckboxEnabled", function() {
                            return new Builder.ToggleSwitchBuilder({
                                descriptor: selectionProps.selectAllCheckboxEnabled,
                                value: selectAllCheckboxEnabled
                            }).build();
                        }), groups.push(selectionGroupBuilder.build()), {
                            groups: groups,
                            revertToDefaultDescriptors: revertToDefaultDescriptors
                        };
                    }
                };
            }(SlicerUtil.ObjectEnumerator || (SlicerUtil.ObjectEnumerator = {}));
        }(visuals.SlicerUtil || (visuals.SlicerUtil = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(SlicerUtil) {
            !function(Selectors) {
                var createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
                Selectors.Clear = createClassAndSelector("clear");
            }(SlicerUtil.Selectors || (SlicerUtil.Selectors = {}));
        }(visuals.SlicerUtil || (visuals.SlicerUtil = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(SlicerUtil) {
            (SlicerUtil.DisplayNameKeys || (SlicerUtil.DisplayNameKeys = {})).Clear = "Slicer_Clear";
        }(visuals.SlicerUtil || (visuals.SlicerUtil = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var slicerMode = powerbi.visuals.slicerMode, SlicerResponsiveBreakpoints = powerbi.visuals.SlicerResponsiveBreakpoints, SlicerViewModelAdapter = function() {
            function SlicerViewModelAdapter() {}
            return SlicerViewModelAdapter.prototype.applySlicerChanges = function(viewport, slicerData, dataView) {
                return slicerData = this.shouldApplyResponsiveChanges(dataView, slicerData.mode, slicerData.orientation) ? this.applyResponsiveSlicerChanges(viewport, slicerData) : slicerData;
            }, SlicerViewModelAdapter.prototype.applySlicerHeaderChanges = function(viewport, slicerHeaderData, dataView, slicerData, hasSlider) {
                return slicerHeaderData = slicerHeaderData.show && this.shouldApplyResponsiveChanges(dataView, slicerData.mode, slicerData.orientation) ? this.applyResponsiveSlicerHeaderChanges(viewport, slicerHeaderData, slicerData, hasSlider) : slicerHeaderData;
            }, SlicerViewModelAdapter.prototype.enumerateObjectInstances = function(options, objects, dataView, activeMode, slicerOrientation) {
                this.doesSlicerModeSupportsResponsive(activeMode, slicerOrientation) && "general" === options.objectName && this.enumerateGeneral(dataView, objects);
            }, SlicerViewModelAdapter.prototype.enumerateGeneral = function(instance, objects) {
                objects[0].selector;
                instance = {
                    selector: null,
                    properties: {
                        responsive: visuals.ViewModelAdapterUtils.getResponsiveVisualProperties(instance, visuals.slicerProps).responsive
                    },
                    objectName: "general"
                };
                _.merge(objects[0], instance);
            }, SlicerViewModelAdapter.prototype.getResponsiveSlice = function(responsiveSlicerProperties, activeMode, generalProps, localize) {
                if (this.doesSlicerModeSupportsResponsive(activeMode, generalProps)) {
                    generalProps = visuals.slicerProps.general, responsiveSlicerProperties = visuals.ViewModelAdapterUtils.getResponsiveVisualProperties(responsiveSlicerProperties, visuals.slicerProps);
                    return {
                        item: new visuals.builder.SimpleFormattingSliceBuilder({
                            uidBuilder: new visuals.builder.FormattingSliceUidBuilder(new visuals.builder.FormattingGroupUidBuilder(new visuals.builder.FormattingCardUidBuilder("visualPlaceholderCard"), "visualPlaceholderGroup"), "responsive"),
                            control: new visuals.builder.ToggleSwitchBuilder({
                                descriptor: generalProps.responsive,
                                value: responsiveSlicerProperties.responsive
                            }).build(),
                            localize: localize
                        }).build(),
                        revertToDefaultDescriptors: [ generalProps.responsive ]
                    };
                }
            }, SlicerViewModelAdapter.prototype.shouldApplyResponsiveChanges = function(dataView, activeMode, orientation) {
                return this.doesSlicerModeSupportsResponsive(activeMode, orientation) && visuals.ViewModelAdapterUtils.shouldApplyResponsiveChanges(dataView, visuals.slicerProps);
            }, SlicerViewModelAdapter.prototype.doesSlicerModeSupportsResponsive = function(activeMode, orientation) {
                return SlicerViewModelAdapter.isRangeSlicerMode(activeMode) || SlicerViewModelAdapter.isHorizontalSlicer(activeMode, orientation);
            }, SlicerViewModelAdapter.prototype.applyResponsiveSlicerChanges = function(viewport, slicerData) {
                slicerData = visuals.ViewModelAdapterUtils.cloneData(slicerData);
                return this.applyIconResponsiveChanges(viewport, slicerData), this.applyResponsiveSlicerHorizontalChanges(slicerData), 
                slicerData;
            }, SlicerViewModelAdapter.prototype.applyResponsiveSlicerHeaderChanges = function(viewport, originalSlicerHeaderData, slicerData, hasSlider) {
                var slicerHeaderData = visuals.ViewModelAdapterUtils.cloneData(originalSlicerHeaderData);
                return this.applyHeaderChanges(viewport, slicerData, slicerHeaderData, hasSlider), 
                this.updateResponsiveHeaderWarnings(slicerHeaderData, originalSlicerHeaderData), 
                slicerHeaderData;
            }, SlicerViewModelAdapter.prototype.applyIconResponsiveChanges = function(viewport, slicerData) {
                var iconBreakpoints;
                SlicerViewModelAdapter.isRangeSlicerMode(slicerData.mode) ? iconBreakpoints = SlicerResponsiveBreakpoints.rangeSlicer.iconBreakpoints : SlicerViewModelAdapter.isHorizontalSlicer(slicerData.mode, slicerData.orientation) ? iconBreakpoints = SlicerResponsiveBreakpoints.horizontalSlicer.iconBreakpoints : (slicerData.mode, 
                slicerData.orientation), _.some(iconBreakpoints, function(breakpoint) {
                    return viewport.height <= breakpoint.height && viewport.width <= breakpoint.width;
                }) && (slicerData.showIcon = !0);
            }, SlicerViewModelAdapter.prototype.applyResponsiveSlicerHorizontalChanges = function(slicerData) {
                SlicerViewModelAdapter.isHorizontalSlicer(slicerData.mode, slicerData.orientation) && (slicerData.showTabularSlicer = !0);
            }, SlicerViewModelAdapter.prototype.applyHeaderChanges = function(maxFontSizePt, slicerData, slicerHeaderData, hasSlider) {
                var breakpoints;
                SlicerViewModelAdapter.isRangeSlicerMode(slicerData.mode) ? (breakpoints = SlicerResponsiveBreakpoints.rangeSlicer, 
                slicerHeaderData.show = hasSlider ? maxFontSizePt.height >= breakpoints.hideHeaderHeightSlider : maxFontSizePt.height >= breakpoints.hideHeaderHeightNoSlider) : SlicerViewModelAdapter.isHorizontalSlicer(slicerData.mode, slicerData.orientation) ? (breakpoints = SlicerResponsiveBreakpoints.horizontalSlicer, 
                slicerHeaderData.show = maxFontSizePt.height >= breakpoints.hideHeaderHeight) : (slicerData.mode, 
                slicerData.orientation);
                maxFontSizePt = visuals.SlicerViewModelAdapterUtils.resolveMaxFontSizePtForViewport(maxFontSizePt, SlicerResponsiveBreakpoints.slicerHeader.fontSize);
                slicerHeaderData.textSize = Math.min(slicerHeaderData.textSize, maxFontSizePt);
            }, SlicerViewModelAdapter.prototype.updateResponsiveHeaderWarnings = function(headerData, originalHeaderData) {
                var warning;
                headerData.show !== originalHeaderData.show ? warning = new visuals.SlicerHeaderNotRenderedWarning() : headerData.textSize !== originalHeaderData.textSize && (warning = new visuals.SlicerHeaderFontSizeWarning()), 
                warning && headerData.warnings.addForVisualObject("header", {
                    selector: null,
                    warnings: [ warning ]
                });
            }, SlicerViewModelAdapter.isRangeSlicerMode = function(mode) {
                return slicerMode.isRangeSlicerMode(mode);
            }, SlicerViewModelAdapter.isHorizontalSlicer = function(mode, orientation) {
                return mode === slicerMode.basic && 1 === orientation;
            }, SlicerViewModelAdapter;
        }();
        visuals.SlicerViewModelAdapter = SlicerViewModelAdapter;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var RangeSlicerViewModelAdapter = function() {
            function RangeSlicerViewModelAdapter() {}
            return RangeSlicerViewModelAdapter.prototype.applyChanges = function(viewport, data, dataView) {
                return data = visuals.ViewModelAdapterUtils.shouldApplyResponsiveChanges(dataView, visuals.slicerProps) ? this.applyResponsiveRangeSlicerChanges(viewport, data) : data;
            }, RangeSlicerViewModelAdapter.prototype.applyResponsiveRangeSlicerChanges = function(viewport, rangeSlicerData) {
                rangeSlicerData = powerbi.Prototype.inherit(rangeSlicerData);
                return this.applyRangeSlicerDataChanges(rangeSlicerData), this.applySliderChanges(rangeSlicerData), 
                rangeSlicerData;
            }, RangeSlicerViewModelAdapter.prototype.applySliderChanges = function(rangeSlicerData) {
                rangeSlicerData.sliderSettings = powerbi.Prototype.inherit(rangeSlicerData.sliderSettings), 
                rangeSlicerData.sliderSettings.drawRoundSliderHandles = !0, rangeSlicerData.sliderSettings.minSliderVisibilityHeight = RangeSlicerViewModelAdapter.MinSliderVisibilityHeight, 
                rangeSlicerData.sliderSettings.minSliderVisibilityWidth = RangeSlicerViewModelAdapter.MinSliderVisibilityWidth;
            }, RangeSlicerViewModelAdapter.prototype.applyRangeSlicerDataChanges = function(rangeSlicerData) {
                rangeSlicerData.wrapRangeBoxes = !0;
            }, RangeSlicerViewModelAdapter.MinSliderVisibilityHeight = 35, RangeSlicerViewModelAdapter.MinSliderVisibilityWidth = 0, 
            RangeSlicerViewModelAdapter;
        }();
        visuals.RangeSlicerViewModelAdapter = RangeSlicerViewModelAdapter;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var HorizontalSlicerViewModelAdapter = function() {
            function HorizontalSlicerViewModelAdapter() {}
            return HorizontalSlicerViewModelAdapter.prototype.applyChanges = function(viewport, originalData, dataView) {
                var data = originalData;
                return visuals.ViewModelAdapterUtils.shouldApplyResponsiveChanges(dataView, visuals.slicerProps) && (data = this.applyResponsiveSlicerChanges(viewport, data), 
                this.updateWarnings(data, originalData)), data;
            }, HorizontalSlicerViewModelAdapter.prototype.applyResponsiveSlicerChanges = function(viewport, slicerData) {
                slicerData = powerbi.Prototype.inherit(slicerData);
                return this.applyFontSizeChanges(viewport, slicerData), slicerData;
            }, HorizontalSlicerViewModelAdapter.prototype.applyFontSizeChanges = function(maxFontSizePt, data) {
                maxFontSizePt = visuals.SlicerViewModelAdapterUtils.resolveMaxFontSizePtForViewport(maxFontSizePt, visuals.SlicerResponsiveBreakpoints.horizontalSlicer.fontSize);
                data.slicerSettings.slicerText.textSize > maxFontSizePt && (data.slicerSettings = powerbi.Prototype.inherit(data.slicerSettings), 
                data.slicerSettings.slicerText = powerbi.Prototype.inherit(data.slicerSettings.slicerText), 
                data.slicerSettings.slicerText.textSize = maxFontSizePt);
            }, HorizontalSlicerViewModelAdapter.prototype.updateWarnings = function(data, warning) {
                data.slicerSettings.slicerText.textSize !== warning.slicerSettings.slicerText.textSize && (warning = new visuals.HorizontalSlicerFontSizeWarning(), 
                data.warnings.addForVisualObject("items", {
                    selector: null,
                    warnings: [ warning ]
                }));
            }, HorizontalSlicerViewModelAdapter;
        }();
        visuals.HorizontalSlicerViewModelAdapter = HorizontalSlicerViewModelAdapter;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var Selectors, Utility = jsCommon.Utility, TabularSlicerLayout = function() {
            function TabularSlicerLayout() {}
            return TabularSlicerLayout.prototype.renderCore = function(container) {
                container.classed(Selectors.Tabular.class, !0);
            }, TabularSlicerLayout.prototype.bindData = function(materializedDataPoints, data, itemsContainer) {
                return this.renderColumns(materializedDataPoints, itemsContainer).selectAll(visuals.HorizontalSlicer.Selectors.IndividualItemContainer.selector).data(function(chunk) {
                    return chunk;
                }, function(d) {
                    return visuals.SlicerUtil.getDataPointKey(d);
                });
            }, TabularSlicerLayout.prototype.renderColumns = function(columnsEnterUpdate, itemsContainer) {
                var itemsPerColumn = this.numberOfRows, groupedDataPoints = _.chunk(columnsEnterUpdate, itemsPerColumn), columnsEnterUpdate = itemsContainer.selectAll(Selectors.ColumnItemContainer.selector).style("height", null).data(groupedDataPoints);
                columnsEnterUpdate.exit().remove();
                columnsEnterUpdate = columnsEnterUpdate.enter().append("div").classed(Selectors.ColumnItemContainer.class, !0).merge(columnsEnterUpdate);
                return this.scaleLastColumnIfNeeded(itemsPerColumn, groupedDataPoints, itemsContainer), 
                columnsEnterUpdate;
            }, TabularSlicerLayout.prototype.scaleLastColumnIfNeeded = function(sizePecent, numOfItemsInLastColumn, lastColumn) {
                numOfItemsInLastColumn && _.last(numOfItemsInLastColumn) && ((numOfItemsInLastColumn = _.last(numOfItemsInLastColumn).length) < sizePecent && (lastColumn = lastColumn.select(Selectors.ColumnItemContainer.selector + ":last-child"), 
                sizePecent = powerbi.Double.roundToPrecision(100 * numOfItemsInLastColumn / sizePecent, .01), 
                lastColumn.style("height", sizePecent + "%")));
            }, TabularSlicerLayout.prototype.findNextElement = function(element, forward) {
                if ($(element).hasClass(visuals.HorizontalSlicer.Selectors.ItemsContainer.class)) return forward ? element.firstElementChild.firstElementChild : element.lastElementChild.lastElementChild;
                if (forward) {
                    var container, option = element.nextElementSibling;
                    if (!option) if ((container = element.parentElement).nextElementSibling) return container.nextElementSibling.firstElementChild;
                    return option;
                }
                return !(option = element.previousElementSibling) && (container = element.parentElement).previousElementSibling ? container.previousElementSibling.lastElementChild : option;
            }, TabularSlicerLayout.prototype.getScrollSize = function(itemsToDisplay) {
                return this.numberOfRows;
            }, TabularSlicerLayout.prototype.getLastStartIndex = function(itemsToDisplay, dataPointsLength) {
                if (dataPointsLength <= itemsToDisplay) return 0;
                var emptyLeftovers = 0, itemsChunk = this.numberOfRows, moduloResult = dataPointsLength % itemsChunk;
                return 0 < moduloResult && (emptyLeftovers = itemsChunk - moduloResult), Math.max(dataPointsLength - itemsToDisplay + emptyLeftovers, 0);
            }, TabularSlicerLayout.prototype.calculateTotalItemDimensions = function(totalItemWidth, totalItemHeight) {
                return totalItemWidth = Math.max(totalItemWidth, TabularSlicerLayout.MinItemWidth), 
                totalItemHeight = Math.max(totalItemHeight, TabularSlicerLayout.MinItemHeight), 
                {
                    width: totalItemWidth += 2 * TabularSlicerLayout.TabularMargin,
                    height: totalItemHeight += 2 * TabularSlicerLayout.TabularMargin
                };
            }, TabularSlicerLayout.prototype.calculateNumberOfItemsToDisplay = function(availableWidth, totalItemsWidth, totalItemsHeight, dataPointsLength) {
                var availableHeight = availableWidth.find(visuals.SlicerUtil.Selectors.Body.selector), availableWidth = availableHeight.width() - 2 * TabularSlicerLayout.NavigationArrowWidth, availableHeight = availableHeight.height();
                return this.calculateTableDimensions({
                    height: availableHeight,
                    width: availableWidth
                }, {
                    height: totalItemsHeight,
                    width: totalItemsWidth
                }, dataPointsLength);
            }, TabularSlicerLayout.prototype.calculateTableDimensions = function(availableHeight, availableWidth, dataPointsLength) {
                var numberOfItems = availableWidth.width, root = availableWidth.height, availableWidth = availableHeight.width, availableHeight = availableHeight.height;
                if (0 === numberOfItems) return 0;
                numberOfItems = Math.floor(availableWidth / numberOfItems);
                this.numberOfRows = 0 === root ? 1 : Math.floor(availableHeight / root), this.numberOfRows = Utility.clampValue(this.numberOfRows, 1, dataPointsLength);
                root = Math.ceil(Math.sqrt(dataPointsLength));
                root <= numberOfItems && this.numberOfRows >= root ? this.numberOfRows = numberOfItems = root : this.numberOfRows >= dataPointsLength && 1 < numberOfItems && (this.numberOfRows = Math.ceil(this.numberOfRows / numberOfItems));
                numberOfItems = this.numberOfRows * numberOfItems;
                return Utility.clampValue(numberOfItems, this.numberOfRows, dataPointsLength);
            }, TabularSlicerLayout.prototype.getNavigationArrowsClass = function(selection, isLeft) {
                isLeft ? selection.classed(Selectors.TabularNavigationArrow.class, !0).classed(visuals.HorizontalSlicer.Selectors.LeftNavigationArrow.class, !0).classed(Selectors.PbiVisualsGlyph.class, !0).classed(Selectors.TabularLeftNavigationArrow.class, !0) : selection.classed(Selectors.TabularNavigationArrow.class, !0).classed(visuals.HorizontalSlicer.Selectors.RightNavigationArrow.class, !0).classed(Selectors.PbiVisualsGlyph.class, !0).classed(Selectors.TabularRightNavigationArrow.class, !0);
            }, TabularSlicerLayout.prototype.getDataPointRightMargin = function(index, itemsToDisplay) {
                return "0px";
            }, TabularSlicerLayout.MinItemWidth = 40, TabularSlicerLayout.MinItemHeight = 40, 
            TabularSlicerLayout.TabularMargin = 2, TabularSlicerLayout.NavigationArrowWidth = 19, 
            TabularSlicerLayout;
        }();
        visuals.TabularSlicerLayout = TabularSlicerLayout, function(Selectors) {
            var createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
            Selectors.Tabular = createClassAndSelector("tabular"), Selectors.ColumnItemContainer = createClassAndSelector("columnItemContainer"), 
            Selectors.PbiVisualsGlyph = createClassAndSelector("powervisuals-glyph"), Selectors.TabularNavigationArrow = createClassAndSelector("tabularNavigationArrow"), 
            Selectors.TabularLeftNavigationArrow = createClassAndSelector("left-nav-arrow"), 
            Selectors.TabularRightNavigationArrow = createClassAndSelector("right-nav-arrow");
        }(Selectors = Selectors || {});
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var BrowserUtils = jsCommon.BrowserUtils, PixelConverter = jsCommon.PixelConverter, SQExpr = powerbi.data.SQExpr, FocusNavigationUtility = jsCommon.FocusNavigationUtility, VerticalSlicerRenderer = function() {
            function VerticalSlicerRenderer(featureSwitches, options, lockKeyboardNavigation) {
                this.lockKeyboardNavigation = lockKeyboardNavigation = void 0 === lockKeyboardNavigation ? !0 : lockKeyboardNavigation, 
                this.hasSearchableData = !1, this.scrollPositionStack = [], this.defaultMinWidth = 50, 
                this.shouldResetScrollPosition = !1, this.isCollapse = !1, this.expandable = !1, 
                this.pendingFocusCall = !1, this.focusCallback = null, this.verticalSlicerStrategy = featureSwitches, 
                this.behavior = new visuals.SlicerWebBehavior(), this.domHelper = new visuals.SlicerUtil.DOMHelper(), 
                this.hostServices = options.hostServices, options && (featureSwitches = options.featureSwitches, 
                this.featureSwitches = options.featureSwitches, this.expressionBasedFormatting = featureSwitches && featureSwitches.expressionBasedFormatting), 
                this.factory = powerbi.createJQueryPromiseFactory(), this.searchComponent = new SlicerSearchInput(this.featureSwitches, this.hostServices);
            }
            return VerticalSlicerRenderer.prototype.hasSlider = function() {
                return !1;
            }, VerticalSlicerRenderer.prototype.supportsOrientation = function() {
                return !this.dataView || !this.data || _.isEmpty(this.data.queryNameByLevel) || 1 === this.data.queryNameByLevel.length;
            }, VerticalSlicerRenderer.prototype.enumerateObjectInstances = function(options) {
                return visuals.SlicerUtil.ObjectEnumerator.enumerateObjectInstances(options, this.data, this.settings, this.dataView, this.featureSwitches);
            }, VerticalSlicerRenderer.prototype.getValuesCard = function() {
                return visuals.SlicerUtil.ObjectEnumerator.getValuesCard(this.hostServices, this.data, this.settings, this.expressionBasedFormatting, this.featureSwitches);
            }, VerticalSlicerRenderer.prototype.getSlicerSettingsCardOptions = function(cardUidBuilder, orientation) {
                return visuals.SlicerUtil.ObjectEnumerator.getSlicerSettingsFormattingOptions({
                    canShowSearch: this.verticalSlicerStrategy.canShowSearchHeader(this.settings, this.hasSearchableData),
                    cardUidBuilder: cardUidBuilder,
                    currentSlicerSettings: this.settings,
                    data: this.data,
                    dataView: this.dataView,
                    hostServices: this.hostServices,
                    orientation: orientation
                });
            }, VerticalSlicerRenderer.prototype.getAdditionalCards = function() {
                return visuals.SlicerUtil.ObjectEnumerator.getAdditionalCards(this.hostServices, this.data, this.settings, this.dataView);
            }, VerticalSlicerRenderer.prototype.onModeChange = function(mode) {
                visuals.SlicerUtil.clearSlicerFilter(this.hostServices, mode);
            }, VerticalSlicerRenderer.prototype.getRestatement = function() {
                return this.data && this.data.restatement;
            }, VerticalSlicerRenderer.prototype.onClear = function(isUserAction) {
                visuals.SlicerUtil.clearSearchFilter(this.selectionHandler), visuals.SlicerUtil.clearFilters(this.selectionHandler, isUserAction), 
                this.searchComponent && (this.searchComponent.input.node().value = "");
            }, VerticalSlicerRenderer.prototype.init = function(slicerInitOptions, containerDiv) {
                var _this = this;
                this.element = containerDiv, this.currentViewport = slicerInitOptions.visualInitOptions.viewport;
                var selectionHandler, listViewOptions = this.hostServices = slicerInitOptions.visualInitOptions.host;
                this.style = slicerInitOptions.visualInitOptions.style, this.settings = visuals.DataConversion.DefaultSlicerProperties(this.style), 
                this.behavior && (selectionHandler = new visuals.SlicerSelectionHandler(listViewOptions, this.behavior));
                containerDiv = document.createElement("div");
                containerDiv.className = VerticalSlicerSelectors.Container.class;
                listViewOptions = this.container = d3.select(containerDiv);
                this.searchComponent.create(listViewOptions), this.verticalSlicerStrategy.hasClearSearchButton() && this.searchComponent.addClearButton(), 
                this.createBodyElement();
                listViewOptions = {
                    rowHeight: void 0,
                    enter: function(rowSelection) {
                        _this.createDataPoints(rowSelection);
                    },
                    update: function(rowSelection) {
                        _this.updateDataPoints(rowSelection, selectionHandler);
                    },
                    loadMoreData: function() {
                        return slicerInitOptions.loadMoreData();
                    },
                    scrollEnabled: !0,
                    viewport: this.currentViewport,
                    baseContainer: this.body,
                    isReadMode: function() {
                        return 1 !== _this.hostServices.getViewMode();
                    },
                    scrollToFrame: slicerInitOptions.enableMultiElementRows ? function(options) {
                        return _this.scrollToFrameForMultiElementRow(options);
                    } : void 0
                };
                return this.listView = visuals.ListViewFactory.createListView(listViewOptions), 
                this.element.get(0).appendChild(containerDiv), this.selectionHandler = selectionHandler;
            }, VerticalSlicerRenderer.prototype.onDestroy = function() {
                this.listView && this.listView.destroy();
            }, VerticalSlicerRenderer.prototype.render = function(options) {
                this.renderVerticalSlicer(this.converter(options.dataView, options.isSlicer), options);
            }, VerticalSlicerRenderer.prototype.renderVerticalSlicer = function(data, options, callback) {
                this.focusCallback && (FocusNavigationUtility.contains(this.container.node(), document.activeElement) || (this.focusCallback = void 0, 
                this.listView && this.listView.resetCallBacks())), this.currentViewport = options.viewport, 
                this.hasSearchableData = options.hasSearchableData;
                var dataView = options.dataView;
                if (this.searchComponent.update(this.settings, this.data && this.data.searchKey, this.verticalSlicerStrategy.shouldShowSearchHeader(this.settings, this.hasSearchableData), this.verticalSlicerStrategy.hasClearSearchButton()), 
                !dataView || !this.data || _.isEmpty(this.data.slicerDataPoints)) return this.listView && this.listView.empty(), 
                void (callback && callback());
                this.container.node().querySelector("input.searchInput") === document.activeElement && options.isSearchMode && this.announceSearchResults(data.slicerDataPoints.length), 
                this.expandable = 1 < this.data.queryNameByLevel.length, this.setBodyRole(), this.setBodyAriaLabel(), 
                this.updateSelectionStyle(), this.listView.viewport(this.currentViewport).data(this.data.slicerDataPoints, function(d) {
                    return visuals.SlicerUtil.getDataPointKey(d);
                }, options.resetScrollbarPosition && this.shouldResetScrollPosition, callback);
            }, VerticalSlicerRenderer.prototype.converter = function(dataView, data) {
                void 0 === data && (data = !1);
                var localizedSelectAllText = this.hostServices.getLocalizedString(visuals.SlicerUtil.DisplayNameKeys.SelectAll), data = visuals.DataConversion.convert({
                    dataView: dataView,
                    localizedSelectAllText: localizedSelectAllText,
                    selectionHandler: this.selectionHandler,
                    hostServices: this.hostServices,
                    style: this.style,
                    isSlicer: data,
                    featureSwitches: this.featureSwitches,
                    slicerType: 0
                });
                return this.shouldResetScrollPosition = this.getShouldResetScrollPosition(dataView, data), 
                this.data = data, this.isCollapse = !1, dataView && this.data && (this.settings = data.slicerSettings, 
                this.dataView = dataView), data;
            }, VerticalSlicerRenderer.prototype.hasSearchEnabled = function() {
                return this.verticalSlicerStrategy.shouldShowSearchHeader(this.settings, this.hasSearchableData);
            }, VerticalSlicerRenderer.prototype.updateSelectionStyle = function() {
                var settings = this.settings;
                this.container.classed("isMultiSelectEnabled", settings && settings.selection && !settings.selection.singleSelect);
            }, VerticalSlicerRenderer.prototype.createDataPoints = function(inputElement) {
                var _this = this, self = this, settings = this.settings, listItemElement = inputElement.append("div").classed(VerticalSlicerSelectors.ItemContainer.class, !0), inputElement = listItemElement.append("div").classed(VerticalSlicerSelectors.Input.class, !0).attr("aria-hidden", !0);
                this.verticalSlicerStrategy.customizeInputElement(inputElement, settings);
                var isInverted = this.selectionHandler.isSelectionModeInverted();
                listItemElement.on("contextmenu", function(data, index) {
                    d3.event.stopPropagation(), d3.event.preventDefault(), _this.onContextMenu(data, {
                        x: d3.event.clientX,
                        y: d3.event.clientY
                    });
                }), listItemElement.call(VerticalSlicerRenderer.updateTabIndex);
                var role = this.getOptionRole();
                listItemElement.each(function(d, i) {
                    var _this = this, item = d3.select(this);
                    this.addEventListener("keydown", function(event) {
                        var data, currentActiveElement_1, handleEvent = item.data();
                        _.isEmpty(handleEvent) || (data = handleEvent[0], handleEvent = function(action) {
                            event.preventDefault(), event.stopPropagation(), action();
                        }, 39 === event.keyCode && !0 === data.isCollapsed || 37 === event.keyCode && !1 === data.isCollapsed ? (currentActiveElement_1 = document.activeElement, 
                        event.stopPropagation(), self.expandCollapseNode(data), handleEvent(function() {
                            return __awaiter(_this, void 0, powerbi.Promise, function() {
                                return __generator(this, function(_a) {
                                    return [ 2, self.focusRowAtIndex(currentActiveElement_1, self.getCurrentRowDataIndex(currentActiveElement_1), !1, !1, !1, !1, !1, !0) ];
                                });
                            });
                        })) : 39 === event.keyCode && data.children ? handleEvent(function() {
                            return __awaiter(_this, void 0, powerbi.Promise, function() {
                                return __generator(this, function(_a) {
                                    return [ 2, self.focusRowAtIndex(document.activeElement, data.children[0].index, !1, !0, !1, !1, !0, !1) ];
                                });
                            });
                        }) : 37 === event.keyCode && data.parent ? handleEvent(function() {
                            return __awaiter(_this, void 0, powerbi.Promise, function() {
                                return __generator(this, function(_a) {
                                    return [ 2, self.focusRowAtIndex(document.activeElement, data.parent.index, !1, !1, !0, !1, !0, !1) ];
                                });
                            });
                        }) : 39 === event.keyCode || 37 === event.keyCode ? event.stopPropagation() : 56 === event.keyCode && (event.stopPropagation(), 
                        self.expandCollapseAllNodesOnSameLevel(data)));
                    }), self.updateItemState(item, d), self.setAccessibilityAttributes(d, item, role, isInverted), 
                    item.attr("data-row-index", d.index).attr("data-row-id", d.id), null != d.count && item.append("span").classed(visuals.SlicerUtil.Selectors.CountText.class, !0).styles({
                        "font-size": PixelConverter.fromPoint(settings.slicerText.textSize),
                        "font-family": settings.slicerText.fontFamily
                    });
                });
            }, VerticalSlicerRenderer.prototype.getUnusedAriaStatus = function() {
                return this.data && this.data.slicerSettings.selection.strictSingleSelect ? "aria-checked" : "aria-selected";
            }, VerticalSlicerRenderer.prototype.setAccessibilityAttributes = function(d, item, role, isInverted) {
                item.attr("role", role.role).attr(role.selected, visuals.SlicerUtil.getSlicerDataPointCheckedState(d, isInverted)).attr("aria-setsize", "-1").attr("aria-posinset", d.levelIndex || 1);
            }, VerticalSlicerRenderer.updateTabIndex = function(rowSelection) {
                var firstItem, tabFound = !1;
                rowSelection.each(function(d, i) {
                    var item = d3.select(this);
                    0 === i && (firstItem = item), tabFound || "0" !== item.attr("tabindex") ? tabFound && "0" === item.attr("tabindex") && item.attr("tabindex", null) : tabFound = !0;
                }), firstItem && !tabFound && firstItem.attr("tabindex", "0");
            }, VerticalSlicerRenderer.prototype.updateItemType = function(item, d) {
                var image = item.select(visuals.SlicerUtil.Selectors.LabelImage.selector), text = item.select(visuals.SlicerUtil.Selectors.LabelText.selector);
                if (d.isImage) return text.remove(), (image = image.empty() ? item.append("img").classed(visuals.SlicerUtil.Selectors.LabelImage.class, !0) : image).attr("src", d.value), 
                void image.attr("role", "none");
                text.empty() && (image.remove(), text.empty() && (text = item.append("span").classed(visuals.SlicerUtil.Selectors.LabelText.class, !0))), 
                text.text(d.value).attr("title", d.tooltip);
            }, VerticalSlicerRenderer.prototype.getOptionRole = function() {
                var isStrictSingleSelect = this.data && this.data.slicerSettings.selection.strictSingleSelect;
                return {
                    role: this.expandable ? "treeitem" : "option",
                    selected: isStrictSingleSelect ? "aria-selected" : "aria-checked"
                };
            }, VerticalSlicerRenderer.prototype.updateDataPoints = function(labelText_1, selectionHandler) {
                var domHelper, isInverted_1, self_1, role_1, slicerItemContainers, behaviorOptions, settings = this.settings, data = this.data;
                data && settings && (domHelper = this.domHelper, isInverted_1 = this.selectionHandler.isSelectionModeInverted(), 
                labelText_1.select(VerticalSlicerSelectors.ItemContainer.selector), labelText_1.select(VerticalSlicerSelectors.Input.selector), 
                labelText_1.select(VerticalSlicerSelectors.ExpandButton.selector), this.verticalSlicerStrategy.updateInputElement(labelText_1.selectAll(VerticalSlicerSelectors.Input.selector), settings), 
                !(slicerItemContainers = labelText_1.selectAll(visuals.SlicerUtil.Selectors.CountText.selector)).empty() && this.verticalSlicerStrategy.shouldShowCount() && (labelText_1.select(VerticalSlicerSelectors.CountText.selector), 
                slicerItemContainers.text(function(d) {
                    return d.count;
                }), domHelper.setSlicerTextStyle(slicerItemContainers, settings, this.featureSwitches)), 
                selectionHandler && this.body && (behaviorOptions = (self_1 = this).body.attr("width", this.currentViewport.width), 
                role_1 = this.getOptionRole(), (slicerItemContainers = this.body.selectAll(VerticalSlicerSelectors.ItemContainer.selector)).each(function(d, index) {
                    var item = d3.select(this);
                    self_1.updateItemState(item, d), item.node().hasAttribute("role") && item.attr(self_1.getUnusedAriaStatus(), null), 
                    self_1.setAccessibilityAttributes(d, item, role_1, isInverted_1), null != settings.items.padding && (item.style("padding-top", settings.items.padding + "px"), 
                    item.style("padding-bottom", settings.items.padding + "px"));
                }), labelText_1 = labelText_1.selectAll(visuals.SlicerUtil.Selectors.LabelText.selector), 
                this.verticalSlicerStrategy.setLabelTextStyle(domHelper, labelText_1, settings, this.style, this.featureSwitches), 
                VerticalSlicerRenderer.updateTabIndex(slicerItemContainers), behaviorOptions = behaviorOptions.selectAll(VerticalSlicerSelectors.Input.selector), 
                behaviorOptions = {
                    slicerContainer: this.container,
                    itemContainers: slicerItemContainers,
                    itemInputs: behaviorOptions,
                    settings: data.slicerSettings,
                    searchInput: this.searchComponent.input,
                    clearSearchTextButton: this.searchComponent.clear,
                    style: this.style
                }, selectionHandler.bind(data.retainedDataPoints, {
                    behaviorOptions: behaviorOptions,
                    orientation: 0
                })), this.behavior.renderSelection());
            }, VerticalSlicerRenderer.prototype.announceSearchResults = function(message) {
                message = 0 === message ? this.hostServices.getLocalizedString("ContentList_EmptySearchResults") : 1 === message ? this.hostServices.getLocalizedString("Count_SearchBox_Result_One") : this.hostServices.getLocalizedString("Count_SearchBox_Results").replace("{0}", message.toString());
                this.hostServices.alertWithDebounce("announce-search", message);
            }, VerticalSlicerRenderer.prototype.getExpandParameters = function(d) {
                d.isCollapsed, this.isCollapse = !1 === d.isCollapsed;
                var dataPointInfo = visuals.SlicerUtil.buildDataPointInfo(d, this.data.queryNameByLevel);
                return {
                    dataRoles: [ visuals.slicerRoles.value ],
                    data: dataPointInfo.selector,
                    isCollapse: !d.isCollapsed,
                    nodeIndex: dataPointInfo.path
                };
            }, VerticalSlicerRenderer.prototype.expandCollapseNode = function(expandParams) {
                expandParams = this.getExpandParameters(expandParams);
                this.hostServices.setNodeExpansionState({
                    dataRoles: expandParams.dataRoles,
                    data: expandParams.data,
                    isCollapse: expandParams.isCollapse,
                    nodeIndex: expandParams.nodeIndex
                });
            }, VerticalSlicerRenderer.prototype.expandCollapseAllNodesOnSameLevel = function(expandParams) {
                expandParams = this.getExpandParameters(expandParams);
                this.hostServices.setLevelExpansionState({
                    dataRoles: expandParams.dataRoles,
                    data: expandParams.data,
                    isCollapse: expandParams.isCollapse,
                    nodeIndex: expandParams.nodeIndex
                });
            }, VerticalSlicerRenderer.prototype.onContextMenu = function(roles, point) {
                var args = visuals.SlicerUtil.buildDataPointInfo(roles, this.data.queryNameByLevel), roles = [ visuals.slicerRoles.value ], args = {
                    nodeIndex: args.path,
                    dataRoles: roles,
                    position: {
                        x: d3.event.clientX,
                        y: d3.event.clientY
                    },
                    data: [ args.selector ]
                };
                this.hostServices.onContextMenu(args);
            }, VerticalSlicerRenderer.prototype.getShouldResetScrollPosition = function(newSources, oldSources) {
                if (!this.dataView || !this.data || !newSources || !oldSources || this.isCollapse) return !1;
                if (1 === this.data.queryNameByLevel.length) return !powerbi.DataViewAnalysis.hasSameCategoryIdentity(newSources, this.dataView);
                if (jsCommon.ArrayExtensions.hasSameValues(this.data.queryNameByLevel, oldSources.queryNameByLevel, function(q1, q2) {
                    return q1 === q2;
                })) {
                    if (_.isEmpty(this.data.slicerDataPoints) || _.isEmpty(oldSources.slicerDataPoints) || !(this.data.slicerDataPoints.length > oldSources.slicerDataPoints.length) || this.isCollapse) return !1;
                    var firstVisibleRow_1 = this.listView.getFirstVisibleRow();
                    return firstVisibleRow_1 ? void 0 !== firstVisibleRow_1.levelIndex && !_.some(oldSources.slicerDataPoints, function(d) {
                        return d.identity.equals(firstVisibleRow_1.identity);
                    }) : !0;
                }
                if (this.dataView.matrix && this.dataView.matrix.rows && newSources.matrix && newSources.matrix.rows) {
                    oldSources = _.map(this.dataView.matrix.rows.levels, function(level) {
                        return level.sources[0].expr;
                    }), newSources = _.map(newSources.matrix.rows.levels, function(level) {
                        return level.sources[0].expr;
                    });
                    return !jsCommon.ArrayExtensions.hasSameValues(oldSources, newSources, SQExpr.equals);
                }
                return !0;
            }, VerticalSlicerRenderer.prototype.updateExpansionState = function(item, d) {
                var margin = 0;
                0 < d.level && (margin = d.level * PixelConverter.fromPointToPixel(this.data.slicerSettings.expandCollapse.indentation)), 
                item.styles({
                    "margin-left": margin + "px"
                }), this.updateExpandButton(item, d);
            }, VerticalSlicerRenderer.prototype.updateExpandButton = function(buttonType, d) {
                var expandButton = buttonType.select(VerticalSlicerSelectors.ExpandButton.selector);
                this.expandable && (expandButton.empty() && (expandButton = this.createExpandButton(buttonType)), 
                buttonType.attr("aria-expanded", void 0 === d.isCollapsed ? null : !d.isCollapsed), 
                buttonType.attr("aria-level", d.level + 1));
                buttonType = this.data.slicerSettings, buttonType = PixelConverter.fromPoint(buttonType.slicerText.textSize);
                expandButton.styles({
                    "font-size": buttonType,
                    width: buttonType
                }), expandButton.attr("aria-hidden", "true"), void 0 !== d.isCollapsed ? (buttonType = this.data.slicerSettings.expandCollapse.toggleType, 
                expandButton.classed(VerticalSlicerSelectors.Hidden.class, !1), expandButton.selectAll(".glyphicon").classed("pbi-glyph-chevrondownsmall", d.isCollapsed && 0 === buttonType).classed("pbi-glyph-chevronupsmall", !d.isCollapsed && 0 === buttonType).classed("pbi-glyph-explore-content-single", d.isCollapsed && 1 === buttonType).classed("pbi-glyph-collapse-content-single", !d.isCollapsed && 1 === buttonType).classed("pbi-glyph-caretright", d.isCollapsed && 2 === buttonType).classed("pbi-glyph-caretdownright", !d.isCollapsed && 2 === buttonType)) : this.expandable || expandButton.empty() ? expandButton.classed(VerticalSlicerSelectors.Hidden.class, !0) : expandButton.remove();
            }, VerticalSlicerRenderer.prototype.createExpandButton = function(glyphContainer) {
                var _this = this, glyphContainer = glyphContainer.insert("div", ":first-child").classed(VerticalSlicerSelectors.ExpandButton.class, !0).on("click", function(data) {
                    d3.event.stopPropagation(), _this.expandCollapseNode(data);
                });
                return glyphContainer.append("i").classed("glyphicon", !0), glyphContainer;
            }, VerticalSlicerRenderer.prototype.scrollToFrameForMultiElementRow = function(baseContainer) {
                var listView = baseContainer.listView, loadMoreData = baseContainer.loadMoreData, elements = baseContainer.rowHeight, rowScrollPosition = baseContainer.scrollTop, totalElements = baseContainer.totalRows, visibleGroupContainer = baseContainer.visibleGroupContainer, baseContainer = baseContainer.baseContainer, rowScrollPosition = 0 === rowScrollPosition ? 0 : Math.floor(rowScrollPosition / elements);
                if (!(this.currentRowPosition && rowScrollPosition === this.currentRowPosition || rowScrollPosition < 0)) {
                    var transformAttr = visuals.SVGUtil.translateWithPixels(0, rowScrollPosition * elements);
                    visibleGroupContainer.styles({
                        transform: function(d) {
                            return transformAttr;
                        },
                        "-webkit-transform": transformAttr
                    });
                    elements = visibleGroupContainer.selectAll(".row").filter(function() {
                        return "" !== this.textContent;
                    });
                    return void 0 === this.currentRowPosition ? (this.currentPosition = this.getInitialPosition(totalElements, baseContainer), 
                    elements && elements.node() && (this.currentRowPosition = rowScrollPosition)) : (this.updateCurrentPosition(rowScrollPosition, totalElements, baseContainer, visibleGroupContainer, elements), 
                    this.currentRowPosition = rowScrollPosition), listView.performScrollToFrame(this.currentPosition.startIndex, this.currentPosition.endIndex, totalElements, this.currentPosition.endIndex - this.currentPosition.startIndex, loadMoreData);
                }
            }, VerticalSlicerRenderer.prototype.getInitialPosition = function(totalElements, visibleContainerSize) {
                var endIndex = totalElements, visibleContainerSize = Math.ceil($(visibleContainerSize.node()).outerHeight() / this.listView.getRowHeight()) * Math.floor($(visibleContainerSize.node()).outerWidth() / this.defaultMinWidth);
                return {
                    startIndex: 0,
                    endIndex: endIndex = 0 < visibleContainerSize ? Math.min(totalElements, visibleContainerSize) : endIndex
                };
            }, VerticalSlicerRenderer.prototype.updateCurrentPosition = function(rowScrollPosition, totalElements, baseContainer, visibleGroupContainer, elements) {
                var rowDif = Math.abs(rowScrollPosition - this.currentRowPosition);
                if (rowScrollPosition === this.currentRowPosition) this.currentPosition = this.scrollPositionStack.pop() || this.getInitialPosition(totalElements, baseContainer); else if (rowScrollPosition < this.currentRowPosition) for (;0 < rowDif; ) this.currentPosition = this.scrollPositionStack.pop() || this.currentPosition, 
                rowDif--; else for (;0 < rowDif; ) {
                    var newStartIndex = Math.ceil($(baseContainer.node()).outerHeight() / $(elements.node()).outerHeight());
                    if (this.currentPosition.startIndex >= totalElements - 1) return;
                    this.scrollPositionStack.push(this.currentPosition);
                    var elementsInRowArray = this.getElementsPerRow(visibleGroupContainer, newStartIndex, elements), newStartIndex = this.currentPosition.startIndex + elementsInRowArray[0];
                    this.currentPosition = {
                        startIndex: newStartIndex,
                        endIndex: Math.min(totalElements, newStartIndex + _.sum(elementsInRowArray) + this.getMaxElementsInRow(visibleGroupContainer, elements))
                    }, rowDif--;
                }
            }, VerticalSlicerRenderer.prototype.getElementsPerRow = function(visibleGroupContainer, rowCount, elements) {
                for (var elementsPerRow = [], node = elements.node(), i = 0; i < rowCount && null !== node; i++) {
                    elementsPerRow.push(0);
                    for (var top_1 = $(node).position().top; null !== node && $(node).position().top <= top_1 + 5; ) elementsPerRow[i]++, 
                    node = node.nextElementSibling;
                }
                return elementsPerRow;
            }, VerticalSlicerRenderer.prototype.getMaxElementsInRow = function(visibleGroupContainer, minWidthAttribute) {
                minWidthAttribute = minWidthAttribute.node().getAttribute("min-width");
                return minWidthAttribute ? $(visibleGroupContainer.node()).outerWidth() / +minWidthAttribute : Math.floor($(visibleGroupContainer.node()).outerWidth() / this.defaultMinWidth);
            }, VerticalSlicerRenderer.prototype.createBodyElement = function() {
                var _this = this;
                this.body = this.container.append("div").classed(visuals.SlicerUtil.Selectors.Body.class, !0);
                var searchBar = this.searchComponent.input.node();
                this.body.on("wheel", function() {
                    _this.focusCallback = void 0, _this.listView.resetCallBacks(), _this.listView.onScroll();
                }), searchBar.addEventListener("keydown", function(event) {
                    40 === event.keyCode ? (_this.searchBarFocusNextElement(), event.preventDefault(), 
                    event.stopPropagation()) : 70 === event.keyCode && event.ctrlKey && (_this.searchBarFocusNextElement(), 
                    _this.enableSearch(), event.preventDefault(), event.stopPropagation());
                }), this.body.on("keydown", function() {
                    function handleEvent(action) {
                        d3Event.preventDefault(), d3Event.stopPropagation(), action();
                    }
                    var activeElement_1, shiftKey_1, activeElement_2, shiftKey_2, element_1, element_2, d3Event = d3.event;
                    40 === d3Event.keyCode ? (activeElement_1 = document.activeElement, shiftKey_1 = d3Event.shiftKey, 
                    handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.focusRowAtIndex(activeElement_1, this.getCurrentRowDataIndex(document.activeElement) + 2, !1, !0, !0, shiftKey_1, !1, !1) ];
                            });
                        });
                    })) : 38 === d3Event.keyCode ? (activeElement_2 = document.activeElement, shiftKey_2 = d3Event.shiftKey, 
                    _this.settings.search.enabled && 0 === _this.getCurrentRowDataIndex(activeElement_2) || _this.settings.search.enabled && 1 === _this.getCurrentRowDataIndex(activeElement_2) && !_this.settings.selection.selectAllCheckboxEnabled ? (_this.focusForJumpRow(searchBar), 
                    handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2 ];
                            });
                        });
                    })) : handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.focusRowAtIndex(activeElement_2, this.getCurrentRowDataIndex(document.activeElement) - 3, !1, !1, !0, shiftKey_2, !1, !1) ];
                            });
                        });
                    })) : 9 === d3Event.keyCode ? _this.lockKeyboardNavigation && _this.body.node().focus() : 35 === d3Event.keyCode ? handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.focusRowAtIndex(document.activeElement, this.data.slicerDataPoints.length, !1, !0, !1, !1, !1, !1) ];
                            });
                        });
                    }) : 36 === d3Event.keyCode ? handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.focusRowAtIndex(document.activeElement, 1, !1, !1, !1, !1, !1, !1) ];
                            });
                        });
                    }) : 34 === d3Event.keyCode ? (element_1 = document.activeElement, handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.focusRowAtIndex(element_1, this.getCurrentRowDataIndex(document.activeElement) + this.getRowsPerPage(), !0, !0, !1, !1, !1, !1) ];
                            });
                        });
                    })) : 33 === d3Event.keyCode ? (element_2 = document.activeElement, handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.focusRowAtIndex(element_2, Math.max(this.getCurrentRowDataIndex(document.activeElement) - this.getRowsPerPage(), 1), !1, !1, !1, !1, !1, !1) ];
                            });
                        });
                    })) : 70 === d3Event.keyCode && d3Event.ctrlKey && handleEvent(function() {
                        return __awaiter(_this, void 0, powerbi.Promise, function() {
                            return __generator(this, function(_a) {
                                return [ 2, this.enableSearch() ];
                            });
                        });
                    });
                });
            }, VerticalSlicerRenderer.prototype.setBodyRole = function() {
                var role = this.expandable ? "tree" : "listbox";
                this.body.attr("role", role);
            }, VerticalSlicerRenderer.prototype.setBodyAriaLabel = function() {
                this.body.attr("aria-label", this.data.categorySourceName);
            }, VerticalSlicerRenderer.prototype.enableSearch = function() {
                this.settings.search && (this.settings.search.enabled = !this.settings.search.enabled, 
                this.searchComponent.update(this.settings, this.data && this.data.searchKey, this.verticalSlicerStrategy.shouldShowSearchHeader(this.settings, this.hasSearchableData), this.verticalSlicerStrategy.hasClearSearchButton()));
            }, VerticalSlicerRenderer.prototype.focusRowAtIndex = function(currentRow, rowIndex, manualLoadMore, forward, arrowKeys, shiftKey, selectIndex, keepCurrentFocus) {
                var _this = this, deferred = this.factory.defer(), currentRowDataId = currentRow.getAttribute("data-row-id");
                return this.focusCallback = void 0, this.listView.resetCallBacks(), this.pendingFocusCall ? deferred.resolve(1) : (this.pendingFocusCall = !0, 
                this.focusCallback = function() {
                    var nextRow, parent, handler_1, updateSettings = $(_this.container.node()).find(".visibleGroup").get(0), newCurrentRow = $(updateSettings).find("[data-row-id='" + currentRowDataId + "']").get(0);
                    newCurrentRow ? parent = (currentRow = newCurrentRow).parentElement : nextRow = void 0, 
                    currentRow && _this.removeFocusForJumpRow(currentRow), keepCurrentFocus ? currentRow ? _this.focusForJumpRow(currentRow) : forward || parent.previousElementSibling || (handler_1 = function() {
                        _this.focusForJumpRow(currentRow), currentRow.removeEventListener("blur", handler_1);
                    }, currentRow.addEventListener("blur", handler_1)) : (arrowKeys || selectIndex || !updateSettings ? arrowKeys && !selectIndex && parent ? !nextRow && forward && parent.nextElementSibling ? nextRow = parent.nextElementSibling.firstElementChild : nextRow || forward || !parent.previousElementSibling || (nextRow = parent.previousElementSibling.firstElementChild) : selectIndex && updateSettings && (nextRow = forward ? (nextRow = _this.selectItemFromRowId(d3.select(currentRow).data()[0].children[0].id, updateSettings), 
                    _this.adjustBottomRowToInViewRow(nextRow, updateSettings)) : (nextRow = _this.selectItemFromRowId(d3.select(currentRow).data()[0].parent.id, updateSettings), 
                    _this.adjustTopRowToInViewRow(nextRow, updateSettings))) : !nextRow && forward ? (nextRow = updateSettings.lastElementChild.firstElementChild, 
                    nextRow = _this.adjustBottomRowToInViewRow(nextRow, updateSettings)) : nextRow || forward || (nextRow = updateSettings.firstElementChild.firstElementChild, 
                    nextRow = _this.adjustTopRowToInViewRow(nextRow, updateSettings)), nextRow ? (_this.focusForJumpRow(nextRow), 
                    shiftKey && _this.pendingFocusCall && ((updateSettings = _this.settings).selection.singleSelect = updateSettings.selection.strictSingleSelect, 
                    visuals.SlicerWebBehavior.toggleItemSelection(d3.select(nextRow).data()[0], _this.selectionHandler, updateSettings), 
                    _this.setAccessibilityAttributes(d3.select(nextRow).data()[0], d3.select(nextRow), _this.getOptionRole(), _this.selectionHandler.isSelectionModeInverted()))) : currentRow && _this.focusForJumpRow(currentRow)), 
                    _this.pendingFocusCall = !1, deferred.resolve(0);
                }, this.listView.scrollRowIntoView(rowIndex - 1, this.focusCallback)), deferred.promise;
            }, VerticalSlicerRenderer.prototype.getCurrentRowDataIndex = function(slicerDataPoint) {
                if (slicerDataPoint) {
                    slicerDataPoint = d3.select(slicerDataPoint).data()[0];
                    if (slicerDataPoint) return slicerDataPoint.index;
                }
                return 1;
            }, VerticalSlicerRenderer.prototype.adjustBottomRowToInViewRow = function(nextRow, parentContainer) {
                return nextRow = nextRow.getBoundingClientRect().y + nextRow.getBoundingClientRect().height > this.container.node().getBoundingClientRect().y + this.container.node().getBoundingClientRect().height ? parentContainer.lastElementChild.previousElementSibling.firstElementChild : nextRow;
            }, VerticalSlicerRenderer.prototype.adjustTopRowToInViewRow = function(nextRow, parentContainer) {
                return nextRow = nextRow.getBoundingClientRect().y <= parentContainer.getBoundingClientRect().y && this.listView.canScrollTop() ? parentContainer.firstElementChild.nextElementSibling.firstElementChild : nextRow;
            }, VerticalSlicerRenderer.prototype.getRowsPerPage = function() {
                return this.listView.getVisibleRowsWithoutPadding();
            }, VerticalSlicerRenderer.prototype.selectItemFromRowId = function(id, element) {
                return d3.select(element).select("[data-row-id='" + id + "']").node();
            }, VerticalSlicerRenderer.prototype.searchBarFocusNextElement = function() {
                var nextRow = $(this.container.node()).find(".visibleGroup").get(0).firstElementChild.firstElementChild;
                this.focusForJumpRow(nextRow);
            }, VerticalSlicerRenderer.prototype.focusForJumpRow = function(row) {
                row.setAttribute("tabindex", "0"), row.setAttribute("focusable", "true"), row.classList.add(visuals.SetFocusRingClassName);
                BrowserUtils.focus(row, {
                    preventScroll: !0
                });
            }, VerticalSlicerRenderer.prototype.removeFocusForJumpRow = function(row) {
                row.setAttribute("tabindex", "-1"), row.removeAttribute("focusable"), row.classList.remove(visuals.SetFocusRingClassName);
            }, VerticalSlicerRenderer.prototype.updateItemState = function(item, d) {
                this.updateExpansionState(item, d), this.updateItemType(item, d), visuals.SlicerUtil.updateDisableState(item, d);
            }, VerticalSlicerRenderer;
        }();
        visuals.VerticalSlicerRenderer = VerticalSlicerRenderer, function(VerticalSlicerRenderer) {
            var CheckListSlicerStrategy = function() {
                function CheckBoxSlicerStrategy() {}
                return CheckBoxSlicerStrategy.prototype.canShowSearchHeader = function(_settings, hasSearchableData) {
                    return !!hasSearchableData;
                }, CheckBoxSlicerStrategy.prototype.hasClearSearchButton = function() {
                    return !1;
                }, CheckBoxSlicerStrategy.prototype.setLabelTextStyle = function(domHelper, slicerText, settings, _style, featureSwitches) {
                    domHelper.setSlicerTextStyle(slicerText, settings, featureSwitches);
                }, CheckBoxSlicerStrategy.prototype.shouldShowSearchHeader = function(settings, hasSearchableData) {
                    return this.strictSingleSelect = settings.selection.strictSingleSelect, settings.search.enabled && this.canShowSearchHeader(settings, hasSearchableData);
                }, CheckBoxSlicerStrategy.prototype.shouldShowCount = function() {
                    return !0;
                }, CheckBoxSlicerStrategy.prototype.updateInputElement = function(inputElement, settings) {
                    inputElement.selectAll("span").style("font-size", PixelConverter.fromPoint(settings.slicerText.textSize)).classed(this.strictSingleSelect ? "radiobutton" : "checkbox", !0).classed(this.strictSingleSelect ? "checkbox" : "radiobutton", !1);
                }, CheckBoxSlicerStrategy.prototype.customizeInputElement = function(inputElement, settings) {
                    inputElement.append("span").style("font-size", PixelConverter.fromPoint(settings.slicerText.textSize)).classed("glyphicon", !0).classed(this.strictSingleSelect ? "radiobutton" : "checkbox", !0).classed(settings.items.accessibilityContrastProperties ? "checkboxOutlineContrast" : "checkboxOutline", !0);
                }, CheckBoxSlicerStrategy;
            }();
            VerticalSlicerRenderer.CheckBoxSlicerStrategy = CheckListSlicerStrategy;
            var listElementFontFamily = visuals.Font.Family.regular.css, CheckListSlicerStrategy = function() {
                function CheckListSlicerStrategy() {}
                return CheckListSlicerStrategy.prototype.hasClearSearchButton = function() {
                    return !0;
                }, CheckListSlicerStrategy.prototype.setLabelTextStyle = function(domHelper, slicerText, settings, style, featureSwitches) {
                    var overridingSettings = visuals.DataConversion.DefaultSlicerProperties(style);
                    overridingSettings.slicerText.textSize = PixelConverter.toPoint(13), overridingSettings.slicerText.fontFamily = listElementFontFamily, 
                    overridingSettings.slicerText.color = visuals.ColorHelper.getThemeColor(style, visuals.ForegroundColorName), 
                    domHelper.setSlicerTextStyle(slicerText, overridingSettings, featureSwitches);
                }, CheckListSlicerStrategy.prototype.canShowSearchHeader = function(settings, hasSearchableData) {
                    return settings.search.enabled || hasSearchableData;
                }, CheckListSlicerStrategy.prototype.shouldShowSearchHeader = function(settings, hasSearchableData) {
                    return this.canShowSearchHeader(settings, hasSearchableData);
                }, CheckListSlicerStrategy.prototype.updateInputElement = function(inputElement) {}, 
                CheckListSlicerStrategy.prototype.shouldShowCount = function() {
                    return !1;
                }, CheckListSlicerStrategy.prototype.customizeInputElement = function(inputElement) {
                    inputElement.append("span").classed("powervisuals-glyph checkmark", !0);
                }, CheckListSlicerStrategy;
            }();
            VerticalSlicerRenderer.CheckListSlicerStrategy = CheckListSlicerStrategy;
        }(visuals.VerticalSlicerRenderer || (visuals.VerticalSlicerRenderer = {}));
        var VerticalSlicerSelectors, SlicerSearchInput = function() {
            function SlicerSearchInput(featureSwitches, hostServices) {
                this.featureSwitches = featureSwitches, this.hostServices = hostServices, this.domHelper = new visuals.SlicerUtil.DOMHelper();
            }
            return SlicerSearchInput.prototype.create = function(container) {
                this.container = this.domHelper.addSearch(this.hostServices, container), this.input = this.container.select(visuals.SlicerUtil.Selectors.SearchInput.selector);
            }, SlicerSearchInput.prototype.addClearButton = function() {
                this.clear = this.domHelper.addClearSearchButton(this.hostServices, this.container);
            }, SlicerSearchInput.prototype.update = function(settings, borderStyle, isVisible, hasClearSearchButton) {
                var searchInput, searchIcon, existingSearchKey, fontHeight = this.container.classed(visuals.SlicerUtil.Selectors.SearchHeaderShow.class);
                this.container.classed(visuals.SlicerUtil.Selectors.SearchHeaderShow.class, isVisible), 
                this.container.classed(visuals.SlicerUtil.Selectors.SearchHeaderCollapsed.class, !isVisible), 
                settings && isVisible && (searchInput = this.container.select(visuals.SlicerUtil.Selectors.SearchInput.selector), 
                searchIcon = this.container.select(visuals.SlicerUtil.Selectors.SearchIconClass.selector), 
                searchInput.empty() ? hasClearSearchButton && this.domHelper.configureSearchBoxIcon(this.container, void 0) : (existingSearchKey = (existingSearchKey = searchInput.node()) && existingSearchKey.value, 
                hasClearSearchButton && this.domHelper.configureSearchBoxIcon(this.container, existingSearchKey), 
                (_.isEmpty(existingSearchKey) || _.isEmpty(borderStyle) && isVisible !== fontHeight) && searchInput.property("value", borderStyle), 
                fontHeight = Math.ceil(PixelConverter.fromPointToPixel(settings.slicerText.textSize)), 
                borderStyle = this.featureSwitches.outlineDropdownToCheckboxes ? settings.search.outlineStyle : settings.search.outline, 
                this.container.styles({
                    color: settings.slicerText.color,
                    "border-style": borderStyle,
                    "border-color": settings.search.borderColor,
                    background: settings.search.background,
                    height: fontHeight + "px"
                }), searchInput.styles({
                    background: settings.search.background,
                    color: settings.slicerText.color,
                    "font-size": PixelConverter.fromPoint(settings.slicerText.textSize),
                    "font-family": settings.slicerText.fontFamily
                }), searchIcon.styles({
                    color: settings.slicerText.color
                })));
            }, SlicerSearchInput;
        }();
        visuals.SlicerSearchInput = SlicerSearchInput, function(VerticalSlicerSelectors) {
            var createClassAndSelector = jsCommon.CssConstants.createClassAndSelector;
            VerticalSlicerSelectors.Container = createClassAndSelector("slicerContainer"), VerticalSlicerSelectors.ItemContainer = createClassAndSelector("slicerItemContainer"), 
            VerticalSlicerSelectors.Input = createClassAndSelector("slicerCheckbox"), VerticalSlicerSelectors.ExpandButton = createClassAndSelector("expandButton"), 
            VerticalSlicerSelectors.Hidden = createClassAndSelector("hidden"), VerticalSlicerSelectors.CountText = createClassAndSelector("slicerCountText");
        }(VerticalSlicerSelectors = visuals.VerticalSlicerSelectors || (visuals.VerticalSlicerSelectors = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var VerticalSlicerWebBehavior = function() {
            function VerticalSlicerWebBehavior() {}
            return VerticalSlicerWebBehavior.prototype.bindEvents = function(options, selectionHandler) {
                this.itemContainers = options.itemContainers, this.itemInputs = options.itemInputs, 
                this.selectionHandler = selectionHandler, this.settings = options.settings, this.style = options.style, 
                visuals.SlicerWebBehavior.bindSlicerEvents(options, this.itemContainers, selectionHandler, this.settings);
            }, VerticalSlicerWebBehavior.prototype.renderSelection = function() {
                visuals.SlicerWebBehavior.setSelectionOnSlicerItems(this.itemInputs, this.selectionHandler, this.style);
            }, VerticalSlicerWebBehavior;
        }();
        visuals.VerticalSlicerWebBehavior = VerticalSlicerWebBehavior;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var RelativeDateQualifier = powerbi.data.RelativeDateQualifier, RelativeDateUnit = powerbi.data.RelativeDateUnit, RelativeFilterType = powerbi.data.RelativeFilterType;
        !function(RelativeSlicerUtil) {
            function toRelativeDateUnit(timePeriod) {
                switch (timePeriod) {
                  case visuals.relativeSlicerPeriod.minutes:
                    return RelativeDateUnit.Minute;

                  case visuals.relativeSlicerPeriod.hours:
                    return RelativeDateUnit.Hour;

                  case visuals.relativeSlicerPeriod.days:
                    return RelativeDateUnit.Day;

                  case visuals.relativeSlicerPeriod.weeks:
                    return RelativeDateUnit.Week;

                  case visuals.relativeSlicerPeriod.calendarWeeks:
                    return RelativeDateUnit.CalendarWeek;

                  case visuals.relativeSlicerPeriod.months:
                    return RelativeDateUnit.Month;

                  case visuals.relativeSlicerPeriod.calendarMonths:
                    return RelativeDateUnit.CalendarMonth;

                  case visuals.relativeSlicerPeriod.years:
                    return RelativeDateUnit.Year;

                  case visuals.relativeSlicerPeriod.calendarYears:
                    return RelativeDateUnit.CalendarYear;

                  default:
                    return;
                }
            }
            function toRelativeDateQualifier(qualifier) {
                switch (qualifier) {
                  case visuals.relativeSlicerRelativeQualifier.last:
                    return RelativeDateQualifier.Last;

                  case visuals.relativeSlicerRelativeQualifier.current:
                    return RelativeDateQualifier.Current;

                  case visuals.relativeSlicerRelativeQualifier.next:
                    return RelativeDateQualifier.Next;

                  default:
                    return;
                }
            }
            RelativeSlicerUtil.toRelativeDateRangeOptions = function(data) {
                return {
                    duration: data.duration,
                    includeToday: data.includeToday,
                    relativeUnit: toRelativeDateUnit(data.period),
                    relativeQualifier: toRelativeDateQualifier(data.range),
                    anchorDate: data.anchorDate
                };
            }, RelativeSlicerUtil.toRelativeDateUnit = toRelativeDateUnit, RelativeSlicerUtil.toRelativeDateQualifier = toRelativeDateQualifier, 
            RelativeSlicerUtil.relativeUnitSlicerFactory = function(type) {
                switch (type) {
                  case RelativeFilterType.Time:
                    return new visuals.RelativeTimeComponent();

                  case RelativeFilterType.Date:
                    return new visuals.RelativeDateComponent();

                  default:
                    RelativeFilterType.Unsupported;
                    return;
                }
            }, RelativeSlicerUtil.createRelativeSlicer = function(relativeFilterType, slicerOptions) {
                switch (relativeFilterType) {
                  case RelativeFilterType.Time:
                    return new visuals.RelativeSlicer(slicerOptions, RelativeFilterType.Time);

                  case RelativeFilterType.Date:
                    return new visuals.RelativeSlicer(slicerOptions, RelativeFilterType.Date);

                  default:
                    RelativeFilterType.Unsupported;
                    return;
                }
            };
        }(visuals.RelativeSlicerUtil || (visuals.RelativeSlicerUtil = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(es6) {
    !function(powerbi) {
        !function(visuals) {
            visuals.importSlicerModule = function() {};
        }(powerbi.visuals || (powerbi.visuals = {}));
    }(es6.powerbi || (es6.powerbi = {}));
}(es6 = es6 || {}), function(powerbi) {
    !function(visuals) {
        var SemanticFilter = powerbi.data.SemanticFilter, SQExpr = powerbi.data.SQExpr, SQExprConverter = powerbi.data.SQExprConverter, SQExprUtils = powerbi.data.SQExprUtils, SlicerFilterAnalyzer = function() {
            function SlicerFilterAnalyzer(options, avoidDefaultValue) {
                this.hasMappedColumn = !1, this.filter = options.filter, this.isNotFilter = !1, 
                this.analyze(options, avoidDefaultValue);
            }
            return SlicerFilterAnalyzer.prototype.analyze = function(options, avoidDefaultValue) {
                var _this = this;
                if (this.hasMappedColumn = visuals.SlicerUtil.isDataViewColumnMapped({
                    columns: options.columns
                }), this.isAnyFilter = SemanticFilter.isAnyFilter(this.filter), !this.isAnyFilter) {
                    var filterNodes, hasBlankFilter, fieldSQExprsPerLevel = options.fieldSQExprs;
                    if (!this.filter || (filterNodes = SQExprConverter.asFilterNodes(this.filter, fieldSQExprsPerLevel)) && (this.isNotFilter = _.some(filterNodes, function(filterNode) {
                        return !filterNode.selected;
                    }), this.hasMappedColumn && (hasBlankFilter = _.some(filterNodes, function(filterNode) {
                        return _this.isSQExprBlank(filterNode);
                    }), (this.isNotFilter || hasBlankFilter) && (this.isNotFilter = !1, this.filter = void 0)), 
                    this.selectedIdentities = filterNodes, this.isDefaultFilter = 1 === this.selectedIdentities.length && SQExprUtils.isDefaultValue(this.selectedIdentities[0].identity.expr)), 
                    this.defaultValueByLevel = this.getDataViewDefaultValuePerLevel(options.columns, options.defaultValuePropertyId), 
                    !_.isEmpty(_.compact(this.defaultValueByLevel)) && !avoidDefaultValue && (this.filter || (this.filter = visuals.SlicerSelectionHandler.buildDefaultValueFilter(options.columns), 
                    this.selectedIdentities = SQExprConverter.asFilterNodes(this.filter, fieldSQExprsPerLevel), 
                    this.isDefaultFilter = !0), this.isDefaultFilter && !_.isEmpty(this.selectedIdentities))) for (var node = this.selectedIdentities[0], level = 0; node; ) {
                        var defaultValueScopeIdentity = this.defaultValueByLevel[level], defaultValueScopeIdentity = powerbi.data.createDataViewScopeIdentity(SQExprUtils.getDataViewScopeIdentityComparisonExpr(fieldSQExprsPerLevel[level], defaultValueScopeIdentity.identityFieldsValues));
                        this.isNotFilter = !1, node.identity = defaultValueScopeIdentity, _.isEmpty(node.children) || node.children.length, 
                        node = _.isEmpty(node.children) ? void 0 : node.children[0], level++;
                    }
                }
            }, SlicerFilterAnalyzer.prototype.isSQExprBlank = function(expr) {
                expr = expr.identity.expr;
                return !!SQExpr.isCompare(expr) && SQExpr.isIsBlank(expr);
            }, SlicerFilterAnalyzer.prototype.getDataViewDefaultValuePerLevel = function(columns, defaultValueProperty) {
                if (!_.isEmpty(columns)) return _.map(columns, function(column) {
                    return powerbi.DataViewObjects.getValue(column.objects, defaultValueProperty);
                });
            }, SlicerFilterAnalyzer;
        }();
        visuals.SlicerFilterAnalyzer = SlicerFilterAnalyzer;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        var SemanticFilter = powerbi.data.SemanticFilter, Selector = powerbi.data.Selector, SQExprBuilder = powerbi.data.SQExprBuilder, SlicerSelectionHandler = function() {
            function SlicerSelectionHandler(hostService, behavior) {
                this.hostService = hostService, this.behavior = behavior, this.isInvertedSelectionMode = !1, 
                this.isSearchUpdateMode = !1, this.selected = [];
            }
            return SlicerSelectionHandler.buildDefaultValueFilter = function(columns, isClear) {
                for (var anyValueExprs = [], defaultValueExprs = [], currentValueExprs = (isClear = void 0 === isClear ? !1 : isClear) ? anyValueExprs : defaultValueExprs, _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
                    var column = columns_2[_i], isColumnMapped = 1 === (null === (isSelectAllEnabled = column.parameter) || void 0 === isSelectAllEnabled ? void 0 : isSelectAllEnabled.kind), isSelectAllEnabled = !(null === (hasDefaultValue = column.parameter) || void 0 === hasDefaultValue || !hasDefaultValue.supportsSelectAll), hasDefaultValue = null != powerbi.DataViewObjects.getValue(column.objects, visuals.slicerProps.general.defaultValue);
                    isColumnMapped && isSelectAllEnabled || hasDefaultValue ? currentValueExprs.push.apply(currentValueExprs, SlicerSelectionHandler.getMetadataColumnIdentityExprs(column)) : currentValueExprs = anyValueExprs;
                }
                if (!_.isEmpty(anyValueExprs) || !_.isEmpty(defaultValueExprs)) return SemanticFilter.getDefaultAnyValueFilter(defaultValueExprs, anyValueExprs);
            }, SlicerSelectionHandler.getMetadataColumnIdentityExprs = function(column) {
                return _.isEmpty(column.identityExprs) ? [ column.expr ] : column.identityExprs;
            }, SlicerSelectionHandler.prototype.setDefaultValueMode = function(useDefaultValue) {
                this.useDefaultValue = useDefaultValue;
            }, SlicerSelectionHandler.prototype.bind = function(retainedDataPoints, options) {
                this.selected = _.filter(retainedDataPoints, function(dataPoint) {
                    return dataPoint.selected;
                }), this.behavior.bindEvents(options, this), this.behavior.renderSelection();
            }, SlicerSelectionHandler.prototype.setSelectionModeInverted = function(inverted) {
                this.previousInversionMode = this.isInvertedSelectionMode, this.isInvertedSelectionMode = inverted;
            }, SlicerSelectionHandler.prototype.setColumns = function(columns) {
                this.columns = columns, this.columnExprs = _.map(columns, function(column) {
                    return column.expr;
                }), this.supportsDefaultValueByLevel = _.map(columns, function(column) {
                    return null != powerbi.DataViewObjects.getValue(column.objects, visuals.slicerProps.general.defaultValue);
                });
            }, SlicerSelectionHandler.prototype.hasSelection = function() {
                return !_.isEmpty(this.selected);
            }, SlicerSelectionHandler.prototype.isSelectionModeInverted = function() {
                return this.isInvertedSelectionMode;
            }, SlicerSelectionHandler.prototype.setQueryNameByLevel = function(queryNameByLevel) {
                this.queryNameByLevel = queryNameByLevel;
            }, SlicerSelectionHandler.prototype.persistSelfFilter = function(filterPropertyIdentifier, filter) {
                filter = visuals.SlicerUtil.buildContainsFilter(this.columnExprs, filter);
                this.hostService.persistProperties(SlicerSelectionHandler.createChangeForProperty(filterPropertyIdentifier, filter));
            }, SlicerSelectionHandler.prototype.setSearchMode = function(isSearch) {
                this.isSearchUpdateMode = isSearch;
            }, SlicerSelectionHandler.prototype.isSearchMode = function() {
                return this.isSearchUpdateMode;
            }, SlicerSelectionHandler.prototype.handleClearSelection = function() {
                var message;
                this.previouslySelected = this.selected.slice(), this.previousInversionMode = this.isInvertedSelectionMode, 
                this.isInvertedSelectionMode = !1, 1 === this.selected.length && this.isStrictSingleSelect || this.hasDefaultValue() && this.useDefaultValue || (message = this.hostService.getLocalizedString("Slicer_ClearSelectionsCleared"), 
                this.hostService.alertWithDebounce("announce-clear-selection", message), this.useDefaultValue = !0, 
                this.resetSelected(), this.behavior.renderSelection());
            }, SlicerSelectionHandler.prototype.persistSelectionFilter = function(filterPropertyIdentifier, invertedSelectionModeChange, noUndo) {
                void 0 === invertedSelectionModeChange && (invertedSelectionModeChange = !1);
                var cache, change = this.getFilterFromDataPoints();
                change && !_.isEmpty(this.selected) && (cache = this.toFilterExpressionMetadata(this.selected), 
                this.hostService.setFilterExpressionMetadata(cache));
                change = SlicerSelectionHandler.createChangeForProperty(filterPropertyIdentifier, change), 
                invertedSelectionModeChange = !(invertedSelectionModeChange || !this.isInvertedSelectionMode) || null, 
                invertedSelectionModeChange = SlicerSelectionHandler.createChangeForProperty(visuals.slicerProps.data.isInvertedSelectionMode, invertedSelectionModeChange), 
                change = this.mergeObjectInstancesToPersist(change, invertedSelectionModeChange);
                this.hostService.persistProperties(change, noUndo), this.sendSelectionToHost();
            }, SlicerSelectionHandler.prototype.getDataMultiSelectMode = function() {
                return this.hostService.dataMultiSelectMode();
            }, SlicerSelectionHandler.prototype.sendSelectionToHost = function() {
                var args, previousArgs, selectionChanged;
                this.hostService.onSelect && (selectionChanged = _.isEmpty(this.selected) ? [] : _.map(this.selected, function(d) {
                    return d.identity;
                }), args = visuals.InteractivityService.createSelectEventArgs(selectionChanged, 0), 
                selectionChanged = _.isEmpty(this.previouslySelected) ? [] : _.map(this.previouslySelected, function(d) {
                    return d.identity;
                }), previousArgs = visuals.InteractivityService.createSelectEventArgs(selectionChanged, 0), 
                selectionChanged = _.size(args.visualObjects) !== _.size(previousArgs.visualObjects) || _.some(args.visualObjects, function(visualObject, i) {
                    return !Selector.equalsSelectorsByColumn(visualObject.selectorsByColumn, previousArgs.visualObjects[i].selectorsByColumn);
                }), args.fireDataSelectedEvent = selectionChanged || this.isInvertedSelectionMode !== this.previousInversionMode, 
                this.hostService.onSelect(args));
            }, SlicerSelectionHandler.prototype.handleSelection = function(dataPoint, selectionMode, selected) {
                if (this.onSelecting(dataPoint, selected)) return !1;
                var shouldBeChecked = dataPoint.partially, selected = dataPoint.selected;
                this.useDefaultValue = !1, this.previouslySelected = this.selected.slice(), 0 === selectionMode || this.isStrictSingleSelect ? this.resetSelected() : this.clearDataPointState(dataPoint);
                selected = this.getDataPointSelectedState(dataPoint, selectionMode, shouldBeChecked, selected);
                return this.updateSelectedState(dataPoint, selected), this.behavior.renderSelection(), 
                !0;
            }, SlicerSelectionHandler.prototype.getDataPointSelectedState = function(dataPoint, selectionMode, shouldBeChecked, wasSelected) {
                return shouldBeChecked ? visuals.SlicerUtil.getSlicerDataPointCheckedState(dataPoint, this.isInvertedSelectionMode) ? dataPoint.selected : !dataPoint.selected : !!this.isStrictSingleSelect || (0 === selectionMode ? !wasSelected || 1 < this.selected.length : !wasSelected);
            }, SlicerSelectionHandler.prototype.onSelecting = function(dataPointInfo, args) {
                dataPointInfo = visuals.SlicerUtil.buildDataPointInfo(dataPointInfo, this.queryNameByLevel), 
                args = {
                    visualObjects: [ {
                        objectName: visuals.InteractivityService.dataPointObjectName,
                        selectorsByColumn: dataPointInfo.selector
                    } ],
                    position: args
                };
                return this.hostService.onSelecting(args), 0 !== args.action && null != args.action;
            }, SlicerSelectionHandler.prototype.updateSelectedState = function(dataPoint, selected) {
                var originalSelected = dataPoint.selected;
                originalSelected !== (dataPoint.selected = selected) && (this.clearDataPointState(dataPoint, !0), 
                this.updateParentState(dataPoint)), dataPoint.selected ? this.selected.push(dataPoint) : originalSelected && !dataPoint.selected && _.remove(this.selected, dataPoint);
            }, SlicerSelectionHandler.prototype.setStrictSingleSelect = function(value, dataPoints) {
                this.isStrictSingleSelect = value, this.adjustStrictSingleSelectSelection(dataPoints);
            }, SlicerSelectionHandler.prototype.resetSelected = function() {
                _.isEmpty(this.selected) || _.each(this.selected, function(d) {
                    return d.selected = !1;
                }), this.selected = [];
            }, SlicerSelectionHandler.prototype.clearDataPointState = function(dataPoint, isTopLevel) {
                if ((isTopLevel = void 0 === isTopLevel ? !1 : isTopLevel) || (dataPoint.selected && _.remove(this.selected, dataPoint), 
                dataPoint.selected = !1), !_.isEmpty(dataPoint.children) && dataPoint.partially) {
                    dataPoint.partially = !1;
                    for (var _i = 0, _a = dataPoint.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        this.clearDataPointState(child);
                    }
                }
            }, SlicerSelectionHandler.prototype.updateParentState = function(dataPoint) {
                if (dataPoint.parent) for (var parent_1 = dataPoint.parent; parent_1; ) dataPoint.selected ? parent_1.partially = !0 : parent_1.partially = _.some(parent_1.children, function(child) {
                    return child.selected;
                }), parent_1 = parent_1.parent;
            }, SlicerSelectionHandler.prototype.mergeObjectInstancesToPersist = function(left, right) {
                var _b, result = {};
                return result.merge = left.merge, result.remove = left.remove, _.isEmpty(right.merge) || (result.merge = result.merge || [], 
                (_b = result.merge).push.apply(_b, right.merge || [])), _.isEmpty(right.remove) || (result.remove = result.remove || [], 
                (_b = result.remove).push.apply(_b, right.remove || [])), result;
            }, SlicerSelectionHandler.prototype.toFilterExpressionMetadata = function(dataPoints) {
                if (!_.isEmpty(dataPoints)) {
                    for (var result = {
                        expressions: this.columnExprs,
                        cachedValueItems: []
                    }, maxLevel = 0, _i = 0, dataPoints_1 = dataPoints; _i < dataPoints_1.length; _i++) {
                        for (var current = dataPoints_1[_i], identityValueMap = {
                            identities: [],
                            valueMap: {}
                        }; current; ) identityValueMap.identities.unshift(current.scopeIdentity), identityValueMap.valueMap[current.level] = current.value, 
                        maxLevel = Math.max(maxLevel, current.level), current = current.parent;
                        result.cachedValueItems.push(identityValueMap);
                    }
                    return result.expressions = this.columnExprs.slice(0, maxLevel + 1), result;
                }
            }, SlicerSelectionHandler.prototype.isDisableMultipleSelectForMappedColumn = function() {
                var columns = this.columns;
                return _.some(columns, function(_b) {
                    var _a;
                    return 1 === (null === (_a = _b.parameter) || void 0 === _a ? void 0 : _a.kind) && !(null !== (_b = _b.parameter) && void 0 !== _b && _b.supportsMultipleValues);
                });
            }, SlicerSelectionHandler.prototype.toggleSelectionModeInversion = function(shouldPersist) {
                return void 0 === shouldPersist && (shouldPersist = !1), this.previouslySelected = this.selected.slice(), 
                this.useDefaultValue = !1, this.previousInversionMode = this.isInvertedSelectionMode, 
                this.isInvertedSelectionMode = !this.isInvertedSelectionMode, this.resetSelected(), 
                shouldPersist && this.hostService.persistProperties(SlicerSelectionHandler.createChangeForProperty(visuals.slicerProps.data.isInvertedSelectionMode, !!this.isInvertedSelectionMode || null)), 
                this.behavior.renderSelection(), this.isInvertedSelectionMode;
            }, SlicerSelectionHandler.prototype.getFilterFromDataPoints = function() {
                var expr = visuals.SlicerUtil.isDataViewColumnMapped({
                    columns: this.columns
                });
                if (_.isEmpty(this.selected) && (this.hasDefaultValue() || this.isInvertedSelectionMode && expr)) {
                    var selectorsByLevel = !this.useDefaultValue || expr;
                    return SlicerSelectionHandler.buildDefaultValueFilter(this.columns, selectorsByLevel);
                }
                selectorsByLevel = this.buildSelectorsByLevel();
                if (selectorsByLevel) {
                    expr = SlicerSelectionHandler.buildExprForSlicerSelection(selectorsByLevel.selected, selectorsByLevel.unselected, expr), 
                    expr = this.ensureAnyFilter(expr, selectorsByLevel.maxLevel);
                    return SemanticFilter.fromSQExpr(expr);
                }
            }, SlicerSelectionHandler.buildExprForSlicerSelection = function(expr, unselected, unselectedExpr) {
                expr = SlicerSelectionHandler.buildExprsFromSelectorsByLevel(expr), unselectedExpr = SlicerSelectionHandler.buildExprForUnselectedState(unselected, !unselectedExpr);
                return expr && unselectedExpr ? expr = SQExprBuilder.and(expr, unselectedExpr) : unselectedExpr && (expr = unselectedExpr), 
                expr;
            }, SlicerSelectionHandler.prototype.ensureAnyFilter = function(expr, anyValues) {
                anyValues += 1;
                if (anyValues < this.columns.length) {
                    for (var value_1 = SQExprBuilder.anyValue(), anyValuesExprs = [], level = anyValues; level < this.columns.length; level++) this.supportsDefaultValueByLevel[level] && anyValuesExprs.push.apply(anyValuesExprs, SlicerSelectionHandler.getMetadataColumnIdentityExprs(this.columns[level]));
                    _.isEmpty(anyValuesExprs) || (anyValues = Array.apply(null, Array(anyValuesExprs.length)).map(function() {
                        return value_1;
                    }), expr = SQExprBuilder.and(expr, powerbi.data.SQExprUtils.getDataViewScopeIdentityComparisonExpr(anyValuesExprs, anyValues)));
                }
                return expr;
            }, SlicerSelectionHandler.getInExprByLevel = function(selectors) {
                for (var _i = 0, levelExpr_1 = Selector.filterExprsFromSelectors(selectors); _i < levelExpr_1.length; _i++) var orExpr = levelExpr_1[_i], inExpr = powerbi.data.ScopeIdentityExtractor.getInExpr(orExpr), resultExpr = resultExpr ? powerbi.data.SQExprBuilder.or(resultExpr, inExpr) : inExpr || orExpr;
                return resultExpr;
            }, SlicerSelectionHandler.prototype.hasDefaultValue = function() {
                if (!_.isEmpty(this.columns)) return null != powerbi.DataViewObjects.getValue(this.columns[0].objects, visuals.slicerProps.general.defaultValue);
            }, SlicerSelectionHandler.buildExprsFromSelectorsByLevel = function(selectorsByLevel, isNot) {
                for (var level in void 0 === isNot && (isNot = !1), selectorsByLevel) var inExpr = SlicerSelectionHandler.getInExprByLevel(selectorsByLevel[level]), expr = expr ? SQExprBuilder.or(expr, inExpr) : inExpr;
                return expr = isNot && expr ? SQExprBuilder.not(expr) : expr;
            }, SlicerSelectionHandler.prototype.buildSelectorsByLevel = function() {
                if (!_.isEmpty(this.selected)) {
                    for (var selectedByLevel = {}, unselectedByLevel = {}, unselectedByKey = {}, maxLevel = 0, _i = 0, _a = this.selected; _i < _a.length; _i++) {
                        for (var parent_2, groupedByLevel, state, dataPoint = _a[_i], level = -1, current = dataPoint, selector = {
                            data: []
                        }; current; ) selector.data.unshift(current.scopeIdentity), current = current.parent, 
                        level++;
                        maxLevel = Math.max(maxLevel, level), visuals.SlicerUtil.getSlicerDataPointCheckedState(dataPoint, this.isInvertedSelectionMode) ? (groupedByLevel = selectedByLevel, 
                        (groupedByLevel = (parent_2 = this.getFirstUnselectedParent(dataPoint, this.isInvertedSelectionMode)) ? (state = this.ensureState(parent_2, unselectedByKey)).selectedChildren : groupedByLevel)[level] = groupedByLevel[level] || [], 
                        groupedByLevel[level].push(selector)) : ((state = this.ensureState(dataPoint, unselectedByKey)).selector = selector, 
                        unselectedByLevel[level] = unselectedByLevel[level] || [], unselectedByLevel[level].push(state));
                    }
                    return {
                        selected: selectedByLevel,
                        unselected: unselectedByLevel,
                        maxLevel: maxLevel
                    };
                }
            }, SlicerSelectionHandler.buildExprForUnselectedState = function(stateByLevel, expr) {
                var level, itemsByLevelWithNoSelectedChildren = {};
                for (level in stateByLevel) {
                    for (var expr_1, root, itemsWithSelectedChildren = [], itemsWithNoSelectedChildren = [], _i = 0, stateList_1 = stateByLevel[level]; _i < stateList_1.length; _i++) {
                        var state = stateList_1[_i];
                        _.isEmpty(state.selectedChildren) ? itemsWithNoSelectedChildren.push(state.selector) : itemsWithSelectedChildren.push(state);
                    }
                    _.isEmpty(itemsWithNoSelectedChildren) || (itemsByLevelWithNoSelectedChildren[level] = itemsWithNoSelectedChildren), 
                    _.isEmpty(itemsWithSelectedChildren) || (expr_1 = SlicerSelectionHandler.getExprForUnselectedStateWithSelection(itemsWithSelectedChildren), 
                    root = root ? SQExprBuilder.and(expr_1, root) : expr_1);
                }
                expr = SlicerSelectionHandler.buildExprsFromSelectorsByLevel(itemsByLevelWithNoSelectedChildren, expr);
                return root = root ? SQExprBuilder.and(expr, root) : expr;
            }, SlicerSelectionHandler.getExprForUnselectedStateWithSelection = function(stateList) {
                for (var _i = 0, stateList_2 = stateList; _i < stateList_2.length; _i++) var expr = stateList_2[_i], selectedExpr = SlicerSelectionHandler.buildExprsFromSelectorsByLevel(expr.selectedChildren), expr = SQExprBuilder.not(SlicerSelectionHandler.getInExprByLevel([ expr.selector ])), expr = SQExprBuilder.or(selectedExpr, expr), root = root ? SQExprBuilder.and(expr, root) : expr;
                return root;
            }, SlicerSelectionHandler.prototype.ensureState = function(dataPoint, unselected) {
                var state = unselected[dataPoint.identity.getKey()];
                return state || (state = {
                    selector: {},
                    selectedChildren: {}
                }, unselected[dataPoint.identity.getKey()] = state), state;
            }, SlicerSelectionHandler.prototype.getFirstUnselectedParent = function(dataPoint, isInvertedSelectionMode) {
                for (;dataPoint; ) {
                    if (dataPoint.selected && !visuals.SlicerUtil.getSlicerDataPointCheckedState(dataPoint, isInvertedSelectionMode)) return dataPoint;
                    dataPoint = dataPoint.parent;
                }
            }, SlicerSelectionHandler.createChangeForProperty = function(propertyIdentifier, propertyValue) {
                var properties = {}, instance = {
                    objectName: propertyIdentifier.objectName,
                    selector: void 0,
                    properties: properties
                };
                return null == propertyValue ? (properties[propertyIdentifier.propertyName] = {}, 
                {
                    remove: [ instance ]
                }) : (properties[propertyIdentifier.propertyName] = propertyValue, {
                    merge: [ instance ]
                });
            }, SlicerSelectionHandler.prototype.adjustStrictSingleSelectSelection = function(dataPoints) {
                var dataPoint;
                if (this.isStrictSingleSelect && !_.isEmpty(dataPoints) && (1 !== _.filter(dataPoints, function(dataPoint) {
                    return dataPoint.selected;
                }).length || this.isInvertedSelectionMode)) {
                    if (1 < dataPoints.length) {
                        for (var _i = 0, dataPoints_2 = dataPoints; _i < dataPoints_2.length; _i++) {
                            var slicerDataPoint = dataPoints_2[_i];
                            if (slicerDataPoint.selected && !this.isInvertedSelectionMode || !slicerDataPoint.selected && this.isInvertedSelectionMode) {
                                dataPoint = slicerDataPoint;
                                break;
                            }
                        }
                        if (!dataPoint) if (visuals.SlicerUtil.isDataViewColumnMapped({
                            columns: this.columns
                        })) for (var _a = 0, dataPoints_3 = dataPoints; _a < dataPoints_3.length; _a++) {
                            var dp = dataPoints_3[_a];
                            if (!dp.disabled) {
                                dataPoint = dp;
                                break;
                            }
                        } else dataPoint = dataPoints[0];
                    }
                    this.isInvertedSelectionMode && this.toggleSelectionModeInversion(null == dataPoint), 
                    dataPoint && (dataPoint.selected = !0, this.selected = [ dataPoint ], this.persistSelectionFilter(visuals.slicerProps.general.filter, void 0, !0));
                }
            }, SlicerSelectionHandler;
        }();
        visuals.SlicerSelectionHandler = SlicerSelectionHandler;
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        visuals.initializeSlicerFactoryES6 = function() {
            visuals.setCreateSlicer(function(options) {
                return es6.powerbi.visuals.importSlicerModule().then(function(m) {
                    return new m.Slicer(options);
                });
            });
        };
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(readers) {
            var SlicerDataViewReader = function() {
                function SlicerDataViewReader(dataView, listJoinSeparator, selectedDataPoints) {
                    this.dataView = dataView, this.listJoinSeparator = listJoinSeparator, this.initMetadataColumns(), 
                    dataView.categorical ? this.reader = new readers.SlicerCategoricalDataReader(dataView.categorical, this.columns, selectedDataPoints) : this.reader = new readers.SlicerMatrixDataReader(dataView.matrix, this.columns, void 0, selectedDataPoints);
                }
                return SlicerDataViewReader.prototype.getIdentityFields = function() {
                    var columns = this.getMetadataColumns();
                    return this.reader.getIdentityExprs() || _.map(columns, function(column) {
                        return column.identityExprs;
                    });
                }, SlicerDataViewReader.prototype.getDataPointsReader = function() {
                    return this.reader;
                }, SlicerDataViewReader.prototype.getQueryNamePerLevel = function() {
                    var columns = this.getMetadataColumns();
                    return _.map(columns, function(column) {
                        return column.queryName;
                    });
                }, SlicerDataViewReader.prototype.getDisplayNamePerLevel = function() {
                    var columns = this.getMetadataColumns();
                    return _.map(columns, function(column) {
                        return column.displayName;
                    });
                }, SlicerDataViewReader.prototype.getDisplayName = function() {
                    var displayNames = this.getDisplayNamePerLevel();
                    return _.join(displayNames, this.listJoinSeparator);
                }, SlicerDataViewReader.prototype.getColumns = function() {
                    return this.columns;
                }, SlicerDataViewReader.prototype.getMetadataColumnByLevel = function(index) {
                    return this.columns[index];
                }, SlicerDataViewReader.prototype.getMetadataColumns = function() {
                    return this.reader.getMetadataColumns() || this.columns;
                }, SlicerDataViewReader.prototype.initMetadataColumns = function() {
                    this.columns = visuals.SlicerUtil.readMetadataColumns(this.dataView.metadata.columns);
                }, SlicerDataViewReader;
            }();
            readers.SlicerDataViewReader = SlicerDataViewReader;
        }(visuals.readers || (visuals.readers = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visuals) {
        !function(readers) {
            var SlicerMatrixDataReader = function() {
                function SlicerMatrixDataReader(matrix, metadataColumns, root, selectedDataPoints) {
                    this.matrix = matrix, this.metadataColumns = metadataColumns, this.root = root, 
                    this.selectedDataPoints = selectedDataPoints, this.root = root, this.level = root && root.level + 1 || 0, 
                    this.root || (this.root = matrix && matrix.rows && matrix.rows.root, this.root && (this.metadata = matrix.rows.levels[this.level].sources[0])), 
                    this.count = this.root && this.root.children && this.root.children.length || 0;
                }
                return SlicerMatrixDataReader.prototype.getDataPointsCount = function() {
                    return this.count;
                }, SlicerMatrixDataReader.prototype.getMetadataColumn = function() {
                    return this.metadata || this.metadataColumns[this.level];
                }, SlicerMatrixDataReader.prototype.getDataViewDataPoint = function(index) {
                    this.count;
                    var reader, node = this.root.children[index];
                    if (!node.isSubtotal) return node.levelValues.length, _.some(node.children, function(child) {
                        return !child.isSubtotal;
                    }) && (reader = _.find(this.selectedDataPoints, function(selected) {
                        return powerbi.DataViewScopeIdentity.equals(selected.identity, node.identity);
                    }), reader = new SlicerMatrixDataReader(this.matrix, this.metadataColumns, node, reader && reader.children)), 
                    {
                        scopeId: node.identity,
                        isCollapsed: node.isCollapsed,
                        value: node.levelValues[0].value,
                        childrenReader: reader
                    };
                }, SlicerMatrixDataReader.prototype.isImageData = function() {
                    return !1;
                }, SlicerMatrixDataReader.prototype.getLevel = function() {
                    return this.level;
                }, SlicerMatrixDataReader.prototype.hasCount = function() {
                    return !1;
                }, SlicerMatrixDataReader.prototype.getSelectedNodes = function() {
                    return this.selectedDataPoints;
                }, SlicerMatrixDataReader.prototype.getMetadataColumns = function() {}, SlicerMatrixDataReader.prototype.getIdentityExprs = function() {
                    return this.metadataColumns && _.map(this.metadataColumns, function(column) {
                        return column.identityExprs;
                    });
                }, SlicerMatrixDataReader;
            }();
            readers.SlicerMatrixDataReader = SlicerMatrixDataReader;
        }(visuals.readers || (visuals.readers = {}));
    }(powerbi.visuals || (powerbi.visuals = {}));
}(powerbi = powerbi || {});
this.parseTimeMarkers = this.parseTimeMarkers || {};
var marker = this.parseTimeMarkers['slicerVisual.js'] || (this.parseTimeMarkers['slicerVisual.js'] = {});
marker.endEval = window.jsCommon && window.jsCommon.performance && window.jsCommon.performance.now ? window.jsCommon.performance.now() : Date.now(); marker.isExternal = false;
