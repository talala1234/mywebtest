"use strict";

var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; 0 <= i; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : 3 < c ? d(target, key, r) : d(target, key)) || r);
    return 3 < c && r && Object.defineProperty(target, key, r), r;
}, __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P = P || Promise)(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            var value;
            result.done ? resolve(result.value) : ((value = result.value) instanceof P ? value : new P(function(resolve) {
                resolve(value);
            })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}, __generator = this && this.__generator || function(thisArg, body) {
    var f, y, t, _ = {
        label: 0,
        sent: function() {
            if (1 & t[0]) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
    };
    return "function" == typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return function(op) {
                if (f) throw new TypeError("Generator is already executing.");
                for (;_; ) try {
                    if (f = 1, y && (t = 2 & op[0] ? y.return : op[0] ? y.throw || ((t = y.return) && t.call(y), 
                    0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                    switch (y = 0, (op = t ? [ 2 & op[0], t.value ] : op)[0]) {
                      case 0:
                      case 1:
                        t = op;
                        break;

                      case 4:
                        return _.label++, {
                            value: op[1],
                            done: !1
                        };

                      case 5:
                        _.label++, y = op[1], op = [ 0 ];
                        continue;

                      case 7:
                        op = _.ops.pop(), _.trys.pop();
                        continue;

                      default:
                        if (!(t = 0 < (t = _.trys).length && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
                            _ = 0;
                            continue;
                        }
                        if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];
                            break;
                        }
                        if (6 === op[0] && _.label < t[1]) {
                            _.label = t[1], t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2], _.ops.push(op);
                            break;
                        }
                        t[2] && _.ops.pop(), _.trys.pop();
                        continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [ 6, e ], y = 0;
                } finally {
                    f = t = 0;
                }
                if (5 & op[0]) throw op[1];
                return {
                    value: op[0] ? op[1] : void 0,
                    done: !0
                };
            }([ n, v ]);
        };
    }
}, __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        return (extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        })(d, b);
    };
    return function(d, b) {
        if ("function" != typeof b && null !== b) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        function __() {
            this.constructor = d;
        }
        extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, 
        new __());
    };
}();

!function(powerbi) {
    !function(telemetry) {
        var Utility = jsCommon.Utility, telemetryEventFactory = powerbi.telemetryEventFactory, EventFactories = powerbi.telemetry.EventFactories;
        Utility ? Utility.generateGuid : Function.prototype;
        telemetry.ApprovedResourceFailLoadedEventName = "PBI.ApprovedResource.FailLoaded", 
        telemetry.ApprovedResourceFailLoaded = EventFactories[telemetry.ApprovedResourceFailLoadedEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.ApprovedResourceFailLoadedEventName,
                baseEvent: telemetry.VerboseTimedEvent(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.ApprovedResourceFailLoadedLoggers
            });
        }, telemetry.ApprovedResourceSuccessfulLoadEventName = "PBI.ApprovedResource.SuccessfulLoad", 
        telemetry.ApprovedResourceSuccessfulLoad = EventFactories[telemetry.ApprovedResourceSuccessfulLoadEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.ApprovedResourceSuccessfulLoadEventName,
                baseEvent: telemetry.VerboseTimedEvent(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.ApprovedResourceSuccessfulLoadLoggers
            });
        }, telemetry.ApprovedResourceEndpointDownEventName = "PBI.ApprovedResource.EndpointDown", 
        telemetry.ApprovedResourceEndpointDown = EventFactories[telemetry.ApprovedResourceEndpointDownEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.ApprovedResourceEndpointDownEventName,
                baseEvent: telemetry.VerboseTimedEvent(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.ApprovedResourceEndpointDownLoggers
            });
        }, telemetry.ApproveResourceLoadResourcePackageEventName = "PBI.ApproveResource.LoadResourcePackage", 
        telemetry.ApproveResourceLoadResourcePackage = EventFactories[telemetry.ApproveResourceLoadResourcePackageEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.ApproveResourceLoadResourcePackageEventName,
                baseEvent: telemetry.CustomerAction(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.CustomerAction,
                loggers: telemetry.ApproveResourceLoadResourcePackageLoggers
            });
        }, telemetry.AppSourceResourceEndpointDownEventName = "PBI.AppSourceResource.EndpointDown", 
        telemetry.AppSourceResourceEndpointDown = EventFactories[telemetry.AppSourceResourceEndpointDownEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.AppSourceResourceEndpointDownEventName,
                baseEvent: telemetry.VerboseTimedEvent(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.AppSourceResourceEndpointDownLoggers
            });
        }, telemetry.VisualConsentRegisterEventName = "PBI.VisualConsent.Register", telemetry.VisualConsentRegister = EventFactories[telemetry.VisualConsentRegisterEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualConsentRegisterEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualConsentRegisterLoggers
            });
        }, telemetry.VisualConsentSetEventName = "PBI.VisualConsent.Set", telemetry.VisualConsentSet = EventFactories[telemetry.VisualConsentSetEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualConsentSetEventName,
                baseEvent: telemetry.CustomerAction(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.CustomerAction,
                loggers: telemetry.VisualConsentSetLoggers
            });
        }, telemetry.VisualConsentGetEventName = "PBI.VisualConsent.Get", telemetry.VisualConsentGet = EventFactories[telemetry.VisualConsentGetEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualConsentGetEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualConsentGetLoggers
            });
        }, telemetry.VisualEventDownloadContentEventEventName = "PBI.VisualEvent.DownloadContentEvent", 
        telemetry.VisualEventDownloadContentEvent = EventFactories[telemetry.VisualEventDownloadContentEventEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualEventDownloadContentEventEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualEventDownloadContentEventLoggers
            });
        }, telemetry.TrustedVisualLoadEventName = "PBI.TrustedVisual.Load", telemetry.TrustedVisualLoad = EventFactories[telemetry.TrustedVisualLoadEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.TrustedVisualLoadEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.TrustedVisualLoadLoggers
            });
        }, telemetry.TrustedVisualGetConsentEventName = "PBI.TrustedVisual.GetConsent", 
        telemetry.TrustedVisualGetConsent = EventFactories[telemetry.TrustedVisualGetConsentEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.TrustedVisualGetConsentEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.TrustedVisualGetConsentLoggers
            });
        }, telemetry.VisualAuthenticationGetResourceUrlEventName = "PBI.VisualAuthentication.GetResourceUrl", 
        telemetry.VisualAuthenticationGetResourceUrl = EventFactories[telemetry.VisualAuthenticationGetResourceUrlEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualAuthenticationGetResourceUrlEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualAuthenticationGetResourceUrlLoggers
            });
        }, telemetry.VisualAuthenticationGetAADTokenEventName = "PBI.VisualAuthentication.GetAADToken", 
        telemetry.VisualAuthenticationGetAADToken = EventFactories[telemetry.VisualAuthenticationGetAADTokenEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualAuthenticationGetAADTokenEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualAuthenticationGetAADTokenLoggers
            });
        }, telemetry.VisualAuthenticationGetWACTokenEventName = "PBI.VisualAuthentication.GetWACToken", 
        telemetry.VisualAuthenticationGetWACToken = EventFactories[telemetry.VisualAuthenticationGetWACTokenEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualAuthenticationGetWACTokenEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualAuthenticationGetWACTokenLoggers
            });
        }, telemetry.LocalResourceLoadResourcePackageItemEventName = "PBI.LocalResource.LoadResourcePackageItem", 
        telemetry.LocalResourceLoadResourcePackageItem = EventFactories[telemetry.LocalResourceLoadResourcePackageItemEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.LocalResourceLoadResourcePackageItemEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.LocalResourceLoadResourcePackageItemLoggers
            });
        }, telemetry.VisualAuthenticationBlockAccessTokenEventName = "PBI.VisualAuthentication.BlockAccessToken", 
        telemetry.VisualAuthenticationBlockAccessToken = EventFactories[telemetry.VisualAuthenticationBlockAccessTokenEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.VisualAuthenticationBlockAccessTokenEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.VisualAuthenticationBlockAccessTokenLoggers
            });
        }, telemetry.AdminControlInitializedEventName = "PBI.AdminControl.Initialized", 
        telemetry.AdminControlInitialized = EventFactories[telemetry.AdminControlInitializedEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.AdminControlInitializedEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.AdminControlInitializedLoggers
            });
        }, telemetry.PbivizUnzipFailedEventName = "PBI.Pbiviz.UnzipFailed", telemetry.PbivizUnzipFailed = EventFactories[telemetry.PbivizUnzipFailedEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.PbivizUnzipFailedEventName,
                baseEvent: telemetry.Verbose(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.PbivizUnzipFailedLoggers
            });
        }, telemetry.CustomVisualsLicenseLicensesLoadedEventName = "PBI.CustomVisualsLicense.LicensesLoaded", 
        telemetry.CustomVisualsLicenseLicensesLoaded = EventFactories[telemetry.CustomVisualsLicenseLicensesLoadedEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.CustomVisualsLicenseLicensesLoadedEventName,
                baseEvent: telemetry.VerboseTimedEvent(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.CustomVisualsLicenseLicensesLoadedLoggers
            });
        }, telemetry.CustomVisualsLicenseGetServicePlansCalledEventName = "PBI.CustomVisualsLicense.GetServicePlansCalled", 
        telemetry.CustomVisualsLicenseGetServicePlansCalled = EventFactories[telemetry.CustomVisualsLicenseGetServicePlansCalledEventName] = function(parameters) {
            return telemetryEventFactory({
                name: telemetry.CustomVisualsLicenseGetServicePlansCalledEventName,
                baseEvent: telemetry.VerboseTimedEvent(parameters),
                info: parameters,
                category: powerbi.TelemetryCategory.Verbose,
                loggers: telemetry.CustomVisualsLicenseGetServicePlansCalledLoggers
            });
        };
    }(powerbi.telemetry || (powerbi.telemetry = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var ResourcePackageName;
        visualHost.EsriVisual = "esriVisual", visualHost.EsriTestVisual = "esriVisual_TEST", 
        visualHost.VisioVisual = "Visio_PBI_CV_D7C10B1A_506B_4123_878E_39E8698FD30A", visualHost.VisioDFVisual = "VisioDF_PBI_CV_D7C10B1A_506B_4123_878E_39E8698FD30A", 
        visualHost.PowerAppsVisual = "PowerApps_PBI_CV_C29F1DCC_81F5_4973_94AD_0517D44CC06A", 
        visualHost.PowerAppsTestVisual = "PowerApps_PBI_CV_C29F1DCC_81F5_4973_94AD_0517D44CC06A_TEST", 
        visualHost.MapboxVisual = "PBI_CV_EB3A4088_75C5_4746_9D8B_255A7B7ECD6C", visualHost.MapboxTestVisual = "MapboxVisual_TEST", 
        visualHost.MapboxNewVisual = "PBI_CV_0157F990_CDD5_4FEC_8488_7262B9195669", visualHost.FlowVisual = "FlowVisual_C29F1DCC_81F5_4973_94AD_0517D44CC06A", 
        visualHost.FlowTestVisual = "FlowVisual_C29F1DCC_81F5_4973_94AD_0517D44CC06A_TEST", 
        visualHost.CharticulatorVisual = "charticulator58556A88422D44A99D9BF0052B958F87", 
        visualHost.CharticulatorTestVisual = "charticulatorTest5CA7DEC756074797A2410E6A64934779", 
        visualHost.PowerOnVPMenuVisual = "vPMenu6454E8C4E1BD492A83084AB46B0C248B", visualHost.PowerOnDEMatrixV2Visual = "DataEntryMatrix1444757060245", 
        visualHost.PowerOnDEMatrixV3Visual = "PBI_CV_37C750F9_7BBF_4518_A963_9E199AB98EFD", 
        visualHost.PowerOnDetailReportVisual = "detailReport1E51681FC15F46F9B4275CE593BECB98", 
        visualHost.PowerOnSmartFilterVisual = "SmartFilterBySQLBI1458262140626", visualHost.PowerOnTableEditorVisual = "PBI_CV_5A618254_2118_4618_8D38_64C70BBFB181", 
        visualHost.PowerOnTableEditorV2Visual = "tableeditor_v2", visualHost.PowerOnForecasterVisual = "PBI_CV_8EDDC07B_EE79_4418_A84C_D73897C0E21E", 
        visualHost.PowerOnDraggableChartVisual = "PBI_CV_5A618254_2118_4618_8D38_64C70BBFB182", 
        visualHost.PowerOnVPMenuVisual_TEST = "vPMenu6454E8C4E1BD492A83084AB46B0C248B_TEST", 
        visualHost.PowerOnDEMatrixV2Visual_TEST = "DataEntryMatrix1444757060245_TEST", visualHost.PowerOnDEMatrixV3Visual_TEST = "PBI_CV_37C750F9_7BBF_4518_A963_9E199AB98EFD_TEST", 
        visualHost.PowerOnDetailReportVisual_TEST = "detailReport1E51681FC15F46F9B4275CE593BECB98_TEST", 
        visualHost.PowerOnSmartFilterVisual_TEST = "SmartFilterBySQLBI1458262140626_TEST", 
        visualHost.PowerOnTableEditorVisual_TEST = "PBI_CV_5A618254_2118_4618_8D38_64C70BBFB181_TEST", 
        visualHost.PowerOnTableEditorV2Visual_TEST = "tableeditor_v2_TEST", visualHost.PowerOnForecasterVisual_TEST = "PBI_CV_8EDDC07B_EE79_4418_A84C_D73897C0E21E_TEST", 
        visualHost.PowerOnDraggableChartVisual_TEST = "PBI_CV_5A618254_2118_4618_8D38_64C70BBFB182_TEST", 
        visualHost.OrgStoreVisualSuffix = "_OrgStore", visualHost.CustomVisualDeprecatedAPI = "1.2.0", 
        visualHost.TrustedVisuals = [ visualHost.EsriVisual, visualHost.EsriTestVisual, visualHost.VisioVisual, visualHost.VisioDFVisual, visualHost.PowerAppsVisual, visualHost.PowerAppsTestVisual, visualHost.MapboxVisual, visualHost.MapboxNewVisual, visualHost.MapboxTestVisual, visualHost.FlowVisual, visualHost.FlowTestVisual, visualHost.PowerOnVPMenuVisual, visualHost.PowerOnDEMatrixV2Visual, visualHost.PowerOnDEMatrixV3Visual, visualHost.PowerOnDetailReportVisual, visualHost.PowerOnSmartFilterVisual, visualHost.PowerOnTableEditorVisual, visualHost.PowerOnTableEditorV2Visual, visualHost.PowerOnForecasterVisual, visualHost.PowerOnDraggableChartVisual, visualHost.PowerOnVPMenuVisual_TEST, visualHost.PowerOnDEMatrixV2Visual_TEST, visualHost.PowerOnDEMatrixV3Visual_TEST, visualHost.PowerOnDetailReportVisual_TEST, visualHost.PowerOnSmartFilterVisual_TEST, visualHost.PowerOnTableEditorVisual_TEST, visualHost.PowerOnTableEditorV2Visual_TEST, visualHost.PowerOnForecasterVisual_TEST, visualHost.PowerOnDraggableChartVisual_TEST, visualHost.CharticulatorVisual, visualHost.CharticulatorTestVisual ], 
        visualHost.ESRINotSupportedInEmbed = "Esri is not supported in Embedded scenario.", 
        visualHost.warningCodeForCV = "CV_Warning_Code", visualHost.warningTitleLimit = 70, 
        visualHost.warningDetailsLimit = 2e3, function(ResourcePackageName) {
            ResourcePackageName.RegisteredResources = "RegisteredResources", ResourcePackageName.SharedResources = "SharedResources";
        }(ResourcePackageName = visualHost.ResourcePackageName || (visualHost.ResourcePackageName = {})), 
        function(constants) {
            constants.ResourcePackageNames = [], constants.ResourcePackageNames[1] = ResourcePackageName.RegisteredResources, 
            constants.ResourcePackageNames[2] = ResourcePackageName.SharedResources, constants.StaticResourcesDictionary = {}, 
            constants.StaticResourcesDictionary[1] = !0, constants.StaticResourcesDictionary[2] = !0;
        }(visualHost.constants || (visualHost.constants = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        visualHost.resourceLoaderHttpTimeout = 3e4, visualHost.visualCDNBlobDevName = "dev", 
        visualHost.visualCDNBlobDefaultName = "prod", visualHost.visualCDNBlobAppStoreName = "app-store";
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    (powerbi.events || (powerbi.events = {})).reloadEmptyVisuals = {
        type: 4,
        name: "reloadEmptyVisuals"
    };
}(powerbi = powerbi || {}), function(powerbi) {
    !function(contracts) {
        !function(SharedResourcePackageNames) {
            SharedResourcePackageNames.BaseTheme = "BaseTheme", SharedResourcePackageNames.Image = "Image", 
            SharedResourcePackageNames.ShapeMap = "ShapeMap";
        }(contracts.SharedResourcePackageNames || (contracts.SharedResourcePackageNames = {})), 
        function(ResourcePackageItemType) {
            ResourcePackageItemType[ResourcePackageItemType.CustomVisualJavascript = 0] = "CustomVisualJavascript", 
            ResourcePackageItemType[ResourcePackageItemType.CustomVisualsCss = 1] = "CustomVisualsCss", 
            ResourcePackageItemType[ResourcePackageItemType.CustomVisualScreenshot = 2] = "CustomVisualScreenshot", 
            ResourcePackageItemType[ResourcePackageItemType.CustomVisualIcon = 3] = "CustomVisualIcon", 
            ResourcePackageItemType[ResourcePackageItemType.CustomVisualWatermark = 4] = "CustomVisualWatermark", 
            ResourcePackageItemType[ResourcePackageItemType.CustomVisualMetadata = 5] = "CustomVisualMetadata", 
            ResourcePackageItemType[ResourcePackageItemType.Image = 100] = "Image", ResourcePackageItemType[ResourcePackageItemType.ShapeMap = 200] = "ShapeMap", 
            ResourcePackageItemType[ResourcePackageItemType.CustomTheme = 201] = "CustomTheme", 
            ResourcePackageItemType[ResourcePackageItemType.BaseTheme = 202] = "BaseTheme", 
            ResourcePackageItemType[ResourcePackageItemType.DashboardTheme = 203] = "DashboardTheme", 
            ResourcePackageItemType[ResourcePackageItemType.DashboardBaseTheme = 204] = "DashboardBaseTheme", 
            ResourcePackageItemType[ResourcePackageItemType.HighContrastTheme = 205] = "HighContrastTheme", 
            ResourcePackageItemType[ResourcePackageItemType.AppNavigation = 206] = "AppNavigation", 
            ResourcePackageItemType[ResourcePackageItemType.AppTheme = 207] = "AppTheme", ResourcePackageItemType[ResourcePackageItemType.AppBaseTheme = 208] = "AppBaseTheme";
        }(contracts.ResourcePackageItemType || (contracts.ResourcePackageItemType = {}));
    }(powerbi.contracts || (powerbi.contracts = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(VisualErrorType) {
            VisualErrorType[VisualErrorType.AlreadyOpen = 1] = "AlreadyOpen", VisualErrorType[VisualErrorType.NotAllowed = 2] = "NotAllowed", 
            VisualErrorType[VisualErrorType.BlockedByUser = 3] = "BlockedByUser";
        }(visualHost.VisualErrorType || (visualHost.VisualErrorType = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(BlobHelper) {
            function readAs(blob, promiseFactory, readAsText) {
                if (void 0 !== blob) {
                    var deferred = promiseFactory.defer(), fileReader = new FileReader();
                    return fileReader.onload = function() {
                        deferred.resolve(fileReader.result);
                    }, fileReader.onerror = function() {
                        deferred.reject(fileReader.error);
                    }, readAsText ? fileReader.readAsText(blob) : fileReader.readAsDataURL(blob), deferred.promise;
                }
            }
            BlobHelper.readAsDataUrl = function(blob, promiseFactory) {
                return readAs(blob, promiseFactory, !1);
            }, BlobHelper.readAsText = function(blob, promiseFactory) {
                return readAs(blob, promiseFactory, !0);
            };
        }(visualHost.BlobHelper || (visualHost.BlobHelper = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(utils) {
            var ResourcePackageItemType = powerbi.contracts.ResourcePackageItemType, ResourcePackageNames = powerbi.visualHost.constants.ResourcePackageNames, StaticResourcesDictionary = powerbi.visualHost.constants.StaticResourcesDictionary;
            !function(ResourcePackageUtils) {
                var sharedResourcePaths = {};
                function getSharedResourcePath(itemName, itemType) {
                    return sharedResourcePaths[itemType](itemName);
                }
                function isStaticResource(resourcePackage) {
                    return resourcePackage.type, !!StaticResourcesDictionary[resourcePackage.type];
                }
                function findResourcePackage(resourcePackages, type, name) {
                    return null == resourcePackages || _.isArray(resourcePackages), name = ensurePackageName(type, name), 
                    _.find(resourcePackages, function(r) {
                        return r.type === type && r.name === name;
                    });
                }
                function findItemInPackage(resourcePackage, itemName) {
                    return _.find(resourcePackage && resourcePackage.items, function(item) {
                        return item.name === itemName;
                    });
                }
                function ensurePackageName(type, packageName) {
                    packageName = ResourcePackageNames[type] || packageName;
                    return packageName;
                }
                sharedResourcePaths[ResourcePackageItemType.BaseTheme] = function(itemName) {
                    return "BaseThemes/" + itemName + ".json";
                }, sharedResourcePaths[ResourcePackageItemType.CustomTheme] = function(itemName) {
                    return "BuiltInThemes/" + itemName + ".json";
                }, sharedResourcePaths[ResourcePackageItemType.HighContrastTheme] = function(itemName) {
                    return "HighContrastThemes/" + itemName + ".json";
                }, sharedResourcePaths[ResourcePackageItemType.Image] = function(itemName) {
                    return "Images/" + itemName;
                }, sharedResourcePaths[ResourcePackageItemType.ShapeMap] = function(itemName) {
                    return "Shapemaps/" + itemName + ".json";
                }, ResourcePackageUtils.getSharedResourcePath = getSharedResourcePath, ResourcePackageUtils.newSharedResourceItem = function(itemName, itemType, uri) {
                    return {
                        type: itemType,
                        path: getSharedResourcePath(itemName, itemType),
                        name: itemName,
                        content: uri
                    };
                }, ResourcePackageUtils.getStaticResources = function(resourcePackages) {
                    return _.keyBy(_.filter(resourcePackages, isStaticResource), function(resource) {
                        return resource.name;
                    });
                }, ResourcePackageUtils.isStaticResource = isStaticResource, ResourcePackageUtils.ensureResourcePackage = function(resourcePackages, type, name) {
                    _.isArray(resourcePackages);
                    var resourcePackage = findResourcePackage(resourcePackages, type, name = ensurePackageName(type, name));
                    return resourcePackage || resourcePackages.push(resourcePackage = {
                        id: void 0,
                        name: name,
                        type: type,
                        items: []
                    }), resourcePackage;
                }, ResourcePackageUtils.findResourcePackage = findResourcePackage, ResourcePackageUtils.findItemInPackages = function(resourcePackages, packageType, itemName, packageName) {
                    return findItemInPackage(findResourcePackage(resourcePackages, packageType, packageName), itemName);
                }, ResourcePackageUtils.findItemInPackage = findItemInPackage, ResourcePackageUtils.ensurePackageName = ensurePackageName, 
                ResourcePackageUtils.mergeStaticResourcePackages = function(package1, package2) {
                    isStaticResource(package1), isStaticResource(package2), package1.type, package2.type, 
                    package1.name, package2.name, null == package1.id && null != package2.id && (package1.id = package2.id);
                    for (var _i = 0, _a = package2.items; _i < _a.length; _i++) {
                        var item2 = _a[_i], item1 = ResourcePackageUtils.findItemInPackage(package1, item2.name);
                        item1 ? function(item1, item2) {
                            item1.name, item2.name, item1.path, item2.path, item1.type, item2.type, null == item1.id && null != item2.id && (item1.id = item2.id);
                            !item1.content && item2.content && (item1.content = item2.content);
                            !item1.contentBlob && item2.contentBlob && (item1.contentBlob = item2.contentBlob);
                            !item1.contentBlobUrl && item2.contentBlobUrl && (item1.contentBlobUrl = item2.contentBlobUrl);
                            item1.content || item1.contentBlob || item1.promise || !item2.promise || (item1.promise = item2.promise);
                            item1.content && item1.contentBlob;
                        }(item1, item2) : package1.items.push(item2);
                    }
                }, ResourcePackageUtils.isCustomVisualResourcePackage = function(resourcePackage) {
                    return resourcePackage && (0 === resourcePackage.type || 3 === resourcePackage.type);
                }, ResourcePackageUtils.getCustomVisualTypes = function(resourcePackages) {
                    return _.chain(resourcePackages).filter(function(rp) {
                        return ResourcePackageUtils.isCustomVisualResourcePackage(rp);
                    }).map(function(rp) {
                        return rp.name;
                    }).uniq().value();
                };
            }(utils.ResourcePackageUtils || (utils.ResourcePackageUtils = {}));
        }(visualHost.utils || (visualHost.utils = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var BlobHelper = powerbi.visualHost.BlobHelper, DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions, DataViewObjectSerializer = powerbi.data.services.DataViewObjectSerializer, ResourcePackageItemType = powerbi.contracts.ResourcePackageItemType, ResourcePackageUtils = powerbi.visualHost.utils.ResourcePackageUtils, SQExprBuilder = powerbi.data.SQExprBuilder, SQResourcePackageItemExpr = powerbi.data.SQResourcePackageItemExpr, Trace = jsCommon.Trace, UrlUtils = jsCommon.UrlUtils;
        !function(ResourcePackageReferenceResolver) {
            function loadAndResolveFromSQExpr(sqExpr, resourcePackages, resourceLoader, promiseFactory, options) {
                return loadAndResolveItemContent(resourcePackages, {
                    packageType: sqExpr.packageType,
                    packageName: sqExpr.packageName,
                    itemName: sqExpr.itemName
                }, resourceLoader, promiseFactory, options).then(function(value) {
                    return null == value ? SQExprBuilder.nullConstant() : SQExprBuilder.text(value);
                }, function(reason) {
                    return SQExprBuilder.nullConstant();
                });
            }
            function getLoadAndResolveErrorReason(reason) {
                return reason ? "string" == typeof reason ? reason : null != reason.status ? reason.status.toString() : reason.stack ? reason.stack.toString() : reason.message ? reason.message.toString() : "Unknown reason" : "No reason given";
            }
            function loadAndResolveItemContent(itemType, selector, resourceLoader, promiseFactory, options) {
                itemType = ResourcePackageUtils.findResourcePackage(itemType, selector.packageType, selector.packageName);
                if (itemType) return loadAndResolveContent(itemType, selector.itemName, resourceLoader, promiseFactory, options);
                Trace.error("Missing resource package " + selector.packageType, !0);
                itemType = void 0;
                if (2 === selector.packageType && options && null != (itemType = options.itemTypeFromReference)) {
                    var itemPath_1 = ResourcePackageUtils.getSharedResourcePath(selector.itemName, itemType);
                    return resourceLoader.loadSharedResource(itemPath_1, itemType).catch(function(reason) {
                        Trace.error("Error loading shared resource from app " + itemPath_1 + " " + getLoadAndResolveErrorReason(reason), !1);
                    });
                }
                return promiseFactory.resolve();
            }
            function loadAndResolveContent(resourcePackage, loadPromise, resourceLoader, promiseFactory, options) {
                var usePersistableFormat = options && options.usePersistableFormat, itemTypeFromReference = options && options.itemTypeFromReference;
                if (!resourcePackage) return promiseFactory.reject(new Error("loadAndResolveContent: no package"));
                var resourcePackageItem = ResourcePackageUtils.findItemInPackage(resourcePackage, loadPromise);
                if (!resourcePackageItem && 2 === resourcePackage.type && itemTypeFromReference && resourcePackage && itemTypeFromReference && (resourcePackageItem = ResourcePackageUtils.newSharedResourceItem(loadPromise, itemTypeFromReference), 
                resourcePackage.items.push(resourcePackageItem)), resourcePackageItem && resourcePackageItem.path, 
                !resourcePackageItem || !resourcePackageItem.path) return Trace.error("Missing resource item or path !resourcePackageItem=" + !resourcePackageItem + ", resourcePackageItem.path=" + (resourcePackageItem && resourcePackageItem.path), !0), 
                promiseFactory.resolve();
                var loadPromise = 2 === resourcePackage.type ? resourcePackageItem.content ? promiseFactory.resolve(resourcePackageItem.content) : resourcePackageItem.promise || (resourcePackageItem.promise = resourceLoader.loadSharedResource(resourcePackageItem.path, resourcePackageItem.type).finally(function() {
                    delete resourcePackageItem.promise;
                }).then(function(value) {
                    return value instanceof Blob ? resourcePackageItem.contentBlob = value : (_.isString(value) || (value = JSON.stringify(value)), 
                    resourcePackageItem.content = value);
                }, function(reason) {
                    throw Trace.error("Error loading shared resource from app " + resourcePackageItem.path + " " + getLoadAndResolveErrorReason(reason), !1), 
                    reason;
                })) : resourceLoader.loadResourcePackageItem(resourcePackage, loadPromise), referenceResolvedDefer = promiseFactory.defer();
                return loadPromise.then(function() {
                    !function(resourcePackage, resourcePackageItem, promiseFactory, usePersistableFormat, content) {
                        var resolvedValue = null;
                        if (resourcePackageItem) {
                            var isShapeMap = content === ResourcePackageItemType.ShapeMap || resourcePackageItem.type === ResourcePackageItemType.ShapeMap, isTheme = resourcePackageItem.type === ResourcePackageItemType.BaseTheme || resourcePackageItem.type === ResourcePackageItemType.CustomTheme || resourcePackageItem.type === ResourcePackageItemType.HighContrastTheme, isCustomVisual = 3 === resourcePackage.type || 0 === resourcePackage.type, content = resourcePackageItem.content;
                            if (content) isShapeMap && UrlUtils.isDataUri(content) && (content = UrlUtils.atou(UrlUtils.getBase64ContentFromDataUri(content))), 
                            resolvedValue = content; else if (resourcePackageItem.contentBlob) {
                                if (2 === resourcePackage.type && resourcePackageItem.type === ResourcePackageItemType.Image || usePersistableFormat || isShapeMap || isCustomVisual || isTheme) {
                                    var defer_1 = promiseFactory.defer();
                                    return (isShapeMap || isCustomVisual || isTheme ? BlobHelper.readAsText : BlobHelper.readAsDataUrl)(resourcePackageItem.contentBlob, promiseFactory).then(function(content) {
                                        return defer_1.resolve(content);
                                    }, function(reason) {
                                        return defer_1.resolve(null);
                                    }), defer_1.promise;
                                }
                                resourcePackageItem.contentBlobUrl || (resourcePackageItem.contentBlobUrl = window.URL.createObjectURL(resourcePackageItem.contentBlob)), 
                                resolvedValue = resourcePackageItem.contentBlobUrl;
                            }
                        }
                        return promiseFactory.resolve(resolvedValue);
                    }(resourcePackage, resourcePackageItem, promiseFactory, usePersistableFormat, itemTypeFromReference).then(function(resolvedValue) {
                        return referenceResolvedDefer.resolve(resolvedValue);
                    });
                }).catch(function(error) {
                    return referenceResolvedDefer.reject(error);
                }), referenceResolvedDefer.promise;
            }
            function loadRegisteredResource(promiseFactory, resourceLoader, registeredResourcePackage, itemName) {
                if (registeredResourcePackage) {
                    registeredResourcePackage = ResourcePackageUtils.findResourcePackage(registeredResourcePackage, 1);
                    return registeredResourcePackage ? resourceLoader.loadResourcePackageItem(registeredResourcePackage, itemName) : promiseFactory.reject(new Error("loadRegisteredResource: no RegisteredResources package"));
                }
                return promiseFactory.reject(new Error("loadRegisteredResource: no packages"));
            }
            function createPropertyRewriters(definitions, descriptors, ensureSharedResource) {
                var result = [];
                return DataViewObjectDefinitions.visitPropertyExprs({
                    definitions: definitions,
                    descriptors: descriptors,
                    visitor: function(reference, exprContainer, exprKey, geoJson, name_1) {
                        var isGeoJsonContent = geoJson && geoJson.geoJson && 1 === name_1.length && "content" === name_1[0];
                        !isGeoJsonContent || 17 === (geoJson = exprContainer).type.kind && 17 === geoJson.name.kind && 17 === geoJson.content.kind && (geoJson.type.value !== powerbi.GeoJsonTypes.shared || "string" == typeof (name_1 = geoJson.name.value) && null == geoJson.content.value && (ensureSharedResource && ensureSharedResource(name_1, ResourcePackageItemType.ShapeMap), 
                        reference = SQExprBuilder.resourcePackageItem(ResourcePackageUtils.ensurePackageName(2), 2, name_1), 
                        geoJson.content = reference)), reference instanceof SQResourcePackageItemExpr && (reference = {
                            getRefValue: function() {
                                return exprContainer[exprKey];
                            },
                            setRefValue: function(newValue) {
                                exprContainer[exprKey] = newValue;
                            }
                        }, isGeoJsonContent && (reference.itemType = ResourcePackageItemType.ShapeMap), 
                        result.push(reference));
                    }
                }), result;
            }
            ResourcePackageReferenceResolver.loadFromDataViewObjects = function(dataViewObjectDefinitions, dataViewObjectDescriptors, resourcePackages, resourceLoader, promiseFactory, ensureSharedResource) {
                if (!dataViewObjectDefinitions) return promiseFactory.resolve(null);
                for (var imageLoadPromises = [], _i = 0, resourcePackageReferences_1 = createPropertyRewriters(dataViewObjectDefinitions, dataViewObjectDescriptors, ensureSharedResource); _i < resourcePackageReferences_1.length; _i++) {
                    var resourcePackageRef = resourcePackageReferences_1[_i], propertyValue = resourcePackageRef.getRefValue();
                    imageLoadPromises.push(loadAndResolveFromSQExpr(propertyValue, resourcePackages(), resourceLoader, promiseFactory, {
                        itemTypeFromReference: resourcePackageRef.itemType
                    }));
                }
                return promiseFactory.all(imageLoadPromises);
            }, ResourcePackageReferenceResolver.loadAndResolveFromDataViewObjects = function(serializedObjects, resourcePackageReferences, resourcePackages, resourceLoader, promiseFactory, usePersistableFormat, vcLifecycleActivity) {
                if (!serializedObjects) return promiseFactory.resolve(null);
                for (var serializedObjects = DataViewObjectSerializer.serializeObjects(serializedObjects, resourcePackageReferences), clonedDataViewObjectDefinitions = DataViewObjectSerializer.deserializeObjects(serializedObjects, resourcePackageReferences), resourcePackageReferences = createPropertyRewriters(clonedDataViewObjectDefinitions, resourcePackageReferences), imageLoadPromises = [], _i = 0, resourcePackageReferences_2 = resourcePackageReferences; _i < resourcePackageReferences_2.length; _i++) !function(resourcePackageRef) {
                    var refReplacedPromise = resourcePackageRef.getRefValue(), resourceLoadActivity = null != vcLifecycleActivity ? vcLifecycleActivity.createChildActivity({
                        name: "Visual Container Resource Load",
                        resourceType: refReplacedPromise.packageType
                    }) : void 0, refReplacedPromise = loadAndResolveFromSQExpr(refReplacedPromise, resourcePackages, resourceLoader, promiseFactory, {
                        usePersistableFormat: usePersistableFormat,
                        itemTypeFromReference: resourcePackageRef.itemType
                    }).then(function(resolvedValue) {
                        resourcePackageRef.setRefValue(resolvedValue), resourceLoadActivity && resourceLoadActivity.resolve();
                    }).catch(function() {
                        resourceLoadActivity && resourceLoadActivity.reject();
                    });
                    imageLoadPromises.push(refReplacedPromise);
                }(resourcePackageReferences_2[_i]);
                var allImagesResolvedDefer = promiseFactory.defer();
                return promiseFactory.all(imageLoadPromises).then(function() {
                    return allImagesResolvedDefer.resolve(clonedDataViewObjectDefinitions);
                }), allImagesResolvedDefer.promise;
            }, ResourcePackageReferenceResolver.hasResourceReferencesToResolve = function(dataViewObjectDefinitions, descriptors) {
                return !!dataViewObjectDefinitions && 0 < createPropertyRewriters(dataViewObjectDefinitions, descriptors).length;
            }, ResourcePackageReferenceResolver.loadAndResolveFromSQExpr = loadAndResolveFromSQExpr, 
            ResourcePackageReferenceResolver.getLoadAndResolveErrorReason = getLoadAndResolveErrorReason, 
            ResourcePackageReferenceResolver.loadAndResolveItemContent = loadAndResolveItemContent, 
            ResourcePackageReferenceResolver.loadAndResolveContent = loadAndResolveContent, 
            ResourcePackageReferenceResolver.loadRegisteredResource = loadRegisteredResource, 
            ResourcePackageReferenceResolver.loadRegisteredResourceAsDataUri = function(promiseFactory, resourceLoader, packages, itemName) {
                return loadRegisteredResource(promiseFactory, resourceLoader, packages, itemName).then(function(content) {
                    return Blob, content instanceof Blob ? powerbi.visualHost.BlobHelper.readAsDataUrl(content, promiseFactory) : "string" != typeof content || UrlUtils.isDataUri(content) ? content : UrlUtils.makeJsonDataUri(content);
                });
            }, ResourcePackageReferenceResolver.loadRegisteredResourceAsDecodedString = function(promiseFactory, resourceLoader, packages, itemName) {
                return loadRegisteredResource(promiseFactory, resourceLoader, packages, itemName).then(function(content) {
                    return Blob, content instanceof Blob ? powerbi.visualHost.BlobHelper.readAsText(content, promiseFactory) : content;
                }).then(function(content) {
                    try {
                        "string" == typeof content && UrlUtils.isDataUri(content) && (content = UrlUtils.atou(UrlUtils.getBase64ContentFromDataUri(content)));
                    } catch (error) {
                        throw Trace.error("Error decoding registeredResource: " + JSON.stringify(error), !!error.stack), 
                        error;
                    }
                    return content;
                });
            };
        }(visualHost.ResourcePackageReferenceResolver || (visualHost.ResourcePackageReferenceResolver = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(VisualHostUtils) {
            VisualHostUtils.isDefined = function(ref, strNames) {
                for (var name, arrNames = strNames.split("."); name = arrNames.shift(); ) {
                    if (!ref || void 0 === ref[name] || null === ref[name]) return !1;
                    ref = ref[name];
                }
                return !0;
            };
        }(visualHost.VisualHostUtils || (visualHost.VisualHostUtils = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        visualHost.createApprovedResourceLoader = function(resourceLoaderConstructionOptions, approvedResourceService, telemetryService) {
            return new ApprovedResourceLoader(resourceLoaderConstructionOptions, approvedResourceService, telemetryService);
        }, visualHost.createPhantomJsApprovedResourceLoader = function(resourceLoaderConstructionOptions, approvedResourceService, telemetryService, featureSwitchService) {
            return new ApprovedResourceLoader(resourceLoaderConstructionOptions, approvedResourceService, telemetryService, !0, featureSwitchService);
        };
        var ApprovedResourceLoader = function() {
            function ApprovedResourceLoader(resourceLoaderConstructionOptions, approvedResourceService, telemetryService, onlyApprovedForServerRenderResources, featureSwitchService) {
                this.featureSwitchService = featureSwitchService, this.locale = resourceLoaderConstructionOptions && resourceLoaderConstructionOptions.locale, 
                this.promiseFactory = resourceLoaderConstructionOptions.promiseFactory, this.approvedResourceService = approvedResourceService, 
                this.telemetryService = telemetryService, this.onlyApprovedForServerRenderResources = onlyApprovedForServerRenderResources;
            }
            return ApprovedResourceLoader.prototype.loadTrustedResourcePackages = function(trustedResourcePackages) {
                return this.promiseFactory.reject();
            }, ApprovedResourceLoader.prototype.loadResourcePackages = function(resourcePackages) {
                for (var promises = [], _i = 0, resourcePackages_1 = resourcePackages; _i < resourcePackages_1.length; _i++) {
                    var resourcePackage = resourcePackages_1[_i];
                    promises.push(this.loadResourcePackage(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, ApprovedResourceLoader.prototype.loadResourcePackage = function(resourcePackage) {
                function logResourceFailure(url, error, startTime, endTime, isClientGenerated) {
                    _this.telemetryService.logEvent(powerbi.telemetry.ApprovedResourceFailLoaded, {
                        visualType: resourcePackage.name,
                        fileName: url,
                        isClientGenerated: !!isClientGenerated,
                        start: startTime,
                        end: endTime,
                        parentId: _this.telemetryService.root.id,
                        isError: !0,
                        errorSource: "PowerBI",
                        errorCode: error
                    });
                }
                var _this = this;
                return this.approvedResourceService.loadApprovedResourcesMetadata(this.onlyApprovedForServerRenderResources, this.promiseFactory).catch(function(reason) {
                    return _this.promiseFactory.reject(reason);
                }).then(function() {
                    var promises = [];
                    return _this.approvedResourceService.isApprovedResource(resourcePackage.name) ? (promises.push(_this.loadResourcesWithVisualApi(resourcePackage, logResourceFailure)), 
                    _this.promiseFactory.all(promises)) : _this.promiseFactory.reject("Visual is not an approved visual");
                });
            }, ApprovedResourceLoader.prototype.loadResourcePackageItem = function(resourcePackage, itemName) {
                return this.promiseFactory.reject();
            }, ApprovedResourceLoader.prototype.loadSharedResource = function(path) {
                return this.promiseFactory.reject();
            }, ApprovedResourceLoader.prototype.loadVisualPlugins = function(resourcePackages) {
                var promises = [];
                if (resourcePackages) for (var _i = 0, resourcePackages_2 = resourcePackages; _i < resourcePackages_2.length; _i++) {
                    var resourcePackage = resourcePackages_2[_i];
                    promises.push(this.loadVisualPlugin(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, ApprovedResourceLoader.prototype.loadVisualPlugin = function(resourcePackage) {
                var deferred = this.promiseFactory.defer();
                return resourcePackage && resourcePackage.items && 0 < resourcePackage.items.length ? this.loadResourcePackage(resourcePackage).then(function() {
                    var plugin = powerbi.visuals.plugins[resourcePackage.name];
                    plugin ? (plugin.iconUrl = visualHost.resourceInjector.getInjectedIconUrl(resourcePackage.name), 
                    deferred.resolve(plugin)) : deferred.reject("Unable to load visual plugin from resource package: " + resourcePackage.name);
                }).catch(function() {
                    deferred.reject("failed to resolve all promises");
                }) : deferred.resolve(null), deferred.promise;
            }, ApprovedResourceLoader.prototype.destroy = function() {}, ApprovedResourceLoader.prototype.loadResourcesWithVisualApi = function(resourcePackage, logResourceFailure) {
                var _this = this, deferred = this.promiseFactory.defer(), startTime = new Date().toISOString(), consumePublicCvsWithoutRps = this.featureSwitchService ? !!this.featureSwitchService.featureSwitches.consumePublicCvsWithoutRps : void 0;
                return this.approvedResourceService.getCustomVisualPbivizJson(resourcePackage.name).then(function(response) {
                    var endTime = new Date().toISOString();
                    _this.handleLoadResourceResponse(response.data, resourcePackage), _this.telemetryService.logEvent(powerbi.telemetry.ApprovedResourceSuccessfulLoad, {
                        visualType: resourcePackage.name,
                        fileName: _this.approvedResourceService.customVisualJsonUrlBuilder(resourcePackage.name),
                        isClientGenerated: !!resourcePackage.isPublic,
                        consumePublicCvsWithoutRps: consumePublicCvsWithoutRps,
                        start: startTime,
                        end: endTime,
                        parentId: _this.telemetryService.root.id,
                        isError: !1,
                        errorSource: "PowerBI"
                    }), deferred.resolve(null);
                }, function(endTime) {
                    var extractedError = JSON.stringify(endTime), endTime = new Date().toISOString();
                    logResourceFailure(_this.approvedResourceService.customVisualJsonUrlBuilder(resourcePackage.name), extractedError, startTime, endTime, resourcePackage.isPublic), 
                    deferred.reject(extractedError);
                }), deferred.promise;
            }, ApprovedResourceLoader.prototype.handleLoadResourceResponse = function(plugin, existingPlugin) {
                existingPlugin.items && existingPlugin.items[0] && (existingPlugin.items[0].content = JSON.stringify(plugin));
                plugin = visualHost.visualPluginUtility.createVisualPlugin(plugin, this.locale, 2);
                plugin && (plugin.isDeprecated = this.approvedResourceService.isDeprecated(existingPlugin.name), 
                plugin.approvedForNoIframe = this.approvedResourceService.isApprovedForNoIframe(existingPlugin.name)), 
                powerbi.extensibility.visualPluginAdapter.transformPlugin(plugin);
                existingPlugin = powerbi.visuals.plugins[plugin.name];
                existingPlugin && (plugin.favoriteId = existingPlugin.favoriteId, plugin.isOutOfBox = existingPlugin.isOutOfBox), 
                powerbi.visuals.plugins[plugin.name] = plugin;
            }, ApprovedResourceLoader;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {});

var commonGlobals = window;

!function(powerbi) {
    !function(visualHost) {
        var gt = jsCommon.Version.gt, lt = jsCommon.Version.lt, BrowserUtility = jsCommon.BrowserUtility;
        visualHost.createApprovedResourceService = function(featureSwitchService, httpService, endpointToken, options, telemetryService) {
            return new ApprovedResourceService(featureSwitchService, httpService, endpointToken, options, telemetryService);
        };
        var ApprovedResourceService = function() {
            function ApprovedResourceService(featureSwitchService, httpService, endpointToken, options, telemetryService) {
                var _this = this;
                this.httpService = httpService, this.options = options, this.telemetryService = telemetryService, 
                this.trustedVisuals = visualHost.TrustedVisuals, this.resourcesRetryCount = 5, this.legacy = "legacy", 
                this.approvedResourceJsonInProccess = !1, this.featureSwitchesPromise = featureSwitchService.getFeatureSwitches().then(function(featureSwitches) {
                    _this.appStoreCdnOverride = featureSwitches.appStoreCdnOverride, _this.inAirGappedEnv = featureSwitches.restrictServiceOutboundFlowsEnabled;
                }), this.customVisualsEndpointPromise = endpointToken.getCustomVisualsEndpointAsync();
            }
            return ApprovedResourceService.prototype.getCustomVisualPbivizJson = function(options) {
                var jsonUrl = this.customVisualJsonUrlBuilder(options), options = {
                    responseType: "json",
                    timeout: powerbi.visualHost.resourceLoaderHttpTimeout,
                    retryCount: this.resourcesRetryCount,
                    logRetries: !0,
                    addRequestIdToRetries: !0
                };
                return this.httpService.get(jsonUrl, options);
            }, ApprovedResourceService.prototype.getCustomVisualVersion = function(compatibleVersion) {
                compatibleVersion = this.getCompatibleVisualVersion(compatibleVersion);
                return compatibleVersion ? compatibleVersion.version : null;
            }, ApprovedResourceService.prototype.customVisualJsonUrlBuilder = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                if (compatibleVersion) return this.customVisualsEndpoint + "/" + guid + "." + compatibleVersion.version + "." + compatibleVersion.hash + ".pbiviz.json";
            }, ApprovedResourceService.prototype.getVisualIdFromAssetId = function(assetId) {
                for (var guid in this.approvedVisuals) if (this.approvedVisuals[guid] && this.approvedVisuals[guid].assetId === assetId) return guid;
                return null;
            }, ApprovedResourceService.prototype.isApprovedVisualsDefined = function() {
                return !!this.approvedVisuals;
            }, ApprovedResourceService.prototype.isApprovedResource = function(guid) {
                return !!this.approvedVisuals && !!this.approvedVisuals[guid];
            }, ApprovedResourceService.prototype.isApprovedResourceByAssetId = function(assetId) {
                return !!this.approvedVisualsAssetIds && !!this.approvedVisualsAssetIds[assetId];
            }, ApprovedResourceService.prototype.isApprovedResourceServerRender = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return this.isApprovedResource(guid) && !!compatibleVersion && !!compatibleVersion.approvedForServerRender;
            }, ApprovedResourceService.prototype.isApprovedForNoIframe = function(compatibleVersion) {
                if (this.onlyApprovedForServerRenderResources || BrowserUtility.isInternetExplorerBrowser()) return !1;
                compatibleVersion = this.getCompatibleVisualVersion(compatibleVersion);
                return !!compatibleVersion && !!compatibleVersion.approvedForNoIframe;
            }, ApprovedResourceService.prototype.isTrustedResource = function(guid) {
                return !!_.find(this.trustedVisuals, function(visualGuid) {
                    return visualGuid === guid;
                });
            }, ApprovedResourceService.prototype.addTrustedVisual = function(guid) {
                this.isTrustedResource(guid) || this.trustedVisuals.push(guid);
            }, ApprovedResourceService.prototype.isDeprecated = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return this.isApprovedResource(guid) && !!compatibleVersion && (!!compatibleVersion.isDeprecated || compatibleVersion.apiVersion && lt(compatibleVersion.apiVersion, visualHost.CustomVisualDeprecatedAPI));
            }, ApprovedResourceService.prototype.usesExternalResourcesInAirGappedEnv = function(compatibleVersion) {
                compatibleVersion = this.getCompatibleVisualVersion(compatibleVersion);
                return this.inAirGappedEnv && compatibleVersion && compatibleVersion.usesExternalResources;
            }, ApprovedResourceService.prototype.canUseLocalStorage = function(guid) {
                if (this.onlyApprovedForServerRenderResources) return !1;
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return !!compatibleVersion && (!!this.isApprovedResource(guid) && compatibleVersion.canUseLocalStorage);
            }, ApprovedResourceService.prototype.removeApprovedResource = function(guid) {
                this.approvedVisuals && (this.approvedVisuals[guid] = void 0);
            }, ApprovedResourceService.prototype.getCdnEnvEndpointName = function(endpoint) {
                var container = powerbi.getVisualCDNBlobContainerUrl() || visualHost.visualCDNBlobDefaultName;
                return endpoint + (container = this.appStoreCdnOverride ? visualHost.visualCDNBlobAppStoreName : container);
            }, ApprovedResourceService.prototype.loadApprovedResourcesMetadata = function(onlyApprovedForServerRenderResources, promiseFactory) {
                var _this = this;
                return onlyApprovedForServerRenderResources && (this.onlyApprovedForServerRenderResources = !0), 
                this.approvedResourceJsonInProccess ? this.approvedResourceJsonRequest.promise : (this.approvedResourceJsonRequest = promiseFactory.defer(), 
                this.approvedVisuals ? (this.setApprovedResources(null, this.onlyApprovedForServerRenderResources), 
                this.approvedResourceJsonRequest.resolve(null)) : (this.approvedResourceJsonInProccess = !0, 
                promiseFactory.allSettled([ this.featureSwitchesPromise, this.customVisualsEndpointPromise ]).then(function(values) {
                    _this.customVisualsEndpoint = values[1].value;
                }).finally(function() {
                    var startTime = new Date().toISOString(), options = {
                        responseType: "json",
                        timeout: powerbi.visualHost.resourceLoaderHttpTimeout,
                        retryCount: _this.resourcesRetryCount,
                        logRetries: !0,
                        addRequestIdToRetries: !0
                    };
                    _this.httpService.get(_this.customVisualsEndpoint + "/approvedResources.json", options).then(function(response) {
                        var endTime = new Date().toISOString();
                        _this.telemetryService && _this.telemetryService.logEvent(powerbi.telemetry.ApprovedResourceEndpointDown, {
                            endpoint: _this.customVisualsEndpoint,
                            allEndpointDown: !1,
                            start: startTime,
                            end: endTime,
                            parentId: _this.telemetryService.root.id,
                            isError: !1,
                            errorSource: "PowerBI"
                        }), _this.setApprovedResources(response.data, _this.onlyApprovedForServerRenderResources), 
                        _this.approvedResourceJsonRequest.resolve(null), _this.approvedResourceJsonInProccess = !1;
                    }, function(error) {
                        var endTime = new Date().toISOString();
                        _this.telemetryService && _this.telemetryService.logEvent(powerbi.telemetry.ApprovedResourceEndpointDown, {
                            endpoint: _this.customVisualsEndpoint,
                            allEndpointDown: !0,
                            start: startTime,
                            end: endTime,
                            parentId: _this.telemetryService.root.id,
                            isError: !0,
                            errorSource: "PowerBI",
                            errorCode: JSON.stringify(error)
                        }), _this.approvedResourceJsonRequest.reject(JSON.stringify(error)), _this.approvedResourceJsonInProccess = !1;
                    });
                })), this.approvedResourceJsonRequest.promise);
            }, ApprovedResourceService.prototype.cdnUrlBuilder = function(customVisualBaseUrl, resourcePackageName, extension) {
                var version = this.getCompatibleApiVersion(resourcePackageName);
                return version ? this.getCdnEnvEndpointName(customVisualBaseUrl) + "/" + version + "/" + resourcePackageName + extension : this.getCdnEnvEndpointName(customVisualBaseUrl) + "/" + resourcePackageName + extension;
            }, ApprovedResourceService.prototype.getTrustedResources = function() {
                return this.trustedVisuals;
            }, ApprovedResourceService.prototype.hasApi = function(compatibleVersion) {
                compatibleVersion = this.getCompatibleVisualVersion(compatibleVersion);
                return !!compatibleVersion && (!!this.approvedVisuals && !!compatibleVersion && !!compatibleVersion.apiVersion && compatibleVersion.apiVersion !== this.legacy);
            }, ApprovedResourceService.prototype.getTelemetryUsageLimit = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return compatibleVersion && this.isApprovedResource(guid) && compatibleVersion.telemetryUsageLimit || 0;
            }, ApprovedResourceService.prototype.canRefreshHostData = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return !!compatibleVersion && (!!this.isApprovedResource(guid) && compatibleVersion.canRefreshHostData);
            }, ApprovedResourceService.prototype.canGetAADToken = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return !!compatibleVersion && (!this.blockedAccessToken(guid) && (!!this.isApprovedResource(guid) && compatibleVersion.canGetAADToken));
            }, ApprovedResourceService.prototype.blockedAccessToken = function(guid) {
                if (this.options && this.options.shouldBlockAccessToken()) return this.telemetryService && this.telemetryService.logEvent(powerbi.telemetry.VisualAuthenticationBlockAccessToken, {
                    visualType: guid,
                    reason: "Access Token does not exists in publishToWeb/PaasEmbed"
                }), !0;
                try {
                    var scopes = JSON.parse(atob(commonGlobals.powerBIAccessToken.split(".")[1])).scp;
                    return 0 <= scopes.indexOf("user_impersonation") || 0 <= scopes.indexOf("__Tokens.WAC") ? !1 : (this.telemetryService && this.telemetryService.logEvent(powerbi.telemetry.VisualAuthenticationBlockAccessToken, {
                        visualType: guid,
                        reason: "Access Token is blocked due to insufficient scope"
                    }), !0);
                } catch (_a) {
                    return !1;
                }
            }, ApprovedResourceService.prototype.canGetWACToken = function(guid) {
                var compatibleVersion = this.getCompatibleVisualVersion(guid);
                return !!compatibleVersion && (!this.blockedAccessToken(guid) && (!!this.isApprovedResource(guid) && compatibleVersion.canGetWACToken));
            }, ApprovedResourceService.prototype.getAllApprovedForServerRenderResourcesTypes = function() {
                var _this = this;
                if (!this.approvedVisuals) return [];
                var approvedVisualsTypes = Object.keys(this.approvedVisuals);
                return _.filter(approvedVisualsTypes, function(guid) {
                    return _this.isApprovedResourceServerRender(guid);
                });
            }, ApprovedResourceService.prototype.getPublicId = function(guid) {
                return this.isApprovedResource(guid) && this.approvedVisuals[guid].assetId ? this.approvedVisuals[guid].assetId : null;
            }, ApprovedResourceService.prototype.canManageAsyncUpdate = function(compatibleVersion) {
                if (this.isApprovedResource(compatibleVersion)) {
                    compatibleVersion = this.getCompatibleVisualVersion(compatibleVersion);
                    if (compatibleVersion && compatibleVersion.callsRenderingCompleted) return !0;
                }
                return !1;
            }, ApprovedResourceService.prototype.getCompatibleApiVersion = function(visualVersionsMetadata) {
                if (!this.isApprovedResource(visualVersionsMetadata)) return null;
                if (!this.approvedVisuals[visualVersionsMetadata].allVersions) return null;
                visualVersionsMetadata = this.approvedVisuals[visualVersionsMetadata].allVersions;
                visualVersionsMetadata.sort(function(a, b) {
                    return a.apiVersion && (!b.apiVersion || gt(a.apiVersion, b.apiVersion)) ? -1 : 1;
                });
                for (var _i = 0, visualVersionsMetadata_1 = visualVersionsMetadata; _i < visualVersionsMetadata_1.length; _i++) {
                    var state_1 = function(item) {
                        if (powerbi.extensibility.getVisualApiVersions().some(function(x) {
                            return x.version === item.apiVersion;
                        })) return {
                            value: item.apiVersion
                        };
                    }(visualVersionsMetadata_1[_i]);
                    if ("object" == typeof state_1) return state_1.value;
                }
                return this.legacy;
            }, ApprovedResourceService.prototype.getCompatibleVisualVersion = function(guid) {
                var visualVersion = this.getCompatibleApiVersion(guid);
                if (visualVersion) for (var _i = 0, _a = this.approvedVisuals[guid].allVersions; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item.apiVersion === visualVersion) return item;
                }
                return null;
            }, ApprovedResourceService.prototype.setApprovedResources = function(approvedVisuals, phantomJsApprovedVisuals) {
                approvedVisuals && (this.approvedVisuals = approvedVisuals, this.approvedVisualsAssetIds = ApprovedResourceService.buildApprovedVisualsAssetIds(approvedVisuals)), 
                phantomJsApprovedVisuals && (phantomJsApprovedVisuals = this.getAllApprovedForServerRenderResourcesTypes(), 
                phantomJsApprovedVisuals = _.pick(this.approvedVisuals, phantomJsApprovedVisuals), 
                this.approvedVisuals = phantomJsApprovedVisuals);
            }, ApprovedResourceService.buildApprovedVisualsAssetIds = function(approvedVisuals) {
                return _.reduce(approvedVisuals, function(dict, visual) {
                    return visual.assetId && (dict[visual.assetId] = !0), dict;
                }, {});
            }, ApprovedResourceService;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {});

var powerbi, CustomVisualsUtils = powerbi.visualHost.CustomVisualsUtils;

!function(powerbi) {
    !function(visualHost) {
        visualHost.createConditionalResourceLoader = function(promiseFactory, resourceLoaderInitOptions, resourceLoaderFactories, approvedResourceService, managedCustomVisualsService) {
            return new ConditionalResourceLoader(promiseFactory, resourceLoaderInitOptions, resourceLoaderFactories, approvedResourceService, managedCustomVisualsService);
        };
        var ConditionalResourceLoader = function() {
            function ConditionalResourceLoader(promiseFactory, resourceLoaderInitOptions, resourceLoaderFactories, approvedResourceService, managedCustomVisualsService) {
                this.promiseFactory = promiseFactory, this.resourceLoaderInitOptions = resourceLoaderInitOptions, 
                this.resourceLoaderFactories = resourceLoaderFactories, this.approvedResourceService = approvedResourceService, 
                this.managedCustomVisualsService = managedCustomVisualsService, this.resourceLoaderCollection = {};
            }
            return ConditionalResourceLoader.prototype.resourceLoaderSelector = function(resourcePackage) {
                switch (resourcePackage.type) {
                  case 0:
                  case 3:
                    return this.getCustomVisualResourceLoader(resourcePackage);

                  case 1:
                  case 2:
                    return this.getStaticResourceResourceLoader();

                  default:
                    resourcePackage.type, resourcePackage.type;
                }
            }, ConditionalResourceLoader.prototype.getStaticResourceResourceLoader = function() {
                return this.getLocalResourceLoader();
            }, ConditionalResourceLoader.prototype.getCustomVisualResourceLoader = function(resourcePackage) {
                if (3 === resourcePackage.type) return this.getOrganizationalStoreResourceLoader();
                if (resourcePackage.developerModeVisual) return this.getSandboxResourceLoader();
                if (this.approvedResourceService.isTrustedResource(resourcePackage.name)) {
                    if (this.getApprovedResourcesForTrustedVisualsEnabled()) return this.getTrustedResourceLoader();
                } else {
                    if (this.resourceLoaderInitOptions.getApprovedResourcesEnabled()) return this.getApprovedResourceLoader();
                    if (this.resourceLoaderInitOptions.getSandboxVisualsEnabled()) return this.getSandboxResourceLoader();
                }
                return this.getLocalResourceLoader();
            }, ConditionalResourceLoader.prototype.getApprovedResourcesForTrustedVisualsEnabled = function() {
                return this.resourceLoaderInitOptions.getApprovedResourcesEnabled() || powerbi.getVisualCDNBlobContainerUrl() !== visualHost.visualCDNBlobDevName;
            }, ConditionalResourceLoader.prototype.getLocalResourceLoader = function() {
                return void 0 === this.resourceLoaderCollection.localResourceLoader && (this.resourceLoaderCollection.localResourceLoader = this.resourceLoaderFactories.localResourceLoaderFactory()), 
                this.resourceLoaderCollection.localResourceLoader;
            }, ConditionalResourceLoader.prototype.getSandboxResourceLoader = function() {
                return void 0 === this.resourceLoaderCollection.sandboxResourceLoader && (this.resourceLoaderCollection.sandboxResourceLoader = this.resourceLoaderFactories.sandboxResourceLoaderFactory()), 
                this.resourceLoaderCollection.sandboxResourceLoader;
            }, ConditionalResourceLoader.prototype.getApprovedResourceLoader = function() {
                return void 0 === this.resourceLoaderCollection.approvedResourceLoader && (this.resourceLoaderCollection.approvedResourceLoader = this.resourceLoaderFactories.approvedResourceLoaderFactory()), 
                this.resourceLoaderCollection.approvedResourceLoader;
            }, ConditionalResourceLoader.prototype.getTrustedResourceLoader = function() {
                return void 0 === this.resourceLoaderCollection.trustedResourceLoader && (this.resourceLoaderCollection.trustedResourceLoader = this.resourceLoaderFactories.trustedResourceLoaderFactory()), 
                this.resourceLoaderCollection.trustedResourceLoader;
            }, ConditionalResourceLoader.prototype.getOrganizationalStoreResourceLoader = function() {
                return void 0 === this.resourceLoaderCollection.organizationalStoreResourceLoader && (this.resourceLoaderCollection.organizationalStoreResourceLoader = this.resourceLoaderFactories.organizationalStoreResourceLoaderFactory()), 
                this.resourceLoaderCollection.organizationalStoreResourceLoader;
            }, ConditionalResourceLoader.prototype.loadTrustedResourcePackages = function(trustedResourcePackages) {
                var promises = [];
                return promises.push(this.getTrustedResourceLoader().loadTrustedResourcePackages(trustedResourcePackages)), 
                this.promiseFactory.all(promises);
            }, ConditionalResourceLoader.prototype.updateResourcePackageId = function(resourcePackage) {
                var visual;
                return !powerbi.visuals.plugins || (visual = powerbi.visuals.plugins[resourcePackage.name]) && (visual.resourcePackageId = resourcePackage.id), 
                null;
            }, ConditionalResourceLoader.prototype.isValid = function(resourcePackage) {
                if (null == powerbi.visuals.plugins || null == resourcePackage || null == resourcePackage.name) return !1;
                if (visualHost.CustomVisualsUtils.isOrganizationalCustomVisual(resourcePackage.name) && 3 !== resourcePackage.type) return !1;
                var existingPlugin = powerbi.visuals.plugins[resourcePackage.name];
                return !(null != existingPlugin && !0 !== existingPlugin.custom && !this.approvedResourceService.isTrustedResource(resourcePackage.name));
            }, ConditionalResourceLoader.prototype.loadResourcePackages = function(resourcePackages) {
                for (var _this = this, promises = [], this_1 = this, _i = 0, resourcePackages_3 = resourcePackages; _i < resourcePackages_3.length; _i++) !function(resourcePackage) {
                    promises.push(this_1.resourceLoaderSelector(resourcePackage).loadResourcePackage(resourcePackage).then(function() {
                        return _this.updateResourcePackageId(resourcePackage);
                    }));
                }(resourcePackages_3[_i]);
                return this.promiseFactory.all(promises);
            }, ConditionalResourceLoader.prototype.isPublicManagedVisual = function(type) {
                var deferred = this.promiseFactory.defer();
                return this.managedCustomVisualsService ? this.managedCustomVisualsService.isPublicManagedVisualByVisualType(type).then(function(isPublic) {
                    deferred.resolve(isPublic);
                }).catch(function() {
                    deferred.reject();
                }) : deferred.resolve(!1), deferred.promise;
            }, ConditionalResourceLoader.prototype.loadResourcePackage = function(resourcePackage) {
                var _this = this;
                if (powerbi.getVisualCDNBlobContainerUrl() !== visualHost.visualCDNBlobDevName && !1 === this.isValid(resourcePackage)) return this.promiseFactory.reject("Attempting to load an invalid custom visual");
                var promise, resourceLoader = this.resourceLoaderSelector(resourcePackage);
                if (resourceLoader === this.resourceLoaderCollection.approvedResourceLoader) promise = resourceLoader.loadResourcePackage(resourcePackage).catch(function(reason) {
                    return _this.isPublicManagedVisual(resourcePackage.name).then(function(publicManagedVisual) {
                        return publicManagedVisual || _this.resourceLoaderInitOptions.getSandboxVisualsEnabled ? _this.approvedResourceService.isApprovedResource(resourcePackage.name) ? _this.promiseFactory.reject("Fallback is blocked for public custom visuals") : (_this.approvedResourceService.removeApprovedResource(resourcePackage.name), 
                        publicManagedVisual ? _this.promiseFactory.reject("Fallback is blocked for public managed visuals") : _this.getSandboxResourceLoader().loadResourcePackage(resourcePackage)) : _this.getLocalResourceLoader().loadResourcePackage(resourcePackage);
                    });
                }); else {
                    if (resourceLoader === this.resourceLoaderCollection.trustedResourceLoader) return resourceLoader.loadResourcePackage(resourcePackage);
                    promise = this.isPublicManagedVisual(resourcePackage.name).then(function(isPublicManagedVisual) {
                        return isPublicManagedVisual && !resourcePackage.developerModeVisual ? _this.promiseFactory.reject("Fallback is blocked for public managed visuals") : _this.approvedResourceService.isApprovedResource(resourcePackage.name) && !resourcePackage.developerModeVisual ? _this.promiseFactory.reject("Fallback is blocked for public custom visuals") : resourceLoader.loadResourcePackage(resourcePackage);
                    });
                }
                return promise.then(function() {
                    return _this.updateResourcePackageId(resourcePackage);
                });
            }, ConditionalResourceLoader.prototype.loadVisualPlugin = function(resourcePackage) {
                return this.resourceLoaderSelector(resourcePackage).loadVisualPlugin(resourcePackage);
            }, ConditionalResourceLoader.prototype.loadVisualPlugins = function(resourcePackages) {
                for (var promises = [], _i = 0, resourcePackages_4 = resourcePackages; _i < resourcePackages_4.length; _i++) {
                    var resourcePackage = resourcePackages_4[_i];
                    promises.push(this.resourceLoaderSelector(resourcePackage).loadVisualPlugin(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, ConditionalResourceLoader.prototype.loadResourcePackageItem = function(resourcePackage, itemName) {
                return this.resourceLoaderSelector(resourcePackage).loadResourcePackageItem(resourcePackage, itemName);
            }, ConditionalResourceLoader.prototype.loadSharedResource = function(path, resourcePackageItemType) {
                return this.getLocalResourceLoader().loadSharedResource(path, resourcePackageItemType);
            }, ConditionalResourceLoader.prototype.destroy = function() {
                var resourceLoader, resourceLoaderCollection = this.resourceLoaderCollection;
                for (resourceLoader in resourceLoaderCollection) resourceLoaderCollection.hasOwnProperty(resourceLoader) && resourceLoaderCollection[resourceLoader].destroy();
            }, ConditionalResourceLoader;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        visualHost.createTrustedResourceLoader = function(resourceLoaderConstructionOptions, approvedResourceService, resourcePackagesService, featureSwitchService, telemetryService, onlyApprovedForServerRenderResources, resourceLoaderInitOptions) {
            return new TrustedResourceLoader(resourceLoaderConstructionOptions, approvedResourceService, resourcePackagesService, featureSwitchService, telemetryService, onlyApprovedForServerRenderResources = void 0 === onlyApprovedForServerRenderResources ? !1 : onlyApprovedForServerRenderResources, resourceLoaderInitOptions);
        }, visualHost.CustomVizJSONSuffix = ".pbiviz.json";
        var TrustedResourceLoader = function() {
            function TrustedResourceLoader(resourceLoaderConstructionOptions, approvedResourceService, resourcePackagesService, featureSwitchService, telemetryService, onlyApprovedForServerRenderResources, resourceLoaderInitOptions) {
                void 0 === onlyApprovedForServerRenderResources && (onlyApprovedForServerRenderResources = !1), 
                this.locale = resourceLoaderConstructionOptions && resourceLoaderConstructionOptions.locale, 
                this.promiseFactory = resourceLoaderConstructionOptions.promiseFactory, this.approvedResourceService = approvedResourceService, 
                this.resourcePackagesService = resourcePackagesService, this.telemetryService = telemetryService, 
                this.onlyApprovedForServerRenderResources = onlyApprovedForServerRenderResources, 
                this.resourceLoaderInitOptions = resourceLoaderInitOptions, this.featureSwitchService = featureSwitchService;
            }
            return TrustedResourceLoader.prototype.loadTrustedResourcePackages = function(trustedResourcePackages) {
                var promises = [];
                if (trustedResourcePackages && 0 < trustedResourcePackages.length) for (var resourceId = 9999, _i = 0, trustedResourcePackages_1 = trustedResourcePackages; _i < trustedResourcePackages_1.length; _i++) {
                    var resourcePackage = trustedResourcePackages_1[_i];
                    powerbi.visuals.plugins[resourcePackage] ? promises.push(this.promiseFactory.resolve([ powerbi.visuals.plugins[resourcePackage] ])) : (resourcePackage = {
                        id: resourceId++,
                        name: resourcePackage,
                        type: 0,
                        items: [ {
                            name: resourcePackage,
                            type: powerbi.contracts.ResourcePackageItemType.CustomVisualMetadata,
                            path: resourcePackage + visualHost.CustomVizJSONSuffix
                        } ]
                    }, this.resourcePackagesService.registerPackages([ resourcePackage ]), promises.push(this.loadResourcePackage(resourcePackage)));
                }
                return this.promiseFactory.all(promises);
            }, TrustedResourceLoader.prototype.loadResourcePackages = function(resourcePackages) {
                for (var promises = [], _i = 0, resourcePackages_5 = resourcePackages; _i < resourcePackages_5.length; _i++) {
                    var resourcePackage = resourcePackages_5[_i];
                    promises.push(this.loadResourcePackage(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, TrustedResourceLoader.prototype.loadResourcePackage = function(resourcePackage) {
                var _this = this;
                if (!this.resourceLoaderInitOptions || this.resourceLoaderInitOptions.getApprovedResourcesEnabled()) return this.approvedResourceService.loadApprovedResourcesMetadata(this.onlyApprovedForServerRenderResources, this.promiseFactory).catch(function(reason) {
                    return _this.promiseFactory.reject(reason);
                }).then(function() {
                    var promises = [];
                    if (_this.onlyApprovedForServerRenderResources && !_this.approvedResourceService.isApprovedResource(resourcePackage.name)) return _this.promiseFactory.reject("Visual is not an approved visual");
                    if (!_this.approvedResourceService.hasApi(resourcePackage.name)) return _this.promiseFactory.reject("The trusted visual does not have a supported API version for this client");
                    var getJsonPromise = _this.loadCustomVisualJson(resourcePackage.name, resourcePackage.isPublic);
                    return getJsonPromise.catch(function(error) {
                        return _this.promiseFactory.reject(error);
                    }), promises.push(getJsonPromise), _this.promiseFactory.all(promises);
                });
                return this.promiseFactory.all([]);
            }, TrustedResourceLoader.prototype.loadResourcePackageItem = function(resourcePackage, itemName) {
                return this.promiseFactory.reject();
            }, TrustedResourceLoader.prototype.loadSharedResource = function(path) {
                return this.promiseFactory.reject();
            }, TrustedResourceLoader.prototype.loadVisualPlugins = function(resourcePackages) {
                return this.promiseFactory.reject();
            }, TrustedResourceLoader.prototype.loadVisualPlugin = function(resourcePackage) {
                return this.promiseFactory.reject();
            }, TrustedResourceLoader.prototype.destroy = function() {}, TrustedResourceLoader.prototype.loadCustomVisualJson = function(resourceName, isClientGenerated) {
                var _this = this, deferred = this.promiseFactory.defer(), startTime = new Date().toISOString(), consumePublicCvsWithoutRps = this.featureSwitchService ? !!this.featureSwitchService.featureSwitches.consumePublicCvsWithoutRps : void 0;
                return this.approvedResourceService.getCustomVisualPbivizJson(resourceName).then(function(plugin) {
                    var endTime = new Date().toISOString();
                    _this.telemetryService.logEvent(powerbi.telemetry.ApprovedResourceSuccessfulLoad, {
                        visualType: resourceName,
                        fileName: _this.approvedResourceService.customVisualJsonUrlBuilder(resourceName),
                        isClientGenerated: !!isClientGenerated,
                        consumePublicCvsWithoutRps: consumePublicCvsWithoutRps,
                        start: startTime,
                        end: endTime,
                        parentId: _this.telemetryService.root.id,
                        isError: !1,
                        errorSource: "PowerBI"
                    });
                    plugin = _this.handleLoadResourceResponse(plugin.data);
                    deferred.resolve(plugin);
                }, function(error) {
                    var extractedError = new Date().toISOString(), extractedError = _this.handleLoadResourceError(error, resourceName, _this.approvedResourceService.customVisualJsonUrlBuilder(resourceName), startTime, extractedError, isClientGenerated);
                    deferred.reject(extractedError), deferred.reject(error.data);
                }), deferred.promise;
            }, TrustedResourceLoader.prototype.handleLoadResourceError = function(extractedError, resourceName, jsonUrl, startTime, endTime, isClientGenerated) {
                extractedError = JSON.stringify(extractedError);
                return this.telemetryService.logEvent(powerbi.telemetry.ApprovedResourceFailLoaded, {
                    visualType: resourceName,
                    fileName: jsonUrl,
                    isClientGenerated: !!isClientGenerated,
                    start: startTime,
                    end: endTime,
                    parentId: this.telemetryService.root.id,
                    isError: !0,
                    errorSource: "PowerBI",
                    errorCode: extractedError
                }), extractedError;
            }, TrustedResourceLoader.prototype.handleLoadResourceResponse = function(existingPlugin) {
                var plugin;
                try {
                    plugin = visualHost.visualPluginUtility.createVisualPlugin(existingPlugin, this.locale, 2);
                } catch (e) {
                    return null;
                }
                plugin.custom = !0, plugin.isDeprecated = this.approvedResourceService.isDeprecated(plugin.name), 
                (plugin.name === visualHost.EsriVisual || plugin.name === visualHost.PowerAppsVisual || plugin.name === visualHost.FlowVisual && this.featureSwitchService.featureSwitches.powerAutomateNativeVisual) && (plugin.custom = !1);
                existingPlugin = powerbi.visuals.plugins[plugin.name];
                return existingPlugin && (plugin.favoriteId = existingPlugin.favoriteId, plugin.isOutOfBox = existingPlugin.isOutOfBox), 
                powerbi.extensibility.visualPluginAdapter.transformPlugin(plugin), powerbi.visuals.plugins[plugin.name] = plugin;
            }, TrustedResourceLoader;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var LocalResourceLoadResourcePackageItemEventName = powerbi.telemetry.LocalResourceLoadResourcePackageItemEventName, MonitorWith = powerbi.MonitorWith, ResourcePackageItemType = powerbi.contracts.ResourcePackageItemType, ResourcePackageUtils = visualHost.utils.ResourcePackageUtils;
        visualHost.createResourceLoader = function(resourceLoaderConstructionOptions, provider, sharedResourceItemProxy) {
            return new LocalResourceLoader(resourceLoaderConstructionOptions, provider, sharedResourceItemProxy || new DefaultSharedResourceItemProxy(resourceLoaderConstructionOptions.promiseFactory));
        };
        var DefaultSharedResourceItemProxy = function() {
            function DefaultSharedResourceItemProxy(promiseFactory) {
                this.promiseFactory = promiseFactory;
            }
            return DefaultSharedResourceItemProxy.prototype.get = function(resourcePackageId, name, path) {
                return this.promiseFactory.reject();
            }, DefaultSharedResourceItemProxy.prototype.getBlob = function(resourcePackageId, name, path) {
                return this.promiseFactory.reject();
            }, DefaultSharedResourceItemProxy;
        }();
        visualHost.DefaultSharedResourceItemProxy = DefaultSharedResourceItemProxy;
        var LocalResourceLoader = function() {
            function LocalResourceLoader(resourceLoaderConstructionOptions, provider, sharedResourceItemProxy) {
                this.provider = provider, this.sharedResourceItemProxy = sharedResourceItemProxy, 
                this.promiseFactory = resourceLoaderConstructionOptions && resourceLoaderConstructionOptions.promiseFactory, 
                this.locale = resourceLoaderConstructionOptions && resourceLoaderConstructionOptions.locale, 
                this.telemetryV2Enabled = resourceLoaderConstructionOptions && resourceLoaderConstructionOptions.telemetryV2Enabled;
            }
            return LocalResourceLoader.prototype.loadTrustedResourcePackages = function(trustedResourcePackages) {
                return this.promiseFactory.reject();
            }, LocalResourceLoader.prototype.loadResourcePackages = function(resourcePackages) {
                for (var promises = [], _i = 0, resourcePackages_6 = resourcePackages; _i < resourcePackages_6.length; _i++) {
                    var resourcePackage = resourcePackages_6[_i];
                    promises.push(this.loadResourcePackage(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, LocalResourceLoader.prototype.loadResourcePackage = function(resourcePackage) {
                var promises = [];
                if (resourcePackage && resourcePackage.items) for (var _i = 0, _a = resourcePackage.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    promises.push(this.loadCustomVisualResourcePackageItem(item, resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, LocalResourceLoader.prototype.loadResourcePackageItem = function(resourcePackage, item) {
                item = ResourcePackageUtils.findItemInPackage(resourcePackage, item);
                return item ? item.content ? this.promiseFactory.resolve(item.content) : this.loadBlob(resourcePackage.id, resourcePackage.name, item) : (jsCommon.Trace.warning("loadResourcePackageItem: item not found in package"), 
                this.promiseFactory.resolve(null));
            }, LocalResourceLoader.prototype.loadSharedResource = function(path, resourcePackageItemType) {
                return resourcePackageItemType === ResourcePackageItemType.Image ? this.sharedResourceItemProxy.getBlob(null, ResourcePackageUtils.ensurePackageName(2), path, {
                    retries: 1
                }) : this.sharedResourceItemProxy.get(null, ResourcePackageUtils.ensurePackageName(2), path, {
                    retries: 1
                });
            }, LocalResourceLoader.prototype.loadVisualPlugin = function(resourcePackage) {
                var _this = this, deferred = this.promiseFactory.defer();
                return resourcePackage && resourcePackage.items && 0 < resourcePackage.items.length ? this.loadResourcePackage(resourcePackage).then(function() {
                    var plugin = powerbi.visuals.plugins[resourcePackage.name];
                    plugin ? (plugin.iconUrl = _this.getIconUrl(resourcePackage), deferred.resolve(plugin)) : deferred.reject("Unable to load visual plugin from resource package");
                }).catch(function() {
                    deferred.reject("failed to resolve all promises");
                }) : deferred.resolve(null), deferred.promise;
            }, LocalResourceLoader.prototype.destroy = function() {}, LocalResourceLoader.prototype.loadVisualPlugins = function(resourcePackages) {
                var promises = [];
                if (resourcePackages) for (var _i = 0, resourcePackages_7 = resourcePackages; _i < resourcePackages_7.length; _i++) {
                    var resourcePackage = resourcePackages_7[_i];
                    promises.push(this.loadVisualPlugin(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, LocalResourceLoader.prototype.getIconUrl = function(resourcePackage) {
                var selector = "#css-" + resourcePackage.name, styleNode = $(selector)[0], styleSheet = _.find(document.styleSheets, function(styleSheet) {
                    return styleSheet.ownerNode === styleNode;
                });
                if (!styleSheet) return "";
                for (var i = 0; i < styleSheet.cssRules.length; i++) {
                    var cssRule = styleSheet.cssRules[i];
                    if (cssRule.selectorText && cssRule.selectorText === ".visual-icon." + resourcePackage.name) return cssRule.style.backgroundImage;
                }
                return "";
            }, LocalResourceLoader.prototype.loadCustomVisualResourcePackageItem = function(item, resourcePackage) {
                switch (item.type) {
                  case powerbi.contracts.ResourcePackageItemType.CustomVisualJavascript:
                    return this.loadCustomVisualJS(resourcePackage.id, resourcePackage.name, item);

                  case powerbi.contracts.ResourcePackageItemType.CustomVisualsCss:
                    return this.loadCustomVisualCss(resourcePackage.id, resourcePackage.name, item);

                  case powerbi.contracts.ResourcePackageItemType.CustomVisualMetadata:
                    return this.loadCustomVisualMetadata(resourcePackage.id, resourcePackage.name, item);
                }
            }, LocalResourceLoader.prototype.loadCustomVisualJS = function(resourcePackageId, name, item) {
                var _this = this, deferred = this.promiseFactory.defer();
                return item.content ? (visualHost.resourceInjector.injectJsCode(name, item.content), 
                deferred.resolve(item.content)) : (this.provider, this.provider.get(resourcePackageId, name, item.path, {
                    retries: 1
                }).then(function(result) {
                    visualHost.resourceInjector.injectJsCode(name, result), item.content = result, _this.transformPlugin(name).then(function() {
                        return deferred.resolve(result);
                    }, function(reason) {
                        return deferred.reject(reason);
                    });
                }).catch(function(err) {
                    deferred.reject(err);
                })), deferred.promise;
            }, LocalResourceLoader.prototype.transformPlugin = function(name) {
                var plugin = powerbi.visuals.plugins[name];
                return plugin ? (powerbi.extensibility.visualPluginAdapter.transformPlugin(plugin), 
                this.promiseFactory.resolve()) : this.promiseFactory.reject("Unable to load visual plugin from resource package: " + name);
            }, LocalResourceLoader.prototype.loadCustomVisualCss = function(resourcePackageId, name, item) {
                var deferred = this.promiseFactory.defer();
                return item.content ? (visualHost.resourceInjector.injectCssCode(name, item.content), 
                deferred.resolve(item.content)) : (this.provider, this.provider.get(resourcePackageId, name, item.path, {
                    retries: 1
                }).then(function(result) {
                    visualHost.resourceInjector.injectCssCode(name, result), item.content = result, 
                    deferred.resolve(result);
                }).catch(function(err) {
                    deferred.reject(err);
                })), deferred.promise;
            }, LocalResourceLoader.prototype.loadCustomVisualMetadata = function(resourcePackageId, name, item) {
                var _this = this, deferred = this.promiseFactory.defer();
                try {
                    item.content ? deferred.resolve(this.createPlugin(name, item.content)) : this.provider.get(resourcePackageId, name, item.path, {
                        retries: 1
                    }).then(function(result) {
                        item.content = result, deferred.resolve(_this.createPlugin(name, result));
                    }).catch(function(err) {
                        deferred.reject(err);
                    });
                } catch (err) {
                    deferred.reject(err);
                }
                return deferred.promise;
            }, LocalResourceLoader.prototype.createPlugin = function(name, plugin) {
                var existingPlugin = plugin;
                "object" != typeof plugin && (existingPlugin = JSON.parse(plugin));
                plugin = powerbi.visualHost.visualPluginUtility.createVisualPlugin(existingPlugin, this.locale, 0);
                powerbi.extensibility.visualPluginAdapter.transformPlugin(plugin);
                existingPlugin = powerbi.visuals.plugins[plugin.name];
                return existingPlugin && !existingPlugin.custom && (plugin.custom = !1), existingPlugin && (plugin.favoriteId = existingPlugin.favoriteId, 
                plugin.isOutOfBox = existingPlugin.isOutOfBox), powerbi.visuals.plugins[plugin.name] = plugin;
            }, LocalResourceLoader.prototype.loadBlob = function(resourcePackageId, name, item) {
                var deferred = this.promiseFactory.defer(this.telemetryV2Enabled);
                return item.contentBlob ? deferred.resolve(item.contentBlob) : item.promise ? item.promise.then(function(result) {
                    return deferred.resolve(result);
                }) : (item.promise = this.provider.getBlob(resourcePackageId, name, item.path, {
                    retries: 1
                }), item.promise.then(function(result) {
                    item.contentBlob = result, deferred.resolve(result);
                }).catch(function(err) {
                    deferred.reject(err);
                }).finally(function() {
                    delete item.promise;
                })), deferred.promise;
            }, __decorate([ MonitorWith(LocalResourceLoadResourcePackageItemEventName) ], LocalResourceLoader.prototype, "loadResourcePackageItem", null), 
            LocalResourceLoader;
        }();
        visualHost.LocalResourceLoader = LocalResourceLoader;
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(LocalizationResourceUtility) {
            function getLocalizedResources(pbivizJson, currentLocale) {
                currentLocale = getLocale(currentLocale);
                return pbivizJson && pbivizJson.stringResources ? pbivizJson.stringResources[currentLocale] : null;
            }
            function getLocale(currentLanguageLocale) {
                return {
                    ar: "ar-SA",
                    bg: "bg-BG",
                    ca: "ca-ES",
                    cs: "cs-CZ",
                    da: "da-DK",
                    de: "de-DE",
                    el: "el-GR",
                    "en-US": "en-US",
                    es: "es-ES",
                    et: "et-EE",
                    eu: "eu-ES",
                    fi: "fi-FI",
                    fr: "fr-FR",
                    gl: "gl-ES",
                    he: "he-IL",
                    hi: "hi-IN",
                    hr: "hr-HR",
                    hu: "hu-HU",
                    id: "id-ID",
                    it: "it-IT",
                    ja: "ja-JP",
                    kk: "kk-KZ",
                    ko: "ko-KR",
                    lt: "lt-LT",
                    lv: "lv-LV",
                    ms: "ms-MY",
                    no: "nb-NO",
                    nl: "nl-NL",
                    pl: "pl-PL",
                    br: "pt-BR",
                    pt: "pt-PT",
                    ro: "ro-RO",
                    ru: "ru-RU",
                    sk: "sk-SK",
                    si: "sl-SI",
                    "sr-Cyrl": "sr-Cyrl-RS",
                    "sr-Latn": "sr-Latn-RS",
                    sv: "sv-SE",
                    th: "th-TH",
                    tr: "tr-TR",
                    uk: "uk-UA",
                    vi: "vi-VN",
                    "zh-Hans": "zh-CN",
                    "zh-Hant": "zh-TW"
                }[currentLanguageLocale] || currentLanguageLocale || navigator.language;
            }
            LocalizationResourceUtility.setLocalizedCapabilities = function(pbivizJson, localizedResources) {
                var capabilities = pbivizJson.capabilities, localizedResources = getLocalizedResources(pbivizJson, localizedResources) || getLocalizedResources(pbivizJson, "en-US");
                return capabilities && localizedResources && function localizeDisplayNames(capabilitiesDescriptors, localizedResources) {
                    for (var objectName in capabilitiesDescriptors) {
                        var key;
                        capabilitiesDescriptors.hasOwnProperty(objectName) && ("object" == typeof capabilitiesDescriptors[objectName] ? localizeDisplayNames(capabilitiesDescriptors[objectName], localizedResources) : "displayNameKey" === objectName && capabilitiesDescriptors.displayName ? (key = capabilitiesDescriptors.displayNameKey, 
                        capabilitiesDescriptors.displayName = localizedResources[key] || capabilitiesDescriptors.displayName) : "descriptionKey" === objectName && capabilitiesDescriptors.description ? (key = capabilitiesDescriptors.descriptionKey, 
                        capabilitiesDescriptors.description = localizedResources[key] || capabilitiesDescriptors.description) : "placeHolderTextKey" === objectName && capabilitiesDescriptors.placeHolderText && (key = capabilitiesDescriptors.placeHolderTextKey, 
                        capabilitiesDescriptors.placeHolderText = localizedResources[key] || capabilitiesDescriptors.placeHolderText));
                    }
                }(capabilities, localizedResources), pbivizJson;
            }, LocalizationResourceUtility.getLocalizedResources = getLocalizedResources, LocalizationResourceUtility.getLocale = getLocale;
        }(visualHost.LocalizationResourceUtility || (visualHost.LocalizationResourceUtility = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var Lazy = jsCommon.Lazy, plugins = powerbi.visuals.plugins;
        !function(utils) {
            var unsupportedVisuals = [ "play", "subview", "smallMultiple" ], lightWeightRenderingVisuals = new Lazy(function() {
                var _a = {};
                return _a[plugins.card.name] = !0, _a[plugins.gauge.name] = !0, _a[plugins.image.name] = !0, 
                _a[plugins.kpi.name] = !0, _a[plugins.textbox.name] = !0, _a;
            });
            utils.isCustomVisual = function(plugin, pluginName) {
                return plugin ? !!plugin.custom : !_.includes(unsupportedVisuals, pluginName);
            }, utils.isScriptVisual = function(plugin) {
                return plugin && plugin.capabilities && plugin.capabilities.dataViewMappings && !!powerbi.ScriptResultUtil.findScriptResultMapping(plugin.capabilities.dataViewMappings);
            }, utils.isScriptVisualQueryable = function(visualType, featureSwitches) {
                return "pythonVisual" === visualType || !(!featureSwitches || !featureSwitches.scriptVisualEnabled);
            }, utils.isLightWeightRenderingVisual = function(plugin) {
                return !!plugin && !!lightWeightRenderingVisuals.getValue()[plugin.name];
            };
        }(visualHost.utils || (visualHost.utils = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(visualPluginServiceHelpers) {
            var VisualPluginStorage = function() {
                function VisualPluginStorage() {
                    this.visualPlugins = {}, this.loadedVisualPlugins = {};
                }
                return VisualPluginStorage.prototype.getLoadedPlugins = function() {
                    return _.map(this.loadedVisualPlugins, function(plugin) {
                        return plugin;
                    });
                }, VisualPluginStorage.prototype.getLoadedPlugin = function(pluginName) {
                    return this.loadedVisualPlugins[pluginName];
                }, VisualPluginStorage.prototype.hasPlugin = function(pluginName) {
                    return !!this.visualPlugins[pluginName];
                }, VisualPluginStorage.prototype.loadPlugin = function(pluginName, plugin) {
                    var existingPlugin;
                    plugin && (null != (existingPlugin = this.visualPlugins[pluginName]) && !0 !== existingPlugin.custom && !plugin.developerModeVisual || (this.visualPlugins[pluginName] = plugin)), 
                    this.loadedVisualPlugins[pluginName] = this.visualPlugins[pluginName];
                }, VisualPluginStorage.prototype.unloadPlugin = function(pluginName) {
                    delete this.loadedVisualPlugins[pluginName];
                }, VisualPluginStorage;
            }();
            visualPluginServiceHelpers.VisualPluginStorage = VisualPluginStorage, function(VisualPluginStorage) {
                VisualPluginStorage.ensurePlugin = function(storage, promiseFactory, resourceLoader, resourcePackage, forceLoadResources, telemetryService) {
                    var event_1, deferred = promiseFactory.defer();
                    return resourcePackage.name !== visualHost.PowerAppsVisual || resourcePackage.isPublic ? !forceLoadResources && storage.hasPlugin(resourcePackage.name) ? (storage.loadPlugin(resourcePackage.name), 
                    deferred.resolve(null)) : !forceLoadResources && powerbi.visuals.plugins[resourcePackage.name] ? (storage.loadPlugin(resourcePackage.name, powerbi.visuals.plugins[resourcePackage.name]), 
                    deferred.resolve(null)) : _.isEmpty(resourcePackage.items) ? deferred.reject("Resource package does not contain any items") : (telemetryService && (event_1 = telemetryService.startEvent(powerbi.telemetry.ApproveResourceLoadResourcePackage, {
                        resourcePackageName: resourcePackage.name
                    })), resourceLoader.loadResourcePackage(resourcePackage).catch(function(reason) {
                        resourcePackage.name;
                    }).finally(function() {
                        var plugin = powerbi.visuals.plugins[resourcePackage.name];
                        plugin ? (plugin.iconUrl || (plugin.iconUrl = visualHost.visualPluginServiceHelpers.getPluginIconUrl(resourcePackage.name)), 
                        storage.loadPlugin(plugin.name, plugin), deferred.resolve(null), event_1 && event_1.resolve()) : (deferred.reject("Unable to load visual plugin from resource package"), 
                        event_1 && event_1.reject());
                    })) : deferred.resolve(null), deferred.promise;
                }, VisualPluginStorage.ensureTrustedVisualPlugins = function(storage, plugins) {
                    for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {
                        var plugin = plugins_1[_i];
                        storage.loadPlugin(plugin.name, plugin);
                    }
                };
            }(visualPluginServiceHelpers.VisualPluginStorage || (visualPluginServiceHelpers.VisualPluginStorage = {}));
        }(visualHost.visualPluginServiceHelpers || (visualHost.visualPluginServiceHelpers = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var plugins = powerbi.visuals.plugins;
        !function(visualPluginServiceHelpers) {
            function applyFeatureSwitches(plugin, featureSwitches) {
                if (featureSwitches) switch (plugin.name) {
                  case plugins.actionButton.name:
                    plugin.capabilities = powerbi.visuals.getActionButtonCapabilites(featureSwitches);
                    break;

                  case plugins.scatterChart.name:
                    plugin.capabilities = powerbi.visuals.getScatterChartCapabilities(featureSwitches);
                    break;

                  case plugins.areaChart.name:
                    plugin.capabilities = powerbi.visuals.getLineChartCapabilities(!1, !0, featureSwitches);
                    break;

                  case plugins.lineChart.name:
                    plugin.capabilities = powerbi.visuals.getLineChartCapabilities(!1, !1, featureSwitches);
                    break;

                  case plugins.stackedAreaChart.name:
                    plugin.capabilities = powerbi.visuals.getLineChartCapabilities(!0, !0, featureSwitches);
                    break;

                  case plugins.waterfallChart.name:
                    plugin.capabilities = powerbi.visuals.getWaterfallChartCapabilities(featureSwitches);
                    break;

                  case plugins.comboChart.name:
                    plugin.capabilities = powerbi.visuals.getLegacyComboChartCapabilities(!1);
                    break;

                  case plugins.lineStackedColumnComboChart.name:
                    plugin.capabilities = powerbi.visuals.getComboChartCapabilities(!0, featureSwitches);
                    break;

                  case plugins.lineClusteredColumnComboChart.name:
                    plugin.capabilities = powerbi.visuals.getComboChartCapabilities(!1, featureSwitches);
                    break;

                  case plugins.columnChart.name:
                  case plugins.hundredPercentStackedColumnChart.name:
                    plugin.capabilities = powerbi.visuals.getColumnChartCapabilities(!1, !0, !1, featureSwitches);
                    break;

                  case plugins.barChart.name:
                  case plugins.hundredPercentStackedBarChart.name:
                    plugin.capabilities = powerbi.visuals.getColumnChartCapabilities(!0, !0, !1, featureSwitches);
                    break;

                  case plugins.clusteredBarChart.name:
                    plugin.capabilities = powerbi.visuals.getColumnChartCapabilities(!0, !1, !1, featureSwitches);
                    break;

                  case plugins.clusteredColumnChart.name:
                    plugin.capabilities = powerbi.visuals.getColumnChartCapabilities(!1, !1, !1, featureSwitches);
                    break;

                  case plugins.ribbonChart.name:
                    plugin.capabilities = powerbi.visuals.getColumnChartCapabilities(!1, !1, !0, featureSwitches);
                    break;

                  case plugins.pivotTable.name:
                    plugin.capabilities = powerbi.visuals.getPivotTableCapabilities(featureSwitches);
                    break;

                  case plugins.filledMap.name:
                    plugin.capabilities = powerbi.visuals.getFilledMapCapabilities(featureSwitches);
                    break;

                  case plugins.azureMap.name:
                    plugin.capabilities = powerbi.visuals.getAzureMapCapabilities(featureSwitches);
                    break;

                  case plugins.map.name:
                    plugin.capabilities = powerbi.visuals.getMapCapabilities(featureSwitches);
                    break;

                  case plugins.donutChart.name:
                  case plugins.pieChart.name:
                    plugin.capabilities = powerbi.visuals.getDonutChartCapabilities(featureSwitches);
                    break;

                  case plugins.kpi.name:
                    plugin.capabilities = powerbi.visuals.getKPIStatusWithHistoryCapabilities(featureSwitches);
                    break;

                  case plugins.funnel.name:
                    plugin.capabilities = powerbi.visuals.getFunnelChartCapabilities(featureSwitches);
                    break;

                  case plugins.shapeMap.name:
                    plugin.capabilities = powerbi.visuals.getShapeMapCapabilities();
                    break;

                  case plugins.table.name:
                    plugin.capabilities = powerbi.visuals.getTableCapabilities(featureSwitches);
                    break;

                  case plugins.tableEx.name:
                    plugin.capabilities = powerbi.visuals.getTableExCapabilities(featureSwitches);
                    break;

                  case plugins.treemap.name:
                    plugin.capabilities = powerbi.visuals.getTreemapCapabilities(featureSwitches);
                    break;

                  case plugins.slicer.name:
                    plugin.capabilities = powerbi.visuals.getSlicerCapabilities(featureSwitches);
                    break;

                  case plugins.keyDriversVisual.name:
                    plugin.capabilities = powerbi.visuals.getKeyDriversCapabilities();
                    break;

                  case plugins.decompositionTreeVisual.name:
                    plugin.capabilities = powerbi.visuals.getDecompositionTreeCapabilities(featureSwitches);
                }
            }
            visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches = function(basePlugin, create, featureSwitches, createES6) {
                return function(visualPlugin, create, createES6, modifyPluginFn) {
                    return (visualPlugin = powerbi.Prototype.inherit(visualPlugin)).create = create, 
                    visualPlugin.createES6 = createES6, modifyPluginFn && modifyPluginFn(visualPlugin), 
                    visualPlugin;
                }(basePlugin, create, createES6, function(plugin) {
                    return applyFeatureSwitches(plugin, featureSwitches);
                });
            }, visualPluginServiceHelpers.applyFeatureSwitches = applyFeatureSwitches, visualPluginServiceHelpers.getPluginIconUrl = function(pluginName) {
                var styleNode = $("#css-" + pluginName)[0], styleSheet = _.find(document.styleSheets, function(styleSheet) {
                    return styleSheet.ownerNode === styleNode;
                });
                if (styleSheet && styleSheet.cssRules) for (var i = 0; i < styleSheet.cssRules.length; i++) {
                    var cssRule = styleSheet.cssRules[i];
                    if (cssRule.selectorText && cssRule.selectorText === ".visual-icon." + pluginName) return cssRule.style.backgroundImage;
                }
                return "";
            };
        }(visualHost.visualPluginServiceHelpers || (visualHost.visualPluginServiceHelpers = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(visualPluginServiceHelpers) {
            visualPluginServiceHelpers.isVisualPluginLoaded = function(visualType) {
                return !!powerbi.visuals.plugins[visualType];
            }, visualPluginServiceHelpers.ensurePlugin = function(pluginName, pluginService, moduleLoader, promiseFactory, loadModule, telemetryV2Enabled, customVisualPromise) {
                var moduleLoadActivity;
                if (loadModule && loadModule.isRunning() && (moduleLoadActivity = loadModule.createChildActivity({
                    name: "Visual Container Module Load"
                })), loadModule = function() {
                    var plugin = pluginService.getPlugin(pluginName);
                    if (!plugin || !plugin.module) return moduleLoadActivity && (plugin ? moduleLoadActivity.resolve() : moduleLoadActivity.reject()), 
                    (telemetryV2Enabled ? powerbi.PbiPromise : promiseFactory).resolve(plugin);
                    if (plugin.createES6 && !plugin.module.css) return promiseFactory.resolve(plugin);
                    var module = {
                        javascript: plugin.createES6 ? void 0 : plugin.module.javascript,
                        css: plugin.module.css
                    };
                    return moduleLoader.require(module).then(function() {
                        return moduleLoadActivity && moduleLoadActivity.resolve(), plugin;
                    }, function() {
                        return moduleLoadActivity && moduleLoadActivity.reject(), null;
                    });
                }, customVisualPromise) {
                    customVisualPromise = customVisualPromise.ensureCustomVisual(pluginName);
                    if (customVisualPromise) return customVisualPromise.then(loadModule);
                }
                return loadModule();
            };
        }(visualHost.visualPluginServiceHelpers || (visualHost.visualPluginServiceHelpers = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var ResourcePackageUtils = powerbi.visualHost.utils.ResourcePackageUtils, VisualPluginStorage = visualHost.visualPluginServiceHelpers.VisualPluginStorage, createPivotTable = powerbi.visuals.createPivotTable, createTableEx = powerbi.visuals.createTableEx, createMatrix = powerbi.visuals.createMatrix, createTable = powerbi.visuals.createTable, createActionButton = powerbi.visuals.createActionButton, createCard = powerbi.visuals.createCard, createGauge = powerbi.visuals.createGauge, createDonutChart = powerbi.visuals.createDonutChart, createFunnelChart = powerbi.visuals.createFunnelChart, createMap = powerbi.visuals.createMap, createAzureMap = powerbi.visuals.createAzureMap, createSlicer = powerbi.visuals.createSlicer, createTextbox = powerbi.visuals.createTextbox, createAlwaysUseSmallViewportTextboxViewModelAdapter = powerbi.visuals.createAlwaysUseSmallViewportTextboxViewModelAdapter, createKpi = powerbi.visuals.createKpi, createDecompositionTree = powerbi.visuals.createDecompositionTree, createCartesianChart = powerbi.visuals.createCartesianChart, createRealTimeLineChartAnimator = powerbi.visuals.createRealTimeLineChartAnimator, createCartesianChartBehaviorFactory = powerbi.visuals.createCartesianChartBehaviorFactory, createScatterChartMobileBehaviorFactory = powerbi.visuals.createScatterChartMobileBehaviorFactory;
        visualHost.createMobileVisualPluginService = function(promiseFactory, resourceLoader, smallViewPortProperties, getFeatureSwitches) {
            return new MobileVisualPluginService(promiseFactory, resourceLoader, smallViewPortProperties, getFeatureSwitches);
        };
        var MobileVisualPluginService = function() {
            function MobileVisualPluginService(promiseFactory, resourceLoader, smallViewPortProperties, getFeatureSwitches) {
                var _this = this;
                this.promiseFactory = promiseFactory, this.resourceLoader = resourceLoader, this.trimOrdinalDataOnOverflow = !1, 
                this.properties = smallViewPortProperties || {
                    gaugeSmallViewPortProperties: {
                        hideGaugeSideNumbersOnSmallViewPort: !0,
                        smallGaugeMarginsOnSmallViewPort: !0,
                        MinHeightGaugeSideNumbersVisible: MobileVisualPluginService.MinHeightGaugeSideNumbersVisible,
                        GaugeMarginsOnSmallViewPort: MobileVisualPluginService.GaugeMarginsOnSmallViewPort
                    },
                    funnelSmallViewPortProperties: {
                        hideFunnelCategoryLabelsOnSmallViewPort: !0,
                        minHeightFunnelCategoryLabelsVisible: MobileVisualPluginService.MinHeightFunnelCategoryLabelsVisible
                    },
                    donutSmallViewPortProperties: {
                        maxHeightToScaleDonutLegend: MobileVisualPluginService.MaxHeightToScaleDonutLegend
                    },
                    cardSmallViewportProperties: null
                };
                var mapThrottleInterval = this.getMapThrottleInterval();
                if (this.storage = new VisualPluginStorage(), getFeatureSwitches) this.initBuiltInPlugins = getFeatureSwitches().then(function(featureSwitches) {
                    for (var pluginName in _this.featureSwitches = featureSwitches, powerbi.visuals.plugins) _this.storage.loadPlugin(pluginName, getMobilePlugin(pluginName, featureSwitches, _this.trimOrdinalDataOnOverflow, mapThrottleInterval, _this.properties));
                }); else {
                    for (var pluginName in powerbi.visuals.plugins) this.storage.loadPlugin(pluginName, getMobilePlugin(pluginName, void 0, this.trimOrdinalDataOnOverflow, mapThrottleInterval, this.properties));
                    this.initBuiltInPlugins = promiseFactory.resolve(null);
                }
            }
            return MobileVisualPluginService.prototype.getVisuals = function() {
                return this.storage.getLoadedPlugins();
            }, MobileVisualPluginService.prototype.getPlugin = function(pluginName) {
                var plugin = this.storage.getLoadedPlugin(pluginName);
                return !plugin && powerbi.visuals.plugins[pluginName] && (this.storage.loadPlugin(pluginName, getMobilePlugin(pluginName, this.featureSwitches, this.trimOrdinalDataOnOverflow, this.getMapThrottleInterval(), this.properties)), 
                plugin = this.storage.getLoadedPlugin(pluginName)), plugin;
            }, MobileVisualPluginService.prototype.capabilities = function(plugin) {
                plugin = this.getPlugin(plugin);
                return plugin ? plugin.capabilities : void 0;
            }, MobileVisualPluginService.prototype.ensureBuiltInPlugins = function() {
                return this.initBuiltInPlugins;
            }, MobileVisualPluginService.prototype.ensurePlugins = function(resourcePackages) {
                this.promiseFactory;
                var promises = [];
                if (resourcePackages && resourcePackages.length) for (var _i = 0, resourcePackages_8 = resourcePackages; _i < resourcePackages_8.length; _i++) {
                    var resourcePackage = resourcePackages_8[_i];
                    ResourcePackageUtils.isCustomVisualResourcePackage(resourcePackage) && promises.push(this.ensurePlugin(resourcePackage));
                }
                return this.promiseFactory.allSettled(promises);
            }, MobileVisualPluginService.prototype.ensurePlugin = function(resourcePackage) {
                return VisualPluginStorage.ensurePlugin(this.storage, this.promiseFactory, this.resourceLoader, resourcePackage);
            }, MobileVisualPluginService.prototype.ensureTrustedVisualPlugins = function(plugins) {
                VisualPluginStorage.ensureTrustedVisualPlugins(this.storage, plugins);
            }, MobileVisualPluginService.prototype.requireSandbox = function(plugin) {
                return visualHost.utils.isCustomVisual(plugin);
            }, MobileVisualPluginService.prototype.isCustomVisual = function(pluginName) {
                return visualHost.utils.isCustomVisual(this.getPlugin(pluginName), pluginName);
            }, MobileVisualPluginService.prototype.isScriptVisual = function(pluginName) {
                return visualHost.utils.isScriptVisual(this.getPlugin(pluginName));
            }, MobileVisualPluginService.prototype.isScriptVisualQueryable = function(visualType) {
                return visualHost.utils.isScriptVisualQueryable(visualType, this.featureSwitches);
            }, MobileVisualPluginService.prototype.isLightWeightRenderingVisual = function(pluginName) {
                return visualHost.utils.isLightWeightRenderingVisual(this.getPlugin(pluginName));
            }, MobileVisualPluginService.prototype.getMapThrottleInterval = function() {
                if (-1 !== navigator.userAgent.toLowerCase().indexOf("windows phone")) return 100;
            }, MobileVisualPluginService.prototype.getInteractivityOptions = function(visualType) {
                return {
                    overflow: this.getMobileOverflowString(visualType),
                    isInteractiveLegend: this.isChartSupportInteractivity(visualType),
                    selection: !0,
                    isVisualInteractive: !0
                };
            }, MobileVisualPluginService.prototype.getTelemetryHostInformation = function() {
                return {
                    name: "MobileTileHost"
                };
            }, MobileVisualPluginService.prototype.getMobileOverflowString = function(visualType) {
                return "multiRowCard" !== visualType ? "hidden" : "visible";
            }, MobileVisualPluginService.prototype.isChartSupportInteractivity = function(visualType) {
                switch (visualType) {
                  case "areaChart":
                  case "barChart":
                  case "clusteredBarChart":
                  case "clusteredColumnChart":
                  case "columnChart":
                  case "donutChart":
                  case "hundredPercentStackedBarChart":
                  case "hundredPercentStackedColumnChart":
                  case "lineChart":
                  case "pieChart":
                  case "scatterChart":
                  case "table":
                  case "matrix":
                  case "multiRowCard":
                    return !0;

                  default:
                    return !1;
                }
            }, MobileVisualPluginService.prototype.getStorage = function() {
                return this.storage;
            }, MobileVisualPluginService.MinHeightGaugeSideNumbersVisible = 80, MobileVisualPluginService.GaugeMarginsOnSmallViewPort = 10, 
            MobileVisualPluginService.MinHeightFunnelCategoryLabelsVisible = 80, MobileVisualPluginService.MaxHeightToScaleDonutLegend = 300, 
            MobileVisualPluginService;
        }();
        function getMobilePlugin(pluginName, featureSwitches, trimOrdinalDataOnOverflow, mapThrottleInterval, smallViewPortProperties) {
            var _this = this, touchScreenOptimizedTooltips = (featureSwitches = featureSwitches ? _.clone(featureSwitches) : {}).touchScreenOptimizedTooltips;
            switch (pluginName) {
              case powerbi.visuals.plugins.areaChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.areaChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 1,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 1,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.barChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.barChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 6,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 6,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.clusteredBarChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.clusteredBarChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 5,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 5,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.clusteredColumnChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.clusteredColumnChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 3,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 3,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.columnChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.columnChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 4,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 4,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.comboChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.comboChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 11,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 11,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.dataDotChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.dataDotChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 12,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 12,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.dataDotClusteredColumnComboChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.dataDotClusteredColumnComboChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 16,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 16,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.dataDotStackedColumnComboChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.dataDotStackedColumnComboChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 17,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 17,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.hundredPercentStackedBarChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.hundredPercentStackedBarChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 7,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 7,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.hundredPercentStackedColumnChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.hundredPercentStackedColumnChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 8,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 8,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.stackedAreaChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.stackedAreaChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 2,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 2,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.waterfallChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.waterfallChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 13,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips,
                        featureSwitches: featureSwitches
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 13,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips,
                        featureSwitches: featureSwitches
                    });
                } : void 0);

              case powerbi.visuals.plugins.realTimeLineChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.realTimeLineChart, function(cartesianModule) {
                    cartesianModule = cartesianModule.module;
                    return cartesianModule.createCartesianChart({
                        chartType: 18,
                        animator: cartesianModule.createRealTimeLineChartAnimator(),
                        animateCategoryAxis: !0,
                        animateValueAxis: !0,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return __awaiter(_this, void 0, void 0, function() {
                        var _a, _b;
                        return __generator(this, function(_c) {
                            switch (_c.label) {
                              case 0:
                                return _a = createCartesianChart, _b = {
                                    chartType: 18
                                }, [ 4, createRealTimeLineChartAnimator() ];

                              case 1:
                                return [ 2, _a.apply(void 0, [ (_b.animator = _c.sent(), _b.animateCategoryAxis = !0, 
                                _b.animateValueAxis = !0, _b.tooltipsEnabled = touchScreenOptimizedTooltips, _b) ]) ];
                            }
                        });
                    });
                } : void 0);

              case powerbi.visuals.plugins.lineChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.lineChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 0,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 0,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.lineClusteredColumnComboChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.lineClusteredColumnComboChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 14,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 14,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.lineStackedColumnComboChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.lineStackedColumnComboChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 15,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 15,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.scatterChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.scatterChart, function(cartesianModule) {
                    cartesianModule = cartesianModule.module;
                    return cartesianModule.createCartesianChart({
                        chartType: 10,
                        behaviorFactory: cartesianModule.createCartesianChartBehaviorFactory([ cartesianModule.createScatterChartMobileBehaviorFactory() ], featureSwitches),
                        tooltipsEnabled: touchScreenOptimizedTooltips,
                        featureSwitches: featureSwitches
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return __awaiter(_this, void 0, void 0, function() {
                        var _a, _b, _c;
                        return __generator(this, function(_d) {
                            switch (_d.label) {
                              case 0:
                                return _a = createCartesianChart, _c = {
                                    chartType: 10
                                }, _b = createCartesianChartBehaviorFactory, [ 4, createScatterChartMobileBehaviorFactory() ];

                              case 1:
                                return [ 4, _b.apply(void 0, [ [ _d.sent() ], featureSwitches ]) ];

                              case 2:
                                return [ 2, _a.apply(void 0, [ (_c.behaviorFactory = _d.sent(), _c.tooltipsEnabled = touchScreenOptimizedTooltips, 
                                _c.featureSwitches = featureSwitches, _c) ]) ];
                            }
                        });
                    });
                } : void 0);

              case powerbi.visuals.plugins.gauge.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.gauge, function(options) {
                    return options.module.createGauge({
                        gaugeSmallViewPortProperties: smallViewPortProperties.gaugeSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    }, featureSwitches);
                }, featureSwitches, createGauge ? function() {
                    return createGauge({
                        gaugeSmallViewPortProperties: smallViewPortProperties.gaugeSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.funnel.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.funnel, function() {
                    return new powerbi.visuals.FunnelChart({
                        animator: null,
                        funnelSmallViewPortProperties: smallViewPortProperties.funnelSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createFunnelChart ? function() {
                    return createFunnelChart({
                        animator: null,
                        funnelSmallViewPortProperties: smallViewPortProperties.funnelSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.donutChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.donutChart, function() {
                    return new powerbi.visuals.DonutChart({
                        disableGeometricCulling: !0,
                        smallViewPortProperties: smallViewPortProperties.donutSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createDonutChart ? function() {
                    return createDonutChart({
                        disableGeometricCulling: !0,
                        smallViewPortProperties: smallViewPortProperties.donutSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.pieChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.pieChart, function() {
                    return new powerbi.visuals.DonutChart({
                        sliceWidthRatio: 0,
                        disableGeometricCulling: !0,
                        smallViewPortProperties: smallViewPortProperties.donutSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createDonutChart ? function() {
                    return createDonutChart({
                        sliceWidthRatio: 0,
                        disableGeometricCulling: !0,
                        smallViewPortProperties: smallViewPortProperties.donutSmallViewPortProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.ribbonChart.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.ribbonChart, function(options) {
                    return options.module.createCartesianChart({
                        chartType: 9,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createCartesianChart ? function() {
                    return createCartesianChart({
                        chartType: 9,
                        trimOrdinalDataOnOverflow: trimOrdinalDataOnOverflow,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.matrix.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.matrix, function() {
                    return new powerbi.visuals.Matrix();
                }, featureSwitches, createMatrix ? function() {
                    return createMatrix();
                } : void 0);

              case powerbi.visuals.plugins.table.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.table, function() {
                    return new powerbi.visuals.Table();
                }, featureSwitches, createTable ? function() {
                    return createTable();
                } : void 0);

              case powerbi.visuals.plugins.pivotTable.name:
                var pivotTableOptions_1 = powerbi.visuals.PivotTableOptions.createMobileConstructorOptions();
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.pivotTable, function() {
                    return new powerbi.visuals.PivotTable(pivotTableOptions_1, featureSwitches);
                }, featureSwitches, createPivotTable ? function() {
                    return createPivotTable(pivotTableOptions_1, featureSwitches);
                } : void 0);

              case powerbi.visuals.plugins.tableEx.name:
                var tableExOptions_1 = powerbi.visuals.TableExOptions.createMobileConstructorOptions();
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.tableEx, function() {
                    return new powerbi.visuals.TableEx(tableExOptions_1, featureSwitches);
                }, featureSwitches, createTableEx ? function() {
                    return createTableEx(tableExOptions_1, featureSwitches);
                } : void 0);

              case powerbi.visuals.plugins.map.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.map, function() {
                    return new powerbi.visuals.Map({
                        viewChangeThrottleInterval: mapThrottleInterval,
                        enableCurrentLocation: !!featureSwitches && featureSwitches.mapCurrentLocationEnabled,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createMap ? function() {
                    return createMap({
                        viewChangeThrottleInterval: mapThrottleInterval,
                        enableCurrentLocation: !!featureSwitches && featureSwitches.mapCurrentLocationEnabled,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.filledMap.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.filledMap, function() {
                    return new powerbi.visuals.Map({
                        filledMap: !0,
                        viewChangeThrottleInterval: mapThrottleInterval,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createMap ? function() {
                    return createMap({
                        filledMap: !0,
                        viewChangeThrottleInterval: mapThrottleInterval,
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.azureMap.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.azureMap, function(options) {
                    return options.module.createAzureMap({
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                }, featureSwitches, createAzureMap ? function() {
                    return createAzureMap({
                        tooltipsEnabled: touchScreenOptimizedTooltips
                    });
                } : void 0);

              case powerbi.visuals.plugins.actionButton.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.actionButton, function(options) {
                    return new options.module.ActionButton();
                }, featureSwitches, createActionButton ? function() {
                    return createActionButton();
                } : void 0);

              case powerbi.visuals.plugins.card.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.card, function(options) {
                    return options.module.createCard({
                        cardSmallViewportProperties: smallViewPortProperties.cardSmallViewportProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips,
                        featureSwitches: featureSwitches
                    });
                }, featureSwitches, createCard ? function() {
                    return createCard({
                        cardSmallViewportProperties: smallViewPortProperties.cardSmallViewportProperties,
                        tooltipsEnabled: touchScreenOptimizedTooltips,
                        featureSwitches: featureSwitches
                    });
                } : void 0);

              case powerbi.visuals.plugins.textbox.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.textbox, function(textboxModule) {
                    textboxModule = textboxModule.module;
                    return textboxModule.createTextbox({
                        viewModelAdapter: textboxModule.createAlwaysUseSmallViewportTextboxViewModelAdapter(),
                        supportsNarrativeExpressions: featureSwitches.daxTransformEnabled
                    });
                }, featureSwitches, createTextbox ? function() {
                    return __awaiter(_this, void 0, void 0, function() {
                        var _a, _b;
                        return __generator(this, function(_c) {
                            switch (_c.label) {
                              case 0:
                                return _a = createTextbox, _b = {}, [ 4, createAlwaysUseSmallViewportTextboxViewModelAdapter() ];

                              case 1:
                                return [ 2, _a.apply(void 0, [ (_b.viewModelAdapter = _c.sent(), _b.supportsNarrativeExpressions = featureSwitches.daxTransformEnabled, 
                                _b) ]) ];
                            }
                        });
                    });
                } : void 0);

              case powerbi.visuals.plugins.slicer.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.slicer, function() {
                    return new powerbi.visuals.Slicer({
                        featureSwitches: featureSwitches
                    });
                }, featureSwitches, createSlicer ? function() {
                    return createSlicer({
                        featureSwitches: featureSwitches
                    });
                } : void 0);

              case powerbi.visuals.plugins.kpi.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.kpi, function() {
                    return new powerbi.visuals.KPIStatusWithHistory({
                        interactivityEnabled: !0
                    }, featureSwitches);
                }, featureSwitches, createKpi ? function() {
                    return createKpi({
                        interactivityEnabled: !0
                    });
                } : void 0);

              case powerbi.visuals.plugins.decompositionTreeVisual.name:
                return visualHost.visualPluginServiceHelpers.getPluginCopyWithFeatureSwitches(powerbi.visuals.plugins.decompositionTreeVisual, function(options) {
                    return new options.module.DecompositionTree();
                }, featureSwitches, createDecompositionTree ? function() {
                    return createDecompositionTree();
                } : void 0);

              default:
                return powerbi.Prototype.inherit(powerbi.visuals.plugins[pluginName]);
            }
        }
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var Version = jsCommon.Version;
        !function(resourceInjector) {
            resourceInjector.injectJsCode = function(scriptName, scriptContent, isolate, apiVersion) {
                void 0 === isolate && (isolate = !1), void 0 === apiVersion && (apiVersion = null);
                var minApiVersion = {
                    major: 1,
                    minor: 8,
                    patch: 0
                }, script = document.createElement("script");
                isolate ? apiVersion && Version.gt(apiVersion, minApiVersion) || Version.eq(apiVersion, minApiVersion) ? script.innerHTML = "\n                (function(powerbi) {\n                    var window = this;\n\n                    //These 2 lines are needed to trick lodash into using this as global scope\n                    var self = this;\n                    self.Object = Object;\n\n                    //de-reference powerbi loaded modules\n                    var $, jQuery, _;\n                    window.jQuery = window.$ = undefined;\n                    window._ = undefined;\n\n                    " + scriptContent + ";\n\n                    //overwrite global variables with window values for PowerBI libraries\n                    $ = jQuery = window.$;\n                    _ = window._\n                }).call(\n                    //generate isolated clone of window object\n                    (function(w) {\n                        var wKeys = Object.getOwnPropertyNames(w);\n                        var nextW = w;\n                        while ((nextW = Object.getPrototypeOf(nextW))) {\n                            wKeys = wKeys.concat(Object.getOwnPropertyNames(nextW));\n                        }\n                        var newWindow = Object.create(w);\n                        //rebuild some of the window properties so they work correctly\n                        for (var i = 0; i < wKeys.length; i++) {\n                            try {\n                                var key = wKeys[i];\n                                var item = w[key];\n                                //rebind native functions to proper window context\n                                if (typeof item === 'function') {\n                                    if ((/\\{\\s*\\[native code\\]\\s*\\}/).test('' + Function.prototype.toString.call(item))) {\n                                        newWindow[key] = item.bind(w);\n                                        //remap prototype\n                                        newWindow[key].prototype = item.prototype;\n                                        //remap own properties\n                                        var fKeys = Object.getOwnPropertyNames(item);\n                                        for (var j = 0; j < fKeys.length; j++) {\n                                            var fKey = fKeys[j];\n                                            if(fKey === 'arguments' || fKey === 'caller') continue;\n                                            try {\n                                                newWindow[key][fKey] = item[fKey];\n                                            } catch (e) { /* catch protected function properties */}\n                                        }\n                                    }\n                                //map getters to proper context (needed for firefox only)\n                                } else if (typeof item === 'object') {\n                                \t\tif (key ===\"window\" || key === \"self\"){\n                                            Object.defineProperty(newWindow, key, {\n                                                get: (function(newWindow) {\n                                                    return function() {\n                                                        return newWindow;\n                                                    }\n                                                })(newWindow),\n                                                set: function() { }\n                                        });\n                                    } else {\n                                        Object.defineProperty(newWindow, key, {\n                                            get: (function(item) {\n                                                return function() {\n                                                    return item;\n                                                }\n                                            })(item),\n                                            set: function() { }\n                                        });\n                                    }\n                                } else if (typeof item === 'number' || typeof item === 'boolean' || typeof item === 'string') {\n                                      Object.defineProperty(newWindow, key, {\n                                          get: (function(w, keyString) {\n                                              return function() {\n                                                  return w[keyString];\n                                              }\n                                          })(w, key.toString()),\n                                          set: (function(w, keyString) {\n                                              return function(newValue) {\n                                                  w[keyString] = newValue;\n                                              }\n                                          })(w, key.toString())\n                                      });\n                                }\n                            } catch (e) { /* catch sandbox security exceptions */ }\n                        }\n                        return newWindow;\n                    })(window),\n                    powerbi || (powerbi = {})\n                );\n            " : script.innerHTML = "\n                (function(powerbi) {\n                    var window = this;\n\n                    //These 2 lines are needed to trick lodash into using this as global scope\n                    var self = this;\n                    self.Object = Object;\n\n                    //de-reference powerbi loaded modules\n                    var $, jQuery, _;\n                    window.jQuery = window.$ = undefined;\n                    window._ = undefined;\n\n                    " + scriptContent + ";\n\n                    //overwrite global variables with window values for PowerBI libraries\n                    $ = jQuery = window.$;\n                    _ = window._\n                }).call(\n                    //generate isolated clone of window object\n                    (function(w) {\n                        var wKeys = Object.getOwnPropertyNames(w);\n                        var nextW = w;\n                        while ((nextW = Object.getPrototypeOf(nextW))) {\n                            wKeys = wKeys.concat(Object.getOwnPropertyNames(nextW));\n                        }\n                        var newWindow = Object.create(w);\n                        //rebuild some of the window properties so they work correctly\n                        for (var i = 0; i < wKeys.length; i++) {\n                            try {\n                                var key = wKeys[i];\n                                var item = w[key];\n                                //rebind native functions to proper window context\n                                if (typeof item === 'function') {\n                                    if ((/\\{\\s*\\[native code\\]\\s*\\}/).test('' + Function.prototype.toString.call(item))) {\n                                        newWindow[key] = item.bind(w);\n                                        //remap prototype\n                                        newWindow[key].prototype = item.prototype;\n                                        //remap own properties\n                                        var fKeys = Object.getOwnPropertyNames(item);\n                                        for (var j = 0; j < fKeys.length; j++) {\n                                            var fKey = fKeys[j];\n                                            if(fKey === 'arguments' || fKey === 'caller') continue;\n                                            try {\n                                                newWindow[key][fKey] = item[fKey];\n                                            } catch (e) { /* catch protected function properties */}\n                                        }\n                                    }\n                                //map getters to proper context (needed for firefox only)\n                                } else if (typeof item === 'object') {\n                                    Object.defineProperty(newWindow, key, {\n                                        get: (function(item) {\n                                            return function() {\n                                                return item;\n                                            }\n                                        })(item),\n                                        set: function() { }\n                                    });\n                                }\n                            } catch (e) { /* catch sandbox security exceptions */ }\n                        }\n                        return newWindow;\n                    })(window),\n                    powerbi || (powerbi = {})\n                );\n            " : script.innerHTML = scriptContent, 
                script.id = "js-" + scriptName, script.setAttribute("name", scriptName), document.body.appendChild(script);
            }, resourceInjector.injectCssCode = function(stylesheetName, style) {
                (style = $("<style></style>", {
                    html: style,
                    id: "css-" + stylesheetName
                })).attr("name", stylesheetName), $("head").append(style);
            }, resourceInjector.injectJsUrl = function(promiseFactory, scriptName, scriptUrl) {
                var deferred = promiseFactory.defer();
                return $.ajax({
                    url: scriptUrl,
                    dataType: "script",
                    cache: !0,
                    success: function() {
                        return deferred.resolve(null);
                    },
                    error: function(jqxhr, textStatus, exception) {
                        return deferred.reject(exception);
                    },
                    timeout: visualHost.resourceLoaderHttpTimeout
                }), deferred.promise;
            }, resourceInjector.injectCssUrl = function(promiseFactory, stylesheetName, stylesheetUrl) {
                var deferred = promiseFactory.defer(), httpTimeout = setTimeout(function() {
                    return deferred.reject("Timeout");
                }, visualHost.resourceLoaderHttpTimeout);
                return $("<link>", {
                    id: "css-" + stylesheetName,
                    type: "text/css",
                    rel: "stylesheet",
                    href: stylesheetUrl,
                    crossorigin: "anonymous"
                }).on("load", function(event) {
                    clearTimeout(httpTimeout), deferred.resolve(null);
                }).on("error", function(err) {
                    clearTimeout(httpTimeout), deferred.reject(err);
                }).appendTo($("head")), deferred.promise;
            }, resourceInjector.getInjectedIconUrl = function(resourcePackageName) {
                var styleNode = $("#css-" + resourcePackageName)[0], styleSheet = _.find(document.styleSheets, function(styleSheet) {
                    return styleSheet.ownerNode === styleNode;
                });
                if (styleSheet && styleSheet.cssRules) for (var i = 0; i < styleSheet.cssRules.length; i++) {
                    var cssRule = styleSheet.cssRules[i];
                    if (cssRule.selectorText && _.includes(cssRule.selectorText, resourcePackageName)) return cssRule.style.backgroundImage;
                }
                return "";
            };
        }(visualHost.resourceInjector || (visualHost.resourceInjector = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var ResourcePackageUtils = visualHost.utils.ResourcePackageUtils;
        visualHost.createResourcePackagesService = function() {
            return new ResourcePackagesService();
        };
        var ResourcePackagesService = function() {
            function ResourcePackagesService() {
                this.resourcePackageNameIdLookupTable = {}, this.packages = [ {
                    id: void 0,
                    name: visualHost.ResourcePackageName.SharedResources,
                    type: 2,
                    items: []
                } ];
            }
            return ResourcePackagesService.prototype.getAllPackages = function() {
                return this.packages;
            }, ResourcePackagesService.prototype.registerPackages = function(packages) {
                if (packages) for (var _i = 0, packages_1 = packages; _i < packages_1.length; _i++) {
                    var clonedRP, resourcePackage = packages_1[_i];
                    !resourcePackage.items || 0 === resourcePackage.items.length || 3 === resourcePackage.type && resourcePackage.disabled || (this.resourcePackageNameIdLookupTable[resourcePackage.id] = resourcePackage.name, 
                    (clonedRP = ResourcePackageUtils.findResourcePackage(this.packages, resourcePackage.type, resourcePackage.name)) ? ResourcePackageUtils.isStaticResource(resourcePackage) ? ResourcePackageUtils.mergeStaticResourcePackages(clonedRP, resourcePackage) : _.merge(clonedRP, resourcePackage) : ((clonedRP = _.clone(resourcePackage)).items = _.clone(resourcePackage.items), 
                    this.packages.push(clonedRP)));
                }
            }, ResourcePackagesService.prototype.getPackage = function(name) {
                return _.find(this.packages, function(rp) {
                    return rp.name === name;
                });
            }, ResourcePackagesService.prototype.delete = function(name) {
                _.remove(this.packages, function(rp) {
                    return rp.name === name;
                });
            }, ResourcePackagesService.prototype.getPackageById = function(resourcePkgName) {
                resourcePkgName = this.resourcePackageNameIdLookupTable[resourcePkgName];
                return resourcePkgName && this.getPackage(resourcePkgName);
            }, ResourcePackagesService.prototype.clear = function() {
                this.packages = [], this.resourcePackageNameIdLookupTable = {};
            }, ResourcePackagesService;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var ResourceLoaderEvents, ResourcePackageItemType = powerbi.contracts.ResourcePackageItemType, ResourcePackageUtils = powerbi.visualHost.utils.ResourcePackageUtils, lt = jsCommon.Version.lt;
        visualHost.createSandboxResourceLoader = function(resourceLoaderConstructionOptions, messageProxy, sandboxLoaderUri, httpProvider, approvedResourceService) {
            return new SandboxResourceLoader(resourceLoaderConstructionOptions, messageProxy, sandboxLoaderUri, httpProvider, approvedResourceService);
        }, function(ResourceLoaderEvents) {
            ResourceLoaderEvents.loadResourcePackage = "loadResourcePackage", ResourceLoaderEvents.loadVisualPlugin = "loadVisualPlugin", 
            ResourceLoaderEvents.loadVisualPluginWithContent = "loadVisualPluginWithContent", 
            ResourceLoaderEvents.onVisualPluginLoad = "onVisualPluginLoad", ResourceLoaderEvents.onResourcePackageLoad = "onResourcePackageLoad", 
            ResourceLoaderEvents.onVisualPluginLoadError = "onVisualPluginLoadError", ResourceLoaderEvents.onResourcePackageLoadError = "onResourcePackageLoadError";
        }(ResourceLoaderEvents = ResourceLoaderEvents || {});
        var SandboxResourceLoader = function(_super) {
            function SandboxResourceLoader(resourceLoaderConstructionOptions, messageProxy, sandboxLoaderUri, provider, approvedResourceService) {
                var _this = _super.call(this, resourceLoaderConstructionOptions, provider, null) || this;
                return resourceLoaderConstructionOptions.promiseFactory, _this.approvedResourceService = approvedResourceService, 
                _this.locale = resourceLoaderConstructionOptions && resourceLoaderConstructionOptions.locale, 
                _this.promiseFactory = resourceLoaderConstructionOptions.promiseFactory, _this.messageProxy = messageProxy, 
                _this.sandboxLoaderUri = sandboxLoaderUri, _this.provider = provider, _this.initIFrame(), 
                _this;
            }
            return __extends(SandboxResourceLoader, _super), SandboxResourceLoader.prototype.loadResourcePackage = function(resourcePackage, isOrganizational) {
                return ResourcePackageUtils.isCustomVisualResourcePackage(resourcePackage), this.loadVisualPlugin(resourcePackage, isOrganizational);
            }, SandboxResourceLoader.prototype.loadResourcePackages = function(resourcePackages) {
                for (var promises = [], _i = 0, resourcePackages_9 = resourcePackages; _i < resourcePackages_9.length; _i++) {
                    var resourcePackage = resourcePackages_9[_i];
                    promises.push(this.loadResourcePackage(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, SandboxResourceLoader.prototype.loadTrustedResourcePackages = function(trustedResourcePackages) {
                return this.promiseFactory.reject();
            }, SandboxResourceLoader.prototype.loadSharedResource = function(path) {
                return this.promiseFactory.reject();
            }, SandboxResourceLoader.prototype.loadVisualPlugin = function(resourcePackage, isOrganizational) {
                var _this = this, deferred = this.promiseFactory.defer();
                return this.loadResourcesContent(resourcePackage).then(function(visualMetadataItem) {
                    if (visualMetadataItem && !_.isEmpty(visualMetadataItem)) {
                        var message = _.keyBy(visualMetadataItem, "type"), visualMetadataItem = message[powerbi.contracts.ResourcePackageItemType.CustomVisualMetadata];
                        if (visualMetadataItem) try {
                            var json = jsCommon.JsonExtensions.tryParseJSON(visualMetadataItem.content), plugin = visualHost.visualPluginUtility.createVisualPlugin(json, _this.locale, isOrganizational ? 1 : 0);
                            powerbi.extensibility.visualPluginAdapter.transformPlugin(plugin);
                            var existingPlugin = powerbi.visuals.plugins[plugin.name];
                            existingPlugin && (plugin.favoriteId = existingPlugin.favoriteId, plugin.isOutOfBox = existingPlugin.isOutOfBox), 
                            plugin.developerModeVisual = resourcePackage.developerModeVisual, plugin.apiVersion && lt(plugin.apiVersion, visualHost.CustomVisualDeprecatedAPI) && (plugin.isDeprecated = !0), 
                            powerbi.visuals.plugins[plugin.name] = plugin, deferred.resolve(plugin);
                        } catch (err) {
                            deferred.reject(err);
                        } else {
                            message = {
                                pluginName: resourcePackage.name,
                                mappedPluginContent: message
                            }, message = {
                                eventName: ResourceLoaderEvents.loadVisualPluginWithContent,
                                arguments: [ message ]
                            };
                            _this.messageProxy.postMessageAsync(message).then(function(wireDescriptors) {
                                var plugin = wireDescriptors, wireDescriptors = powerbi.visuals.plugins[plugin.name];
                                wireDescriptors && !wireDescriptors.custom || (plugin.custom = !0, wireDescriptors = plugin.capabilities.objects, 
                                plugin.capabilities.objects = powerbi.data.services.DataViewObjectDescriptorSerializer.deserialize(wireDescriptors), 
                                powerbi.extensibility.visualPluginAdapter.transformPlugin(plugin), _this.approvedResourceService && _this.approvedResourceService.isApprovedVisualsDefined() && (plugin.isDeprecated = !0), 
                                powerbi.visuals.plugins[plugin.name] = plugin, deferred.resolve(plugin));
                            }).catch(function(err) {
                                deferred.reject(err);
                            });
                        }
                    } else deferred.resolve(null);
                }).catch(function(err) {
                    deferred.reject(err);
                }), deferred.promise;
            }, SandboxResourceLoader.prototype.loadVisualPlugins = function(resourcePackages) {
                var promises = [];
                if (resourcePackages) for (var _i = 0, resourcePackages_10 = resourcePackages; _i < resourcePackages_10.length; _i++) {
                    var resourcePackage = resourcePackages_10[_i];
                    promises.push(this.loadVisualPlugin(resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, SandboxResourceLoader.prototype.destroy = function() {
                this.iframe.remove(), this.iframe = null, this.messageProxy.destroy(), this.messageProxy = null, 
                this.contentWindow = null;
            }, SandboxResourceLoader.prototype.initIFrame = function() {
                var _this = this, iframeSource = this.sandboxLoaderUri;
                jsCommon.QueryStringUtil.getQueryStringValue("unmin") && (iframeSource += "?unmin=1"), 
                this.iframe = $('<iframe class="sandbox-resource-loader ng-hide" sandbox="allow-scripts"></iframe>').attr("src", iframeSource).one("load", function() {
                    return _this.onIFrameLoad();
                }).appendTo(document.body);
            }, SandboxResourceLoader.prototype.onIFrameLoad = function() {
                this.contentWindow = this.iframe[0].contentWindow, this.messageProxy.contentWindow = this.contentWindow, 
                this.messageProxy.flushQueue();
            }, SandboxResourceLoader.prototype.loadResourcesContent = function(resourcePackage) {
                for (var promises = [], id = resourcePackage.id, name = resourcePackage.name, _i = 0, _a = resourcePackage.items; _i < _a.length; _i++) {
                    var item = _a[_i];
                    item.type !== ResourcePackageItemType.CustomVisualIcon && promises.push(this.loadResourceContent(id, name, item, resourcePackage));
                }
                return this.promiseFactory.all(promises);
            }, SandboxResourceLoader.prototype.loadResourceContent = function(id, name, item, resourcePackage) {
                var _this = this, deferred = this.promiseFactory.defer();
                return item.content ? deferred.resolve(this.getItemContent(item.content, item)) : this.provider.get(id, name, item.path).then(function(result) {
                    result ? deferred.resolve(_this.getItemContent(result, item)) : visualHost.ResourcePackageReferenceResolver.loadAndResolveContent(resourcePackage, item.name, _this, _this.promiseFactory).then(function(content) {
                        deferred.resolve(_this.getItemContent(content, item));
                    });
                }).catch(function(err) {
                    deferred.reject(err);
                }), deferred.promise;
            }, SandboxResourceLoader.prototype.getItemContent = function(itemContent, item) {
                itemContent = _.isString(itemContent) ? itemContent : JSON.stringify(itemContent);
                return item.content = item.type === ResourcePackageItemType.CustomVisualMetadata ? itemContent : void 0, 
                {
                    type: item.type,
                    content: itemContent
                };
            }, SandboxResourceLoader;
        }(visualHost.LocalResourceLoader);
        visualHost.SandboxResourceLoader = SandboxResourceLoader;
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        visualHost.createOrganizationalStoreResourceLoader = function(resourceLoaderConstructionOptions, messageProxy, resourcePackagesService, sandboxLoaderUri, provider, resourcePackageResolver) {
            return new OrganizationalStoreResourceLoader(resourceLoaderConstructionOptions, messageProxy, sandboxLoaderUri, provider, resourcePackagesService, resourcePackageResolver);
        };
        var OrganizationalStoreResourceLoader = function(_super) {
            function OrganizationalStoreResourceLoader(resourceLoaderConstructionOptions, messageProxy, sandboxLoaderUri, _this, resourcePackagesService, resourcePackageResolver) {
                _this = _super.call(this, resourceLoaderConstructionOptions, messageProxy, sandboxLoaderUri, _this) || this;
                return _this.resourcePackagesService = resourcePackagesService, _this.resourcePackageResolver = resourcePackageResolver, 
                _this.resourcePackagesService.getAllPackages(), _this;
            }
            return __extends(OrganizationalStoreResourceLoader, _super), OrganizationalStoreResourceLoader.prototype.loadResourcePackage = function(resourcePackage) {
                var _this = this;
                if (resourcePackage) return this.resourcePackageResolver(resourcePackage).then(function(latestResourcePackage) {
                    var promises = [];
                    if (latestResourcePackage && latestResourcePackage.items && !latestResourcePackage.disabled) for (var itemPromise, _i = 0, _a = latestResourcePackage.items; _i < _a.length; _i++) !function(item) {
                        itemPromise = visualHost.ResourcePackageReferenceResolver.loadAndResolveContent(latestResourcePackage, item.name, _this, _this.promiseFactory).then(function(content) {
                            item.content = content;
                        }), promises.push(itemPromise);
                    }(_a[_i]); else if (!latestResourcePackage || latestResourcePackage.disabled) return _this.resourcePackagesService.delete(resourcePackage.name), 
                    null;
                    return _this.promiseFactory.all(promises).then(function() {
                        return _super.prototype.loadResourcePackage.call(_this, latestResourcePackage, !0);
                    });
                }).catch(function() {
                    return _this.resourcePackagesService.delete(resourcePackage.name), null;
                });
            }, OrganizationalStoreResourceLoader;
        }(visualHost.SandboxResourceLoader);
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var UnapprovedResourceLoader = function() {
            function UnapprovedResourceLoader(promiseFactory) {
                this.promiseFactory = promiseFactory, this.promiseFactory = promiseFactory;
            }
            return UnapprovedResourceLoader.prototype.loadResourcePackage = function(resourcePackage) {
                return this.promiseFactory.resolve();
            }, UnapprovedResourceLoader.prototype.loadResourcePackages = function(resourcePackages) {
                return this.promiseFactory.resolve();
            }, UnapprovedResourceLoader.prototype.loadTrustedResourcePackages = function(trustedResourcePackages) {
                return this.promiseFactory.resolve();
            }, UnapprovedResourceLoader.prototype.loadResourcePackageItem = function(resourcePackage, itemName) {
                return this.promiseFactory.resolve();
            }, UnapprovedResourceLoader.prototype.loadSharedResource = function(path) {
                return this.promiseFactory.resolve();
            }, UnapprovedResourceLoader.prototype.loadVisualPlugin = function(resourcePackage) {
                return this.promiseFactory.resolve(null);
            }, UnapprovedResourceLoader.prototype.loadVisualPlugins = function(resourcePackages) {
                return this.promiseFactory.resolve();
            }, UnapprovedResourceLoader.prototype.destroy = function() {}, UnapprovedResourceLoader;
        }();
        visualHost.UnapprovedResourceLoader = UnapprovedResourceLoader;
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(services) {
            var DataViewObjectSerializer = powerbi.data.services.DataViewObjectSerializer, SemanticQuerySerializer = powerbi.data.services.SemanticQuerySerializer;
            !function(VisualObjectInstanceSerializer) {
                function serializeVisualObjectInstance(instance) {
                    return {
                        objectName: instance.objectName,
                        displayName: instance.displayName,
                        properties: function(properties) {
                            var key, result = {};
                            for (key in properties) result[key] = function(propertyValue) {
                                if (propertyValue instanceof powerbi.data.SemanticFilter) return SemanticQuerySerializer.serializeFilter(propertyValue);
                                return void 0 === propertyValue ? null : propertyValue;
                            }(properties[key]);
                            return result;
                        }(instance.properties),
                        selector: DataViewObjectSerializer.serializeSelector(instance.selector),
                        altConstantValueSelector: DataViewObjectSerializer.serializeSelector(instance.altConstantValueSelector),
                        validValues: instance.validValues,
                        containerIdx: instance.containerIdx,
                        propertyInstanceKind: instance.propertyInstanceKind
                    };
                }
                function deserializeVisualObjectInstance(instance) {
                    return {
                        objectName: instance.objectName,
                        displayName: instance.displayName,
                        properties: function(properties) {
                            var key, result = {};
                            for (key in properties) result[key] = function(propertyValue) {
                                var filterDefinition = propertyValue;
                                if (filterDefinition && filterDefinition.From && filterDefinition.Where) return SemanticQuerySerializer.deserializeFilter(filterDefinition);
                                return propertyValue;
                            }(properties[key]);
                            return result;
                        }(instance.properties),
                        selector: DataViewObjectSerializer.deserializeSelector(instance.selector),
                        altConstantValueSelector: DataViewObjectSerializer.deserializeSelector(instance.altConstantValueSelector),
                        validValues: instance.validValues,
                        containerIdx: instance.containerIdx,
                        propertyInstanceKind: instance.propertyInstanceKind
                    };
                }
                VisualObjectInstanceSerializer.serialize = function(instances) {
                    return 0 === instances.length ? [] : _.map(instances, serializeVisualObjectInstance);
                }, VisualObjectInstanceSerializer.deserialize = function(instances) {
                    return 0 === instances.length ? [] : _.map(instances, deserializeVisualObjectInstance);
                }, VisualObjectInstanceSerializer.serializeContainers = function(containers, resourceProvider) {
                    return _.map(containers, function(container) {
                        return {
                            displayName: powerbi.data.getDisplayName(container.displayName, resourceProvider)
                        };
                    });
                }, VisualObjectInstanceSerializer.deserializeContainers = function(containers) {
                    return _.map(containers, function(container) {
                        return {
                            displayName: container.displayName
                        };
                    });
                };
            }(services.VisualObjectInstanceSerializer || (services.VisualObjectInstanceSerializer = {}));
        }(visualHost.services || (visualHost.services = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(services) {
            var DataViewObjectSerializer = powerbi.data.services.DataViewObjectSerializer;
            !function(VisualObjectRepetitionSerializer) {
                function serializeVisualObjectRepetition(repetition) {
                    var output = {
                        selector: DataViewObjectSerializer.serializeSelector(repetition.selector),
                        altStaticSelector: DataViewObjectSerializer.serializeSelector(repetition.altStaticSelector),
                        objects: repetition.objects
                    };
                    return void 0 !== repetition.allowOverrideSubtotalMatching && (output.allowOverrideSubtotalMatching = repetition.allowOverrideSubtotalMatching), 
                    output;
                }
                function deserializeVisualObjectRepetition(repetition) {
                    var output = {
                        selector: DataViewObjectSerializer.deserializeSelector(repetition.selector),
                        altStaticSelector: DataViewObjectSerializer.deserializeSelector(repetition.altStaticSelector),
                        objects: repetition.objects
                    };
                    return void 0 !== repetition.allowOverrideSubtotalMatching && (output.allowOverrideSubtotalMatching = repetition.allowOverrideSubtotalMatching), 
                    output;
                }
                VisualObjectRepetitionSerializer.serialize = function(repetitions) {
                    return _.isEmpty(repetitions) ? [] : _.map(repetitions, serializeVisualObjectRepetition);
                }, VisualObjectRepetitionSerializer.deserialize = function(repetitions) {
                    return _.isEmpty(repetitions) ? [] : _.map(repetitions, deserializeVisualObjectRepetition);
                };
            }(services.VisualObjectRepetitionSerializer || (services.VisualObjectRepetitionSerializer = {}));
        }(visualHost.services || (visualHost.services = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(VisualStyleSerializer) {
            function serializeColorPalette(colorPalette) {
                return {
                    dataColors: serializeDataColors(colorPalette.dataColors),
                    foreground: colorPalette.foreground,
                    foregroundLight: colorPalette.foregroundLight,
                    foregroundDark: colorPalette.foregroundDark,
                    foregroundNeutralLight: colorPalette.foregroundNeutralLight,
                    foregroundNeutralDark: colorPalette.foregroundNeutralDark,
                    foregroundNeutralSecondary: colorPalette.foregroundNeutralSecondary,
                    foregroundNeutralSecondaryAlt: colorPalette.foregroundNeutralSecondaryAlt,
                    foregroundNeutralSecondaryAlt2: colorPalette.foregroundNeutralSecondaryAlt2,
                    foregroundNeutralTertiary: colorPalette.foregroundNeutralTertiary,
                    foregroundNeutralTertiaryAlt: colorPalette.foregroundNeutralTertiaryAlt,
                    foregroundSelected: colorPalette.foregroundSelected,
                    foregroundButton: colorPalette.foregroundButton,
                    background: colorPalette.background,
                    backgroundLight: colorPalette.backgroundLight,
                    backgroundNeutral: colorPalette.backgroundNeutral,
                    backgroundDark: colorPalette.backgroundDark,
                    hyperlink: colorPalette.hyperlink,
                    tableAccent: colorPalette.tableAccent,
                    visitedHyperlink: colorPalette.visitedHyperlink,
                    mapPushpin: colorPalette.mapPushpin,
                    shapeStroke: colorPalette.shapeStroke,
                    disabledText: colorPalette.disabledText,
                    selection: colorPalette.selection,
                    separator: colorPalette.separator
                };
            }
            function deserializeColorPalette(colorPalette) {
                return {
                    dataColors: deserializeDataColors(colorPalette.dataColors),
                    foreground: colorPalette.foreground,
                    foregroundLight: colorPalette.foregroundLight,
                    foregroundDark: colorPalette.foregroundDark,
                    foregroundNeutralLight: colorPalette.foregroundNeutralLight,
                    foregroundNeutralDark: colorPalette.foregroundNeutralDark,
                    foregroundNeutralSecondary: colorPalette.foregroundNeutralSecondary,
                    foregroundNeutralSecondaryAlt: colorPalette.foregroundNeutralSecondaryAlt,
                    foregroundNeutralSecondaryAlt2: colorPalette.foregroundNeutralSecondaryAlt2,
                    foregroundNeutralTertiary: colorPalette.foregroundNeutralTertiary,
                    foregroundNeutralTertiaryAlt: colorPalette.foregroundNeutralTertiaryAlt,
                    foregroundSelected: colorPalette.foregroundSelected,
                    foregroundButton: colorPalette.foregroundButton,
                    background: colorPalette.background,
                    backgroundLight: colorPalette.backgroundLight,
                    backgroundNeutral: colorPalette.backgroundNeutral,
                    backgroundDark: colorPalette.backgroundDark,
                    hyperlink: colorPalette.hyperlink,
                    visitedHyperlink: colorPalette.visitedHyperlink,
                    mapPushpin: colorPalette.mapPushpin,
                    shapeStroke: colorPalette.shapeStroke,
                    disabledText: colorPalette.disabledText,
                    tableAccent: colorPalette.tableAccent,
                    selection: colorPalette.selection,
                    separator: colorPalette.separator
                };
            }
            function serializeDataColors(dataColors) {
                return {
                    colors: dataColors.getAllColors(),
                    sentimentColors: dataColors.getSentimentColors(),
                    gradientColors: dataColors.getGradientColors()
                };
            }
            function deserializeDataColors(dataColors) {
                return new powerbi.visuals.DataColorPalette(dataColors.colors, dataColors.sentimentColors, dataColors.gradientColors);
            }
            VisualStyleSerializer.serializeVisualStyle = function(style) {
                return {
                    colorPalette: serializeColorPalette(style.colorPalette),
                    isHighContrast: style.isHighContrast,
                    icons: style.icons
                };
            }, VisualStyleSerializer.deserializeVisualStyle = function(style) {
                return {
                    colorPalette: deserializeColorPalette(style.colorPalette),
                    isHighContrast: style.isHighContrast,
                    icons: style.icons
                };
            }, VisualStyleSerializer.serializeColorPalette = serializeColorPalette, VisualStyleSerializer.deserializeColorPalette = deserializeColorPalette, 
            VisualStyleSerializer.serializeDataColors = serializeDataColors, VisualStyleSerializer.deserializeDataColors = deserializeDataColors;
        }(visualHost.VisualStyleSerializer || (visualHost.VisualStyleSerializer = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var UserConsent;
        !function(UserConsent) {
            UserConsent[UserConsent.NotRequired = 0] = "NotRequired", UserConsent[UserConsent.Declined = 1] = "Declined", 
            UserConsent[UserConsent.Approved = 2] = "Approved";
        }(UserConsent = visualHost.UserConsent || (visualHost.UserConsent = {})), visualHost.createVisualConsentService = function(promiseFactory, telemetryService) {
            return new VisualConsentService(promiseFactory, telemetryService);
        };
        var VisualConsentService = function() {
            function VisualConsentService(promiseFactory, telemetryService) {
                this.promiseFactory = promiseFactory, this.telemetryService = telemetryService, 
                this.cachedConsentMap = {}, this.visualConsentOptionsMap = {};
            }
            return VisualConsentService.prototype.registerVisualConsent = function(type, options) {
                this.visualConsentOptionsMap[type], this.visualConsentOptionsMap[type] = options, 
                this.telemetryService.logEvent(powerbi.telemetry.VisualConsentRegister, {
                    visualType: type,
                    parentId: this.telemetryService.root.id,
                    isError: !1,
                    errorSource: "PowerBI"
                }), this.loadConsentAsync(type);
            }, VisualConsentService.prototype.hasConsent = function(visualType) {
                return this.cachedConsentMap[visualType];
            }, VisualConsentService.prototype.setConsent = function(visualType, value) {
                if (!this.isConsentRequiringVisual(visualType)) return this.promiseFactory.reject("Visual type does not require consent");
                this.cachedConsentMap[visualType] = value;
                var provider = this.visualConsentOptionsMap[visualType] && this.visualConsentOptionsMap[visualType].consentPersistencyProvider;
                return this.telemetryService.logEvent(powerbi.telemetry.VisualConsentSet, {
                    visualType: visualType,
                    userConsent: value,
                    parentId: this.telemetryService.root.id,
                    isError: !1,
                    errorSource: "PowerBI"
                }), provider ? provider.saveConsent(value) : this.promiseFactory.reject("No persistencyProvider was set for visual " + visualType);
            }, VisualConsentService.prototype.getConsent = function(visualTypes) {
                var _this = this, promises = [];
                visualTypes = _.uniq(visualTypes), this.telemetryService.logEvent(powerbi.telemetry.VisualConsentGet, {
                    visualTypes: visualTypes.join(", "),
                    parentId: this.telemetryService.root.id,
                    isError: !1,
                    errorSource: "PowerBI"
                });
                for (var this_2 = this, _i = 0, visualTypes_1 = visualTypes; _i < visualTypes_1.length; _i++) !function(visualType) {
                    if (!this_2.isConsentRequiringVisual(visualType)) {
                        var consentState = {
                            visualType: visualType,
                            consent: UserConsent.NotRequired
                        };
                        return promises.push(this_2.promiseFactory.resolve(consentState));
                    }
                    promises.push(this_2.loadConsentAsync(visualType).then(function(consentState) {
                        if (consentState) {
                            consentState = {
                                visualType: visualType,
                                consent: UserConsent.Approved
                            };
                            return _this.promiseFactory.resolve(consentState);
                        }
                        return _this.showConsentDialog(visualType);
                    }));
                }(visualTypes_1[_i]);
                return this.promiseFactory.allSettled(promises).then(function(promisesResults) {
                    return _.map(_.filter(promisesResults, function(result) {
                        return 0 === result.type;
                    }), function(result) {
                        return result.value;
                    });
                });
            }, VisualConsentService.prototype.isConsentRequiringVisual = function(visualType) {
                return !!this.visualConsentOptionsMap[visualType];
            }, VisualConsentService.prototype.loadConsentAsync = function(visualType) {
                var _this = this;
                if (this.visualConsentOptionsMap[visualType], void 0 !== this.cachedConsentMap[visualType]) return this.promiseFactory.resolve(this.cachedConsentMap[visualType]);
                var provider = this.visualConsentOptionsMap[visualType] && this.visualConsentOptionsMap[visualType].consentPersistencyProvider;
                return provider ? provider.loadConsent().then(function(consent) {
                    return _this.cachedConsentMap[visualType] = consent, _this.promiseFactory.resolve(consent);
                }).catch(function(reason) {
                    if (reason !== visualHost.ESRINotSupportedInEmbed) return _this.promiseFactory.reject(reason);
                }) : this.promiseFactory.reject("VisualConsentService.getConsentAsync: Missing consentPersistencyProvider for visual " + visualType);
            }, VisualConsentService.prototype.showConsentDialog = function(visualType) {
                var _this = this;
                if (!this.isConsentRequiringVisual(visualType)) return this.promiseFactory.reject("VisualConsentService.showConsentDialog: Visual type does not require consent");
                var consentDialogProvider = this.visualConsentOptionsMap[visualType] && this.visualConsentOptionsMap[visualType].consentDialogProvider;
                return consentDialogProvider ? consentDialogProvider.showConsentDialog().then(function(consentState) {
                    _this.setConsent(visualType, consentState);
                    consentState = {
                        visualType: visualType,
                        consent: consentState ? UserConsent.Approved : UserConsent.Declined
                    };
                    return _this.promiseFactory.resolve(consentState);
                }).catch(function(reason) {
                    return _this.promiseFactory.reject(reason);
                }) : this.promiseFactory.reject("VisualConsentService.showConsentDialog: Missing consentDialogProvider for visual " + visualType);
            }, VisualConsentService;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        visualHost.createVisualInstanceIdTrackingService = function() {
            return new VisualInstanceIdTrackingService();
        };
        var VisualInstanceIdTrackingService = function() {
            function VisualInstanceIdTrackingService() {
                this.listeners = [];
            }
            return VisualInstanceIdTrackingService.prototype.associate = function(instanceId, visualType) {
                for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) _a[_i].onInstanceAssociated(instanceId, visualType);
            }, VisualInstanceIdTrackingService.prototype.subscribeToInstanceIdAssociation = function(listener) {
                _.includes(this.listeners, listener) || this.listeners.push(listener);
            }, VisualInstanceIdTrackingService;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(visualPluginUtility) {
            visualPluginUtility.createVisualPlugin = function(pbivizJson, enUSResources, plugin) {
                pbivizJson.content, pbivizJson.content.iconBase64, pbivizJson = enUSResources ? visualHost.LocalizationResourceUtility.setLocalizedCapabilities(pbivizJson, enUSResources) : pbivizJson;
                var localizedResources = enUSResources ? visualHost.LocalizationResourceUtility.getLocalizedResources(pbivizJson, enUSResources) : null, enUSResources = visualHost.LocalizationResourceUtility.getLocalizedResources(pbivizJson, "en-US"), plugin = {
                    name: pbivizJson.visual.guid,
                    apiVersion: pbivizJson.apiVersion,
                    class: pbivizJson.visual.visualClassName,
                    displayName: pbivizJson.visual.displayName,
                    capabilities: pbivizJson.capabilities,
                    custom: !0,
                    iconUrl: 'url("' + pbivizJson.content.iconBase64 + '")',
                    content: pbivizJson.content,
                    version: pbivizJson.visual.version,
                    create: function() {
                        return null;
                    },
                    customizeQuery: function(options) {
                        return null;
                    },
                    localizationResources: localizedResources || enUSResources ? {
                        enUSStrings: enUSResources,
                        localizedStrings: localizedResources
                    } : null,
                    supportUrl: pbivizJson.visual.supportUrl,
                    source: plugin,
                    publisher: pbivizJson.author ? pbivizJson.author.name : void 0
                };
                return pbivizJson.capabilities && pbivizJson.capabilities.subtotals && powerbi.visuals.CustomVisualPluginMethods.isSubtotalCustomizationCapabilityValid(pbivizJson.capabilities.subtotals) && (plugin.customizeQuery = function(options) {
                    return powerbi.visuals.CustomVisualPluginMethods.customizeQueryForSubtotals(options, pbivizJson.capabilities.subtotals);
                }), plugin;
            };
        }(visualHost.visualPluginUtility || (visualHost.visualPluginUtility = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        var Utility = jsCommon.Utility;
        !function(events) {
            events.WindowMessageProxyMessageEvent = "message", events.WindowMessageProxyErrorEvent = "error";
        }(visualHost.events || (visualHost.events = {}));
        visualHost.createWindowMessageProxy = function(promiseFactory, contentWindow) {
            return new WindowMessageProxy(promiseFactory, contentWindow);
        };
        var WindowMessageProxy = function() {
            function WindowMessageProxy(promiseFactory, contentWindow) {
                var _this = this;
                this.promiseFactory = promiseFactory, this._queue = [], this._allowSameWindow = !1, 
                this.handlers = {
                    message: [],
                    error: []
                }, this.isFlushing = !1, contentWindow && (this._contentWindow = contentWindow), 
                this.deferredCache = {}, this.windowMessageHandler = function(e) {
                    return _this.onMessageReceived(e);
                }, $(window).on("message", this.windowMessageHandler);
            }
            return Object.defineProperty(WindowMessageProxy.prototype, "allowSameWindow", {
                get: function() {
                    return this._allowSameWindow;
                },
                set: function(value) {
                    this._allowSameWindow = value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(WindowMessageProxy.prototype, "contentWindow", {
                get: function() {
                    return this._contentWindow;
                },
                set: function(value) {
                    this._contentWindow = value;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(WindowMessageProxy.prototype, "queue", {
                get: function() {
                    return jQuery.extend([], this._queue);
                },
                enumerable: !1,
                configurable: !0
            }), WindowMessageProxy.prototype.postMessage = function(message) {
                this.contentWindow ? this.sendMessage(message) : this.queueMessage(message);
            }, WindowMessageProxy.prototype.postMessageAsync = function(message) {
                var _this = this, deferred = this.promiseFactory.defer(), key = this.createRandomString();
                return this.deferredCache[key] = deferred, message.id = key, this.postMessage(message), 
                deferred.promise.finally(function() {
                    delete _this.deferredCache[key];
                }), deferred.promise;
            }, WindowMessageProxy.prototype.queueMessage = function(jsonMessage, index) {
                void 0 === index && (index = this._queue.length);
                jsonMessage = this.prepareMessage(jsonMessage);
                this._queue.splice(index, 0, jsonMessage);
            }, WindowMessageProxy.prototype.on = function(type, handler) {
                this.handlers[type] && (-1 < this.handlers[type].indexOf(handler) || this.handlers[type].push(handler));
            }, WindowMessageProxy.prototype.off = function(type, index) {
                this.handlers[type] && (index ? -1 < (index = this.handlers[type].indexOf(index)) && this.handlers[type].splice(index, 1) : this.handlers[type].length = 0);
            }, WindowMessageProxy.prototype.flushQueue = function() {
                !this.isFlushing && this.contentWindow && (this.isFlushing = !0, this.contentWindow.postMessage && this.contentWindow.postMessage(this._queue, "*"), 
                this._queue.length = 0, this.isFlushing = !1);
            }, WindowMessageProxy.prototype.sendMessage = function(jsonMessage) {
                jsonMessage = this.prepareMessage(jsonMessage);
                this.contentWindow && this.contentWindow.postMessage && this.contentWindow.postMessage(jsonMessage, "*");
            }, WindowMessageProxy.prototype.prepareMessage = function(message) {
                var jsonMessage;
                try {
                    jsonMessage = JSON.stringify(message);
                } catch (ex) {
                    throw jsonMessage = null, Utility.ensureError(ex);
                }
                return jsonMessage;
            }, WindowMessageProxy.prototype.onMessageReceived = function(e) {
                if (this.allowSameWindow || e.originalEvent.source !== window) {
                    var data;
                    try {
                        data = "string" == typeof e.originalEvent.data ? JSON.parse(e.originalEvent.data) : e.originalEvent.data;
                    } catch (ex) {
                        data = null;
                    }
                    if (data) for (var _i = 0, messages_1 = jQuery.isArray(data) ? data : [ data ]; _i < messages_1.length; _i++) {
                        var rawMessage = messages_1[_i], message = void 0, packedSize = void 0;
                        try {
                            packedSize = "string" == typeof rawMessage ? (message = JSON.parse(rawMessage), 
                            rawMessage.length) : (message = rawMessage, e.originalEvent.data.length);
                        } catch (ex) {
                            message = null;
                        }
                        if (!message) return;
                        this.dispatchMessage(e.originalEvent, message, packedSize);
                    }
                }
            }, WindowMessageProxy.prototype.dispatchMessage = function(event, message, deferred) {
                var eventArgs = {
                    message: message,
                    source: event.source,
                    packedSize: deferred
                };
                if (message.id && ("onMessageProxyAsyncComplete" === message.eventName || message.result || message.error)) {
                    deferred = this.deferredCache[message.id];
                    return deferred ? message.error ? deferred.reject(message.error) : deferred.resolve(message.result) : void 0;
                }
                for (var _i = 0, handlers_1 = message.error ? this.handlers.error : this.handlers.message; _i < handlers_1.length; _i++) {
                    var handler = handlers_1[_i];
                    this.invokeHandler(handler, eventArgs);
                }
            }, WindowMessageProxy.prototype.invokeHandler = function(handler, eventArgs) {
                var result, asyncResponse, _this = this;
                eventArgs.message.id && (asyncResponse = {
                    id: eventArgs.message.id,
                    eventName: "onMessageProxyAsyncComplete",
                    arguments: []
                });
                try {
                    result = handler.call(null, eventArgs), asyncResponse && this.promiseFactory.when(result).then(function(asyncResult) {
                        asyncResponse.result = asyncResult, _this.postMessage(asyncResponse);
                    }).catch(function(err) {
                        asyncResponse.error = err, _this.postMessage(asyncResponse);
                    });
                } catch (ex) {
                    asyncResponse && (asyncResponse.error = {
                        message: ex.message
                    }, this.postMessage(asyncResponse));
                }
            }, WindowMessageProxy.prototype.createRandomString = function() {
                return (Math.random() + 1).toString(36).substring(7);
            }, WindowMessageProxy.prototype.destroy = function() {
                this.handlers.message.length = 0, this.handlers.error.length = 0, $(window).off("message", this.windowMessageHandler), 
                this.windowMessageHandler = null;
            }, WindowMessageProxy;
        }();
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v100) {
            function convertLegacyUpdateType(options) {
                var type = options.type || powerbi.VisualUpdateType.Data;
                return type & powerbi.VisualUpdateType.Resize && 2 === options.resizeMode && (type |= powerbi.VisualUpdateType.ResizeEnd), 
                type;
            }
            v100.convertLegacyUpdateType = convertLegacyUpdateType;
            function overloadFactory(visual, host) {
                return {
                    update: function(options) {
                        visual.update && visual.update({
                            viewport: options.viewport,
                            dataViews: options.dataViews,
                            viewMode: options.viewMode,
                            type: convertLegacyUpdateType(options)
                        });
                    },
                    destroy: function() {
                        visual.destroy && visual.destroy();
                    },
                    enumerateObjectInstances: function(options) {
                        return visual.enumerateObjectInstances && visual.enumerateObjectInstances(options) || [];
                    }
                };
            }
            function hostAdapter(initOptions) {
                return {};
            }
            v100.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.0.0",
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v100 || (extensibility.v100 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v110) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            type: extensibility.v100.convertLegacyUpdateType(transform)
                        }, transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colors: VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors()
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v110.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.1.0",
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v110 || (extensibility.v110 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v120) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            type: extensibility.v100.convertLegacyUpdateType(transform)
                        }, host.colorPalette.reset(), transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v120.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.2.0",
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v120 || (extensibility.v120 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v130) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    })
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v130.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.3.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v130 || (extensibility.v130 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v140) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale()
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v140.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.4.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v140 || (extensibility.v140 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v150) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v150.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.5.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v150 || (extensibility.v150 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v160) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            editMode: transform.editMode,
                            type: extensibility.v100.convertLegacyUpdateType(transform)
                        }, host.colorPalette.reset(), transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v160.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.6.0",
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v160 || (extensibility.v160 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v170) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName)) : initOptions.host.applyJsonFilter(null, objectName, propertyName);
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v170.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.7.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v170 || (extensibility.v170 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v180) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v180.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.8.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v180 || (extensibility.v180 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v190) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v190.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.9.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v190 || (extensibility.v190 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v1100) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return new extensibility.SelectionManager({
                            hostServices: initOptions.host
                        });
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v1100.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.10.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v1100 || (extensibility.v1100 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v1110) {
            function hostAdapter(initOptions) {
                var colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        var host = initOptions.host;
                        return host.selectionManager = new extensibility.SelectionManager({
                            hostServices: host
                        }), host.selectionManager;
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v1110.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.11.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v1110 || (extensibility.v1110 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v011200) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            editMode: transform.editMode,
                            operationKind: transform.operationKind,
                            type: extensibility.v100.convertLegacyUpdateType(transform)
                        }, host.colorPalette.reset(), transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                var host = initOptions.host, colors = VisualHostUtils.isDefined(initOptions, "style.colorPalette.dataColors.getAllColors") ? initOptions.style.colorPalette.dataColors.getAllColors() : powerbi.visuals.DefaultColorManager.getDefaultColors();
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = new extensibility.SelectionManager({
                            hostServices: host
                        }), host.selectionManager;
                    },
                    colorPalette: extensibility.createColorPalette(colors),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    }
                };
            }
            var VisualHostUtils = powerbi.visualHost.VisualHostUtils;
            v011200.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.12.0",
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v011200 || (extensibility.v011200 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v011300) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.SelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = new extensibility.SelectionManager({
                            hostServices: host
                        }), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    }
                };
            }
            v011300.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: "1.13.0",
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v011300 || (extensibility.v011300 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020000) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = new extensibility.SelectionManager({
                            hostServices: host,
                            apiVersion: apiVersion
                        }), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: extensibility.createTooltipService({
                        hostServices: initOptions.host
                    }),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    }
                };
            }
            var apiVersion = "2.0.0";
            v020000.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020000 || (extensibility.v020000 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020100) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            editMode: transform.editMode,
                            operationKind: transform.operationKind,
                            type: extensibility.v100.convertLegacyUpdateType(transform),
                            jsonFilters: transform.jsonFilters
                        }, host.colorPalette.reset(), transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return host.createSelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    }
                };
            }
            var apiVersion = "2.1.0";
            v020100.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020100 || (extensibility.v020100 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020200) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return host.createSelectionIdBuilder();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filter, objectName, propertyName, action) {
                        var filters;
                        filter ? ((filters = []).push(filter), initOptions.host.applyJsonFilter(filters, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    }
                };
            }
            var apiVersion = "2.2.0";
            v020200.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020200 || (extensibility.v020200 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020300) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            editMode: transform.editMode,
                            operationKind: transform.operationKind,
                            jsonFilters: transform.jsonFilters,
                            type: extensibility.v100.convertLegacyUpdateType(transform),
                            updateId: transform.updateId
                        }, host.colorPalette.reset(), transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host)
                };
            }
            var apiVersion = "2.3.0";
            v020300.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020300 || (extensibility.v020300 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020400) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host)
                };
            }
            var apiVersion = "2.4.0";
            v020400.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020400 || (extensibility.v020400 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020500) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host)
                };
            }
            var apiVersion = "2.5.0";
            v020500.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020500 || (extensibility.v020500 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v020600) {
            function overloadFactory(visual, host) {
                return {
                    update: function(transform) {
                        var updateOptions;
                        visual.update && (updateOptions = {
                            viewport: transform.viewport,
                            dataViews: transform.dataViews,
                            viewMode: transform.viewMode,
                            editMode: transform.editMode,
                            isInFocus: !!transform.isInFocus,
                            operationKind: transform.operationKind,
                            jsonFilters: transform.jsonFilters,
                            type: extensibility.v100.convertLegacyUpdateType(transform),
                            updateId: transform.updateId
                        }, host.colorPalette.reset(), transform = visual.constructor.__transform__, _.isFunction(transform) ? visual.update(updateOptions, transform(updateOptions.dataViews)) : visual.update(updateOptions));
                    }
                };
            }
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    }
                };
            }
            var apiVersion = "2.6.0";
            v020600.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    overloads: overloadFactory,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v020600 || (extensibility.v020600 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030200) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv
                };
            }
            var apiVersion = "3.2.0";
            v030200.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030200 || (extensibility.v030200 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030300) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function() {
                        return host.fetchMoreData();
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv
                };
            }
            var apiVersion = "3.3.0";
            v030300.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030300 || (extensibility.v030300 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030400) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv
                };
            }
            var apiVersion = "3.4.0";
            v030400.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030400 || (extensibility.v030400 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030500) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv
                };
            }
            var apiVersion = "3.5.0";
            v030500.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030500 || (extensibility.v030500 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030600) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv
                };
            }
            var apiVersion = "3.6.0";
            v030600.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030600 || (extensibility.v030600 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030700) {
            function hostAdapter(initOptions) {
                var host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    allowInteractions: !(!initOptions || !initOptions.interactivity) && initOptions.interactivity.isVisualInteractive,
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "3.7.0";
            v030700.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030700 || (extensibility.v030700 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030800) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "3.8.0";
            v030800.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030800 || (extensibility.v030800 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v030900) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "3.9.0";
            v030900.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v030900 || (extensibility.v030900 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v040000) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "4.0.0";
            v040000.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v040000 || (extensibility.v040000 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v040100) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "4.1.0";
            v040100.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v040100 || (extensibility.v040100 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v040200) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "4.2.0";
            v040200.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v040200 || (extensibility.v040200 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v040300) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    }
                };
            }
            var apiVersion = "4.3.0";
            v040300.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v040300 || (extensibility.v040300 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v040400) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    },
                    licenseManager: extensibility.createLicenseManager(host)
                };
            }
            var apiVersion = "4.4.0";
            v040400.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v040400 || (extensibility.v040400 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(v040500) {
            function hostAdapter(initOptions) {
                var _b, host = initOptions.host;
                return host.apiVersion = apiVersion, {
                    createSelectionIdBuilder: function() {
                        return new powerbi.visuals.CustomVisualSelectionId();
                    },
                    createSelectionManager: function() {
                        return host.selectionManager = host.createSelectionManager(apiVersion), host.selectionManager;
                    },
                    colorPalette: extensibility.createExtendedColorPalette(initOptions.style),
                    persistProperties: function(changes) {
                        return initOptions.host.persistProperties(changes);
                    },
                    tooltipService: host.createTooltipService(),
                    telemetry: extensibility.createTelemetryService({
                        hostServices: initOptions.host
                    }),
                    authenticationService: extensibility.createAuthenticationService({
                        hostServices: initOptions.host
                    }),
                    locale: initOptions.host.locale(),
                    hostCapabilities: {
                        allowInteractions: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.isVisualInteractive),
                        allowModalDialog: !(null === (_b = initOptions.interactivity) || void 0 === _b || !_b.allowModalDialog)
                    },
                    applyJsonFilter: function(filters, objectName, propertyName, action) {
                        var filterArray;
                        filters ? Array.isArray(filters) ? initOptions.host.applyJsonFilter(filters, objectName, propertyName, action) : ((filterArray = []).push(filters), 
                        initOptions.host.applyJsonFilter(filterArray, objectName, propertyName, action)) : initOptions.host.applyJsonFilter(null, objectName, propertyName, action);
                    },
                    launchUrl: function(url) {
                        return initOptions.host.launchUrl(url);
                    },
                    instanceId: initOptions.host.instanceId,
                    refreshHostData: function() {
                        return initOptions.host.refreshHostData();
                    },
                    createLocalizationManager: function() {
                        return new extensibility.LocalizationManager(initOptions.localizationResources);
                    },
                    fetchMoreData: function(aggregateSegments) {
                        return host.fetchMoreData(aggregateSegments);
                    },
                    storageService: extensibility.createStorageService(host),
                    downloadService: extensibility.createDownloadService(host),
                    eventService: extensibility.createEventService(host),
                    switchFocusModeState: function(on) {
                        return host.switchFocusModeState(on);
                    },
                    hostEnv: initOptions.hostEnv,
                    openModalDialog: function(dialogId, options, initialState) {
                        return host.openModalDialog(dialogId, options, initialState);
                    },
                    displayWarningIcon: function(hoverText, detailedText) {
                        return host.displayWarningIcon(hoverText, detailedText);
                    },
                    licenseManager: extensibility.createLicenseManager(host)
                };
            }
            var apiVersion = "4.5.0";
            v040500.addVersion = function() {
                extensibility.getVisualApiVersions().push({
                    version: apiVersion,
                    hostAdapter: hostAdapter
                });
            };
        }(extensibility.v040500 || (extensibility.v040500 = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var visualApiVersions = [];
        extensibility.getVisualApiVersions = function() {
            return visualApiVersions;
        }, extensibility.setVisualApiVersions = function(value) {
            visualApiVersions = value;
        }, powerbi.extensibility.v100.addVersion(), powerbi.extensibility.v110.addVersion(), 
        powerbi.extensibility.v120.addVersion(), powerbi.extensibility.v130.addVersion(), 
        powerbi.extensibility.v140.addVersion(), powerbi.extensibility.v150.addVersion(), 
        powerbi.extensibility.v160.addVersion(), powerbi.extensibility.v170.addVersion(), 
        powerbi.extensibility.v180.addVersion(), powerbi.extensibility.v190.addVersion(), 
        powerbi.extensibility.v1100.addVersion(), powerbi.extensibility.v1110.addVersion(), 
        powerbi.extensibility.v011200.addVersion(), powerbi.extensibility.v011300.addVersion(), 
        powerbi.extensibility.v020000.addVersion(), powerbi.extensibility.v020100.addVersion(), 
        powerbi.extensibility.v020200.addVersion(), powerbi.extensibility.v020300.addVersion(), 
        powerbi.extensibility.v020400.addVersion(), powerbi.extensibility.v020500.addVersion(), 
        powerbi.extensibility.v020600.addVersion(), powerbi.extensibility.v030200.addVersion(), 
        powerbi.extensibility.v030300.addVersion(), powerbi.extensibility.v030400.addVersion(), 
        powerbi.extensibility.v030500.addVersion(), powerbi.extensibility.v030600.addVersion(), 
        powerbi.extensibility.v030700.addVersion(), powerbi.extensibility.v030800.addVersion(), 
        powerbi.extensibility.v030900.addVersion(), powerbi.extensibility.v040000.addVersion(), 
        powerbi.extensibility.v040100.addVersion(), powerbi.extensibility.v040200.addVersion(), 
        powerbi.extensibility.v040300.addVersion(), powerbi.extensibility.v040400.addVersion(), 
        extensibility.createVisualApiAdapter = function(visualPlugin, firstAdapter, promiseFactory, telemetryService, finalAdapter, ngZone) {
            var visualAdapter = new VisualApiAdapter(visualPlugin, firstAdapter, promiseFactory, telemetryService, finalAdapter), finalAdapter = firstAdapter = new extensibility.VisualTimeTrackingWrapper(visualAdapter);
            return null != ngZone && (finalAdapter = new extensibility.VisualOutsideZoneAdapter(firstAdapter, ngZone)), 
            new extensibility.VisualSafeExecutionWrapper(finalAdapter, visualPlugin, promiseFactory, telemetryService, visualAdapter.isPluginInError);
        };
        var VisualApiAdapter = function() {
            function VisualApiAdapter(versionIndex, version, promiseFactory, telemetryService, module) {
                this.plugin = versionIndex, this.creator = version, this.promiseFactory = promiseFactory, 
                this.telemetryService = telemetryService, this.module = module, this.isPluginInError = !1, 
                version || this.plugin.createES6, this.telemetryService;
                version = versionIndex.apiVersion, versionIndex = this.getVersionIndex(version);
                version ? -1 < versionIndex ? (this.apiVersionIndex = versionIndex, this.legacy = !1) : this.isPluginInError = !0 : this.legacy = !0;
            }
            return VisualApiAdapter.prototype.init = function(options) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var _a, host_1, creatorOptions, _b;
                    return __generator(this, function(_c) {
                        switch (_c.label) {
                          case 0:
                            return (options.element, options.host, options.element.empty(), options = powerbi.Prototype.inherit(options), 
                            this.legacy) ? (creatorOptions = {
                                module: this.module,
                                featureSwitches: options.featureSwitches
                            }, this.plugin.createES6 ? [ 4, (_a = this).plugin.createES6(creatorOptions) ] : [ 3, 2 ]) : [ 3, 5 ];

                          case 1:
                            return _a.visual = _c.sent(), [ 3, 3 ];

                          case 2:
                            this.visual = this.creator(creatorOptions), _c.label = 3;

                          case 3:
                            return [ 4, this.visualLegacy.init(options) ];

                          case 4:
                            return _c.sent(), [ 3, 9 ];

                          case 5:
                            return (host_1 = this.host = visualApiVersions[this.apiVersionIndex].hostAdapter(options), 
                            creatorOptions = {
                                element: options.element.get(0),
                                host: host_1,
                                module: this.module,
                                featureSwitches: options.featureSwitches
                            }, this.plugin.createES6) ? [ 4, (_b = this).plugin.createES6(creatorOptions) ] : [ 3, 7 ];

                          case 6:
                            return _b.visual = _c.sent(), [ 3, 8 ];

                          case 7:
                            this.visual = this.creator(creatorOptions), _c.label = 8;

                          case 8:
                            this.overloadMethods(), _c.label = 9;

                          case 9:
                            return [ 2 ];
                        }
                    });
                });
            }, VisualApiAdapter.prototype.update = function(options) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return this.plugin.systemVisual || ((options = powerbi.Prototype.inherit(options)).visualDefinitionData = void 0, 
                            options.dataTransforms = void 0), (options.type & powerbi.VisualUpdateType.Resize) === powerbi.VisualUpdateType.Resize && this.visualHasMethod("onResizing") ? this.plugin.custom && this.visualHasMethod("update") ? [ 4, this.visualLegacy.update(options) ] : [ 3, 2 ] : [ 3, 3 ];

                          case 1:
                            _a.sent(), _a.label = 2;

                          case 2:
                            return this.onResizing(options.viewport, options.resizeMode), [ 3, 6 ];

                          case 3:
                            return this.visualHasMethod("update") ? [ 4, this.visualLegacy.update(options) ] : [ 3, 5 ];

                          case 4:
                            return _a.sent(), [ 3, 6 ];

                          case 5:
                            (!options.type || options.type & powerbi.VisualUpdateType.Data) && this.onDataChanged(_.pick(options, [ "dataViews", "operationKind" ])), 
                            options.type & powerbi.VisualUpdateType.ViewMode && this.onViewModeChanged(options.viewMode), 
                            _a.label = 6;

                          case 6:
                            return [ 2 ];
                        }
                    });
                });
            }, VisualApiAdapter.prototype.destroy = function() {
                this.visualHasMethod("destroy") && this.visualLegacy.destroy();
            }, VisualApiAdapter.prototype.enumerateObjectInstances = function(options) {
                if (this.visualHasMethod("enumerateObjectInstances")) return this.visualLegacy.enumerateObjectInstances(options);
            }, VisualApiAdapter.prototype.enumerateObjectRepetition = function() {
                if (this.visualHasMethod("enumerateObjectRepetition")) return this.visualLegacy.enumerateObjectRepetition();
            }, VisualApiAdapter.prototype.enumerateObjectInstancesAsync = function(options) {
                return this.visualHasMethod("enumerateObjectInstancesAsync") ? this.visualAdapter.enumerateObjectInstancesAsync(options) : this.promiseFactory.resolve(this.enumerateObjectInstances(options));
            }, VisualApiAdapter.prototype.enumerateObjectRepetitionAsync = function() {
                return this.visualHasMethod("enumerateObjectRepetitionAsync") ? this.visualAdapter.enumerateObjectRepetitionAsync() : this.promiseFactory.resolve(this.enumerateObjectRepetition());
            }, Object.defineProperty(VisualApiAdapter.prototype, "sandbox", {
                get: function() {
                    return this.visualAdapter && this.visualAdapter.sandbox;
                },
                enumerable: !1,
                configurable: !0
            }), VisualApiAdapter.prototype.onResizing = function(finalViewport, resizeMode) {
                this.visualHasMethod("onResizing") && this.visualLegacy.onResizing(finalViewport, resizeMode);
            }, VisualApiAdapter.prototype.onDataChanged = function(options) {
                this.visualHasMethod("onDataChanged") && this.visualLegacy.onDataChanged(options);
            }, VisualApiAdapter.prototype.onViewModeChanged = function(viewMode) {
                this.visualHasMethod("onViewModeChanged") && this.visualLegacy.onViewModeChanged(viewMode);
            }, VisualApiAdapter.prototype.onClearSelection = function() {
                this.visualHasMethod("onClearSelection") && this.visualLegacy.onClearSelection();
            }, VisualApiAdapter.prototype.onRestoreSelection = function(options) {
                if (this.visualHasMethod("onRestoreSelection")) return this.visualLegacy.onRestoreSelection(options);
            }, VisualApiAdapter.prototype.canResizeTo = function(viewport) {
                if (this.visualHasMethod("canResizeTo")) return this.visualLegacy.canResizeTo(viewport);
            }, VisualApiAdapter.prototype.unwrap = function() {
                return this.visual;
            }, VisualApiAdapter.prototype.getTelemetryInformation = function() {
                if (this.visualHasMethod("getTelemetryInformation")) return this.visualLegacy.getTelemetryInformation();
            }, VisualApiAdapter.prototype.getFormattingModel = function() {
                if (this.visualHasMethod("getFormattingModel")) return this.visualLegacy.getFormattingModel();
            }, VisualApiAdapter.prototype.resolveFormattingPlaceholder = function(visualFormattingPlaceholder) {
                if (this.visualHasMethod("resolveFormattingPlaceholder")) return this.visualLegacy.resolveFormattingPlaceholder(visualFormattingPlaceholder);
            }, Object.defineProperty(VisualApiAdapter.prototype, "visualNew", {
                get: function() {
                    if (!this.legacy) return this.visual;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(VisualApiAdapter.prototype, "visualLegacy", {
                get: function() {
                    if (this.legacy) return this.visual;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(VisualApiAdapter.prototype, "visualAdapter", {
                get: function() {
                    return this.visual;
                },
                enumerable: !1,
                configurable: !0
            }), VisualApiAdapter.prototype.visualHasMethod = function(methodName) {
                var visual = this.legacy ? this.visualLegacy : this.visualNew;
                return visual && _.isFunction(visual[methodName]);
            }, VisualApiAdapter.prototype.getVersionIndex = function(version) {
                if (version) for (var versionCount = extensibility.getVisualApiVersions().length, i = 0; i < versionCount; i++) if (extensibility.getVisualApiVersions()[i].version === version) return i;
                return -1;
            }, VisualApiAdapter.prototype.overloadMethods = function() {
                var key, overloads = this.getCompiledOverloads();
                for (key in overloads) this[key] = overloads[key];
            }, VisualApiAdapter.prototype.getCompiledOverloads = function() {
                for (var overloads = {}, versionIndex = this.apiVersionIndex, visualNew = this.visualNew, i = 0; i <= versionIndex; i++) {
                    var overloadFactory = extensibility.getVisualApiVersions()[i].overloads;
                    _.isFunction(overloadFactory) && _.assign(overloads, overloadFactory(visualNew, this.host));
                }
                return overloads;
            }, VisualApiAdapter;
        }();
        extensibility.VisualApiAdapter = VisualApiAdapter;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var VisualOutsideZoneAdapter = function() {
            function VisualOutsideZoneAdapter(wrappedVisual, ngZone) {
                this.wrappedVisual = wrappedVisual, this.ngZone = ngZone;
            }
            return VisualOutsideZoneAdapter.prototype.init = function(options) {
                return this.executeOutsideAngularZone(this.wrappedVisual.init, options);
            }, VisualOutsideZoneAdapter.prototype.update = function(options) {
                return this.executeOutsideAngularZone(this.wrappedVisual.update, options);
            }, VisualOutsideZoneAdapter.prototype.destroy = function() {
                this.executeOutsideAngularZone(this.wrappedVisual.destroy);
            }, VisualOutsideZoneAdapter.prototype.onResizing = function(finalViewport, resizeMode) {
                this.executeOutsideAngularZone(this.wrappedVisual.onResizing, finalViewport, resizeMode);
            }, VisualOutsideZoneAdapter.prototype.onDataChanged = function(options) {
                this.executeOutsideAngularZone(this.wrappedVisual.onDataChanged, options);
            }, VisualOutsideZoneAdapter.prototype.onViewModeChanged = function(viewMode) {
                this.executeOutsideAngularZone(this.wrappedVisual.onViewModeChanged, viewMode);
            }, VisualOutsideZoneAdapter.prototype.onClearSelection = function() {
                this.executeOutsideAngularZone(this.wrappedVisual.onClearSelection);
            }, VisualOutsideZoneAdapter.prototype.onRestoreSelection = function(options) {
                return this.executeOutsideAngularZone(this.wrappedVisual.onRestoreSelection, options);
            }, VisualOutsideZoneAdapter.prototype.canResizeTo = function(viewport) {
                return this.executeOutsideAngularZone(this.wrappedVisual.canResizeTo, viewport);
            }, VisualOutsideZoneAdapter.prototype.enumerateObjectInstances = function(options) {
                return this.executeOutsideAngularZone(this.wrappedVisual.enumerateObjectInstances, options);
            }, VisualOutsideZoneAdapter.prototype.enumerateObjectInstancesAsync = function(options) {
                return this.executeOutsideAngularZone(this.wrappedVisual.enumerateObjectInstancesAsync, options);
            }, VisualOutsideZoneAdapter.prototype.enumerateObjectRepetition = function() {
                return this.executeOutsideAngularZone(this.wrappedVisual.enumerateObjectRepetition);
            }, VisualOutsideZoneAdapter.prototype.enumerateObjectRepetitionAsync = function() {
                return this.executeOutsideAngularZone(this.wrappedVisual.enumerateObjectRepetitionAsync);
            }, VisualOutsideZoneAdapter.prototype.visualHasMethod = function(methodName) {
                return this.executeOutsideAngularZone(this.wrappedVisual.visualHasMethod, methodName);
            }, VisualOutsideZoneAdapter.prototype.unwrap = function() {
                var visual = this.wrappedVisual;
                return visual.unwrap ? visual.unwrap() : visual;
            }, Object.defineProperty(VisualOutsideZoneAdapter.prototype, "sandbox", {
                get: function() {
                    var _a;
                    return null === (_a = this.wrappedVisual) || void 0 === _a ? void 0 : _a.sandbox;
                },
                enumerable: !1,
                configurable: !0
            }), VisualOutsideZoneAdapter.prototype.getTelemetryInformation = function() {
                return this.executeOutsideAngularZone(this.wrappedVisual.getTelemetryInformation);
            }, VisualOutsideZoneAdapter.prototype.getFormattingModel = function() {
                return this.executeOutsideAngularZone(this.wrappedVisual.getFormattingModel);
            }, VisualOutsideZoneAdapter.prototype.resolveFormattingPlaceholder = function(visualFormattingPlaceholder) {
                var _this = this;
                return this.ngZone.runOutsideAngular(function() {
                    return _this.wrappedVisual.resolveFormattingPlaceholder(visualFormattingPlaceholder);
                });
            }, VisualOutsideZoneAdapter.prototype.executeOutsideAngularZone = function(fn) {
                for (var args = [], _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
                var context = this.wrappedVisual;
                return this.ngZone.runOutsideAngular(function() {
                    return fn.apply(context, args);
                });
            }, VisualOutsideZoneAdapter;
        }();
        extensibility.VisualOutsideZoneAdapter = VisualOutsideZoneAdapter;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(visualPluginAdapter) {
            var localizedKeys = [ "displayName", "description", "placeHolderText" ], directStringResourceProvider = {
                get: function(value) {
                    return value;
                },
                getOptional: function(value) {
                    return value;
                },
                format: function(id) {
                    return id;
                }
            };
            function getVisualDataRoleKindFromString(name) {
                switch (name.toLowerCase()) {
                  case "grouping":
                  case powerbi.VisualDataRoleKind.Grouping.toString():
                    return powerbi.VisualDataRoleKind.Grouping;

                  case "measure":
                  case powerbi.VisualDataRoleKind.Measure.toString():
                    return powerbi.VisualDataRoleKind.Measure;

                  case "groupingormeasure":
                  case powerbi.VisualDataRoleKind.GroupingOrMeasure.toString():
                    return powerbi.VisualDataRoleKind.GroupingOrMeasure;
                }
            }
            function removedLocalizationValue(value, key) {
                return _.isString(value) || -1 === _.indexOf(localizedKeys, key) ? value : powerbi.data.getDisplayName(value, directStringResourceProvider);
            }
            visualPluginAdapter.transformPlugin = function(plugin) {
                (plugin.apiVersion ? function(plugin) {
                    !function(capabilities) {
                        capabilities && (function(objects) {
                            for (var object in objects) {
                                object = objects[object];
                                if (object) {
                                    var properties = object.properties;
                                    if (properties) for (var propertyType in properties) {
                                        propertyType = properties[propertyType];
                                        propertyType && ((propertyType = propertyType.type) && propertyType.enumeration && (propertyType.enumeration = powerbi.createEnumType(propertyType.enumeration)));
                                    }
                                }
                            }
                        }(capabilities.objects), function(dataRoles) {
                            for (var dataRole in dataRoles) {
                                dataRole = dataRoles[dataRole];
                                dataRole && dataRole.kind && (dataRole.kind = getVisualDataRoleKindFromString(dataRole.kind.toString()));
                            }
                        }(capabilities.dataRoles), function(dataViewMappings) {
                            for (var dataViewMapping in dataViewMappings) {
                                dataViewMapping = dataViewMappings[dataViewMapping];
                                if (dataViewMapping) {
                                    var conditions = dataViewMapping.conditions;
                                    if (conditions) for (var cKey in conditions) {
                                        var condition = conditions[cKey];
                                        if (condition) for (var rKey in condition) {
                                            var conditionRole = condition[rKey];
                                            conditionRole && conditionRole.kind && (condition[rKey].kind = getVisualDataRoleKindFromString(conditionRole.kind.toString()));
                                        }
                                    }
                                }
                            }
                        }(capabilities.dataViewMappings));
                    }(plugin.capabilities);
                } : function(plugin) {
                    !function(capabilities) {
                        capabilities && (function(objects) {
                            for (var key in objects) {
                                var object = objects[key];
                                if (object) {
                                    var properties = (object = objects[key] = _.mapValues(object, removedLocalizationValue)).properties;
                                    if (properties) for (var propertyType in properties) {
                                        var delocalizedEnumMembers = properties[propertyType];
                                        delocalizedEnumMembers && ((propertyType = (delocalizedEnumMembers = properties[propertyType] = _.mapValues(delocalizedEnumMembers, removedLocalizationValue)).type) && propertyType.enumeration && _.isFunction(propertyType.enumeration.members) && (delocalizedEnumMembers = propertyType.enumeration.members().map(function(v) {
                                            return _.mapValues(v, removedLocalizationValue);
                                        }), propertyType.enumeration = powerbi.createEnumType(delocalizedEnumMembers)));
                                    }
                                }
                            }
                        }(capabilities.objects), function(dataRoles) {
                            for (var key in dataRoles) {
                                var dataRole = dataRoles[key];
                                dataRole && (dataRoles[key] = _.mapValues(dataRole, removedLocalizationValue));
                            }
                        }(capabilities.dataRoles));
                    }(plugin.capabilities);
                })(plugin);
            };
        }(extensibility.visualPluginAdapter || (extensibility.visualPluginAdapter = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var ExceptionHelper = jsCommon.ExceptionHelper, Trace = jsCommon.Trace, VisualSafeExecutionWrapper = function() {
            function VisualSafeExecutionWrapper(wrappedVisual, visualPlugin, promiseFactory, telemetryService, isPluginInError, silent) {
                this.wrappedVisual = wrappedVisual, this.visualPlugin = visualPlugin, this.promiseFactory = promiseFactory, 
                this.telemetryService = telemetryService, this.isPluginInError = isPluginInError, 
                this.silent = silent, this.initCalled = !1, this.startTimeISO = new Date().toISOString();
            }
            return VisualSafeExecutionWrapper.prototype.init = function(options) {
                var telemetry_1, _this = this;
                if (this.initCalled = !0, options && options.host && options.host.telemetry && (telemetry_1 = options.host.telemetry(), 
                this.instanceId = telemetry_1 && telemetry_1.instanceId), this.wrappedVisual.init) return this.executeSafelyAsync(function() {
                    return _this.wrappedVisual.init(options);
                });
            }, VisualSafeExecutionWrapper.prototype.checkInit = function() {
                return !!this.initCalled || (Trace.assertFail("Another visual method was called before init"), 
                !1);
            }, VisualSafeExecutionWrapper.prototype.destroy = function() {
                var _this = this;
                this.wrappedVisual.destroy && this.executeSafely(function() {
                    return _this.wrappedVisual.destroy();
                });
            }, VisualSafeExecutionWrapper.prototype.update = function(options) {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.update) return this.executeSafelyAsync(function() {
                    return __awaiter(_this, void 0, powerbi.Promise, function() {
                        var endTimeISO;
                        return __generator(this, function(_a) {
                            switch (_a.label) {
                              case 0:
                                return [ 4, this.wrappedVisual.update(options) ];

                              case 1:
                                return _a.sent(), this.telemetryService && this.startTimeISO && this.visualPlugin.custom && (endTimeISO = new Date().toISOString(), 
                                this.telemetryService.logEvent(powerbi.telemetry.VisualApiUsage, {
                                    name: this.visualPlugin.name,
                                    apiVersion: this.visualPlugin.apiVersion,
                                    custom: !!this.visualPlugin.custom,
                                    visualVersion: this.visualPlugin.version,
                                    visualName: this.instanceId,
                                    start: this.startTimeISO,
                                    end: endTimeISO,
                                    isError: this.isPluginInError,
                                    errorSource: "User"
                                }), this.startTimeISO = null), [ 2 ];
                            }
                        });
                    });
                });
            }, VisualSafeExecutionWrapper.prototype.onResizing = function(finalViewport, resizeMode) {
                var _this = this;
                this.checkInit(), this.wrappedVisual.onResizing && this.executeSafely(function() {
                    return _this.wrappedVisual.onResizing(finalViewport, resizeMode);
                });
            }, VisualSafeExecutionWrapper.prototype.onDataChanged = function(options) {
                var _this = this;
                this.checkInit(), this.wrappedVisual.onDataChanged && this.executeSafely(function() {
                    return _this.wrappedVisual.onDataChanged(options);
                });
            }, VisualSafeExecutionWrapper.prototype.onViewModeChanged = function(viewMode) {
                var _this = this;
                this.checkInit(), this.wrappedVisual.onViewModeChanged && this.executeSafely(function() {
                    return _this.wrappedVisual.onViewModeChanged(viewMode);
                });
            }, VisualSafeExecutionWrapper.prototype.onClearSelection = function() {
                var _this = this;
                this.checkInit(), this.wrappedVisual.onClearSelection && this.executeSafely(function() {
                    return _this.wrappedVisual.onClearSelection();
                });
            }, VisualSafeExecutionWrapper.prototype.onRestoreSelection = function(options) {
                var _this = this;
                return this.checkInit(), !!this.wrappedVisual.onRestoreSelection && this.executeSafely(function() {
                    return _this.wrappedVisual.onRestoreSelection(options);
                });
            }, VisualSafeExecutionWrapper.prototype.canResizeTo = function(viewport) {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.canResizeTo) return this.executeSafely(function() {
                    return _this.wrappedVisual.canResizeTo(viewport);
                });
            }, VisualSafeExecutionWrapper.prototype.enumerateObjectInstances = function(options) {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.enumerateObjectInstances) return this.executeSafely(function() {
                    return _this.wrappedVisual.enumerateObjectInstances(options);
                });
            }, VisualSafeExecutionWrapper.prototype.enumerateObjectRepetition = function() {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.enumerateObjectRepetition) return this.executeSafely(function() {
                    return _this.wrappedVisual.enumerateObjectRepetition();
                });
            }, VisualSafeExecutionWrapper.prototype.enumerateObjectInstancesAsync = function(options) {
                var _this = this;
                return this.checkInit(), this.visualAdapter.enumerateObjectInstancesAsync ? this.executeSafely(function() {
                    return _this.visualAdapter.enumerateObjectInstancesAsync(options);
                }) : this.promiseFactory.resolve(this.enumerateObjectInstances(options));
            }, VisualSafeExecutionWrapper.prototype.enumerateObjectRepetitionAsync = function() {
                var _this = this;
                return this.checkInit(), this.visualAdapter.enumerateObjectRepetitionAsync ? this.executeSafely(function() {
                    return _this.visualAdapter.enumerateObjectRepetitionAsync();
                }) : this.promiseFactory.resolve(this.enumerateObjectRepetition());
            }, Object.defineProperty(VisualSafeExecutionWrapper.prototype, "sandbox", {
                get: function() {
                    return this.visualAdapter && this.visualAdapter.sandbox;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(VisualSafeExecutionWrapper.prototype, "visualAdapter", {
                get: function() {
                    return this.wrappedVisual;
                },
                enumerable: !1,
                configurable: !0
            }), VisualSafeExecutionWrapper.prototype.unwrap = function() {
                var visual = this.wrappedVisual;
                return visual.unwrap ? visual.unwrap() : visual;
            }, VisualSafeExecutionWrapper.prototype.visualHasMethod = function(methodName) {
                var visual = this.wrappedVisual;
                return visual && visual.visualHasMethod(methodName);
            }, VisualSafeExecutionWrapper.prototype.getTelemetryInformation = function() {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.getTelemetryInformation) return this.executeSafely(function() {
                    return _this.wrappedVisual.getTelemetryInformation();
                });
            }, VisualSafeExecutionWrapper.prototype.getFormattingModel = function() {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.getFormattingModel) return this.executeSafely(function() {
                    return _this.wrappedVisual.getFormattingModel();
                });
            }, VisualSafeExecutionWrapper.prototype.resolveFormattingPlaceholder = function(visualFormattingPlaceholder) {
                var _this = this;
                if (this.checkInit(), this.wrappedVisual.resolveFormattingPlaceholder) return this.executeSafely(function() {
                    return _this.wrappedVisual.resolveFormattingPlaceholder(visualFormattingPlaceholder);
                });
            }, VisualSafeExecutionWrapper.prototype.executeSafely = function(callback) {
                try {
                    return callback();
                } catch (exception) {
                    this.silent, this.telemetryService && this.logVisualExceptionEvent(exception);
                }
            }, VisualSafeExecutionWrapper.prototype.executeSafelyAsync = function(callback) {
                return __awaiter(this, void 0, powerbi.Promise, function() {
                    var exception_1;
                    return __generator(this, function(_a) {
                        switch (_a.label) {
                          case 0:
                            return _a.trys.push([ 0, 2, , 3 ]), [ 4, callback() ];

                          case 1:
                            return [ 2, _a.sent() ];

                          case 2:
                            return exception_1 = _a.sent(), this.silent, this.telemetryService && this.logVisualExceptionEvent(exception_1), 
                            [ 3, 3 ];

                          case 3:
                            return [ 2 ];
                        }
                    });
                });
            }, VisualSafeExecutionWrapper.prototype.logVisualExceptionEvent = function(exception) {
                var isCustom = !!this.visualPlugin.custom;
                this.telemetryService.logEvent(powerbi.telemetry.VisualException, {
                    visualType: this.visualPlugin.name,
                    isCustom: isCustom,
                    apiVersion: this.visualPlugin.apiVersion,
                    visualName: this.instanceId,
                    isDeprecated: !!this.visualPlugin.isDeprecated,
                    source: exception.fileName,
                    lineNumber: exception.lineNumber,
                    columnNumber: exception.columnNumber,
                    message: isCustom ? void 0 : ExceptionHelper.cleanExceptionMessage(exception),
                    stack: isCustom ? void 0 : ExceptionHelper.cleanExceptionStack(exception)
                });
            }, VisualSafeExecutionWrapper;
        }();
        extensibility.VisualSafeExecutionWrapper = VisualSafeExecutionWrapper;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.VisualPlugin = function(options) {
            return function(constructor) {
                constructor.__transform__ = options.transform;
            };
        };
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createColorPalette = function(colors) {
            return new ColorPalette(colors);
        }, extensibility.createExtendedColorPalette = function(style) {
            return new SandboxExtendedColorPalette(style);
        };
        var ColorPalette = function() {
            function ColorPalette(colors) {
                this.colorPalette = {}, this.colorIndex = 0, this.colors = colors;
            }
            return ColorPalette.prototype.getColor = function(key) {
                if (color = this.colorPalette[key]) return color;
                var colors = this.colors, color = this.colorPalette[key] = colors[this.colorIndex++];
                return this.colorIndex >= colors.length && (this.colorIndex = 0), color;
            }, ColorPalette.prototype.reset = function() {
                return this.colorIndex = 0, this;
            }, ColorPalette;
        }(), SandboxExtendedColorPalette = function(_super) {
            function SandboxExtendedColorPalette(style) {
                var _this = this, gradientColors = style.colorPalette.dataColors;
                (_this = _super.call(this, gradientColors.getAllColors()) || this).isHighContrast = style.isHighContrast, 
                _this.foreground = style.colorPalette.foreground, _this.foregroundLight = style.colorPalette.foregroundLight, 
                _this.foregroundDark = style.colorPalette.foregroundDark, _this.foregroundNeutralLight = style.colorPalette.foregroundNeutralLight, 
                _this.foregroundNeutralDark = style.colorPalette.foregroundNeutralDark, _this.foregroundNeutralSecondary = style.colorPalette.foregroundNeutralSecondary, 
                _this.foregroundNeutralSecondaryAlt = style.colorPalette.foregroundNeutralSecondaryAlt, 
                _this.foregroundNeutralSecondaryAlt2 = style.colorPalette.foregroundNeutralSecondaryAlt2, 
                _this.foregroundNeutralTertiary = style.colorPalette.foregroundNeutralTertiary, 
                _this.foregroundNeutralTertiaryAlt = style.colorPalette.foregroundNeutralTertiaryAlt, 
                _this.foregroundSelected = style.colorPalette.foregroundSelected, _this.foregroundButton = style.colorPalette.foregroundButton, 
                _this.background = style.colorPalette.background, _this.backgroundLight = style.colorPalette.backgroundLight, 
                _this.backgroundNeutral = style.colorPalette.backgroundNeutral, _this.backgroundDark = style.colorPalette.backgroundDark, 
                _this.hyperlink = style.colorPalette.hyperlink, _this.visitedHyperlink = style.colorPalette.visitedHyperlink, 
                _this.mapPushpin = style.colorPalette.mapPushpin, _this.shapeStroke = style.colorPalette.shapeStroke;
                var sentimentColors = gradientColors.getSentimentColors();
                _this.bad = sentimentColors.bad, _this.neutral = sentimentColors.neutral, _this.good = sentimentColors.good;
                gradientColors = gradientColors.getGradientColors();
                return _this.minimum = gradientColors.minColor, _this.center = gradientColors.midColor, 
                _this.maximium = gradientColors.maxColor, _this.null = gradientColors.nullColor, 
                _this.negative = sentimentColors.bad, _this.positive = sentimentColors.good, _this.selection = style.colorPalette.selection, 
                _this.separator = style.colorPalette.separator, _this;
            }
            return __extends(SandboxExtendedColorPalette, _super), SandboxExtendedColorPalette;
        }(ColorPalette);
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var SelectionIdBuilder = function() {
            function SelectionIdBuilder() {}
            return SelectionIdBuilder.prototype.withCategory = function(categoryColumn, index) {
                return categoryColumn && categoryColumn.source && categoryColumn.source.queryName && categoryColumn.identity && (this.ensureDataMap()[categoryColumn.source.queryName] = [ categoryColumn.identity[index] ]), 
                this;
            }, SelectionIdBuilder.prototype.withSeries = function(seriesColumn, valueColumn) {
                return seriesColumn && seriesColumn.source && seriesColumn.source.queryName && valueColumn && (this.ensureDataMap()[seriesColumn.source.queryName] = [ valueColumn.identity ]), 
                this;
            }, SelectionIdBuilder.prototype.withMeasure = function(measureId) {
                return this.measure = measureId, this;
            }, SelectionIdBuilder.prototype.createSelectionId = function() {
                return powerbi.visuals.SelectionId.createWithSelectorForColumnAndMeasure(this.ensureDataMap(), this.measure);
            }, SelectionIdBuilder.prototype.ensureDataMap = function() {
                return this.dataMap || (this.dataMap = {}), this.dataMap;
            }, SelectionIdBuilder;
        }();
        extensibility.SelectionIdBuilder = SelectionIdBuilder;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var CustomVisualSelectionId = powerbi.visuals.CustomVisualSelectionId, Version = jsCommon.Version, SelectionManager = function() {
            function SelectionManager(options, noIframe) {
                void 0 === noIframe && (noIframe = !1), this.dataPointObjectName = "dataPoint", 
                this.filterPropertyIdentifier = {
                    objectName: "general",
                    propertyName: "filter"
                }, this.hostServices = options.hostServices, this.apiVersion = options.apiVersion, 
                this.selectedIds = [], this.promiseFactory = this.hostServices.promiseFactory(), 
                this.noIframe = noIframe;
            }
            return SelectionManager.prototype.select = function(selectionIds, multiSelect) {
                void 0 === multiSelect && (multiSelect = !1);
                var deferred = this.promiseFactory.defer();
                return selectionIds ? (selectionIds instanceof Array || (selectionIds = [ selectionIds ]), 
                this.hostServices.shouldRetainSelection() ? this.sendSelectionToHost(selectionIds, multiSelect) : (this.selectInternal(selectionIds, multiSelect), 
                this.sendSelectionToHost(this.selectedIds, multiSelect)), deferred.resolve(this.selectedIds)) : deferred.reject(), 
                deferred.promise;
            }, SelectionManager.prototype.showContextMenu = function(selectionId, position, dataRoles) {
                var deferred = this.promiseFactory.defer();
                return this.sendContextMenuToHost(selectionId = selectionId || {}, position, dataRoles), 
                deferred.resolve(null), deferred.promise;
            }, SelectionManager.prototype.toggleExpandCollapse = function(selectionId, entireLevel) {
                var deferred = this.promiseFactory.defer();
                return this.sendExpandCollapseToHost(selectionId, !0 === entireLevel), deferred.resolve(null), 
                deferred.promise;
            }, SelectionManager.prototype.hasSelection = function() {
                return 0 < this.selectedIds.length;
            }, SelectionManager.prototype.clear = function() {
                var deferred = this.promiseFactory.defer();
                return this.selectedIds = [], this.sendSelectionToHost([]), deferred.resolve(null), 
                deferred.promise;
            }, SelectionManager.prototype.getSelectionIds = function() {
                return this.selectedIds;
            }, SelectionManager.prototype.setSelectionIds = function(ids) {
                this.selectedIds = ids;
            }, SelectionManager.prototype.sendSelectionToHost = function(ids, multiSelect) {
                var dataPointObjectName_1, selectArgs, shouldInsertSelectors;
                this.noIframe || !this.apiVersion || Version.lt(this.apiVersion, "2.0.0") ? (dataPointObjectName_1 = this.dataPointObjectName, 
                shouldInsertSelectors = !(selectArgs = {
                    visualObjects: _.chain(ids).filter(function(value) {
                        return value.hasIdentity();
                    }).map(function(value) {
                        return {
                            objectName: dataPointObjectName_1,
                            selectorsByColumn: value.getSelectorsByColumn()
                        };
                    }).value(),
                    selectors: void 0,
                    selectionMode: multiSelect ? 3 : 0
                }), (shouldInsertSelectors = !_.isEmpty(ids) ? ids[0].getSelector() && !ids[0].getSelectorsByColumn() : shouldInsertSelectors) && (selectArgs.selectors = _.chain(ids).filter(function(value) {
                    return value.hasIdentity();
                }).map(function(value) {
                    return value.getSelector();
                }).value()), this.hostServices.onSelect(selectArgs)) : this.hostServices.sendSelectionIdsToHost(this.prepareCustomVisualSelectEventArgs(ids, multiSelect));
            }, SelectionManager.prototype.sendContextMenuToHost = function(selectionId, position, dataRoles) {
                selectionId && position && this.hostServices.customVisualOnContextMenu({
                    data: [ selectionId ],
                    position: position,
                    dataRoles: dataRoles ? [ dataRoles ] : void 0
                });
            }, SelectionManager.prototype.sendExpandCollapseToHost = function(selectionId, entireLevel) {
                selectionId && null != selectionId.nodeIsCollapsed && this.hostServices.customVisualOnExpandCollapse({
                    data: selectionId,
                    entireLevel: entireLevel
                });
            }, SelectionManager.prototype.selectInternal = function(selectionIds, multiSelect) {
                var _this = this;
                selectionIds.length < 1 || (1 < selectionIds.length ? this.selectedIds = multiSelect ? selectionIds.filter(function(i) {
                    return !_this.selectedIds.some(function(o) {
                        return o.equals(i);
                    });
                }).concat(this.selectedIds.filter(function(i) {
                    return !selectionIds.some(function(o) {
                        return o.equals(i);
                    });
                })) : selectionIds : SelectionManager.containsSelection(this.selectedIds, selectionIds[0]) ? this.selectedIds = multiSelect ? this.selectedIds.filter(function(d) {
                    return !selectionIds[0].equals(d);
                }) : 1 < this.selectedIds.length ? selectionIds : [] : multiSelect ? this.selectedIds.push(selectionIds[0]) : this.selectedIds = selectionIds);
            }, SelectionManager.containsSelection = function(list, id) {
                return list.some(function(d) {
                    return id.equals(d);
                });
            }, SelectionManager.getSelectorsByColumn = function(selectionIds) {
                return selectionIds && selectionIds[0] instanceof CustomVisualSelectionId ? selectionIds : _(selectionIds).filter(function(value) {
                    return value.hasIdentity;
                }).map(function(value) {
                    return value.getSelectorsByColumn();
                }).compact().value();
            }, SelectionManager.createChangeForFilterProperty = function(filterPropIdentifier, filter) {
                var properties = {}, instance = {
                    objectName: filterPropIdentifier.objectName,
                    selector: void 0,
                    properties: properties
                };
                return null == filter ? (properties[filterPropIdentifier.propertyName] = {}, {
                    remove: [ instance ]
                }) : (properties[filterPropIdentifier.propertyName] = filter, {
                    merge: [ instance ]
                });
            }, SelectionManager.prototype.getFilterFromSelectors = function() {
                if (this.hasSelection()) {
                    var selectors = _.chain(this.selectedIds).filter(function(value) {
                        return value.hasIdentity();
                    }).map(function(value) {
                        return value.getSelector();
                    }).value();
                    return powerbi.data.Selector.filterFromSelector(selectors, !1);
                }
            }, SelectionManager.prototype.prepareCustomVisualSelectEventArgs = function(cvIds, multiSelect) {
                var proxyArgs = {
                    selectionIds: [],
                    multiSelect: multiSelect
                };
                if (cvIds && cvIds[0] && (cvIds[0].dataMap || cvIds[0].measures)) for (var _i = 0, cvIds_1 = cvIds; _i < cvIds_1.length; _i++) {
                    var args = cvIds_1[_i];
                    proxyArgs.selectionIds.push(args);
                }
                return proxyArgs;
            }, SelectionManager.prototype.applySelectionFilter = function() {
                this.hostServices.persistProperties(SelectionManager.createChangeForFilterProperty(this.filterPropertyIdentifier, this.getFilterFromSelectors()));
            }, SelectionManager.prototype.registerOnSelectCallback = function(callback) {
                this.onSelectCallback = callback;
            }, SelectionManager.prototype.invokeOnSelectCallback = function(options) {
                _.isFunction(this.onSelectCallback) && this.onSelectCallback(options);
            }, SelectionManager;
        }();
        extensibility.SelectionManager = SelectionManager;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createTooltipService = function(options) {
            return new TooltipService(options);
        };
        var TooltipService = function() {
            function TooltipService(options) {
                this.hostServices = options.hostServices, this.tooltipService = this.hostServices.tooltips();
            }
            return TooltipService.prototype.enabled = function() {
                return this.tooltipService && this.tooltipService.enabled();
            }, TooltipService.prototype.show = function(args) {
                this.enabled() && (args = {
                    coordinates: args.coordinates,
                    dataItems: args.dataItems,
                    isTouchEvent: args.isTouchEvent,
                    identities: extensibility.SelectionManager.getSelectorsByColumn(args.identities)
                }, this.tooltipService.show(args));
            }, TooltipService.prototype.move = function(args) {
                this.enabled() && (args = {
                    coordinates: args.coordinates,
                    dataItems: args.dataItems,
                    isTouchEvent: args.isTouchEvent,
                    identities: extensibility.SelectionManager.getSelectorsByColumn(args.identities)
                }, this.tooltipService.move(args));
            }, TooltipService.prototype.hide = function(options) {
                this.enabled() && this.tooltipService.hide(options);
            }, TooltipService;
        }();
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createTelemetryService = function(options) {
            return new TelemetryService(options);
        };
        var TelemetryService = function() {
            function TelemetryService(options) {
                this.hostServices = options.hostServices, this.telemetryService = this.hostServices && this.hostServices.telemetry && this.hostServices.telemetry(), 
                this.instanceId = this.telemetryService && this.telemetryService.instanceId;
            }
            return TelemetryService.prototype.trace = function(type, payload) {
                this.telemetryService && this.telemetryService.trace(type, payload);
            }, TelemetryService;
        }();
        extensibility.convertVisualEventType = function(type) {
            switch (type) {
              case 3:
                return "VisualEventError";

              case 2:
                return "VisualEventTrace";

              case 0:
                return "VisualEventRenderStarted";

              case 1:
                return "VisualEventRenderCompleted";

              default:
                return;
            }
        }, extensibility.convertStringToVisualEventType = function(type) {
            switch (type) {
              case "VisualEventError":
                return 3;

              case "VisualEventTrace":
                return 2;

              case "VisualEventRenderStarted":
                return 0;

              case "VisualEventRenderCompleted":
                return 1;

              default:
                return;
            }
        };
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createAuthenticationService = function(options) {
            return new AuthenticationService(options);
        };
        var AuthenticationService = function() {
            function AuthenticationService(options) {
                this.hostServices = options.hostServices, this.authenticationService = this.hostServices && this.hostServices.authenticationService && this.hostServices.authenticationService(), 
                this.promiseFactory = this.hostServices.promiseFactory();
            }
            return AuthenticationService.prototype.getResourceUrl = function() {
                return this.authenticationService ? this.authenticationService.getResourceUrl() : this.promiseFactory.reject();
            }, AuthenticationService.prototype.getAADAuthenticationToken = function() {
                return this.authenticationService ? this.authenticationService.getAADAuthenticationToken() : this.promiseFactory.reject();
            }, AuthenticationService.prototype.getAADToken = function() {
                return this.authenticationService ? this.authenticationService.getAADToken() : this.promiseFactory.reject();
            }, AuthenticationService.prototype.getWACToken = function(resourceSiteUrl, resourceEtag) {
                return this.authenticationService ? this.authenticationService.getWACToken(resourceSiteUrl, resourceEtag) : this.promiseFactory.reject();
            }, AuthenticationService.prototype.getSignedInAccessToken = function() {
                return this.promiseFactory.reject();
            }, AuthenticationService.prototype.getClusterInfo = function() {
                return this.promiseFactory.reject();
            }, AuthenticationService;
        }();
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var LocalizationManager = function() {
            function LocalizationManager(localizationResources) {
                this.localizationResources = localizationResources;
            }
            return LocalizationManager.prototype.getDisplayName = function(key) {
                var localizationResources = this.localizationResources;
                return localizationResources && localizationResources.localizedStrings && localizationResources.localizedStrings.hasOwnProperty(key) ? localizationResources.localizedStrings[key] : localizationResources && localizationResources.enUSStrings && localizationResources.enUSStrings.hasOwnProperty(key) ? localizationResources.enUSStrings[key] : key;
            }, LocalizationManager;
        }();
        extensibility.LocalizationManager = LocalizationManager;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createEventService = function(hostServices) {
            return new EventService(hostServices);
        };
        var EventService = function() {
            function EventService(hostServices) {
                this.eventService = hostServices && hostServices.eventService && hostServices.eventService();
            }
            return EventService.prototype.renderingStarted = function(options) {
                this.eventService && this.eventService.renderingStarted(options);
            }, EventService.prototype.renderingFinished = function(options) {
                this.eventService && this.eventService.renderingFinished(options);
            }, EventService.prototype.renderingFailed = function(options, reason) {
                this.eventService && this.eventService.renderingFailed(options, reason);
            }, EventService;
        }();
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createLicenseManager = function(hostServices) {
            return new LicenseManager(hostServices);
        };
        var LicenseManager = function() {
            function LicenseManager(hostServices) {
                this.licenseManagerService = hostServices && hostServices.licenseManagerService && hostServices.licenseManagerService(), 
                this.promiseFactory = hostServices.promiseFactory();
            }
            return LicenseManager.prototype.getAvailableServicePlans = function() {
                return this.licenseManagerService ? this.licenseManagerService.getAvailableServicePlans() : this.promiseFactory.reject();
            }, LicenseManager.prototype.notifyLicenseRequired = function(notificationType) {
                return this.licenseManagerService ? this.licenseManagerService.notifyLicenseRequired(notificationType) : this.promiseFactory.reject();
            }, LicenseManager.prototype.notifyFeatureBlocked = function(tooltip) {
                return this.licenseManagerService ? this.licenseManagerService.notifyFeatureBlocked(tooltip) : this.promiseFactory.reject();
            }, LicenseManager.prototype.clearLicenseNotification = function() {
                return this.licenseManagerService ? this.licenseManagerService.clearLicenseNotification() : this.promiseFactory.reject();
            }, LicenseManager;
        }();
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        !function(legacy) {
            var Selector = powerbi.data.Selector;
            legacy.isOldSelectEventArgs = function(argsHasNonArrayMetadata) {
                var argsNeedsToUpdateFromSelectors = null != argsHasNonArrayMetadata.data || null != argsHasNonArrayMetadata.selectors, argsHasNonArrayMetadata = _.some(argsHasNonArrayMetadata.visualObjects, function(visualObject) {
                    return visualObject.selectorsByColumn && visualObject.selectorsByColumn.metadata && !_.isArray(visualObject.selectorsByColumn.metadata);
                });
                return argsNeedsToUpdateFromSelectors || argsHasNonArrayMetadata;
            }, legacy.getSelectorsByColumn = function(args) {
                var selectorsByColumnArray;
                if (args.data2) selectorsByColumnArray = args.data2; else {
                    if (args.selectors || args.data) return _.map(args.selectors || args.data, function(selector) {
                        if (!selector) return;
                        var dataMap = {};
                        return dataMap[""] = selector.data, {
                            dataMap: dataMap,
                            metadata: [ selector.metadata ]
                        };
                    });
                    if (!args.visualObjects) return [];
                    selectorsByColumnArray = _.map(args.visualObjects, function(visualObject) {
                        return visualObject.selectorsByColumn;
                    });
                }
                for (var _i = 0, selectorsByColumnArray_1 = selectorsByColumnArray; _i < selectorsByColumnArray_1.length; _i++) {
                    var selectorsByColumn = selectorsByColumnArray_1[_i], metadata = selectorsByColumn.metadata;
                    metadata && !_.isArray(metadata) && (selectorsByColumn.metadata = [ metadata ]);
                }
                return selectorsByColumnArray;
            }, legacy.getSelectors = function(args) {
                return null != args.selectors ? args.selectors : args.data || (args.visualObjects ? _.map(args.visualObjects, function(visualObject) {
                    return Selector.convertSelectorsByColumnToSelector(visualObject.selectorsByColumn);
                }) : args.data);
            };
        }(extensibility.legacy || (extensibility.legacy = {}));
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(visualHost) {
        !function(CustomVisualsUtils) {
            var CustomVisualsAdminControlState, CustomVisualTypes, customVisualsAdminControlState, Version = jsCommon.Version;
            function isOrganizationalCustomVisual(type) {
                return type && _.endsWith(type, powerbi.visualHost.OrgStoreVisualSuffix);
            }
            function isCustomVisualTypeDisabledHelper(visualType, featureFlag, areCustomVisualsDisabled, areUncertifiedVisualsDisabled, approvedResourceService, ignoreUncertainty, isManagedEnabledVisual) {
                return !(!featureFlag || visualType === visualHost.EsriVisual || isOrganizationalCustomVisual(visualType) || isManagedEnabledVisual) && (!!areCustomVisualsDisabled || !(!areUncertifiedVisualsDisabled || approvedResourceService.isApprovedResourceServerRender(visualType)) && (!ignoreUncertainty || approvedResourceService.isApprovedVisualsDefined()));
            }
            !function(CustomVisualsAdminControlState) {
                CustomVisualsAdminControlState[CustomVisualsAdminControlState.FeatureIsDisabled = 0] = "FeatureIsDisabled", 
                CustomVisualsAdminControlState[CustomVisualsAdminControlState.AllCustomVisualsAreEnabled = 1] = "AllCustomVisualsAreEnabled", 
                CustomVisualsAdminControlState[CustomVisualsAdminControlState.AllCustomVisualsAreDisabled = 2] = "AllCustomVisualsAreDisabled", 
                CustomVisualsAdminControlState[CustomVisualsAdminControlState.NonCertifiedCustomVisualsAreDisabled = 3] = "NonCertifiedCustomVisualsAreDisabled", 
                CustomVisualsAdminControlState[CustomVisualsAdminControlState.FailedEvaluatingState = 4] = "FailedEvaluatingState";
            }(CustomVisualsAdminControlState = CustomVisualsUtils.CustomVisualsAdminControlState || (CustomVisualsUtils.CustomVisualsAdminControlState = {})), 
            function(CustomVisualTypes) {
                CustomVisualTypes[CustomVisualTypes.Unclassified = 0] = "Unclassified", CustomVisualTypes[CustomVisualTypes.NonCertifiedCustomVisual = 1] = "NonCertifiedCustomVisual", 
                CustomVisualTypes[CustomVisualTypes.NonCdnCustomVisual = 2] = "NonCdnCustomVisual", 
                CustomVisualTypes[CustomVisualTypes.CertifiedCustomVisual = 3] = "CertifiedCustomVisual", 
                CustomVisualTypes[CustomVisualTypes.OrganizationalStore = 4] = "OrganizationalStore", 
                CustomVisualTypes[CustomVisualTypes.Native = 5] = "Native";
            }(CustomVisualTypes = CustomVisualsUtils.CustomVisualTypes || (CustomVisualsUtils.CustomVisualTypes = {})), 
            CustomVisualsUtils.getAdminControlState = function(featureSwitchesService, telemetryService, parentActivity) {
                if (void 0 === customVisualsAdminControlState) try {
                    if (!(telemetryService && featureSwitchesService && featureSwitchesService.featureSwitches && featureSwitchesService.featureSwitches.customVisualsTenantSwitch)) return customVisualsAdminControlState = CustomVisualsAdminControlState.FeatureIsDisabled;
                    customVisualsAdminControlState = featureSwitchesService.featureSwitches.customVisualsTenantEnabled ? featureSwitchesService.featureSwitches.certifiedCustomVisualsTenantEnabled ? CustomVisualsAdminControlState.NonCertifiedCustomVisualsAreDisabled : CustomVisualsAdminControlState.AllCustomVisualsAreEnabled : CustomVisualsAdminControlState.AllCustomVisualsAreDisabled, 
                    telemetryService.logChildEvent(parentActivity && parentActivity.event, powerbi.telemetry.AdminControlInitialized, {
                        AdminControlState: CustomVisualsAdminControlState[customVisualsAdminControlState]
                    });
                } catch (_a) {
                    customVisualsAdminControlState = CustomVisualsAdminControlState.FailedEvaluatingState;
                }
                return customVisualsAdminControlState;
            }, CustomVisualsUtils.isCustomVisualTypeDisabled = function(featureSwitchesService, visualType, approvedResourceService, ignoreUncertainty, isPublicManagedVisual, areCustomVisualsDisabledByGroupPolicy, areUncertifiedVisualsDisabledByGroupPolicy) {
                return areCustomVisualsDisabledByGroupPolicy || areUncertifiedVisualsDisabledByGroupPolicy ? isCustomVisualTypeDisabledHelper(visualType, !0, areCustomVisualsDisabledByGroupPolicy, areUncertifiedVisualsDisabledByGroupPolicy, approvedResourceService, ignoreUncertainty, isPublicManagedVisual) : isCustomVisualTypeDisabledHelper(visualType, featureSwitchesService.featureSwitches.customVisualsTenantSwitch, !featureSwitchesService.featureSwitches.customVisualsTenantEnabled, featureSwitchesService.featureSwitches.certifiedCustomVisualsTenantEnabled, approvedResourceService, ignoreUncertainty, isPublicManagedVisual);
            }, CustomVisualsUtils.shouldAllowEmptyDataView = function(plugin) {
                return !(!plugin || !plugin.capabilities) && ((!plugin.custom || plugin.apiVersion && Version.gt(plugin.apiVersion, "3.5.0")) && plugin.capabilities.supportsEmptyDataView);
            }, CustomVisualsUtils.areCustomVisualsDisabled = function(featureSwitchesService, areCustomVisualsDisabledByGroupPolicy) {
                return areCustomVisualsDisabledByGroupPolicy || featureSwitchesService.featureSwitches.customVisualsTenantSwitch && !featureSwitchesService.featureSwitches.customVisualsTenantEnabled;
            }, CustomVisualsUtils.isOrganizationalCustomVisual = isOrganizationalCustomVisual, 
            CustomVisualsUtils.isCustomVisualTypeDisabledHelper = isCustomVisualTypeDisabledHelper, 
            CustomVisualsUtils.getCustomVisualType = function(approvedResourceService, visualType, isCustomVisual) {
                return isCustomVisual ? isOrganizationalCustomVisual(visualType) ? CustomVisualTypes.OrganizationalStore : approvedResourceService.isApprovedVisualsDefined() ? approvedResourceService.isApprovedResourceServerRender(visualType) ? CustomVisualTypes.CertifiedCustomVisual : approvedResourceService.isApprovedResource(visualType) ? CustomVisualTypes.NonCertifiedCustomVisual : CustomVisualTypes.NonCdnCustomVisual : CustomVisualTypes.Unclassified : CustomVisualTypes.Native;
            }, CustomVisualsUtils.SandboxPropertyTranslator = function(prop) {
                switch (prop) {
                  case 0:
                    return "allow-scripts";

                  case 1:
                    return "allow-popups";

                  case 2:
                    return "allow-same-origin";

                  case 3:
                    return "allow-forms";

                  case 4:
                    return "allow-top-navigation-by-user-activation";

                  case 5:
                    return "allow-downloads";
                }
            };
        }(visualHost.CustomVisualsUtils || (visualHost.CustomVisualsUtils = {}));
    }(powerbi.visualHost || (powerbi.visualHost = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        var VisualTimeTrackingWrapper = function() {
            function VisualTimeTrackingWrapper(wrappedVisual) {
                this.wrappedVisual = wrappedVisual;
            }
            return VisualTimeTrackingWrapper.prototype.init = function(options) {
                var _this = this;
                if (this.wrappedVisual.init) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.init(options);
                });
            }, VisualTimeTrackingWrapper.prototype.destroy = function() {
                var _this = this;
                this.wrappedVisual.destroy && this.trackVisualTime(function() {
                    return _this.wrappedVisual.destroy();
                });
            }, VisualTimeTrackingWrapper.prototype.update = function(options) {
                var _this = this;
                if (this.wrappedVisual.update) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.update(options);
                }, function() {
                    return options && options.parentContextActivity ? options.parentContextActivity.createChildActivity({
                        name: "Visual Update"
                    }) : void 0;
                });
            }, VisualTimeTrackingWrapper.prototype.onResizing = function(finalViewport, resizeMode) {
                var _this = this;
                this.wrappedVisual.onResizing && this.trackVisualTime(function() {
                    return _this.wrappedVisual.onResizing(finalViewport, resizeMode);
                });
            }, VisualTimeTrackingWrapper.prototype.onDataChanged = function(options) {
                var _this = this;
                this.wrappedVisual.onDataChanged && this.trackVisualTime(function() {
                    return _this.wrappedVisual.onDataChanged(options);
                });
            }, VisualTimeTrackingWrapper.prototype.onViewModeChanged = function(viewMode) {
                var _this = this;
                this.wrappedVisual.onViewModeChanged && this.trackVisualTime(function() {
                    return _this.wrappedVisual.onViewModeChanged(viewMode);
                });
            }, VisualTimeTrackingWrapper.prototype.onClearSelection = function() {
                var _this = this;
                this.wrappedVisual.onClearSelection && this.trackVisualTime(function() {
                    return _this.wrappedVisual.onClearSelection();
                });
            }, VisualTimeTrackingWrapper.prototype.onRestoreSelection = function(options) {
                var _this = this;
                return !!this.wrappedVisual.onRestoreSelection && this.trackVisualTime(function() {
                    return _this.wrappedVisual.onRestoreSelection(options);
                });
            }, VisualTimeTrackingWrapper.prototype.canResizeTo = function(viewport) {
                var _this = this;
                if (this.wrappedVisual.canResizeTo) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.canResizeTo(viewport);
                });
            }, VisualTimeTrackingWrapper.prototype.enumerateObjectInstances = function(options) {
                var _this = this;
                if (this.wrappedVisual.enumerateObjectInstances) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.enumerateObjectInstances(options);
                });
            }, VisualTimeTrackingWrapper.prototype.enumerateObjectRepetition = function() {
                var _this = this;
                if (this.wrappedVisual.enumerateObjectRepetition) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.enumerateObjectRepetition();
                });
            }, VisualTimeTrackingWrapper.prototype.enumerateObjectInstancesAsync = function(options) {
                var _this = this;
                return this.visualAdapter.enumerateObjectInstancesAsync ? this.trackVisualTime(function() {
                    return _this.visualAdapter.enumerateObjectInstancesAsync(options);
                }) : powerbi.Promise.resolve(this.enumerateObjectInstances(options));
            }, VisualTimeTrackingWrapper.prototype.enumerateObjectRepetitionAsync = function() {
                var _this = this;
                return this.visualAdapter.enumerateObjectRepetitionAsync ? this.trackVisualTime(function() {
                    return _this.visualAdapter.enumerateObjectRepetitionAsync();
                }) : powerbi.Promise.resolve(this.enumerateObjectRepetition());
            }, Object.defineProperty(VisualTimeTrackingWrapper.prototype, "sandbox", {
                get: function() {
                    return this.visualAdapter && this.visualAdapter.sandbox;
                },
                enumerable: !1,
                configurable: !0
            }), Object.defineProperty(VisualTimeTrackingWrapper.prototype, "visualAdapter", {
                get: function() {
                    return this.wrappedVisual;
                },
                enumerable: !1,
                configurable: !0
            }), VisualTimeTrackingWrapper.prototype.unwrap = function() {
                var visual = this.wrappedVisual;
                return visual.unwrap ? visual.unwrap() : visual;
            }, VisualTimeTrackingWrapper.prototype.visualHasMethod = function(methodName) {
                var visual = this.wrappedVisual;
                return visual && visual.visualHasMethod(methodName);
            }, VisualTimeTrackingWrapper.prototype.getTelemetryInformation = function() {
                var _this = this;
                if (this.wrappedVisual.getTelemetryInformation) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.getTelemetryInformation();
                });
            }, VisualTimeTrackingWrapper.prototype.getFormattingModel = function() {
                var _this = this;
                if (this.wrappedVisual.getFormattingModel) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.getFormattingModel();
                });
            }, VisualTimeTrackingWrapper.prototype.resolveFormattingPlaceholder = function(visualFormattingPlaceholder) {
                var _this = this;
                if (this.wrappedVisual.resolveFormattingPlaceholder) return this.trackVisualTime(function() {
                    return _this.wrappedVisual.resolveFormattingPlaceholder(visualFormattingPlaceholder);
                });
            }, VisualTimeTrackingWrapper.prototype.trackVisualTime = function(visualAdapterCall, ca) {
                ca = ca && ca();
                try {
                    return visualAdapterCall();
                } finally {
                    ca && ca.resolve();
                }
            }, VisualTimeTrackingWrapper;
        }();
        extensibility.VisualTimeTrackingWrapper = VisualTimeTrackingWrapper;
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createDownloadService = function(hostServices) {
            return new DownloadService(hostServices);
        };
        var DownloadService = function() {
            function DownloadService(hostServices) {
                this.downloadService = hostServices && hostServices.downloadService && hostServices.downloadService(), 
                this.promiseFactory = hostServices.promiseFactory();
            }
            return DownloadService.prototype.exportVisualsContent = function(content, fileName, fileType, fileDescription) {
                var defer = this.promiseFactory.defer();
                return this.downloadService.exportVisualsContent(content, fileName, fileType, fileDescription).then(function(value) {
                    return defer.resolve(value);
                }, function(ex) {
                    return defer.reject(ex);
                }), defer.promise;
            }, DownloadService;
        }();
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {}), function(powerbi) {
    !function(extensibility) {
        extensibility.createStorageService = function(hostServices) {
            return new StorageService(hostServices);
        };
        var StorageService = function() {
            function StorageService(hostServices) {
                this.storageService = hostServices && hostServices.localStorageService && hostServices.localStorageService(), 
                this.promiseFactory = hostServices.promiseFactory();
            }
            return StorageService.prototype.enabled = function() {
                return null != this.storageService ? this.storageService.isStorageEnabled() : this.promiseFactory.reject();
            }, StorageService.prototype.get = function(key) {
                return null != this.storageService && key ? this.storageService.getStorageData(key) : this.promiseFactory.reject();
            }, StorageService.prototype.set = function(key, data) {
                return null != this.storageService && key && data ? this.storageService.setStorageData(key, data) : this.promiseFactory.reject();
            }, StorageService.prototype.remove = function(key) {
                null != this.storageService && key && this.storageService.removeStorageData(key);
            }, StorageService;
        }();
    }(powerbi.extensibility || (powerbi.extensibility = {}));
}(powerbi = powerbi || {});